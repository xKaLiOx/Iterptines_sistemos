
Luxmeter_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800a1e8  0800a1e8  0000b1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a774  0800a774  0000c218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a77c  0800a77c  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a77c  0800a77c  0000b77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a780  0800a780  0000b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800a784  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000218  0800a99c  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  0800a99c  0000c734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff1b  00000000  00000000  0000c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2a  00000000  00000000  0001c15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bec  00000000  00000000  0001fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fce  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013677  00000000  00000000  0003a9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b13  00000000  00000000  0004e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfb3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c4  00000000  00000000  000dfb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000e4f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1d0 	.word	0x0800a1d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800a1d0 	.word	0x0800a1d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <SEND_4_BIT>:
#include "main.h"
#include "stm32f1xx_hal.h"
#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, int rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <SEND_4_BIT+0x9c>)
 80010a8:	f002 fc98 	bl	80039dc <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2120      	movs	r1, #32
 80010b8:	481d      	ldr	r0, [pc, #116]	@ (8001130 <SEND_4_BIT+0xa0>)
 80010ba:	f002 fc8f 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	085b      	lsrs	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	2140      	movs	r1, #64	@ 0x40
 80010ce:	4818      	ldr	r0, [pc, #96]	@ (8001130 <SEND_4_BIT+0xa0>)
 80010d0:	f002 fc84 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	2180      	movs	r1, #128	@ 0x80
 80010e4:	4812      	ldr	r0, [pc, #72]	@ (8001130 <SEND_4_BIT+0xa0>)
 80010e6:	f002 fc79 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <SEND_4_BIT+0xa0>)
 80010fe:	f002 fc6d 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001108:	4808      	ldr	r0, [pc, #32]	@ (800112c <SEND_4_BIT+0x9c>)
 800110a:	f002 fc67 	bl	80039dc <HAL_GPIO_WritePin>
	  DELAY_US(400);
 800110e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001112:	f000 fd5d 	bl	8001bd0 <DELAY_US>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <SEND_4_BIT+0x9c>)
 800111e:	f002 fc5d 	bl	80039dc <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00

08001134 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <LCD_SEND_COMMAND+0x40>)
 8001146:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <LCD_SEND_COMMAND+0x40>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff9e 	bl	8001090 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <LCD_SEND_COMMAND+0x40>)
 800115e:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <LCD_SEND_COMMAND+0x40>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff92 	bl	8001090 <SEND_4_BIT>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000234 	.word	0x20000234

08001178 <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <LCD_SEND_DATA+0x40>)
 800118a:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <LCD_SEND_DATA+0x40>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff7c 	bl	8001090 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <LCD_SEND_DATA+0x40>)
 80011a2:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <LCD_SEND_DATA+0x40>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff70 	bl	8001090 <SEND_4_BIT>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000235 	.word	0x20000235

080011bc <LCD_CLEAR>:

void LCD_CLEAR()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ffb7 	bl	8001134 <LCD_SEND_COMMAND>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}

080011ca <LCD_CLEAR_DRAM>:

void LCD_CLEAR_DRAM()
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff ffaf 	bl	8001134 <LCD_SEND_COMMAND>
	for(uint8_t x = 0;x<0x28;x++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e005      	b.n	80011e8 <LCD_CLEAR_DRAM+0x1e>
	{
		LCD_SEND_DATA(' ');
 80011dc:	2020      	movs	r0, #32
 80011de:	f7ff ffcb 	bl	8001178 <LCD_SEND_DATA>
	for(uint8_t x = 0;x<0x28;x++)
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	3301      	adds	r3, #1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b27      	cmp	r3, #39	@ 0x27
 80011ec:	d9f6      	bls.n	80011dc <LCD_CLEAR_DRAM+0x12>
	}
	for(uint8_t x = 0x40;x<0x68;x++)
 80011ee:	2340      	movs	r3, #64	@ 0x40
 80011f0:	71bb      	strb	r3, [r7, #6]
 80011f2:	e005      	b.n	8001200 <LCD_CLEAR_DRAM+0x36>
	{
		LCD_SEND_DATA(' ');
 80011f4:	2020      	movs	r0, #32
 80011f6:	f7ff ffbf 	bl	8001178 <LCD_SEND_DATA>
	for(uint8_t x = 0x40;x<0x68;x++)
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71bb      	strb	r3, [r7, #6]
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b67      	cmp	r3, #103	@ 0x67
 8001204:	d9f6      	bls.n	80011f4 <LCD_CLEAR_DRAM+0x2a>
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 8001206:	2002      	movs	r0, #2
 8001208:	f7ff ff94 	bl	8001134 <LCD_SEND_COMMAND>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <LCD_Init>:

void LCD_Init()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	  HAL_Delay(70);
 8001218:	2046      	movs	r0, #70	@ 0x46
 800121a:	f001 f93b 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(0x03);
 800121e:	2003      	movs	r0, #3
 8001220:	f7ff ff88 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 8001224:	2005      	movs	r0, #5
 8001226:	f001 f935 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(0x03);
 800122a:	2003      	movs	r0, #3
 800122c:	f7ff ff82 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 8001230:	2005      	movs	r0, #5
 8001232:	f001 f92f 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(0x03);
 8001236:	2003      	movs	r0, #3
 8001238:	f7ff ff7c 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 800123c:	2005      	movs	r0, #5
 800123e:	f001 f929 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(0x02);
 8001242:	2002      	movs	r0, #2
 8001244:	f7ff ff76 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 8001248:	2005      	movs	r0, #5
 800124a:	f001 f923 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(LCD_FUNCTION_SET);//x28 kad 2 line
 800124e:	2020      	movs	r0, #32
 8001250:	f7ff ff70 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 8001254:	2005      	movs	r0, #5
 8001256:	f001 f91d 	bl	8002494 <HAL_Delay>
	  LCD_SEND_COMMAND(0x28);
 800125a:	2028      	movs	r0, #40	@ 0x28
 800125c:	f7ff ff6a 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 8001260:	2005      	movs	r0, #5
 8001262:	f001 f917 	bl	8002494 <HAL_Delay>
////////////////////////
	  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);//display
 8001266:	200c      	movs	r0, #12
 8001268:	f7ff ff64 	bl	8001134 <LCD_SEND_COMMAND>
	  HAL_Delay(5);
 800126c:	2005      	movs	r0, #5
 800126e:	f001 f911 	bl	8002494 <HAL_Delay>
	  LCD_CLEAR();
 8001272:	f7ff ffa3 	bl	80011bc <LCD_CLEAR>

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], unsigned int place, unsigned int level)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
	if(level==1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <LCD_SEND_STR+0x22>
		{
		LCD_SEND_COMMAND(0xC0+place);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3b40      	subs	r3, #64	@ 0x40
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff4c 	bl	8001134 <LCD_SEND_COMMAND>
 800129c:	e006      	b.n	80012ac <LCD_SEND_STR+0x30>
		}
	else LCD_SEND_COMMAND(0x80+place);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3b80      	subs	r3, #128	@ 0x80
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff44 	bl	8001134 <LCD_SEND_COMMAND>
//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <LCD_SEND_STR+0x70>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 80012b2:	e00e      	b.n	80012d2 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 80012b4:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <LCD_SEND_STR+0x70>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff59 	bl	8001178 <LCD_SEND_DATA>
		x++;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <LCD_SEND_STR+0x70>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <LCD_SEND_STR+0x70>)
 80012d0:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <LCD_SEND_STR+0x70>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e8      	bne.n	80012b4 <LCD_SEND_STR+0x38>
	}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000236 	.word	0x20000236

080012f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001302:	4a28      	ldr	r2, [pc, #160]	@ (80013a4 <MX_ADC1_Init+0xb4>)
 8001304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001306:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001308:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001310:	2200      	movs	r2, #0
 8001312:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001316:	2200      	movs	r2, #0
 8001318:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 800131c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001320:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 800132a:	2203      	movs	r2, #3
 800132c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132e:	481c      	ldr	r0, [pc, #112]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001330:	f001 f8d4 	bl	80024dc <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800133a:	f000 fd65 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800133e:	2304      	movs	r3, #4
 8001340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	2301      	movs	r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001346:	2302      	movs	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001350:	f001 fb5e 	bl	8002a10 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 fd55 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800135e:	2305      	movs	r3, #5
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001362:	2302      	movs	r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 800136c:	f001 fb50 	bl	8002a10 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001376:	f000 fd47 	bl	8001e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800137e:	2303      	movs	r3, #3
 8001380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <MX_ADC1_Init+0xb0>)
 8001388:	f001 fb42 	bl	8002a10 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001392:	f000 fd39 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000238 	.word	0x20000238
 80013a4:	40012400 	.word	0x40012400

080013a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001474 <HAL_ADC_MspInit+0xcc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d151      	bne.n	800146c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a24      	ldr	r2, [pc, #144]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_ADC_MspInit+0xd0>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013f8:	2370      	movs	r3, #112	@ 0x70
 80013fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	481d      	ldr	r0, [pc, #116]	@ (800147c <HAL_ADC_MspInit+0xd4>)
 8001408:	f002 f964 	bl	80036d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_ADC_MspInit+0xdc>)
 8001410:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800142a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 800142e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001432:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001436:	2220      	movs	r2, #32
 8001438:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001440:	480f      	ldr	r0, [pc, #60]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001442:	f001 fea5 	bl	8003190 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800144c:	f000 fcdc 	bl	8001e08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001454:	621a      	str	r2, [r3, #32]
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <HAL_ADC_MspInit+0xd8>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2102      	movs	r1, #2
 8001460:	2012      	movs	r0, #18
 8001462:	f001 fe5e 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001466:	2012      	movs	r0, #18
 8001468:	f001 fe77 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40012400 	.word	0x40012400
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800
 8001480:	20000268 	.word	0x20000268
 8001484:	40020008 	.word	0x40020008

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_DMA_Init+0x38>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <MX_DMA_Init+0x38>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_DMA_Init+0x38>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200b      	movs	r0, #11
 80014ac:	f001 fe39 	bl	8003122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f001 fe52 	bl	800315a <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a49      	ldr	r2, [pc, #292]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f0:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014f6:	f043 0320 	orr.w	r3, r3, #32
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <MX_GPIO_Init+0x140>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <MX_GPIO_Init+0x140>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a3d      	ldr	r2, [pc, #244]	@ (8001604 <MX_GPIO_Init+0x140>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <MX_GPIO_Init+0x140>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <MX_GPIO_Init+0x140>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a37      	ldr	r2, [pc, #220]	@ (8001604 <MX_GPIO_Init+0x140>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <MX_GPIO_Init+0x140>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800153e:	4832      	ldr	r0, [pc, #200]	@ (8001608 <MX_GPIO_Init+0x144>)
 8001540:	f002 fa4c 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LUX_VCC_Pin|RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 6168 	mov.w	r1, #3712	@ 0xe80
 800154a:	4830      	ldr	r0, [pc, #192]	@ (800160c <MX_GPIO_Init+0x148>)
 800154c:	f002 fa46 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001556:	482e      	ldr	r0, [pc, #184]	@ (8001610 <MX_GPIO_Init+0x14c>)
 8001558:	f002 fa40 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2302      	movs	r3, #2
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	4824      	ldr	r0, [pc, #144]	@ (8001608 <MX_GPIO_Init+0x144>)
 8001576:	f002 f8ad 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LUX_VCC_Pin */
  GPIO_InitStruct.Pin = LUX_VCC_Pin;
 800157a:	2380      	movs	r3, #128	@ 0x80
 800157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2302      	movs	r3, #2
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LUX_VCC_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	481e      	ldr	r0, [pc, #120]	@ (800160c <MX_GPIO_Init+0x148>)
 8001592:	f002 f89f 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_SET_Pin */
  GPIO_InitStruct.Pin = Button_SET_Pin;
 8001596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_GPIO_Init+0x150>)
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_SET_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4819      	ldr	r0, [pc, #100]	@ (8001610 <MX_GPIO_Init+0x14c>)
 80015ac:	f002 f892 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 80015b0:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	4810      	ldr	r0, [pc, #64]	@ (800160c <MX_GPIO_Init+0x148>)
 80015ca:	f002 f883 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80015ce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	480a      	ldr	r0, [pc, #40]	@ (8001610 <MX_GPIO_Init+0x14c>)
 80015e8:	f002 f874 	bl	80036d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2103      	movs	r1, #3
 80015f0:	2028      	movs	r0, #40	@ 0x28
 80015f2:	f001 fd96 	bl	8003122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f6:	2028      	movs	r0, #40	@ 0x28
 80015f8:	f001 fdaf 	bl	800315a <HAL_NVIC_EnableIRQ>

}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40011000 	.word	0x40011000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	10110000 	.word	0x10110000

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fed7 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fa45 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001626:	f7ff ff4d 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f7ff ff2d 	bl	8001488 <MX_DMA_Init>
  MX_ADC1_Init();
 800162e:	f7ff fe5f 	bl	80012f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001632:	f000 fd4f 	bl	80020d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001636:	f000 fe29 	bl	800228c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800163a:	f000 fd99 	bl	8002170 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800163e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001642:	f000 ff27 	bl	8002494 <HAL_Delay>

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8001646:	48a0      	ldr	r0, [pc, #640]	@ (80018c8 <main+0x2b0>)
 8001648:	f001 fbdc 	bl	8002e04 <HAL_ADCEx_Calibration_Start>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00a      	beq.n	8001668 <main+0x50>
  {
  	sprintf(LCD_top_text,"ERR CALIBRATION");
 8001652:	499e      	ldr	r1, [pc, #632]	@ (80018cc <main+0x2b4>)
 8001654:	489e      	ldr	r0, [pc, #632]	@ (80018d0 <main+0x2b8>)
 8001656:	f005 f989 	bl	800696c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 800165a:	499e      	ldr	r1, [pc, #632]	@ (80018d4 <main+0x2bc>)
 800165c:	489e      	ldr	r0, [pc, #632]	@ (80018d8 <main+0x2c0>)
 800165e:	f005 f985 	bl	800696c <siprintf>
  	ERROR_FLAG = 1;
 8001662:	4b9e      	ldr	r3, [pc, #632]	@ (80018dc <main+0x2c4>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Samples,ADC_BUFFER_SIZE) != HAL_OK)
 8001668:	22f0      	movs	r2, #240	@ 0xf0
 800166a:	499d      	ldr	r1, [pc, #628]	@ (80018e0 <main+0x2c8>)
 800166c:	4896      	ldr	r0, [pc, #600]	@ (80018c8 <main+0x2b0>)
 800166e:	f001 f80d 	bl	800268c <HAL_ADC_Start_DMA>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00a      	beq.n	800168e <main+0x76>
  {
  	sprintf(LCD_top_text,"ERROR ADC");
 8001678:	499a      	ldr	r1, [pc, #616]	@ (80018e4 <main+0x2cc>)
 800167a:	4895      	ldr	r0, [pc, #596]	@ (80018d0 <main+0x2b8>)
 800167c:	f005 f976 	bl	800696c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 8001680:	4994      	ldr	r1, [pc, #592]	@ (80018d4 <main+0x2bc>)
 8001682:	4895      	ldr	r0, [pc, #596]	@ (80018d8 <main+0x2c0>)
 8001684:	f005 f972 	bl	800696c <siprintf>
  	ERROR_FLAG = 1;
 8001688:	4b94      	ldr	r3, [pc, #592]	@ (80018dc <main+0x2c4>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800168e:	4896      	ldr	r0, [pc, #600]	@ (80018e8 <main+0x2d0>)
 8001690:	f003 f804 	bl	800469c <HAL_TIM_Base_Start_IT>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <main+0x98>
  {
  	sprintf(LCD_top_text,"DISPLAY TIM ERR");
 800169a:	4994      	ldr	r1, [pc, #592]	@ (80018ec <main+0x2d4>)
 800169c:	488c      	ldr	r0, [pc, #560]	@ (80018d0 <main+0x2b8>)
 800169e:	f005 f965 	bl	800696c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016a2:	498c      	ldr	r1, [pc, #560]	@ (80018d4 <main+0x2bc>)
 80016a4:	488c      	ldr	r0, [pc, #560]	@ (80018d8 <main+0x2c0>)
 80016a6:	f005 f961 	bl	800696c <siprintf>
  	ERROR_FLAG = 1;
 80016aa:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <main+0x2c4>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 80016b0:	488f      	ldr	r0, [pc, #572]	@ (80018f0 <main+0x2d8>)
 80016b2:	f002 ffa9 	bl	8004608 <HAL_TIM_Base_Start>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <main+0xba>
  {
  	sprintf(LCD_top_text,"ERROR MAIN TIM");
 80016bc:	498d      	ldr	r1, [pc, #564]	@ (80018f4 <main+0x2dc>)
 80016be:	4884      	ldr	r0, [pc, #528]	@ (80018d0 <main+0x2b8>)
 80016c0:	f005 f954 	bl	800696c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016c4:	4983      	ldr	r1, [pc, #524]	@ (80018d4 <main+0x2bc>)
 80016c6:	4884      	ldr	r0, [pc, #528]	@ (80018d8 <main+0x2c0>)
 80016c8:	f005 f950 	bl	800696c <siprintf>
  	ERROR_FLAG = 1;
 80016cc:	4b83      	ldr	r3, [pc, #524]	@ (80018dc <main+0x2c4>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_UARTEx_ReceiveToIdle_IT(&huart2, pData_RX, UART_RX_SIZE) != HAL_OK)
 80016d2:	2210      	movs	r2, #16
 80016d4:	4988      	ldr	r1, [pc, #544]	@ (80018f8 <main+0x2e0>)
 80016d6:	4889      	ldr	r0, [pc, #548]	@ (80018fc <main+0x2e4>)
 80016d8:	f003 fc5d 	bl	8004f96 <HAL_UARTEx_ReceiveToIdle_IT>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <main+0xe0>
  {
  	sprintf(LCD_top_text,"ERROR UART");
 80016e2:	4987      	ldr	r1, [pc, #540]	@ (8001900 <main+0x2e8>)
 80016e4:	487a      	ldr	r0, [pc, #488]	@ (80018d0 <main+0x2b8>)
 80016e6:	f005 f941 	bl	800696c <siprintf>
  	sprintf(LCD_bottom_text,"CHECK CABLE");
 80016ea:	4986      	ldr	r1, [pc, #536]	@ (8001904 <main+0x2ec>)
 80016ec:	487a      	ldr	r0, [pc, #488]	@ (80018d8 <main+0x2c0>)
 80016ee:	f005 f93d 	bl	800696c <siprintf>
  	ERROR_FLAG = 1;
 80016f2:	4b7a      	ldr	r3, [pc, #488]	@ (80018dc <main+0x2c4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
  }

  //HAL_GPIO_WritePin(LUX_VCC_GPIO_Port, LUX_VCC_Pin, GPIO_PIN_SET);// turn on LCD DATA transmission power
  LCD_Init();
 80016f8:	f7ff fd8c 	bl	8001214 <LCD_Init>
  HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f000 fec9 	bl	8002494 <HAL_Delay>
  LCD_SEND_COMMAND(LCD_DISPLAY_OFF);
 8001702:	2008      	movs	r0, #8
 8001704:	f7ff fd16 	bl	8001134 <LCD_SEND_COMMAND>
  HAL_Delay(5);
 8001708:	2005      	movs	r0, #5
 800170a:	f000 fec3 	bl	8002494 <HAL_Delay>
  LCD_SEND_COMMAND(LCD_Entry_MODE);
 800170e:	2004      	movs	r0, #4
 8001710:	f7ff fd10 	bl	8001134 <LCD_SEND_COMMAND>
  HAL_Delay(5);
 8001714:	2005      	movs	r0, #5
 8001716:	f000 febd 	bl	8002494 <HAL_Delay>
  LCD_SEND_STR(LCD_top_text,0x3,0);
 800171a:	2200      	movs	r2, #0
 800171c:	2103      	movs	r1, #3
 800171e:	486c      	ldr	r0, [pc, #432]	@ (80018d0 <main+0x2b8>)
 8001720:	f7ff fdac 	bl	800127c <LCD_SEND_STR>
  LCD_SEND_STR(LCD_bottom_text,5,1);
 8001724:	2201      	movs	r2, #1
 8001726:	2105      	movs	r1, #5
 8001728:	486b      	ldr	r0, [pc, #428]	@ (80018d8 <main+0x2c0>)
 800172a:	f7ff fda7 	bl	800127c <LCD_SEND_STR>
  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);
 800172e:	200c      	movs	r0, #12
 8001730:	f7ff fd00 	bl	8001134 <LCD_SEND_COMMAND>
  HAL_Delay(2000);
 8001734:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001738:	f000 feac 	bl	8002494 <HAL_Delay>
  LCD_CLEAR();
 800173c:	f7ff fd3e 	bl	80011bc <LCD_CLEAR>
  LCD_SEND_COMMAND(LCD_RETURN_HOME);
 8001740:	2002      	movs	r0, #2
 8001742:	f7ff fcf7 	bl	8001134 <LCD_SEND_COMMAND>
	if(ERROR_FLAG) Error_Handler();//REIKIA PALEISTI TAIMERI TIM6 PRIES ATVAIZDAVIMA, us delay
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <main+0x2c4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <main+0x13a>
 800174e:	f000 fb5b 	bl	8001e08 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  if(ADC_CALC_AVG_FLAG)
 8001752:	4b6d      	ldr	r3, [pc, #436]	@ (8001908 <main+0x2f0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d06b      	beq.n	8001834 <main+0x21c>
		  {
			  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	e01a      	b.n	8001798 <main+0x180>
			  {
				  SUM[x%3] += ADC_Samples[x];
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4a5e      	ldr	r2, [pc, #376]	@ (80018e0 <main+0x2c8>)
 8001766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800176a:	b298      	uxth	r0, r3
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4b67      	ldr	r3, [pc, #412]	@ (800190c <main+0x2f4>)
 8001770:	fba3 1302 	umull	r1, r3, r3, r2
 8001774:	0859      	lsrs	r1, r3, #1
 8001776:	460b      	mov	r3, r1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	440b      	add	r3, r1
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4611      	mov	r1, r2
 8001782:	4b63      	ldr	r3, [pc, #396]	@ (8001910 <main+0x2f8>)
 8001784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001788:	4611      	mov	r1, r2
 800178a:	4403      	add	r3, r0
 800178c:	4a60      	ldr	r2, [pc, #384]	@ (8001910 <main+0x2f8>)
 800178e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3301      	adds	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2bef      	cmp	r3, #239	@ 0xef
 800179c:	d9e1      	bls.n	8001762 <main+0x14a>
			  }

			  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 800179e:	2300      	movs	r3, #0
 80017a0:	71bb      	strb	r3, [r7, #6]
 80017a2:	e02f      	b.n	8001804 <main+0x1ec>
			  {
				  SUM[x] /= (ADC_BUFFER_SIZE/NUM_OF_CHANNELS);
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001910 <main+0x2f8>)
 80017a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	4959      	ldr	r1, [pc, #356]	@ (8001914 <main+0x2fc>)
 80017b0:	fba1 1202 	umull	r1, r2, r1, r2
 80017b4:	0992      	lsrs	r2, r2, #6
 80017b6:	4956      	ldr	r1, [pc, #344]	@ (8001910 <main+0x2f8>)
 80017b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  ADC_Voltages[x] = SUM[x]*ADC_V_Step;
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	4a54      	ldr	r2, [pc, #336]	@ (8001910 <main+0x2f8>)
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fa85 	bl	8000cd4 <__aeabi_ui2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	79bc      	ldrb	r4, [r7, #6]
 80017ce:	4952      	ldr	r1, [pc, #328]	@ (8001918 <main+0x300>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fad7 	bl	8000d84 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b50      	ldr	r3, [pc, #320]	@ (800191c <main+0x304>)
 80017dc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				  LUX_Values[x] = Voltage_to_lux(ADC_Voltages[x]);
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	4a4e      	ldr	r2, [pc, #312]	@ (800191c <main+0x304>)
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	79bc      	ldrb	r4, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f9bc 	bl	8001b68 <Voltage_to_lux>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	484a      	ldr	r0, [pc, #296]	@ (8001920 <main+0x308>)
 80017f6:	00e1      	lsls	r1, r4, #3
 80017f8:	4401      	add	r1, r0
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
			  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	3301      	adds	r3, #1
 8001802:	71bb      	strb	r3, [r7, #6]
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d9cc      	bls.n	80017a4 <main+0x18c>
			  }
			  ADC_CALC_AVG_FLAG=0;
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <main+0x2f0>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
			  if(!LCD_SHOW_TYPE)
 8001810:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <main+0x30c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <main+0x21c>
			  {
				  LUX_Difference = LUX_Values[0]-LUX_Values[1];
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <main+0x308>)
 800181c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001820:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <main+0x308>)
 8001822:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001826:	f7fe fc9f 	bl	8000168 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	493e      	ldr	r1, [pc, #248]	@ (8001928 <main+0x310>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  if(UART_UPDATE_FLAG && !ADC_CALC_AVG_FLAG && UART_SEND_FLAG)
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <main+0x314>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 809a 	beq.w	8001974 <main+0x35c>
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <main+0x2f0>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8094 	bne.w	8001974 <main+0x35c>
 800184c:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <main+0x318>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 808e 	beq.w	8001974 <main+0x35c>

		  {
			  if(LCD_SHOW_TYPE)
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <main+0x30c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06e      	beq.n	8001940 <main+0x328>
			  {
				  sprintf(UART_data, "CH1 value = %1.1f at %d ms\r\n",LUX_Values[0],(int)HAL_GetTick());
 8001862:	4b2f      	ldr	r3, [pc, #188]	@ (8001920 <main+0x308>)
 8001864:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001868:	f000 fe0a 	bl	8002480 <HAL_GetTick>
 800186c:	4603      	mov	r3, r0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4622      	mov	r2, r4
 8001872:	462b      	mov	r3, r5
 8001874:	492f      	ldr	r1, [pc, #188]	@ (8001934 <main+0x31c>)
 8001876:	4830      	ldr	r0, [pc, #192]	@ (8001938 <main+0x320>)
 8001878:	f005 f878 	bl	800696c <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 800187c:	482e      	ldr	r0, [pc, #184]	@ (8001938 <main+0x320>)
 800187e:	f7fe fc67 	bl	8000150 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	2364      	movs	r3, #100	@ 0x64
 8001888:	492b      	ldr	r1, [pc, #172]	@ (8001938 <main+0x320>)
 800188a:	481c      	ldr	r0, [pc, #112]	@ (80018fc <main+0x2e4>)
 800188c:	f003 faf8 	bl	8004e80 <HAL_UART_Transmit>
				  sprintf(UART_data, "CH2 value = %1.1f at %d ms\r\n",LUX_Values[1],(int)HAL_GetTick());
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <main+0x308>)
 8001892:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001896:	f000 fdf3 	bl	8002480 <HAL_GetTick>
 800189a:	4603      	mov	r3, r0
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4622      	mov	r2, r4
 80018a0:	462b      	mov	r3, r5
 80018a2:	4926      	ldr	r1, [pc, #152]	@ (800193c <main+0x324>)
 80018a4:	4824      	ldr	r0, [pc, #144]	@ (8001938 <main+0x320>)
 80018a6:	f005 f861 	bl	800696c <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 80018aa:	4823      	ldr	r0, [pc, #140]	@ (8001938 <main+0x320>)
 80018ac:	f7fe fc50 	bl	8000150 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	2364      	movs	r3, #100	@ 0x64
 80018b6:	4920      	ldr	r1, [pc, #128]	@ (8001938 <main+0x320>)
 80018b8:	4810      	ldr	r0, [pc, #64]	@ (80018fc <main+0x2e4>)
 80018ba:	f003 fae1 	bl	8004e80 <HAL_UART_Transmit>
				  UART_UPDATE_FLAG = 0;
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <main+0x314>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e056      	b.n	8001974 <main+0x35c>
 80018c6:	bf00      	nop
 80018c8:	20000238 	.word	0x20000238
 80018cc:	0800a1e8 	.word	0x0800a1e8
 80018d0:	20000004 	.word	0x20000004
 80018d4:	0800a1f8 	.word	0x0800a1f8
 80018d8:	20000024 	.word	0x20000024
 80018dc:	200004f4 	.word	0x200004f4
 80018e0:	200002ac 	.word	0x200002ac
 80018e4:	0800a204 	.word	0x0800a204
 80018e8:	2000050c 	.word	0x2000050c
 80018ec:	0800a210 	.word	0x0800a210
 80018f0:	20000554 	.word	0x20000554
 80018f4:	0800a220 	.word	0x0800a220
 80018f8:	200004bc 	.word	0x200004bc
 80018fc:	2000059c 	.word	0x2000059c
 8001900:	0800a230 	.word	0x0800a230
 8001904:	0800a23c 	.word	0x0800a23c
 8001908:	200004f7 	.word	0x200004f7
 800190c:	aaaaaaab 	.word	0xaaaaaaab
 8001910:	200004b0 	.word	0x200004b0
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	3a53406b 	.word	0x3a53406b
 800191c:	2000048c 	.word	0x2000048c
 8001920:	20000498 	.word	0x20000498
 8001924:	20000000 	.word	0x20000000
 8001928:	200004a8 	.word	0x200004a8
 800192c:	200004f6 	.word	0x200004f6
 8001930:	200004f9 	.word	0x200004f9
 8001934:	0800a248 	.word	0x0800a248
 8001938:	200004cc 	.word	0x200004cc
 800193c:	0800a268 	.word	0x0800a268
			  }
			  else
			  {
				  sprintf(UART_data, "CH1-CH2 value = %1.1f at %d ms\r\n",LUX_Difference,(int)HAL_GetTick());
 8001940:	4b49      	ldr	r3, [pc, #292]	@ (8001a68 <main+0x450>)
 8001942:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001946:	f000 fd9b 	bl	8002480 <HAL_GetTick>
 800194a:	4603      	mov	r3, r0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	4946      	ldr	r1, [pc, #280]	@ (8001a6c <main+0x454>)
 8001954:	4846      	ldr	r0, [pc, #280]	@ (8001a70 <main+0x458>)
 8001956:	f005 f809 	bl	800696c <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 800195a:	4845      	ldr	r0, [pc, #276]	@ (8001a70 <main+0x458>)
 800195c:	f7fe fbf8 	bl	8000150 <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	2364      	movs	r3, #100	@ 0x64
 8001966:	4942      	ldr	r1, [pc, #264]	@ (8001a70 <main+0x458>)
 8001968:	4842      	ldr	r0, [pc, #264]	@ (8001a74 <main+0x45c>)
 800196a:	f003 fa89 	bl	8004e80 <HAL_UART_Transmit>
				  UART_UPDATE_FLAG = 0;
 800196e:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <main+0x460>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(LCD_SHOW_FLAG && !ADC_CALC_AVG_FLAG)
 8001974:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <main+0x464>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	f43f aee9 	beq.w	8001752 <main+0x13a>
 8001980:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <main+0x468>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f aee3 	bne.w	8001752 <main+0x13a>
		  {
			  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 800198c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001990:	483c      	ldr	r0, [pc, #240]	@ (8001a84 <main+0x46c>)
 8001992:	f002 f83b 	bl	8003a0c <HAL_GPIO_TogglePin>
			  if(LCD_SHOW_TYPE)
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <main+0x470>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01e      	beq.n	80019de <main+0x3c6>
			  {
				  sprintf((char*)LCD_top_text,"CH1=%1.1f lx    ",LUX_Values[0]);
 80019a0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <main+0x474>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	493a      	ldr	r1, [pc, #232]	@ (8001a90 <main+0x478>)
 80019a8:	483a      	ldr	r0, [pc, #232]	@ (8001a94 <main+0x47c>)
 80019aa:	f004 ffdf 	bl	800696c <siprintf>
				  LCD_SEND_COMMAND(LCD_RETURN_HOME);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7ff fbc0 	bl	8001134 <LCD_SEND_COMMAND>
				  LCD_SEND_STR((char*)LCD_top_text, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	4836      	ldr	r0, [pc, #216]	@ (8001a94 <main+0x47c>)
 80019ba:	f7ff fc5f 	bl	800127c <LCD_SEND_STR>
				  sprintf((char*)LCD_bottom_text,"CH2=%1.1f lx    ",LUX_Values[1]);
 80019be:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <main+0x474>)
 80019c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019c4:	4934      	ldr	r1, [pc, #208]	@ (8001a98 <main+0x480>)
 80019c6:	4835      	ldr	r0, [pc, #212]	@ (8001a9c <main+0x484>)
 80019c8:	f004 ffd0 	bl	800696c <siprintf>
				  LCD_SEND_STR((char*)LCD_bottom_text, 0, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2100      	movs	r1, #0
 80019d0:	4832      	ldr	r0, [pc, #200]	@ (8001a9c <main+0x484>)
 80019d2:	f7ff fc53 	bl	800127c <LCD_SEND_STR>
				  LCD_SHOW_FLAG = 0;
 80019d6:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <main+0x464>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e6b9      	b.n	8001752 <main+0x13a>
			  }
			  else
			  {
				  if(LCD_CLEAR_ONCE)
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <main+0x488>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d026      	beq.n	8001a36 <main+0x41e>
				  {
					  LCD_CLEAR_DRAM();
 80019e8:	f7ff fbef 	bl	80011ca <LCD_CLEAR_DRAM>
					  LCD_CLEAR_ONCE = 0;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa0 <main+0x488>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
					  sprintf((char*)LCD_top_text,"DIFFERENCE");
 80019f2:	492c      	ldr	r1, [pc, #176]	@ (8001aa4 <main+0x48c>)
 80019f4:	4827      	ldr	r0, [pc, #156]	@ (8001a94 <main+0x47c>)
 80019f6:	f004 ffb9 	bl	800696c <siprintf>
					  LCD_SEND_STR((char*)LCD_top_text, 3, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2103      	movs	r1, #3
 80019fe:	4825      	ldr	r0, [pc, #148]	@ (8001a94 <main+0x47c>)
 8001a00:	f7ff fc3c 	bl	800127c <LCD_SEND_STR>
					  sprintf((char*)LCD_bottom_text,"%1.1f lx",LUX_Difference);
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <main+0x450>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	4927      	ldr	r1, [pc, #156]	@ (8001aa8 <main+0x490>)
 8001a0c:	4823      	ldr	r0, [pc, #140]	@ (8001a9c <main+0x484>)
 8001a0e:	f004 ffad 	bl	800696c <siprintf>
					  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 8001a12:	4822      	ldr	r0, [pc, #136]	@ (8001a9c <main+0x484>)
 8001a14:	f7fe fb9c 	bl	8000150 <strlen>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f1c3 0310 	rsb	r3, r3, #16
 8001a1e:	0fda      	lsrs	r2, r3, #31
 8001a20:	4413      	add	r3, r2
 8001a22:	105b      	asrs	r3, r3, #1
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	481c      	ldr	r0, [pc, #112]	@ (8001a9c <main+0x484>)
 8001a2a:	f7ff fc27 	bl	800127c <LCD_SEND_STR>
					  LCD_SHOW_FLAG = 0;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <main+0x464>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e68d      	b.n	8001752 <main+0x13a>
				  }
				  else
				  {
					  sprintf((char*)LCD_bottom_text,"   %1.1f lx   ",LUX_Difference);
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <main+0x450>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	491b      	ldr	r1, [pc, #108]	@ (8001aac <main+0x494>)
 8001a3e:	4817      	ldr	r0, [pc, #92]	@ (8001a9c <main+0x484>)
 8001a40:	f004 ff94 	bl	800696c <siprintf>
					  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 8001a44:	4815      	ldr	r0, [pc, #84]	@ (8001a9c <main+0x484>)
 8001a46:	f7fe fb83 	bl	8000150 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f1c3 0310 	rsb	r3, r3, #16
 8001a50:	0fda      	lsrs	r2, r3, #31
 8001a52:	4413      	add	r3, r2
 8001a54:	105b      	asrs	r3, r3, #1
 8001a56:	2201      	movs	r2, #1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4810      	ldr	r0, [pc, #64]	@ (8001a9c <main+0x484>)
 8001a5c:	f7ff fc0e 	bl	800127c <LCD_SEND_STR>
					  LCD_SHOW_FLAG = 0;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <main+0x464>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
		  if(ADC_CALC_AVG_FLAG)
 8001a66:	e674      	b.n	8001752 <main+0x13a>
 8001a68:	200004a8 	.word	0x200004a8
 8001a6c:	0800a288 	.word	0x0800a288
 8001a70:	200004cc 	.word	0x200004cc
 8001a74:	2000059c 	.word	0x2000059c
 8001a78:	200004f6 	.word	0x200004f6
 8001a7c:	200004f5 	.word	0x200004f5
 8001a80:	200004f7 	.word	0x200004f7
 8001a84:	40011000 	.word	0x40011000
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000498 	.word	0x20000498
 8001a90:	0800a2ac 	.word	0x0800a2ac
 8001a94:	20000004 	.word	0x20000004
 8001a98:	0800a2c0 	.word	0x0800a2c0
 8001a9c:	20000024 	.word	0x20000024
 8001aa0:	200004f8 	.word	0x200004f8
 8001aa4:	0800a2d4 	.word	0x0800a2d4
 8001aa8:	0800a2e0 	.word	0x0800a2e0
 8001aac:	0800a2ec 	.word	0x0800a2ec

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	@ 0x50
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aba:	2228      	movs	r2, #40	@ 0x28
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 ffb9 	bl	8006a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 ffb1 	bl	8003a70 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001b14:	f000 f978 	bl	8001e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fa1e 	bl	8003f74 <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b3e:	f000 f963 	bl	8001e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b42:	2302      	movs	r3, #2
 8001b44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fb9f 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001b58:	f000 f956 	bl	8001e08 <Error_Handler>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0000      	movs	r0, r0
	...

08001b68 <Voltage_to_lux>:

/* USER CODE BEGIN 4 */
double Voltage_to_lux(float Vadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	// Vdda maitinimas operacinio Vadc nuskaityta isejimo reiksme
	volatile  double Current=0;
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9c7 2302 	strd	r2, r3, [r7, #8]
	static double LUX=0;

	//GAIN RES 820 k DIODE_COEF 2.5 e9, galima rodiklius suprastinti per 3
	Current = Vadc/GAIN_RESISTANCE;
 8001b7c:	4912      	ldr	r1, [pc, #72]	@ (8001bc8 <Voltage_to_lux+0x60>)
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff f9b4 	bl	8000eec <__aeabi_fdiv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc4e 	bl	8000428 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 2302 	strd	r2, r3, [r7, #8]
	LUX = (double)(DIODE_coefficient*Current);
 8001b94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b98:	a309      	add	r3, pc, #36	@ (adr r3, 8001bc0 <Voltage_to_lux+0x58>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fc9b 	bl	80004d8 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4909      	ldr	r1, [pc, #36]	@ (8001bcc <Voltage_to_lux+0x64>)
 8001ba8:	e9c1 2300 	strd	r2, r3, [r1]
	return LUX;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <Voltage_to_lux+0x64>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	414312d0 	.word	0x414312d0
 8001bc8:	444d0000 	.word	0x444d0000
 8001bcc:	20000500 	.word	0x20000500

08001bd0 <DELAY_US>:

void DELAY_US(uint16_t TIME_US)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
    uint32_t old_timer_value = TIM3->CNT;
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <DELAY_US+0x54>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	60fb      	str	r3, [r7, #12]
    uint32_t target_time = (old_timer_value + TIME_US) % (TIM3->ARR + 1);
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <DELAY_US+0x54>)
 8001be8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bea:	3201      	adds	r2, #1
 8001bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bf0:	fb01 f202 	mul.w	r2, r1, r2
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]

    if (target_time < old_timer_value)  // Handle timer overflow
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d205      	bcs.n	8001c0c <DELAY_US+0x3c>
    {
        while (TIM3->CNT >= old_timer_value);  // Wait for overflow
 8001c00:	bf00      	nop
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <DELAY_US+0x54>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d9fa      	bls.n	8001c02 <DELAY_US+0x32>
    }

    while (TIM3->CNT < target_time);  // Wait until target time is reached
 8001c0c:	bf00      	nop
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <DELAY_US+0x54>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8fa      	bhi.n	8001c0e <DELAY_US+0x3e>
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	40000400 	.word	0x40000400

08001c28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d124      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x5a>
{
	UART_UPDATE_FLAG = 1;
 8001c38:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
	ADC_CALC_AVG_FLAG = 1;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
	if(LCD_Delay_cnt<LCD_UPDATE_CNT) LCD_Delay_cnt++;
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d807      	bhi.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x36>
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	{
		LCD_Delay_cnt %=LCD_UPDATE_CNT;
		LCD_SHOW_FLAG = 1;
	}
}
}
 8001c5c:	e011      	b.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x5a>
		LCD_Delay_cnt %=LCD_UPDATE_CNT;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c66:	fba3 1302 	umull	r1, r3, r3, r2
 8001c6a:	08d9      	lsrs	r1, r3, #3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c7a:	701a      	strb	r2, [r3, #0]
		LCD_SHOW_FLAG = 1;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	2000050c 	.word	0x2000050c
 8001c90:	200004f6 	.word	0x200004f6
 8001c94:	200004f7 	.word	0x200004f7
 8001c98:	200004fa 	.word	0x200004fa
 8001c9c:	cccccccd 	.word	0xcccccccd
 8001ca0:	200004f5 	.word	0x200004f5

08001ca4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_SET_Pin)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cb4:	d117      	bne.n	8001ce6 <HAL_GPIO_EXTI_Callback+0x42>
	{
		LCD_SHOW_FLAG = 1;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
		ADC_CALC_AVG_FLAG = 1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
		UART_UPDATE_FLAG = 1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0x94>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
		LCD_CLEAR_ONCE = 1;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0x98>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		if(LCD_SHOW_TYPE) LCD_SHOW_TYPE = SHOW_DIFFERENCE;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_EXTI_Callback+0x42>
		else LCD_SHOW_TYPE = SHOW_ABSOLUTE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e006      	b.n	8001cfa <HAL_GPIO_EXTI_Callback+0x56>
	{
		UART_data[x] = '\0';
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2b27      	cmp	r3, #39	@ 0x27
 8001cfe:	d9f5      	bls.n	8001cec <HAL_GPIO_EXTI_Callback+0x48>
	}
	for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73bb      	strb	r3, [r7, #14]
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_EXTI_Callback+0x78>
	{
		LCD_top_text[x] = ' ';
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	54d1      	strb	r1, [r2, r3]
		LCD_bottom_text[x] = ' ';
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d12:	2120      	movs	r1, #32
 8001d14:	54d1      	strb	r1, [r2, r3]
	for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001d16:	7bbb      	ldrb	r3, [r7, #14]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	73bb      	strb	r3, [r7, #14]
 8001d1c:	7bbb      	ldrb	r3, [r7, #14]
 8001d1e:	2b1f      	cmp	r3, #31
 8001d20:	d9f1      	bls.n	8001d06 <HAL_GPIO_EXTI_Callback+0x62>
	}
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200004f5 	.word	0x200004f5
 8001d34:	200004f7 	.word	0x200004f7
 8001d38:	200004f6 	.word	0x200004f6
 8001d3c:	200004f8 	.word	0x200004f8
 8001d40:	20000000 	.word	0x20000000
 8001d44:	200004cc 	.word	0x200004cc
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	20000024 	.word	0x20000024

08001d50 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
	char Start_string[] = "Start\r\n";
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d66:	e883 0003 	stmia.w	r3, {r0, r1}
	char Stop_string[] = "Stop\r\n";
 8001d6a:	4a23      	ldr	r2, [pc, #140]	@ (8001df8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d74:	6018      	str	r0, [r3, #0]
 8001d76:	3304      	adds	r3, #4
 8001d78:	8019      	strh	r1, [r3, #0]
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	0c0a      	lsrs	r2, r1, #16
 8001d7e:	701a      	strb	r2, [r3, #0]
	if(huart == &huart2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_UARTEx_RxEventCallback+0xac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d12c      	bne.n	8001de2 <HAL_UARTEx_RxEventCallback+0x92>
	{
		if(Size == strlen(Start_string) && strncmp(Start_string,(char*)pData_RX,Size)==0)
 8001d88:	887c      	ldrh	r4, [r7, #2]
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe f9de 	bl	8000150 <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	429c      	cmp	r4, r3
 8001d98:	d10d      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x66>
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4917      	ldr	r1, [pc, #92]	@ (8001e00 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fe4f 	bl	8006a46 <strncmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x66>
		{
			UART_SEND_FLAG = 1;
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_UARTEx_RxEventCallback+0x92>
		}
		else if(Size == strlen(Stop_string) && strncmp(Stop_string,(char*)pData_RX,Size)==0)
 8001db6:	887c      	ldrh	r4, [r7, #2]
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe f9c7 	bl	8000150 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	429c      	cmp	r4, r3
 8001dc6:	d10c      	bne.n	8001de2 <HAL_UARTEx_RxEventCallback+0x92>
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 fe38 	bl	8006a46 <strncmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_UARTEx_RxEventCallback+0x92>
		{
			UART_SEND_FLAG = 0;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, pData_RX, UART_RX_SIZE);// See more Start and stop flags
 8001de2:	2210      	movs	r2, #16
 8001de4:	4906      	ldr	r1, [pc, #24]	@ (8001e00 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_UARTEx_RxEventCallback+0xac>)
 8001de8:	f003 f8d5 	bl	8004f96 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	0800a2fc 	.word	0x0800a2fc
 8001df8:	0800a304 	.word	0x0800a304
 8001dfc:	2000059c 	.word	0x2000059c
 8001e00:	200004bc 	.word	0x200004bc
 8001e04:	200004f9 	.word	0x200004f9

08001e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <Error_Handler+0x8>

08001e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6193      	str	r3, [r2, #24]
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_MspInit+0x5c>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_MspInit+0x60>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <HAL_MspInit+0x60>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <NMI_Handler+0x4>

08001e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <MemManage_Handler+0x4>

08001e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <UsageFault_Handler+0x4>

08001ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f000 fac8 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ed6:	f001 fac9 	bl	800346c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000268 	.word	0x20000268

08001ee4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <ADC1_2_IRQHandler+0x10>)
 8001eea:	f000 fcad 	bl	8002848 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000238 	.word	0x20000238

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f002 fc1f 	bl	8004740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000050c 	.word	0x2000050c

08001f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <TIM3_IRQHandler+0x10>)
 8001f12:	f002 fc15 	bl	8004740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000554 	.word	0x20000554

08001f20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <USART2_IRQHandler+0x10>)
 8001f26:	f003 f893 	bl	8005050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000059c 	.word	0x2000059c

08001f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_SET_Pin);
 8001f38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001f3c:	f001 fd80 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_kill>:

int _kill(int pid, int sig)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5c:	f004 fdd0 	bl	8006b00 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2216      	movs	r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
  return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_exit>:

void _exit (int status)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffe7 	bl	8001f52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <_exit+0x12>

08001f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00a      	b.n	8001fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9a:	f3af 8000 	nop.w
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf0      	blt.n	8001f9a <_read+0x12>
  }

  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e009      	b.n	8001fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf1      	blt.n	8001fd4 <_write+0x12>
  }
  return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_close>:

int _close(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_isatty>:

int _isatty(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f004 fd38 	bl	8006b00 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20005000 	.word	0x20005000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	20000508 	.word	0x20000508
 80020c4:	20000738 	.word	0x20000738

080020c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	463b      	mov	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <MX_TIM2_Init+0x98>)
 80020f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <MX_TIM2_Init+0x98>)
 80020fa:	f240 7207 	movw	r2, #1799	@ 0x707
 80020fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <MX_TIM2_Init+0x98>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_TIM2_Init+0x98>)
 8002108:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800210c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b17      	ldr	r3, [pc, #92]	@ (800216c <MX_TIM2_Init+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <MX_TIM2_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800211a:	4814      	ldr	r0, [pc, #80]	@ (800216c <MX_TIM2_Init+0x98>)
 800211c:	f002 fa24 	bl	8004568 <HAL_TIM_Base_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002126:	f7ff fe6f 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_TIM2_Init+0x98>)
 8002138:	f002 fbf2 	bl	8004920 <HAL_TIM_ConfigClockSource>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002142:	f7ff fe61 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800214e:	463b      	mov	r3, r7
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	@ (800216c <MX_TIM2_Init+0x98>)
 8002154:	f002 fdd4 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800215e:	f7ff fe53 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000050c 	.word	0x2000050c

08002170 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	463b      	mov	r3, r7
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <MX_TIM3_Init+0x94>)
 800218e:	4a1e      	ldr	r2, [pc, #120]	@ (8002208 <MX_TIM3_Init+0x98>)
 8002190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18-1;
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <MX_TIM3_Init+0x94>)
 8002194:	2211      	movs	r2, #17
 8002196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <MX_TIM3_Init+0x94>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021a0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80021a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b2:	4814      	ldr	r0, [pc, #80]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021b4:	f002 f9d8 	bl	8004568 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021be:	f7ff fe23 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021d0:	f002 fba6 	bl	8004920 <HAL_TIM_ConfigClockSource>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021da:	f7ff fe15 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021de:	2320      	movs	r3, #32
 80021e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	@ (8002204 <MX_TIM3_Init+0x94>)
 80021ec:	f002 fd88 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021f6:	f7ff fe07 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000554 	.word	0x20000554
 8002208:	40000400 	.word	0x40000400

0800220c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800221c:	d114      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2103      	movs	r1, #3
 800223a:	201c      	movs	r0, #28
 800223c:	f000 ff71 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002240:	201c      	movs	r0, #28
 8002242:	f000 ff8a 	bl	800315a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002246:	e018      	b.n	800227a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0e      	ldr	r2, [pc, #56]	@ (8002288 <HAL_TIM_Base_MspInit+0x7c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d113      	bne.n	800227a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_TIM_Base_MspInit+0x78>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2101      	movs	r1, #1
 800226e:	201d      	movs	r0, #29
 8002270:	f000 ff57 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002274:	201d      	movs	r0, #29
 8002276:	f000 ff70 	bl	800315a <HAL_NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40000400 	.word	0x40000400

0800228c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <MX_USART2_UART_Init+0x50>)
 8002294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <MX_USART2_UART_Init+0x4c>)
 80022c4:	f002 fd8c 	bl	8004de0 <HAL_UART_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ce:	f7ff fd9b 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000059c 	.word	0x2000059c
 80022dc:	40004400 	.word	0x40004400

080022e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_UART_MspInit+0x98>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d137      	bne.n	8002370 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002300:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <HAL_UART_MspInit+0x9c>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_UART_MspInit+0x9c>)
 8002306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_UART_MspInit+0x9c>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_UART_MspInit+0x9c>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_UART_MspInit+0x9c>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_UART_MspInit+0x9c>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002330:	2304      	movs	r3, #4
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	480f      	ldr	r0, [pc, #60]	@ (8002380 <HAL_UART_MspInit+0xa0>)
 8002344:	f001 f9c6 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002348:	2308      	movs	r3, #8
 800234a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	4809      	ldr	r0, [pc, #36]	@ (8002380 <HAL_UART_MspInit+0xa0>)
 800235c:	f001 f9ba 	bl	80036d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2102      	movs	r1, #2
 8002364:	2026      	movs	r0, #38	@ 0x26
 8002366:	f000 fedc 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800236a:	2026      	movs	r0, #38	@ 0x26
 800236c:	f000 fef5 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}

 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40004400 	.word	0x40004400
 800237c:	40021000 	.word	0x40021000
 8002380:	40010800 	.word	0x40010800

08002384 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002384:	f7ff fea0 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480b      	ldr	r0, [pc, #44]	@ (80023b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800238a:	490c      	ldr	r1, [pc, #48]	@ (80023bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800238c:	4a0c      	ldr	r2, [pc, #48]	@ (80023c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023a0:	4c09      	ldr	r4, [pc, #36]	@ (80023c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f004 fbad 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023b2:	f7ff f931 	bl	8001618 <main>
  bx lr
 80023b6:	4770      	bx	lr
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80023c0:	0800a784 	.word	0x0800a784
  ldr r2, =_sbss
 80023c4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80023c8:	20000734 	.word	0x20000734

080023cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <CAN1_RX1_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_Init+0x28>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a07      	ldr	r2, [pc, #28]	@ (80023f8 <HAL_Init+0x28>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 fe93 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e6:	200f      	movs	r0, #15
 80023e8:	f000 f808 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ec:	f7ff fd12 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_InitTick+0x54>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_InitTick+0x58>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002412:	fbb3 f3f1 	udiv	r3, r3, r1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f000 feab 	bl	8003176 <HAL_SYSTICK_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00e      	b.n	8002448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d80a      	bhi.n	8002446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f000 fe73 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800243c:	4a06      	ldr	r2, [pc, #24]	@ (8002458 <HAL_InitTick+0x5c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000044 	.word	0x20000044
 8002454:	2000004c 	.word	0x2000004c
 8002458:	20000048 	.word	0x20000048

0800245c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_IncTick+0x1c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_IncTick+0x20>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a03      	ldr	r2, [pc, #12]	@ (800247c <HAL_IncTick+0x20>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	2000004c 	.word	0x2000004c
 800247c:	200005e4 	.word	0x200005e4

08002480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b02      	ldr	r3, [pc, #8]	@ (8002490 <HAL_GetTick+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	200005e4 	.word	0x200005e4

08002494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fff0 	bl	8002480 <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d005      	beq.n	80024ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_Delay+0x44>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ba:	bf00      	nop
 80024bc:	f7ff ffe0 	bl	8002480 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d8f7      	bhi.n	80024bc <HAL_Delay+0x28>
  {
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000004c 	.word	0x2000004c

080024dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0be      	b.n	800267c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe ff44 	bl	80013a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fbc7 	bl	8002cb4 <ADC_ConversionStop_Disable>
 8002526:	4603      	mov	r3, r0
 8002528:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8099 	bne.w	800266a <HAL_ADC_Init+0x18e>
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8095 	bne.w	800266a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800255c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7b1b      	ldrb	r3, [r3, #12]
 8002562:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002564:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002574:	d003      	beq.n	800257e <HAL_ADC_Init+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_ADC_Init+0xa8>
 800257e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002582:	e000      	b.n	8002586 <HAL_ADC_Init+0xaa>
 8002584:	2300      	movs	r3, #0
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7d1b      	ldrb	r3, [r3, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	035a      	lsls	r2, r3, #13
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <HAL_ADC_Init+0x1a8>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_Init+0x126>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d104      	bne.n	800260c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	3b01      	subs	r3, #1
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	430a      	orrs	r2, r1
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <HAL_ADC_Init+0x1ac>)
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d10b      	bne.n	8002648 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002646:	e018      	b.n	800267a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	f023 0312 	bic.w	r3, r3, #18
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	ffe1f7fd 	.word	0xffe1f7fd
 8002688:	ff1f0efe 	.word	0xff1f0efe

0800268c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a64      	ldr	r2, [pc, #400]	@ (8002834 <HAL_ADC_Start_DMA+0x1a8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <HAL_ADC_Start_DMA+0x24>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a63      	ldr	r2, [pc, #396]	@ (8002838 <HAL_ADC_Start_DMA+0x1ac>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d106      	bne.n	80026be <HAL_ADC_Start_DMA+0x32>
 80026b0:	4b60      	ldr	r3, [pc, #384]	@ (8002834 <HAL_ADC_Start_DMA+0x1a8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 80b3 	bne.w	8002824 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_Start_DMA+0x40>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0ae      	b.n	800282a <HAL_ADC_Start_DMA+0x19e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fa93 	bl	8002c00 <ADC_Enable>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 809a 	bne.w	800281a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002838 <HAL_ADC_Start_DMA+0x1ac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d105      	bne.n	8002710 <HAL_ADC_Start_DMA+0x84>
 8002704:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <HAL_ADC_Start_DMA+0x1a8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d115      	bne.n	800273c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002714:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d026      	beq.n	8002778 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002732:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800273a:	e01d      	b.n	8002778 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a39      	ldr	r2, [pc, #228]	@ (8002834 <HAL_ADC_Start_DMA+0x1a8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_ADC_Start_DMA+0xd0>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a38      	ldr	r2, [pc, #224]	@ (8002838 <HAL_ADC_Start_DMA+0x1ac>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d10d      	bne.n	8002778 <HAL_ADC_Start_DMA+0xec>
 800275c:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_ADC_Start_DMA+0x1a8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002770:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	f023 0206 	bic.w	r2, r3, #6
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002790:	e002      	b.n	8002798 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a25      	ldr	r2, [pc, #148]	@ (800283c <HAL_ADC_Start_DMA+0x1b0>)
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a24      	ldr	r2, [pc, #144]	@ (8002840 <HAL_ADC_Start_DMA+0x1b4>)
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a23      	ldr	r2, [pc, #140]	@ (8002844 <HAL_ADC_Start_DMA+0x1b8>)
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0202 	mvn.w	r2, #2
 80027c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a18      	ldr	r0, [r3, #32]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	334c      	adds	r3, #76	@ 0x4c
 80027dc:	4619      	mov	r1, r3
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f000 fd2f 	bl	8003244 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80027f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80027f4:	d108      	bne.n	8002808 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002804:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002806:	e00f      	b.n	8002828 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002816:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002818:	e006      	b.n	8002828 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002822:	e001      	b.n	8002828 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40012400 	.word	0x40012400
 8002838:	40012800 	.word	0x40012800
 800283c:	08002d37 	.word	0x08002d37
 8002840:	08002db3 	.word	0x08002db3
 8002844:	08002dcf 	.word	0x08002dcf

08002848 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03e      	beq.n	80028e8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d039      	beq.n	80028e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002896:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800289a:	d11d      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d119      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0220 	bic.w	r2, r2, #32
 80028b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f874 	bl	80029c6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f06f 0212 	mvn.w	r2, #18
 80028e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04d      	beq.n	800298e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d048      	beq.n	800298e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800291e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002922:	d012      	beq.n	800294a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800292e:	2b00      	cmp	r3, #0
 8002930:	d125      	bne.n	800297e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800293c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002940:	d11d      	bne.n	800297e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002958:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 faee 	bl	8002f60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 020c 	mvn.w	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f81b 	bl	80029ea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0201 	mvn.w	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x20>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0dc      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1da>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d81c      	bhi.n	8002a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b05      	subs	r3, #5
 8002a52:	221f      	movs	r2, #31
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b05      	subs	r3, #5
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a78:	e03c      	b.n	8002af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d81c      	bhi.n	8002abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b23      	subs	r3, #35	@ 0x23
 8002a94:	221f      	movs	r2, #31
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4019      	ands	r1, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b23      	subs	r3, #35	@ 0x23
 8002aae:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aba:	e01b      	b.n	8002af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	3b41      	subs	r3, #65	@ 0x41
 8002ace:	221f      	movs	r2, #31
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4019      	ands	r1, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b41      	subs	r3, #65	@ 0x41
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d91c      	bls.n	8002b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68d9      	ldr	r1, [r3, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6898      	ldr	r0, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	3b1e      	subs	r3, #30
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e019      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6919      	ldr	r1, [r3, #16]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	2207      	movs	r2, #7
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6898      	ldr	r0, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d003      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b76:	2b11      	cmp	r3, #17
 8002b78:	d132      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d125      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d126      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002ba0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d11a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	0c9a      	lsrs	r2, r3, #18
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8002bce:	e007      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40012400 	.word	0x40012400
 8002bf8:	20000044 	.word	0x20000044
 8002bfc:	431bde83 	.word	0x431bde83

08002c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d040      	beq.n	8002ca0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <ADC_Enable+0xac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <ADC_Enable+0xb0>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c3c:	e002      	b.n	8002c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f9      	bne.n	8002c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4a:	f7ff fc19 	bl	8002480 <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c50:	e01f      	b.n	8002c92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c52:	f7ff fc15 	bl	8002480 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d918      	bls.n	8002c92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d011      	beq.n	8002c92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	f043 0210 	orr.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d1d8      	bne.n	8002c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000044 	.word	0x20000044
 8002cb0:	431bde83 	.word	0x431bde83

08002cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d12e      	bne.n	8002d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cde:	f7ff fbcf 	bl	8002480 <HAL_GetTick>
 8002ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce4:	e01b      	b.n	8002d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce6:	f7ff fbcb 	bl	8002480 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d914      	bls.n	8002d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d0dc      	beq.n	8002ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d127      	bne.n	8002da0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d66:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d6a:	d115      	bne.n	8002d98 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fe14 	bl	80029c6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d9e:	e004      	b.n	8002daa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fe09 	bl	80029d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff fe01 	bl	80029fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e097      	b.n	8002f52 <HAL_ADCEx_Calibration_Start+0x14e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ff42 	bl	8002cb4 <ADC_ConversionStop_Disable>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fee3 	bl	8002c00 <ADC_Enable>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 8081 	bne.w	8002f48 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e4e:	f023 0302 	bic.w	r3, r3, #2
 8002e52:	f043 0202 	orr.w	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_ADCEx_Calibration_Start+0x158>)
 8002e5c:	681c      	ldr	r4, [r3, #0]
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f001 facc 	bl	80043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002e64:	4603      	mov	r3, r0
 8002e66:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002e6a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002e6c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002e6e:	e002      	b.n	8002e76 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e8c:	f7ff faf8 	bl	8002480 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e92:	e01b      	b.n	8002ecc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e94:	f7ff faf4 	bl	8002480 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	d914      	bls.n	8002ecc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f023 0312 	bic.w	r3, r3, #18
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e042      	b.n	8002f52 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1dc      	bne.n	8002e94 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0204 	orr.w	r2, r2, #4
 8002ee8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002eea:	f7ff fac9 	bl	8002480 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ef0:	e01b      	b.n	8002f2a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ef2:	f7ff fac5 	bl	8002480 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d914      	bls.n	8002f2a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	f023 0312 	bic.w	r3, r3, #18
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e013      	b.n	8002f52 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1dc      	bne.n	8002ef2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000044 	.word	0x20000044

08002f60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
	...

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4906      	ldr	r1, [pc, #24]	@ (800300c <__NVIC_EnableIRQ+0x34>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	@ (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff90 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff2d 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff42 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff90 	bl	8003064 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5f 	bl	8003010 <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff35 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa2 	bl	80030c8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e043      	b.n	800322e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b22      	ldr	r3, [pc, #136]	@ (8003238 <HAL_DMA_Init+0xa8>)
 80031ae:	4413      	add	r3, r2
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_DMA_Init+0xac>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	009a      	lsls	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003240 <HAL_DMA_Init+0xb0>)
 80031c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	bffdfff8 	.word	0xbffdfff8
 800323c:	cccccccd 	.word	0xcccccccd
 8003240:	40020000 	.word	0x40020000

08003244 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_DMA_Start_IT+0x20>
 8003260:	2302      	movs	r3, #2
 8003262:	e04b      	b.n	80032fc <HAL_DMA_Start_IT+0xb8>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d13a      	bne.n	80032ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9eb 	bl	8003678 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 020e 	orr.w	r2, r2, #14
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00f      	b.n	80032dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 020a 	orr.w	r2, r2, #10
 80032da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e005      	b.n	80032fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d008      	beq.n	800332e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e020      	b.n	8003370 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 020e 	bic.w	r2, r2, #14
 800333c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
	...

0800337c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d005      	beq.n	80033a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2204      	movs	r2, #4
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	e051      	b.n	8003444 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020e 	bic.w	r2, r2, #14
 80033ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <HAL_DMA_Abort_IT+0xd4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d029      	beq.n	800341e <HAL_DMA_Abort_IT+0xa2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a21      	ldr	r2, [pc, #132]	@ (8003454 <HAL_DMA_Abort_IT+0xd8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <HAL_DMA_Abort_IT+0x9e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_DMA_Abort_IT+0xdc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01a      	beq.n	8003414 <HAL_DMA_Abort_IT+0x98>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_DMA_Abort_IT+0xe0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d012      	beq.n	800340e <HAL_DMA_Abort_IT+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_DMA_Abort_IT+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00a      	beq.n	8003408 <HAL_DMA_Abort_IT+0x8c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <HAL_DMA_Abort_IT+0xe8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <HAL_DMA_Abort_IT+0x86>
 80033fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003400:	e00e      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 8003402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003406:	e00b      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 8003408:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800340c:	e008      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 800340e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003412:	e005      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 8003414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003418:	e002      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 800341a:	2310      	movs	r3, #16
 800341c:	e000      	b.n	8003420 <HAL_DMA_Abort_IT+0xa4>
 800341e:	2301      	movs	r3, #1
 8003420:	4a11      	ldr	r2, [pc, #68]	@ (8003468 <HAL_DMA_Abort_IT+0xec>)
 8003422:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    } 
  }
  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40020008 	.word	0x40020008
 8003454:	4002001c 	.word	0x4002001c
 8003458:	40020030 	.word	0x40020030
 800345c:	40020044 	.word	0x40020044
 8003460:	40020058 	.word	0x40020058
 8003464:	4002006c 	.word	0x4002006c
 8003468:	40020000 	.word	0x40020000

0800346c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2204      	movs	r2, #4
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d04f      	beq.n	8003534 <HAL_DMA_IRQHandler+0xc8>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04a      	beq.n	8003534 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a66      	ldr	r2, [pc, #408]	@ (800365c <HAL_DMA_IRQHandler+0x1f0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d029      	beq.n	800351a <HAL_DMA_IRQHandler+0xae>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a65      	ldr	r2, [pc, #404]	@ (8003660 <HAL_DMA_IRQHandler+0x1f4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0xaa>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a63      	ldr	r2, [pc, #396]	@ (8003664 <HAL_DMA_IRQHandler+0x1f8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01a      	beq.n	8003510 <HAL_DMA_IRQHandler+0xa4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a62      	ldr	r2, [pc, #392]	@ (8003668 <HAL_DMA_IRQHandler+0x1fc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d012      	beq.n	800350a <HAL_DMA_IRQHandler+0x9e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a60      	ldr	r2, [pc, #384]	@ (800366c <HAL_DMA_IRQHandler+0x200>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00a      	beq.n	8003504 <HAL_DMA_IRQHandler+0x98>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003670 <HAL_DMA_IRQHandler+0x204>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <HAL_DMA_IRQHandler+0x92>
 80034f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034fc:	e00e      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 80034fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003502:	e00b      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 8003504:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003508:	e008      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 800350a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800350e:	e005      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 8003510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003514:	e002      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 8003516:	2340      	movs	r3, #64	@ 0x40
 8003518:	e000      	b.n	800351c <HAL_DMA_IRQHandler+0xb0>
 800351a:	2304      	movs	r3, #4
 800351c:	4a55      	ldr	r2, [pc, #340]	@ (8003674 <HAL_DMA_IRQHandler+0x208>)
 800351e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8094 	beq.w	8003652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003532:	e08e      	b.n	8003652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	2202      	movs	r2, #2
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d056      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x186>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d051      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020a 	bic.w	r2, r2, #10
 800356a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a38      	ldr	r2, [pc, #224]	@ (800365c <HAL_DMA_IRQHandler+0x1f0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d029      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x166>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a37      	ldr	r2, [pc, #220]	@ (8003660 <HAL_DMA_IRQHandler+0x1f4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0x162>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a35      	ldr	r2, [pc, #212]	@ (8003664 <HAL_DMA_IRQHandler+0x1f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01a      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x15c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a34      	ldr	r2, [pc, #208]	@ (8003668 <HAL_DMA_IRQHandler+0x1fc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d012      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x156>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a32      	ldr	r2, [pc, #200]	@ (800366c <HAL_DMA_IRQHandler+0x200>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00a      	beq.n	80035bc <HAL_DMA_IRQHandler+0x150>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a31      	ldr	r2, [pc, #196]	@ (8003670 <HAL_DMA_IRQHandler+0x204>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x14a>
 80035b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035b4:	e00e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ba:	e00b      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c0:	e008      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035c6:	e005      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035cc:	e002      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035ce:	2320      	movs	r3, #32
 80035d0:	e000      	b.n	80035d4 <HAL_DMA_IRQHandler+0x168>
 80035d2:	2302      	movs	r3, #2
 80035d4:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <HAL_DMA_IRQHandler+0x208>)
 80035d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d034      	beq.n	8003652 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035f0:	e02f      	b.n	8003652 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2208      	movs	r2, #8
 80035f8:	409a      	lsls	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d028      	beq.n	8003654 <HAL_DMA_IRQHandler+0x1e8>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020e 	bic.w	r2, r2, #14
 800361a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f202 	lsl.w	r2, r1, r2
 800362a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
    }
  }
  return;
 8003652:	bf00      	nop
 8003654:	bf00      	nop
}
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40020008 	.word	0x40020008
 8003660:	4002001c 	.word	0x4002001c
 8003664:	40020030 	.word	0x40020030
 8003668:	40020044 	.word	0x40020044
 800366c:	40020058 	.word	0x40020058
 8003670:	4002006c 	.word	0x4002006c
 8003674:	40020000 	.word	0x40020000

08003678 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d108      	bne.n	80036b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036b6:	e007      	b.n	80036c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b08b      	sub	sp, #44	@ 0x2c
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e6:	e169      	b.n	80039bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036e8:	2201      	movs	r2, #1
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	429a      	cmp	r2, r3
 8003702:	f040 8158 	bne.w	80039b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a9a      	ldr	r2, [pc, #616]	@ (8003974 <HAL_GPIO_Init+0x2a0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d05e      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
 8003710:	4a98      	ldr	r2, [pc, #608]	@ (8003974 <HAL_GPIO_Init+0x2a0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d875      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 8003716:	4a98      	ldr	r2, [pc, #608]	@ (8003978 <HAL_GPIO_Init+0x2a4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d058      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
 800371c:	4a96      	ldr	r2, [pc, #600]	@ (8003978 <HAL_GPIO_Init+0x2a4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d86f      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 8003722:	4a96      	ldr	r2, [pc, #600]	@ (800397c <HAL_GPIO_Init+0x2a8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d052      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
 8003728:	4a94      	ldr	r2, [pc, #592]	@ (800397c <HAL_GPIO_Init+0x2a8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d869      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 800372e:	4a94      	ldr	r2, [pc, #592]	@ (8003980 <HAL_GPIO_Init+0x2ac>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d04c      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
 8003734:	4a92      	ldr	r2, [pc, #584]	@ (8003980 <HAL_GPIO_Init+0x2ac>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d863      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 800373a:	4a92      	ldr	r2, [pc, #584]	@ (8003984 <HAL_GPIO_Init+0x2b0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d046      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
 8003740:	4a90      	ldr	r2, [pc, #576]	@ (8003984 <HAL_GPIO_Init+0x2b0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d85d      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 8003746:	2b12      	cmp	r3, #18
 8003748:	d82a      	bhi.n	80037a0 <HAL_GPIO_Init+0xcc>
 800374a:	2b12      	cmp	r3, #18
 800374c:	d859      	bhi.n	8003802 <HAL_GPIO_Init+0x12e>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_GPIO_Init+0x80>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	080037cf 	.word	0x080037cf
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080037bb 	.word	0x080037bb
 8003760:	080037fd 	.word	0x080037fd
 8003764:	08003803 	.word	0x08003803
 8003768:	08003803 	.word	0x08003803
 800376c:	08003803 	.word	0x08003803
 8003770:	08003803 	.word	0x08003803
 8003774:	08003803 	.word	0x08003803
 8003778:	08003803 	.word	0x08003803
 800377c:	08003803 	.word	0x08003803
 8003780:	08003803 	.word	0x08003803
 8003784:	08003803 	.word	0x08003803
 8003788:	08003803 	.word	0x08003803
 800378c:	08003803 	.word	0x08003803
 8003790:	08003803 	.word	0x08003803
 8003794:	08003803 	.word	0x08003803
 8003798:	080037b1 	.word	0x080037b1
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	4a79      	ldr	r2, [pc, #484]	@ (8003988 <HAL_GPIO_Init+0x2b4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037a6:	e02c      	b.n	8003802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	623b      	str	r3, [r7, #32]
          break;
 80037ae:	e029      	b.n	8003804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	3304      	adds	r3, #4
 80037b6:	623b      	str	r3, [r7, #32]
          break;
 80037b8:	e024      	b.n	8003804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	3308      	adds	r3, #8
 80037c0:	623b      	str	r3, [r7, #32]
          break;
 80037c2:	e01f      	b.n	8003804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	330c      	adds	r3, #12
 80037ca:	623b      	str	r3, [r7, #32]
          break;
 80037cc:	e01a      	b.n	8003804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037d6:	2304      	movs	r3, #4
 80037d8:	623b      	str	r3, [r7, #32]
          break;
 80037da:	e013      	b.n	8003804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037e4:	2308      	movs	r3, #8
 80037e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	611a      	str	r2, [r3, #16]
          break;
 80037ee:	e009      	b.n	8003804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f0:	2308      	movs	r3, #8
 80037f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	615a      	str	r2, [r3, #20]
          break;
 80037fa:	e003      	b.n	8003804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]
          break;
 8003800:	e000      	b.n	8003804 <HAL_GPIO_Init+0x130>
          break;
 8003802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2bff      	cmp	r3, #255	@ 0xff
 8003808:	d801      	bhi.n	800380e <HAL_GPIO_Init+0x13a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	e001      	b.n	8003812 <HAL_GPIO_Init+0x13e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2bff      	cmp	r3, #255	@ 0xff
 8003818:	d802      	bhi.n	8003820 <HAL_GPIO_Init+0x14c>
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	e002      	b.n	8003826 <HAL_GPIO_Init+0x152>
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	3b08      	subs	r3, #8
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	210f      	movs	r1, #15
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	6a39      	ldr	r1, [r7, #32]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	431a      	orrs	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80b1 	beq.w	80039b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <HAL_GPIO_Init+0x2b8>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4a4c      	ldr	r2, [pc, #304]	@ (800398c <HAL_GPIO_Init+0x2b8>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6193      	str	r3, [r2, #24]
 8003860:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <HAL_GPIO_Init+0x2b8>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800386c:	4a48      	ldr	r2, [pc, #288]	@ (8003990 <HAL_GPIO_Init+0x2bc>)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	3302      	adds	r3, #2
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	220f      	movs	r2, #15
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <HAL_GPIO_Init+0x2c0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_GPIO_Init+0x1ec>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3f      	ldr	r2, [pc, #252]	@ (8003998 <HAL_GPIO_Init+0x2c4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00d      	beq.n	80038bc <HAL_GPIO_Init+0x1e8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3e      	ldr	r2, [pc, #248]	@ (800399c <HAL_GPIO_Init+0x2c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0x1e4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	@ (80039a0 <HAL_GPIO_Init+0x2cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_GPIO_Init+0x1e0>
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <HAL_GPIO_Init+0x1ee>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e004      	b.n	80038c2 <HAL_GPIO_Init+0x1ee>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e002      	b.n	80038c2 <HAL_GPIO_Init+0x1ee>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_GPIO_Init+0x1ee>
 80038c0:	2300      	movs	r3, #0
 80038c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c4:	f002 0203 	and.w	r2, r2, #3
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	4093      	lsls	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038d2:	492f      	ldr	r1, [pc, #188]	@ (8003990 <HAL_GPIO_Init+0x2bc>)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	3302      	adds	r3, #2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	492c      	ldr	r1, [pc, #176]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038fa:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	43db      	mvns	r3, r3
 8003902:	4928      	ldr	r1, [pc, #160]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003904:	4013      	ands	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003914:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	4922      	ldr	r1, [pc, #136]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	60cb      	str	r3, [r1, #12]
 8003920:	e006      	b.n	8003930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	43db      	mvns	r3, r3
 800392a:	491e      	ldr	r1, [pc, #120]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 800392c:	4013      	ands	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4918      	ldr	r1, [pc, #96]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800394a:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	43db      	mvns	r3, r3
 8003952:	4914      	ldr	r1, [pc, #80]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003954:	4013      	ands	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d021      	beq.n	80039a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	490e      	ldr	r1, [pc, #56]	@ (80039a4 <HAL_GPIO_Init+0x2d0>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e021      	b.n	80039b6 <HAL_GPIO_Init+0x2e2>
 8003972:	bf00      	nop
 8003974:	10320000 	.word	0x10320000
 8003978:	10310000 	.word	0x10310000
 800397c:	10220000 	.word	0x10220000
 8003980:	10210000 	.word	0x10210000
 8003984:	10120000 	.word	0x10120000
 8003988:	10110000 	.word	0x10110000
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	40010800 	.word	0x40010800
 8003998:	40010c00 	.word	0x40010c00
 800399c:	40011000 	.word	0x40011000
 80039a0:	40011400 	.word	0x40011400
 80039a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	4909      	ldr	r1, [pc, #36]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	3301      	adds	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f47f ae8e 	bne.w	80036e8 <HAL_GPIO_Init+0x14>
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	372c      	adds	r7, #44	@ 0x2c
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039f8:	e003      	b.n	8003a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	041a      	lsls	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43d9      	mvns	r1, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	611a      	str	r2, [r3, #16]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a4a:	4b08      	ldr	r3, [pc, #32]	@ (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f920 	bl	8001ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e272      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8087 	beq.w	8003b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a90:	4b92      	ldr	r3, [pc, #584]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d112      	bne.n	8003ace <HAL_RCC_OscConfig+0x5e>
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab6:	4b89      	ldr	r3, [pc, #548]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x12c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d168      	bne.n	8003b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e24c      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x76>
 8003ad8:	4b80      	ldr	r3, [pc, #512]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7f      	ldr	r2, [pc, #508]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e02e      	b.n	8003b44 <HAL_RCC_OscConfig+0xd4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b7b      	ldr	r3, [pc, #492]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7a      	ldr	r2, [pc, #488]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b78      	ldr	r3, [pc, #480]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a77      	ldr	r2, [pc, #476]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xd4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0xbc>
 8003b12:	4b72      	ldr	r3, [pc, #456]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a71      	ldr	r2, [pc, #452]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6e      	ldr	r2, [pc, #440]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xd4>
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6a      	ldr	r2, [pc, #424]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b68      	ldr	r3, [pc, #416]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a67      	ldr	r2, [pc, #412]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fc98 	bl	8002480 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fe fc94 	bl	8002480 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e200      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b5d      	ldr	r3, [pc, #372]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xe4>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fc84 	bl	8002480 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fc80 	bl	8002480 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1ec      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x10c>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003baa:	4b4c      	ldr	r3, [pc, #304]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bb6:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d11c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x18c>
 8003bc2:	4b46      	ldr	r3, [pc, #280]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	4b43      	ldr	r3, [pc, #268]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x176>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1c0      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4939      	ldr	r1, [pc, #228]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	e03a      	b.n	8003c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <HAL_RCC_OscConfig+0x270>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fc39 	bl	8002480 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fe fc35 	bl	8002480 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1a1      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	4b2d      	ldr	r3, [pc, #180]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b2a      	ldr	r3, [pc, #168]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4927      	ldr	r1, [pc, #156]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <HAL_RCC_OscConfig+0x270>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fc18 	bl	8002480 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fe fc14 	bl	8002480 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e180      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03a      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d019      	beq.n	8003cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fbf8 	bl	8002480 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe fbf4 	bl	8002480 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e160      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f000 face 	bl	8004254 <RCC_Delay>
 8003cb8:	e01c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fbde 	bl	8002480 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc6:	e00f      	b.n	8003ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fbda 	bl	8002480 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d908      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e146      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	42420000 	.word	0x42420000
 8003ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	4b92      	ldr	r3, [pc, #584]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e9      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80a6 	beq.w	8003e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b8b      	ldr	r3, [pc, #556]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	4b88      	ldr	r3, [pc, #544]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4a87      	ldr	r2, [pc, #540]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	61d3      	str	r3, [r2, #28]
 8003d1e:	4b85      	ldr	r3, [pc, #532]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b82      	ldr	r3, [pc, #520]	@ (8003f38 <HAL_RCC_OscConfig+0x4c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f38 <HAL_RCC_OscConfig+0x4c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f38 <HAL_RCC_OscConfig+0x4c8>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fb9b 	bl	8002480 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe fb97 	bl	8002480 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	@ 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e103      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b75      	ldr	r3, [pc, #468]	@ (8003f38 <HAL_RCC_OscConfig+0x4c8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x312>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a6e      	ldr	r2, [pc, #440]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	e02d      	b.n	8003dde <HAL_RCC_OscConfig+0x36e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x334>
 8003d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	4a69      	ldr	r2, [pc, #420]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6213      	str	r3, [r2, #32]
 8003d96:	4b67      	ldr	r3, [pc, #412]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a66      	ldr	r2, [pc, #408]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	e01c      	b.n	8003dde <HAL_RCC_OscConfig+0x36e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x356>
 8003dac:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6213      	str	r3, [r2, #32]
 8003db8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x36e>
 8003dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4a5a      	ldr	r2, [pc, #360]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6213      	str	r3, [r2, #32]
 8003dd2:	4b58      	ldr	r3, [pc, #352]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a57      	ldr	r2, [pc, #348]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7fe fb4b 	bl	8002480 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fb47 	bl	8002480 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e0b1      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e04:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ee      	beq.n	8003dee <HAL_RCC_OscConfig+0x37e>
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e12:	f7fe fb35 	bl	8002480 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe fb31 	bl	8002480 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e09b      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e30:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d105      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e42:	4b3c      	ldr	r3, [pc, #240]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a3b      	ldr	r2, [pc, #236]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8087 	beq.w	8003f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e58:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d061      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d146      	bne.n	8003efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6c:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe fb05 	bl	8002480 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7a:	f7fe fb01 	bl	8002480 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e06d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8c:	4b29      	ldr	r3, [pc, #164]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4921      	ldr	r1, [pc, #132]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a19      	ldr	r1, [r3, #32]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	491b      	ldr	r1, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe fad5 	bl	8002480 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe fad1 	bl	8002480 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x46a>
 8003ef8:	e035      	b.n	8003f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fe fabe 	bl	8002480 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe faba 	bl	8002480 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e026      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x498>
 8003f26:	e01e      	b.n	8003f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e019      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_OscConfig+0x500>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0d0      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d910      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b67      	ldr	r3, [pc, #412]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4965      	ldr	r1, [pc, #404]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4a52      	ldr	r2, [pc, #328]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d040      	beq.n	8004094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d115      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e073      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06b      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004052:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f023 0203 	bic.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4936      	ldr	r1, [pc, #216]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004064:	f7fe fa0c 	bl	8002480 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fe fa08 	bl	8002480 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e053      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 020c 	and.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d1eb      	bne.n	800406c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d210      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	4922      	ldr	r1, [pc, #136]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <HAL_RCC_ClockConfig+0x1cc>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_ClockConfig+0x1d0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe f96a 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40022000 	.word	0x40022000
 8004138:	40021000 	.word	0x40021000
 800413c:	0800a30c 	.word	0x0800a30c
 8004140:	20000044 	.word	0x20000044
 8004144:	20000048 	.word	0x20000048

08004148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004162:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x30>
 8004172:	2b08      	cmp	r3, #8
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x36>
 8004176:	e027      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004178:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800417a:	613b      	str	r3, [r7, #16]
      break;
 800417c:	e027      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0c9b      	lsrs	r3, r3, #18
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	0c5b      	lsrs	r3, r3, #17
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a0d      	ldr	r2, [pc, #52]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	fb03 f202 	mul.w	r2, r3, r2
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e004      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0c      	ldr	r2, [pc, #48]	@ (80041ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	613b      	str	r3, [r7, #16]
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ca:	613b      	str	r3, [r7, #16]
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	693b      	ldr	r3, [r7, #16]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	007a1200 	.word	0x007a1200
 80041e4:	0800a324 	.word	0x0800a324
 80041e8:	0800a334 	.word	0x0800a334
 80041ec:	003d0900 	.word	0x003d0900

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b02      	ldr	r3, [pc, #8]	@ (8004200 <HAL_RCC_GetHCLKFreq+0x10>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	20000044 	.word	0x20000044

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff2 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	0800a31c 	.word	0x0800a31c

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffde 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0adb      	lsrs	r3, r3, #11
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	0800a31c 	.word	0x0800a31c

08004254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <RCC_Delay+0x34>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <RCC_Delay+0x38>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	0a5b      	lsrs	r3, r3, #9
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004270:	bf00      	nop
  }
  while (Delay --);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f9      	bne.n	8004270 <RCC_Delay+0x1c>
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	20000044 	.word	0x20000044
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d07d      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042ac:	2300      	movs	r3, #0
 80042ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b0:	4b4f      	ldr	r3, [pc, #316]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b4c      	ldr	r3, [pc, #304]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a4b      	ldr	r2, [pc, #300]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	61d3      	str	r3, [r2, #28]
 80042c8:	4b49      	ldr	r3, [pc, #292]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	4b46      	ldr	r3, [pc, #280]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d118      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e4:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a42      	ldr	r2, [pc, #264]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f0:	f7fe f8c6 	bl	8002480 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fe f8c2 	bl	8002480 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e06d      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b3a      	ldr	r3, [pc, #232]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004316:	4b36      	ldr	r3, [pc, #216]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02e      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	429a      	cmp	r2, r3
 8004332:	d027      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004334:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800433e:	4b2e      	ldr	r3, [pc, #184]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004344:	4b2c      	ldr	r3, [pc, #176]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800434a:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d014      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fe f891 	bl	8002480 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	e00a      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fe f88d 	bl	8002480 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	d901      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e036      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ee      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4917      	ldr	r1, [pc, #92]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	4313      	orrs	r3, r2
 8004394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b4:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	490b      	ldr	r1, [pc, #44]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d2:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4904      	ldr	r1, [pc, #16]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42420440 	.word	0x42420440

080043fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b10      	cmp	r3, #16
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b10      	cmp	r3, #16
 8004422:	f200 808a 	bhi.w	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d045      	beq.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d075      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004432:	e082      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004434:	4b46      	ldr	r3, [pc, #280]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800443a:	4b45      	ldr	r3, [pc, #276]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07b      	beq.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	0c9b      	lsrs	r3, r3, #18
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	4a41      	ldr	r2, [pc, #260]	@ (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d015      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800445e:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	0c5b      	lsrs	r3, r3, #17
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	4a3b      	ldr	r2, [pc, #236]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004478:	4a38      	ldr	r2, [pc, #224]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e004      	b.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4a34      	ldr	r2, [pc, #208]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a0:	d102      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	61bb      	str	r3, [r7, #24]
      break;
 80044a6:	e04a      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
      break;
 80044b6:	e042      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c8:	d108      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80044d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e01f      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e6:	d109      	bne.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044f4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e00f      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004506:	d11c      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004508:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d016      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004514:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004518:	61bb      	str	r3, [r7, #24]
      break;
 800451a:	e012      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800451c:	e011      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800451e:	f7ff fe85 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8004522:	4602      	mov	r2, r0
 8004524:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0b9b      	lsrs	r3, r3, #14
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	61bb      	str	r3, [r7, #24]
      break;
 8004538:	e004      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004542:	bf00      	nop
    }
  }
  return (frequency);
 8004544:	69bb      	ldr	r3, [r7, #24]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	0800a338 	.word	0x0800a338
 8004558:	0800a348 	.word	0x0800a348
 800455c:	007a1200 	.word	0x007a1200
 8004560:	003d0900 	.word	0x003d0900
 8004564:	aaaaaaab 	.word	0xaaaaaaab

08004568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e041      	b.n	80045fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fe3c 	bl	800220c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 faa6 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d001      	beq.n	8004620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e032      	b.n	8004686 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <HAL_TIM_Base_Start+0x88>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_TIM_Base_Start+0x48>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463a:	d009      	beq.n	8004650 <HAL_TIM_Base_Start+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a14      	ldr	r2, [pc, #80]	@ (8004694 <HAL_TIM_Base_Start+0x8c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_TIM_Base_Start+0x48>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <HAL_TIM_Base_Start+0x90>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d111      	bne.n	8004674 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d010      	beq.n	8004684 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	e007      	b.n	8004684 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800

0800469c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e03a      	b.n	800472a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_TIM_Base_Start_IT+0x98>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046de:	d009      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a14      	ldr	r2, [pc, #80]	@ (8004738 <HAL_TIM_Base_Start_IT+0x9c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x58>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a13      	ldr	r2, [pc, #76]	@ (800473c <HAL_TIM_Base_Start_IT+0xa0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d111      	bne.n	8004718 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d010      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	e007      	b.n	8004728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800

08004740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d020      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0202 	mvn.w	r2, #2
 8004774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f998 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f98b 	bl	8004aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f99a 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01b      	beq.n	80047f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0204 	mvn.w	r2, #4
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f972 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f965 	bl	8004aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f974 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d020      	beq.n	800483c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0208 	mvn.w	r2, #8
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2204      	movs	r2, #4
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f94c 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f93f 	bl	8004aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f94e 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0210 	mvn.w	r2, #16
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2208      	movs	r2, #8
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f926 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f919 	bl	8004aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f928 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0201 	mvn.w	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd f9be 	bl	8001c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa7f 	bl	8004dce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8f8 	bl	8004ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00c      	beq.n	8004918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0220 	mvn.w	r2, #32
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa52 	bl	8004dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIM_ConfigClockSource+0x1c>
 8004938:	2302      	movs	r3, #2
 800493a:	e0b4      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x186>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800495a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004974:	d03e      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497a:	f200 8087 	bhi.w	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004982:	f000 8086 	beq.w	8004a92 <HAL_TIM_ConfigClockSource+0x172>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498a:	d87f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b70      	cmp	r3, #112	@ 0x70
 800498e:	d01a      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004990:	2b70      	cmp	r3, #112	@ 0x70
 8004992:	d87b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b60      	cmp	r3, #96	@ 0x60
 8004996:	d050      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x11a>
 8004998:	2b60      	cmp	r3, #96	@ 0x60
 800499a:	d877      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b50      	cmp	r3, #80	@ 0x50
 800499e:	d03c      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xfa>
 80049a0:	2b50      	cmp	r3, #80	@ 0x50
 80049a2:	d873      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b40      	cmp	r3, #64	@ 0x40
 80049a6:	d058      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x13a>
 80049a8:	2b40      	cmp	r3, #64	@ 0x40
 80049aa:	d86f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b30      	cmp	r3, #48	@ 0x30
 80049ae:	d064      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049b0:	2b30      	cmp	r3, #48	@ 0x30
 80049b2:	d86b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d060      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d867      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d05a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049c4:	e062      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d6:	f000 f974 	bl	8004cc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	609a      	str	r2, [r3, #8]
      break;
 80049f2:	e04f      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	f000 f95d 	bl	8004cc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a16:	609a      	str	r2, [r3, #8]
      break;
 8004a18:	e03c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 f8d4 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2150      	movs	r1, #80	@ 0x50
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f92b 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a38:	e02c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 f8f2 	bl	8004c30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2160      	movs	r1, #96	@ 0x60
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f91b 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a58:	e01c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a66:	461a      	mov	r2, r3
 8004a68:	f000 f8b4 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2140      	movs	r1, #64	@ 0x40
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f90b 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a78:	e00c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f000 f902 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e003      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a90:	e000      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
	...

08004af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc8 <TIM_Base_SetConfig+0xd0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0x30>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0x30>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bcc <TIM_Base_SetConfig+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0x30>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd0 <TIM_Base_SetConfig+0xd8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d108      	bne.n	8004b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	@ (8004bc8 <TIM_Base_SetConfig+0xd0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x62>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x62>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <TIM_Base_SetConfig+0xd4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x62>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <TIM_Base_SetConfig+0xd8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc8 <TIM_Base_SetConfig+0xd0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d103      	bne.n	8004ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0210 	bic.w	r2, r3, #16
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	031b      	lsls	r3, r3, #12
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f043 0307 	orr.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	609a      	str	r2, [r3, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	609a      	str	r2, [r3, #8]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e046      	b.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a16      	ldr	r2, [pc, #88]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d009      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a12      	ldr	r2, [pc, #72]	@ (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a10      	ldr	r2, [pc, #64]	@ (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10c      	bne.n	8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800

08004dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e042      	b.n	8004e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd fa6a 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	@ 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fded 	bl	8005a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d175      	bne.n	8004f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Transmit+0x2c>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e06e      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2221      	movs	r2, #33	@ 0x21
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fadf 	bl	8002480 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed8:	d108      	bne.n	8004eec <HAL_UART_Transmit+0x6c>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e003      	b.n	8004ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ef4:	e02e      	b.n	8004f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	@ 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fb52 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e03a      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3302      	adds	r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e007      	b.n	8004f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3301      	adds	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1cb      	bne.n	8004ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2140      	movs	r1, #64	@ 0x40
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fb1e 	bl	80055aa <UART_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b08c      	sub	sp, #48	@ 0x30
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d14a      	bne.n	8005046 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e043      	b.n	8005048 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fb42 	bl	800565c <UART_Start_Receive_IT>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d12c      	bne.n	8005040 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d125      	bne.n	800503a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	617b      	str	r3, [r7, #20]
   return(result);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005024:	627a      	str	r2, [r7, #36]	@ 0x24
 8005026:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	61fb      	str	r3, [r7, #28]
   return(result);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005038:	e002      	b.n	8005040 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005044:	e000      	b.n	8005048 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	@ 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b0ba      	sub	sp, #232	@ 0xe8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800508e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
 80050a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fbea 	bl	8005888 <UART_Receive_IT>
      return;
 80050b4:	e25b      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80de 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
 80050c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80d1 	beq.w	800527c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
 80050e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d011      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f043 0208 	orr.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 81f2 	beq.w	8005564 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fb75 	bl	8005888 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_UART_IRQHandler+0x17a>
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04f      	beq.n	800526a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa7f 	bl	80056ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d041      	beq.n	8005262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800520a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800520e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1d9      	bne.n	80051de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	4a7e      	ldr	r2, [pc, #504]	@ (8005430 <HAL_UART_IRQHandler+0x3e0>)
 8005238:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe f89c 	bl	800337c <HAL_DMA_Abort_IT>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00e      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f99c 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e00a      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f998 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	e006      	b.n	8005278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f994 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005276:	e175      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	bf00      	nop
    return;
 800527a:	e173      	b.n	8005564 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 814f 	bne.w	8005524 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8148 	beq.w	8005524 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8141 	beq.w	8005524 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80b6 	beq.w	8005434 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8145 	beq.w	8005568 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052e6:	429a      	cmp	r2, r3
 80052e8:	f080 813e 	bcs.w	8005568 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	f000 8088 	beq.w	8005410 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005316:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800531a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800531e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800532c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005338:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1d9      	bne.n	8005300 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800535c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005370:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005374:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005378:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e1      	bne.n	800534c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e3      	bne.n	8005388 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e0:	f023 0310 	bic.w	r3, r3, #16
 80053e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e3      	bne.n	80053ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd ff7a 	bl	8003304 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541e:	b29b      	uxth	r3, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fc92 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800542c:	e09c      	b.n	8005568 <HAL_UART_IRQHandler+0x518>
 800542e:	bf00      	nop
 8005430:	08005793 	.word	0x08005793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800543c:	b29b      	uxth	r3, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 808e 	beq.w	800556c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8089 	beq.w	800556c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800546a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005470:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800547e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	623b      	str	r3, [r7, #32]
   return(result);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	617b      	str	r3, [r7, #20]
   return(result);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e3      	bne.n	80054d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005516:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fc fc17 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005522:	e023      	b.n	800556c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_UART_IRQHandler+0x4f4>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f93c 	bl	80057ba <UART_Transmit_IT>
    return;
 8005542:	e014      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <HAL_UART_IRQHandler+0x51e>
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f97b 	bl	8005858 <UART_EndTransmit_IT>
    return;
 8005562:	e004      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
    return;
 8005564:	bf00      	nop
 8005566:	e002      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
      return;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_UART_IRQHandler+0x51e>
      return;
 800556c:	bf00      	nop
  }
}
 800556e:	37e8      	adds	r7, #232	@ 0xe8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	4613      	mov	r3, r2
 80055b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ba:	e03b      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d037      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c4:	f7fc ff5c 	bl	8002480 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <UART_WaitOnFlagUntilTimeout+0x30>
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e03a      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d023      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b80      	cmp	r3, #128	@ 0x80
 80055f0:	d020      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b40      	cmp	r3, #64	@ 0x40
 80055f6:	d01d      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b08      	cmp	r3, #8
 8005604:	d116      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f856 	bl	80056ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2208      	movs	r2, #8
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e00f      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d0b4      	beq.n	80055bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2222      	movs	r2, #34	@ 0x22
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0220 	orr.w	r2, r2, #32
 80056c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b095      	sub	sp, #84	@ 0x54
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3314      	adds	r3, #20
 8005710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	61fb      	str	r3, [r7, #28]
   return(result);
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800572a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	2b01      	cmp	r3, #1
 8005744:	d119      	bne.n	800577a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	60bb      	str	r3, [r7, #8]
   return(result);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f023 0310 	bic.w	r3, r3, #16
 800575c:	647b      	str	r3, [r7, #68]	@ 0x44
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005766:	61ba      	str	r2, [r7, #24]
 8005768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6979      	ldr	r1, [r7, #20]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	613b      	str	r3, [r7, #16]
   return(result);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005788:	bf00      	nop
 800578a:	3754      	adds	r7, #84	@ 0x54
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff fef3 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b21      	cmp	r3, #33	@ 0x21
 80057cc:	d13e      	bne.n	800584c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d6:	d114      	bne.n	8005802 <UART_Transmit_IT+0x48>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]
 8005800:	e008      	b.n	8005814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6211      	str	r1, [r2, #32]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4619      	mov	r1, r3
 8005822:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800586e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fe7b 	bl	8005574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	@ 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b22      	cmp	r3, #34	@ 0x22
 800589a:	f040 80ae 	bne.w	80059fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a6:	d117      	bne.n	80058d8 <UART_Receive_IT+0x50>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d113      	bne.n	80058d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80058d6:	e026      	b.n	8005926 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ea:	d007      	beq.n	80058fc <UART_Receive_IT+0x74>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <UART_Receive_IT+0x82>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e008      	b.n	800591c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29b      	uxth	r3, r3
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4619      	mov	r1, r3
 8005934:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005936:	2b00      	cmp	r3, #0
 8005938:	d15d      	bne.n	80059f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0220 	bic.w	r2, r2, #32
 8005948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	2b01      	cmp	r3, #1
 800597e:	d135      	bne.n	80059ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	613b      	str	r3, [r7, #16]
   return(result);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f023 0310 	bic.w	r3, r3, #16
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a6:	623a      	str	r2, [r7, #32]
 80059a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	69f9      	ldr	r1, [r7, #28]
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e5      	bne.n	8005986 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d10a      	bne.n	80059de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fc f9b3 	bl	8001d50 <HAL_UARTEx_RxEventCallback>
 80059ea:	e002      	b.n	80059f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff fdca 	bl	8005586 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e002      	b.n	80059fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3730      	adds	r7, #48	@ 0x30
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a3e:	f023 030c 	bic.w	r3, r3, #12
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <UART_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d103      	bne.n	8005a74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fe fbde 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	e002      	b.n	8005a7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fbc6 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8005a78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	4a22      	ldr	r2, [pc, #136]	@ (8005b1c <UART_SetConfig+0x118>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	0119      	lsls	r1, r3, #4
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b1c <UART_SetConfig+0x118>)
 8005ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2064      	movs	r0, #100	@ 0x64
 8005aba:	fb00 f303 	mul.w	r3, r0, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	3332      	adds	r3, #50	@ 0x32
 8005ac4:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <UART_SetConfig+0x118>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ad0:	4419      	add	r1, r3
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009a      	lsls	r2, r3, #2
 8005adc:	441a      	add	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <UART_SetConfig+0x118>)
 8005aea:	fba3 0302 	umull	r0, r3, r3, r2
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	2064      	movs	r0, #100	@ 0x64
 8005af2:	fb00 f303 	mul.w	r3, r0, r3
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	3332      	adds	r3, #50	@ 0x32
 8005afc:	4a07      	ldr	r2, [pc, #28]	@ (8005b1c <UART_SetConfig+0x118>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40013800 	.word	0x40013800
 8005b1c:	51eb851f 	.word	0x51eb851f

08005b20 <__cvt>:
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b26:	461d      	mov	r5, r3
 8005b28:	bfbb      	ittet	lt
 8005b2a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005b2e:	461d      	movlt	r5, r3
 8005b30:	2300      	movge	r3, #0
 8005b32:	232d      	movlt	r3, #45	@ 0x2d
 8005b34:	b088      	sub	sp, #32
 8005b36:	4614      	mov	r4, r2
 8005b38:	bfb8      	it	lt
 8005b3a:	4614      	movlt	r4, r2
 8005b3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005b40:	7013      	strb	r3, [r2, #0]
 8005b42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005b48:	f023 0820 	bic.w	r8, r3, #32
 8005b4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b50:	d005      	beq.n	8005b5e <__cvt+0x3e>
 8005b52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b56:	d100      	bne.n	8005b5a <__cvt+0x3a>
 8005b58:	3601      	adds	r6, #1
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e000      	b.n	8005b60 <__cvt+0x40>
 8005b5e:	2303      	movs	r3, #3
 8005b60:	aa07      	add	r2, sp, #28
 8005b62:	9204      	str	r2, [sp, #16]
 8005b64:	aa06      	add	r2, sp, #24
 8005b66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b6a:	e9cd 3600 	strd	r3, r6, [sp]
 8005b6e:	4622      	mov	r2, r4
 8005b70:	462b      	mov	r3, r5
 8005b72:	f001 f88d 	bl	8006c90 <_dtoa_r>
 8005b76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	d119      	bne.n	8005bb2 <__cvt+0x92>
 8005b7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b80:	07db      	lsls	r3, r3, #31
 8005b82:	d50e      	bpl.n	8005ba2 <__cvt+0x82>
 8005b84:	eb00 0906 	add.w	r9, r0, r6
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	f7fa ff0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005b94:	b108      	cbz	r0, 8005b9a <__cvt+0x7a>
 8005b96:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b9a:	2230      	movs	r2, #48	@ 0x30
 8005b9c:	9b07      	ldr	r3, [sp, #28]
 8005b9e:	454b      	cmp	r3, r9
 8005ba0:	d31e      	bcc.n	8005be0 <__cvt+0xc0>
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005ba8:	1bdb      	subs	r3, r3, r7
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	b008      	add	sp, #32
 8005bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bb6:	eb00 0906 	add.w	r9, r0, r6
 8005bba:	d1e5      	bne.n	8005b88 <__cvt+0x68>
 8005bbc:	7803      	ldrb	r3, [r0, #0]
 8005bbe:	2b30      	cmp	r3, #48	@ 0x30
 8005bc0:	d10a      	bne.n	8005bd8 <__cvt+0xb8>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa feed 	bl	80009a8 <__aeabi_dcmpeq>
 8005bce:	b918      	cbnz	r0, 8005bd8 <__cvt+0xb8>
 8005bd0:	f1c6 0601 	rsb	r6, r6, #1
 8005bd4:	f8ca 6000 	str.w	r6, [sl]
 8005bd8:	f8da 3000 	ldr.w	r3, [sl]
 8005bdc:	4499      	add	r9, r3
 8005bde:	e7d3      	b.n	8005b88 <__cvt+0x68>
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	9107      	str	r1, [sp, #28]
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e7d9      	b.n	8005b9c <__cvt+0x7c>

08005be8 <__exponent>:
 8005be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bea:	2900      	cmp	r1, #0
 8005bec:	bfb6      	itet	lt
 8005bee:	232d      	movlt	r3, #45	@ 0x2d
 8005bf0:	232b      	movge	r3, #43	@ 0x2b
 8005bf2:	4249      	neglt	r1, r1
 8005bf4:	2909      	cmp	r1, #9
 8005bf6:	7002      	strb	r2, [r0, #0]
 8005bf8:	7043      	strb	r3, [r0, #1]
 8005bfa:	dd29      	ble.n	8005c50 <__exponent+0x68>
 8005bfc:	f10d 0307 	add.w	r3, sp, #7
 8005c00:	461d      	mov	r5, r3
 8005c02:	270a      	movs	r7, #10
 8005c04:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c08:	461a      	mov	r2, r3
 8005c0a:	fb07 1416 	mls	r4, r7, r6, r1
 8005c0e:	3430      	adds	r4, #48	@ 0x30
 8005c10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c14:	460c      	mov	r4, r1
 8005c16:	2c63      	cmp	r4, #99	@ 0x63
 8005c18:	4631      	mov	r1, r6
 8005c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c1e:	dcf1      	bgt.n	8005c04 <__exponent+0x1c>
 8005c20:	3130      	adds	r1, #48	@ 0x30
 8005c22:	1e94      	subs	r4, r2, #2
 8005c24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c28:	4623      	mov	r3, r4
 8005c2a:	1c41      	adds	r1, r0, #1
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	d30a      	bcc.n	8005c46 <__exponent+0x5e>
 8005c30:	f10d 0309 	add.w	r3, sp, #9
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	42ac      	cmp	r4, r5
 8005c38:	bf88      	it	hi
 8005c3a:	2300      	movhi	r3, #0
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	4403      	add	r3, r0
 8005c40:	1a18      	subs	r0, r3, r0
 8005c42:	b003      	add	sp, #12
 8005c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c4e:	e7ed      	b.n	8005c2c <__exponent+0x44>
 8005c50:	2330      	movs	r3, #48	@ 0x30
 8005c52:	3130      	adds	r1, #48	@ 0x30
 8005c54:	7083      	strb	r3, [r0, #2]
 8005c56:	70c1      	strb	r1, [r0, #3]
 8005c58:	1d03      	adds	r3, r0, #4
 8005c5a:	e7f1      	b.n	8005c40 <__exponent+0x58>

08005c5c <_printf_float>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	b091      	sub	sp, #68	@ 0x44
 8005c62:	460c      	mov	r4, r1
 8005c64:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005c68:	4616      	mov	r6, r2
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	f000 fefd 	bl	8006a6c <_localeconv_r>
 8005c72:	6803      	ldr	r3, [r0, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	9308      	str	r3, [sp, #32]
 8005c78:	f7fa fa6a 	bl	8000150 <strlen>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c80:	f8d8 3000 	ldr.w	r3, [r8]
 8005c84:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c86:	3307      	adds	r3, #7
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	f103 0208 	add.w	r2, r3, #8
 8005c90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c94:	f8d4 b000 	ldr.w	fp, [r4]
 8005c98:	f8c8 2000 	str.w	r2, [r8]
 8005c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ca0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ca6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005caa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f28 <_printf_float+0x2cc>)
 8005cb8:	f7fa fea8 	bl	8000a0c <__aeabi_dcmpun>
 8005cbc:	bb70      	cbnz	r0, 8005d1c <_printf_float+0xc0>
 8005cbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	4b98      	ldr	r3, [pc, #608]	@ (8005f28 <_printf_float+0x2cc>)
 8005cc8:	f7fa fe82 	bl	80009d0 <__aeabi_dcmple>
 8005ccc:	bb30      	cbnz	r0, 8005d1c <_printf_float+0xc0>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	f7fa fe71 	bl	80009bc <__aeabi_dcmplt>
 8005cda:	b110      	cbz	r0, 8005ce2 <_printf_float+0x86>
 8005cdc:	232d      	movs	r3, #45	@ 0x2d
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ce2:	4a92      	ldr	r2, [pc, #584]	@ (8005f2c <_printf_float+0x2d0>)
 8005ce4:	4b92      	ldr	r3, [pc, #584]	@ (8005f30 <_printf_float+0x2d4>)
 8005ce6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005cea:	bf8c      	ite	hi
 8005cec:	4690      	movhi	r8, r2
 8005cee:	4698      	movls	r8, r3
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f04f 0900 	mov.w	r9, #0
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	f02b 0304 	bic.w	r3, fp, #4
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	4633      	mov	r3, r6
 8005d00:	4621      	mov	r1, r4
 8005d02:	4628      	mov	r0, r5
 8005d04:	9700      	str	r7, [sp, #0]
 8005d06:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d08:	f000 f9d4 	bl	80060b4 <_printf_common>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f040 8090 	bne.w	8005e32 <_printf_float+0x1d6>
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	b011      	add	sp, #68	@ 0x44
 8005d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fe72 	bl	8000a0c <__aeabi_dcmpun>
 8005d28:	b148      	cbz	r0, 8005d3e <_printf_float+0xe2>
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bfb8      	it	lt
 8005d30:	232d      	movlt	r3, #45	@ 0x2d
 8005d32:	4a80      	ldr	r2, [pc, #512]	@ (8005f34 <_printf_float+0x2d8>)
 8005d34:	bfb8      	it	lt
 8005d36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f38 <_printf_float+0x2dc>)
 8005d3c:	e7d3      	b.n	8005ce6 <_printf_float+0x8a>
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	d13f      	bne.n	8005dc8 <_printf_float+0x16c>
 8005d48:	2306      	movs	r3, #6
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	9206      	str	r2, [sp, #24]
 8005d56:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d58:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005d5c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005d5e:	9203      	str	r2, [sp, #12]
 8005d60:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005d64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4628      	mov	r0, r5
 8005d70:	464b      	mov	r3, r9
 8005d72:	910a      	str	r1, [sp, #40]	@ 0x28
 8005d74:	f7ff fed4 	bl	8005b20 <__cvt>
 8005d78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	2947      	cmp	r1, #71	@ 0x47
 8005d7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005d80:	d128      	bne.n	8005dd4 <_printf_float+0x178>
 8005d82:	1cc8      	adds	r0, r1, #3
 8005d84:	db02      	blt.n	8005d8c <_printf_float+0x130>
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	dd40      	ble.n	8005e0e <_printf_float+0x1b2>
 8005d8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d90:	fa5f fa8a 	uxtb.w	sl, sl
 8005d94:	4652      	mov	r2, sl
 8005d96:	3901      	subs	r1, #1
 8005d98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d9c:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d9e:	f7ff ff23 	bl	8005be8 <__exponent>
 8005da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005da4:	4681      	mov	r9, r0
 8005da6:	1813      	adds	r3, r2, r0
 8005da8:	2a01      	cmp	r2, #1
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	dc02      	bgt.n	8005db4 <_printf_float+0x158>
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	07d2      	lsls	r2, r2, #31
 8005db2:	d501      	bpl.n	8005db8 <_printf_float+0x15c>
 8005db4:	3301      	adds	r3, #1
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d09e      	beq.n	8005cfe <_printf_float+0xa2>
 8005dc0:	232d      	movs	r3, #45	@ 0x2d
 8005dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc6:	e79a      	b.n	8005cfe <_printf_float+0xa2>
 8005dc8:	2947      	cmp	r1, #71	@ 0x47
 8005dca:	d1bf      	bne.n	8005d4c <_printf_float+0xf0>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1bd      	bne.n	8005d4c <_printf_float+0xf0>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e7ba      	b.n	8005d4a <_printf_float+0xee>
 8005dd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dd8:	d9dc      	bls.n	8005d94 <_printf_float+0x138>
 8005dda:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005dde:	d118      	bne.n	8005e12 <_printf_float+0x1b6>
 8005de0:	2900      	cmp	r1, #0
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	dd0b      	ble.n	8005dfe <_printf_float+0x1a2>
 8005de6:	6121      	str	r1, [r4, #16]
 8005de8:	b913      	cbnz	r3, 8005df0 <_printf_float+0x194>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	07d0      	lsls	r0, r2, #31
 8005dee:	d502      	bpl.n	8005df6 <_printf_float+0x19a>
 8005df0:	3301      	adds	r3, #1
 8005df2:	440b      	add	r3, r1
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	f04f 0900 	mov.w	r9, #0
 8005dfa:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005dfc:	e7dc      	b.n	8005db8 <_printf_float+0x15c>
 8005dfe:	b913      	cbnz	r3, 8005e06 <_printf_float+0x1aa>
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	07d2      	lsls	r2, r2, #31
 8005e04:	d501      	bpl.n	8005e0a <_printf_float+0x1ae>
 8005e06:	3302      	adds	r3, #2
 8005e08:	e7f4      	b.n	8005df4 <_printf_float+0x198>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7f2      	b.n	8005df4 <_printf_float+0x198>
 8005e0e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e14:	4299      	cmp	r1, r3
 8005e16:	db05      	blt.n	8005e24 <_printf_float+0x1c8>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	6121      	str	r1, [r4, #16]
 8005e1c:	07d8      	lsls	r0, r3, #31
 8005e1e:	d5ea      	bpl.n	8005df6 <_printf_float+0x19a>
 8005e20:	1c4b      	adds	r3, r1, #1
 8005e22:	e7e7      	b.n	8005df4 <_printf_float+0x198>
 8005e24:	2900      	cmp	r1, #0
 8005e26:	bfcc      	ite	gt
 8005e28:	2201      	movgt	r2, #1
 8005e2a:	f1c1 0202 	rsble	r2, r1, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	e7e0      	b.n	8005df4 <_printf_float+0x198>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	055a      	lsls	r2, r3, #21
 8005e36:	d407      	bmi.n	8005e48 <_printf_float+0x1ec>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	d12b      	bne.n	8005e9e <_printf_float+0x242>
 8005e46:	e764      	b.n	8005d12 <_printf_float+0xb6>
 8005e48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e4c:	f240 80dc 	bls.w	8006008 <_printf_float+0x3ac>
 8005e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	f7fa fda6 	bl	80009a8 <__aeabi_dcmpeq>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d033      	beq.n	8005ec8 <_printf_float+0x26c>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <_printf_float+0x2e0>)
 8005e68:	47b8      	blx	r7
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f43f af51 	beq.w	8005d12 <_printf_float+0xb6>
 8005e70:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005e74:	4543      	cmp	r3, r8
 8005e76:	db02      	blt.n	8005e7e <_printf_float+0x222>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07d8      	lsls	r0, r3, #31
 8005e7c:	d50f      	bpl.n	8005e9e <_printf_float+0x242>
 8005e7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f af42 	beq.w	8005d12 <_printf_float+0xb6>
 8005e8e:	f04f 0900 	mov.w	r9, #0
 8005e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e96:	f104 0a1a 	add.w	sl, r4, #26
 8005e9a:	45c8      	cmp	r8, r9
 8005e9c:	dc09      	bgt.n	8005eb2 <_printf_float+0x256>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	079b      	lsls	r3, r3, #30
 8005ea2:	f100 8102 	bmi.w	80060aa <_printf_float+0x44e>
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	bfb8      	it	lt
 8005eae:	4618      	movlt	r0, r3
 8005eb0:	e731      	b.n	8005d16 <_printf_float+0xba>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f af28 	beq.w	8005d12 <_printf_float+0xb6>
 8005ec2:	f109 0901 	add.w	r9, r9, #1
 8005ec6:	e7e8      	b.n	8005e9a <_printf_float+0x23e>
 8005ec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dc38      	bgt.n	8005f40 <_printf_float+0x2e4>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <_printf_float+0x2e0>)
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f43f af1a 	beq.w	8005d12 <_printf_float+0xb6>
 8005ede:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005ee2:	ea59 0303 	orrs.w	r3, r9, r3
 8005ee6:	d102      	bne.n	8005eee <_printf_float+0x292>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07d9      	lsls	r1, r3, #31
 8005eec:	d5d7      	bpl.n	8005e9e <_printf_float+0x242>
 8005eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f af0a 	beq.w	8005d12 <_printf_float+0xb6>
 8005efe:	f04f 0a00 	mov.w	sl, #0
 8005f02:	f104 0b1a 	add.w	fp, r4, #26
 8005f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f08:	425b      	negs	r3, r3
 8005f0a:	4553      	cmp	r3, sl
 8005f0c:	dc01      	bgt.n	8005f12 <_printf_float+0x2b6>
 8005f0e:	464b      	mov	r3, r9
 8005f10:	e793      	b.n	8005e3a <_printf_float+0x1de>
 8005f12:	2301      	movs	r3, #1
 8005f14:	465a      	mov	r2, fp
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f aef8 	beq.w	8005d12 <_printf_float+0xb6>
 8005f22:	f10a 0a01 	add.w	sl, sl, #1
 8005f26:	e7ee      	b.n	8005f06 <_printf_float+0x2aa>
 8005f28:	7fefffff 	.word	0x7fefffff
 8005f2c:	0800a34e 	.word	0x0800a34e
 8005f30:	0800a34a 	.word	0x0800a34a
 8005f34:	0800a356 	.word	0x0800a356
 8005f38:	0800a352 	.word	0x0800a352
 8005f3c:	0800a35a 	.word	0x0800a35a
 8005f40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f42:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f46:	4553      	cmp	r3, sl
 8005f48:	bfa8      	it	ge
 8005f4a:	4653      	movge	r3, sl
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	4699      	mov	r9, r3
 8005f50:	dc36      	bgt.n	8005fc0 <_printf_float+0x364>
 8005f52:	f04f 0b00 	mov.w	fp, #0
 8005f56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f5a:	f104 021a 	add.w	r2, r4, #26
 8005f5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f62:	eba3 0309 	sub.w	r3, r3, r9
 8005f66:	455b      	cmp	r3, fp
 8005f68:	dc31      	bgt.n	8005fce <_printf_float+0x372>
 8005f6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f6c:	459a      	cmp	sl, r3
 8005f6e:	dc3a      	bgt.n	8005fe6 <_printf_float+0x38a>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07da      	lsls	r2, r3, #31
 8005f74:	d437      	bmi.n	8005fe6 <_printf_float+0x38a>
 8005f76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f78:	ebaa 0903 	sub.w	r9, sl, r3
 8005f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f7e:	ebaa 0303 	sub.w	r3, sl, r3
 8005f82:	4599      	cmp	r9, r3
 8005f84:	bfa8      	it	ge
 8005f86:	4699      	movge	r9, r3
 8005f88:	f1b9 0f00 	cmp.w	r9, #0
 8005f8c:	dc33      	bgt.n	8005ff6 <_printf_float+0x39a>
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f96:	f104 0b1a 	add.w	fp, r4, #26
 8005f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa0:	eba3 0309 	sub.w	r3, r3, r9
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	f77f af7a 	ble.w	8005e9e <_printf_float+0x242>
 8005faa:	2301      	movs	r3, #1
 8005fac:	465a      	mov	r2, fp
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f43f aeac 	beq.w	8005d12 <_printf_float+0xb6>
 8005fba:	f108 0801 	add.w	r8, r8, #1
 8005fbe:	e7ec      	b.n	8005f9a <_printf_float+0x33e>
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d1c2      	bne.n	8005f52 <_printf_float+0x2f6>
 8005fcc:	e6a1      	b.n	8005d12 <_printf_float+0xb6>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	920a      	str	r2, [sp, #40]	@ 0x28
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae9a 	beq.w	8005d12 <_printf_float+0xb6>
 8005fde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe0:	f10b 0b01 	add.w	fp, fp, #1
 8005fe4:	e7bb      	b.n	8005f5e <_printf_float+0x302>
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d1c0      	bne.n	8005f76 <_printf_float+0x31a>
 8005ff4:	e68d      	b.n	8005d12 <_printf_float+0xb6>
 8005ff6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	4442      	add	r2, r8
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	d1c3      	bne.n	8005f8e <_printf_float+0x332>
 8006006:	e684      	b.n	8005d12 <_printf_float+0xb6>
 8006008:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800600c:	f1ba 0f01 	cmp.w	sl, #1
 8006010:	dc01      	bgt.n	8006016 <_printf_float+0x3ba>
 8006012:	07db      	lsls	r3, r3, #31
 8006014:	d536      	bpl.n	8006084 <_printf_float+0x428>
 8006016:	2301      	movs	r3, #1
 8006018:	4642      	mov	r2, r8
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	f43f ae76 	beq.w	8005d12 <_printf_float+0xb6>
 8006026:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae6e 	beq.w	8005d12 <_printf_float+0xb6>
 8006036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006042:	f7fa fcb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006046:	b9c0      	cbnz	r0, 800607a <_printf_float+0x41e>
 8006048:	4653      	mov	r3, sl
 800604a:	f108 0201 	add.w	r2, r8, #1
 800604e:	4631      	mov	r1, r6
 8006050:	4628      	mov	r0, r5
 8006052:	47b8      	blx	r7
 8006054:	3001      	adds	r0, #1
 8006056:	d10c      	bne.n	8006072 <_printf_float+0x416>
 8006058:	e65b      	b.n	8005d12 <_printf_float+0xb6>
 800605a:	2301      	movs	r3, #1
 800605c:	465a      	mov	r2, fp
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f ae54 	beq.w	8005d12 <_printf_float+0xb6>
 800606a:	f108 0801 	add.w	r8, r8, #1
 800606e:	45d0      	cmp	r8, sl
 8006070:	dbf3      	blt.n	800605a <_printf_float+0x3fe>
 8006072:	464b      	mov	r3, r9
 8006074:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006078:	e6e0      	b.n	8005e3c <_printf_float+0x1e0>
 800607a:	f04f 0800 	mov.w	r8, #0
 800607e:	f104 0b1a 	add.w	fp, r4, #26
 8006082:	e7f4      	b.n	800606e <_printf_float+0x412>
 8006084:	2301      	movs	r3, #1
 8006086:	4642      	mov	r2, r8
 8006088:	e7e1      	b.n	800604e <_printf_float+0x3f2>
 800608a:	2301      	movs	r3, #1
 800608c:	464a      	mov	r2, r9
 800608e:	4631      	mov	r1, r6
 8006090:	4628      	mov	r0, r5
 8006092:	47b8      	blx	r7
 8006094:	3001      	adds	r0, #1
 8006096:	f43f ae3c 	beq.w	8005d12 <_printf_float+0xb6>
 800609a:	f108 0801 	add.w	r8, r8, #1
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80060a2:	1a5b      	subs	r3, r3, r1
 80060a4:	4543      	cmp	r3, r8
 80060a6:	dcf0      	bgt.n	800608a <_printf_float+0x42e>
 80060a8:	e6fd      	b.n	8005ea6 <_printf_float+0x24a>
 80060aa:	f04f 0800 	mov.w	r8, #0
 80060ae:	f104 0919 	add.w	r9, r4, #25
 80060b2:	e7f4      	b.n	800609e <_printf_float+0x442>

080060b4 <_printf_common>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	4616      	mov	r6, r2
 80060ba:	4698      	mov	r8, r3
 80060bc:	688a      	ldr	r2, [r1, #8]
 80060be:	690b      	ldr	r3, [r1, #16]
 80060c0:	4607      	mov	r7, r0
 80060c2:	4293      	cmp	r3, r2
 80060c4:	bfb8      	it	lt
 80060c6:	4613      	movlt	r3, r2
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060ce:	460c      	mov	r4, r1
 80060d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060d4:	b10a      	cbz	r2, 80060da <_printf_common+0x26>
 80060d6:	3301      	adds	r3, #1
 80060d8:	6033      	str	r3, [r6, #0]
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	0699      	lsls	r1, r3, #26
 80060de:	bf42      	ittt	mi
 80060e0:	6833      	ldrmi	r3, [r6, #0]
 80060e2:	3302      	addmi	r3, #2
 80060e4:	6033      	strmi	r3, [r6, #0]
 80060e6:	6825      	ldr	r5, [r4, #0]
 80060e8:	f015 0506 	ands.w	r5, r5, #6
 80060ec:	d106      	bne.n	80060fc <_printf_common+0x48>
 80060ee:	f104 0a19 	add.w	sl, r4, #25
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	6832      	ldr	r2, [r6, #0]
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	dc2b      	bgt.n	8006154 <_printf_common+0xa0>
 80060fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	3b00      	subs	r3, #0
 8006104:	bf18      	it	ne
 8006106:	2301      	movne	r3, #1
 8006108:	0692      	lsls	r2, r2, #26
 800610a:	d430      	bmi.n	800616e <_printf_common+0xba>
 800610c:	4641      	mov	r1, r8
 800610e:	4638      	mov	r0, r7
 8006110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006114:	47c8      	blx	r9
 8006116:	3001      	adds	r0, #1
 8006118:	d023      	beq.n	8006162 <_printf_common+0xae>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	6922      	ldr	r2, [r4, #16]
 800611e:	f003 0306 	and.w	r3, r3, #6
 8006122:	2b04      	cmp	r3, #4
 8006124:	bf14      	ite	ne
 8006126:	2500      	movne	r5, #0
 8006128:	6833      	ldreq	r3, [r6, #0]
 800612a:	f04f 0600 	mov.w	r6, #0
 800612e:	bf08      	it	eq
 8006130:	68e5      	ldreq	r5, [r4, #12]
 8006132:	f104 041a 	add.w	r4, r4, #26
 8006136:	bf08      	it	eq
 8006138:	1aed      	subeq	r5, r5, r3
 800613a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800613e:	bf08      	it	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	4293      	cmp	r3, r2
 8006146:	bfc4      	itt	gt
 8006148:	1a9b      	subgt	r3, r3, r2
 800614a:	18ed      	addgt	r5, r5, r3
 800614c:	42b5      	cmp	r5, r6
 800614e:	d11a      	bne.n	8006186 <_printf_common+0xd2>
 8006150:	2000      	movs	r0, #0
 8006152:	e008      	b.n	8006166 <_printf_common+0xb2>
 8006154:	2301      	movs	r3, #1
 8006156:	4652      	mov	r2, sl
 8006158:	4641      	mov	r1, r8
 800615a:	4638      	mov	r0, r7
 800615c:	47c8      	blx	r9
 800615e:	3001      	adds	r0, #1
 8006160:	d103      	bne.n	800616a <_printf_common+0xb6>
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	3501      	adds	r5, #1
 800616c:	e7c1      	b.n	80060f2 <_printf_common+0x3e>
 800616e:	2030      	movs	r0, #48	@ 0x30
 8006170:	18e1      	adds	r1, r4, r3
 8006172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800617c:	4422      	add	r2, r4
 800617e:	3302      	adds	r3, #2
 8006180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006184:	e7c2      	b.n	800610c <_printf_common+0x58>
 8006186:	2301      	movs	r3, #1
 8006188:	4622      	mov	r2, r4
 800618a:	4641      	mov	r1, r8
 800618c:	4638      	mov	r0, r7
 800618e:	47c8      	blx	r9
 8006190:	3001      	adds	r0, #1
 8006192:	d0e6      	beq.n	8006162 <_printf_common+0xae>
 8006194:	3601      	adds	r6, #1
 8006196:	e7d9      	b.n	800614c <_printf_common+0x98>

08006198 <_printf_i>:
 8006198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	7e0f      	ldrb	r7, [r1, #24]
 800619e:	4691      	mov	r9, r2
 80061a0:	2f78      	cmp	r7, #120	@ 0x78
 80061a2:	4680      	mov	r8, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	469a      	mov	sl, r3
 80061a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ae:	d807      	bhi.n	80061c0 <_printf_i+0x28>
 80061b0:	2f62      	cmp	r7, #98	@ 0x62
 80061b2:	d80a      	bhi.n	80061ca <_printf_i+0x32>
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	f000 80d1 	beq.w	800635c <_printf_i+0x1c4>
 80061ba:	2f58      	cmp	r7, #88	@ 0x58
 80061bc:	f000 80b8 	beq.w	8006330 <_printf_i+0x198>
 80061c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061c8:	e03a      	b.n	8006240 <_printf_i+0xa8>
 80061ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ce:	2b15      	cmp	r3, #21
 80061d0:	d8f6      	bhi.n	80061c0 <_printf_i+0x28>
 80061d2:	a101      	add	r1, pc, #4	@ (adr r1, 80061d8 <_printf_i+0x40>)
 80061d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006245 	.word	0x08006245
 80061e0:	080061c1 	.word	0x080061c1
 80061e4:	080061c1 	.word	0x080061c1
 80061e8:	080061c1 	.word	0x080061c1
 80061ec:	080061c1 	.word	0x080061c1
 80061f0:	08006245 	.word	0x08006245
 80061f4:	080061c1 	.word	0x080061c1
 80061f8:	080061c1 	.word	0x080061c1
 80061fc:	080061c1 	.word	0x080061c1
 8006200:	080061c1 	.word	0x080061c1
 8006204:	08006343 	.word	0x08006343
 8006208:	0800626f 	.word	0x0800626f
 800620c:	080062fd 	.word	0x080062fd
 8006210:	080061c1 	.word	0x080061c1
 8006214:	080061c1 	.word	0x080061c1
 8006218:	08006365 	.word	0x08006365
 800621c:	080061c1 	.word	0x080061c1
 8006220:	0800626f 	.word	0x0800626f
 8006224:	080061c1 	.word	0x080061c1
 8006228:	080061c1 	.word	0x080061c1
 800622c:	08006305 	.word	0x08006305
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6032      	str	r2, [r6, #0]
 8006238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800623c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006240:	2301      	movs	r3, #1
 8006242:	e09c      	b.n	800637e <_printf_i+0x1e6>
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	1d19      	adds	r1, r3, #4
 800624a:	6031      	str	r1, [r6, #0]
 800624c:	0606      	lsls	r6, r0, #24
 800624e:	d501      	bpl.n	8006254 <_printf_i+0xbc>
 8006250:	681d      	ldr	r5, [r3, #0]
 8006252:	e003      	b.n	800625c <_printf_i+0xc4>
 8006254:	0645      	lsls	r5, r0, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0xb8>
 8006258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800625c:	2d00      	cmp	r5, #0
 800625e:	da03      	bge.n	8006268 <_printf_i+0xd0>
 8006260:	232d      	movs	r3, #45	@ 0x2d
 8006262:	426d      	negs	r5, r5
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006268:	230a      	movs	r3, #10
 800626a:	4858      	ldr	r0, [pc, #352]	@ (80063cc <_printf_i+0x234>)
 800626c:	e011      	b.n	8006292 <_printf_i+0xfa>
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	6833      	ldr	r3, [r6, #0]
 8006272:	0608      	lsls	r0, r1, #24
 8006274:	f853 5b04 	ldr.w	r5, [r3], #4
 8006278:	d402      	bmi.n	8006280 <_printf_i+0xe8>
 800627a:	0649      	lsls	r1, r1, #25
 800627c:	bf48      	it	mi
 800627e:	b2ad      	uxthmi	r5, r5
 8006280:	2f6f      	cmp	r7, #111	@ 0x6f
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	bf14      	ite	ne
 8006286:	230a      	movne	r3, #10
 8006288:	2308      	moveq	r3, #8
 800628a:	4850      	ldr	r0, [pc, #320]	@ (80063cc <_printf_i+0x234>)
 800628c:	2100      	movs	r1, #0
 800628e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006292:	6866      	ldr	r6, [r4, #4]
 8006294:	2e00      	cmp	r6, #0
 8006296:	60a6      	str	r6, [r4, #8]
 8006298:	db05      	blt.n	80062a6 <_printf_i+0x10e>
 800629a:	6821      	ldr	r1, [r4, #0]
 800629c:	432e      	orrs	r6, r5
 800629e:	f021 0104 	bic.w	r1, r1, #4
 80062a2:	6021      	str	r1, [r4, #0]
 80062a4:	d04b      	beq.n	800633e <_printf_i+0x1a6>
 80062a6:	4616      	mov	r6, r2
 80062a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ac:	fb03 5711 	mls	r7, r3, r1, r5
 80062b0:	5dc7      	ldrb	r7, [r0, r7]
 80062b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062b6:	462f      	mov	r7, r5
 80062b8:	42bb      	cmp	r3, r7
 80062ba:	460d      	mov	r5, r1
 80062bc:	d9f4      	bls.n	80062a8 <_printf_i+0x110>
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x142>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07df      	lsls	r7, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x142>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6861      	ldr	r1, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	@ 0x30
 80062d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062da:	1b92      	subs	r2, r2, r6
 80062dc:	6122      	str	r2, [r4, #16]
 80062de:	464b      	mov	r3, r9
 80062e0:	4621      	mov	r1, r4
 80062e2:	4640      	mov	r0, r8
 80062e4:	f8cd a000 	str.w	sl, [sp]
 80062e8:	aa03      	add	r2, sp, #12
 80062ea:	f7ff fee3 	bl	80060b4 <_printf_common>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d14a      	bne.n	8006388 <_printf_i+0x1f0>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f043 0320 	orr.w	r3, r3, #32
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	2778      	movs	r7, #120	@ 0x78
 8006306:	4832      	ldr	r0, [pc, #200]	@ (80063d0 <_printf_i+0x238>)
 8006308:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	061f      	lsls	r7, r3, #24
 8006312:	f851 5b04 	ldr.w	r5, [r1], #4
 8006316:	d402      	bmi.n	800631e <_printf_i+0x186>
 8006318:	065f      	lsls	r7, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2ad      	uxthmi	r5, r5
 800631e:	6031      	str	r1, [r6, #0]
 8006320:	07d9      	lsls	r1, r3, #31
 8006322:	bf44      	itt	mi
 8006324:	f043 0320 	orrmi.w	r3, r3, #32
 8006328:	6023      	strmi	r3, [r4, #0]
 800632a:	b11d      	cbz	r5, 8006334 <_printf_i+0x19c>
 800632c:	2310      	movs	r3, #16
 800632e:	e7ad      	b.n	800628c <_printf_i+0xf4>
 8006330:	4826      	ldr	r0, [pc, #152]	@ (80063cc <_printf_i+0x234>)
 8006332:	e7e9      	b.n	8006308 <_printf_i+0x170>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	f023 0320 	bic.w	r3, r3, #32
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	e7f6      	b.n	800632c <_printf_i+0x194>
 800633e:	4616      	mov	r6, r2
 8006340:	e7bd      	b.n	80062be <_printf_i+0x126>
 8006342:	6833      	ldr	r3, [r6, #0]
 8006344:	6825      	ldr	r5, [r4, #0]
 8006346:	1d18      	adds	r0, r3, #4
 8006348:	6961      	ldr	r1, [r4, #20]
 800634a:	6030      	str	r0, [r6, #0]
 800634c:	062e      	lsls	r6, r5, #24
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	d501      	bpl.n	8006356 <_printf_i+0x1be>
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	e002      	b.n	800635c <_printf_i+0x1c4>
 8006356:	0668      	lsls	r0, r5, #25
 8006358:	d5fb      	bpl.n	8006352 <_printf_i+0x1ba>
 800635a:	8019      	strh	r1, [r3, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	4616      	mov	r6, r2
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	e7bc      	b.n	80062de <_printf_i+0x146>
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	2100      	movs	r1, #0
 8006368:	1d1a      	adds	r2, r3, #4
 800636a:	6032      	str	r2, [r6, #0]
 800636c:	681e      	ldr	r6, [r3, #0]
 800636e:	6862      	ldr	r2, [r4, #4]
 8006370:	4630      	mov	r0, r6
 8006372:	f000 fbf2 	bl	8006b5a <memchr>
 8006376:	b108      	cbz	r0, 800637c <_printf_i+0x1e4>
 8006378:	1b80      	subs	r0, r0, r6
 800637a:	6060      	str	r0, [r4, #4]
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2300      	movs	r3, #0
 8006382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006386:	e7aa      	b.n	80062de <_printf_i+0x146>
 8006388:	4632      	mov	r2, r6
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	47d0      	blx	sl
 8006392:	3001      	adds	r0, #1
 8006394:	d0ad      	beq.n	80062f2 <_printf_i+0x15a>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	079b      	lsls	r3, r3, #30
 800639a:	d413      	bmi.n	80063c4 <_printf_i+0x22c>
 800639c:	68e0      	ldr	r0, [r4, #12]
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	4298      	cmp	r0, r3
 80063a2:	bfb8      	it	lt
 80063a4:	4618      	movlt	r0, r3
 80063a6:	e7a6      	b.n	80062f6 <_printf_i+0x15e>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4632      	mov	r2, r6
 80063ac:	4649      	mov	r1, r9
 80063ae:	4640      	mov	r0, r8
 80063b0:	47d0      	blx	sl
 80063b2:	3001      	adds	r0, #1
 80063b4:	d09d      	beq.n	80062f2 <_printf_i+0x15a>
 80063b6:	3501      	adds	r5, #1
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	9903      	ldr	r1, [sp, #12]
 80063bc:	1a5b      	subs	r3, r3, r1
 80063be:	42ab      	cmp	r3, r5
 80063c0:	dcf2      	bgt.n	80063a8 <_printf_i+0x210>
 80063c2:	e7eb      	b.n	800639c <_printf_i+0x204>
 80063c4:	2500      	movs	r5, #0
 80063c6:	f104 0619 	add.w	r6, r4, #25
 80063ca:	e7f5      	b.n	80063b8 <_printf_i+0x220>
 80063cc:	0800a35c 	.word	0x0800a35c
 80063d0:	0800a36d 	.word	0x0800a36d

080063d4 <_scanf_float>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	b087      	sub	sp, #28
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	688b      	ldr	r3, [r1, #8]
 80063de:	4691      	mov	r9, r2
 80063e0:	1e5a      	subs	r2, r3, #1
 80063e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80063e6:	bf82      	ittt	hi
 80063e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80063ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80063f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80063f4:	460a      	mov	r2, r1
 80063f6:	f04f 0500 	mov.w	r5, #0
 80063fa:	bf88      	it	hi
 80063fc:	608b      	strhi	r3, [r1, #8]
 80063fe:	680b      	ldr	r3, [r1, #0]
 8006400:	4680      	mov	r8, r0
 8006402:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006406:	f842 3b1c 	str.w	r3, [r2], #28
 800640a:	460c      	mov	r4, r1
 800640c:	bf98      	it	ls
 800640e:	f04f 0b00 	movls.w	fp, #0
 8006412:	4616      	mov	r6, r2
 8006414:	46aa      	mov	sl, r5
 8006416:	462f      	mov	r7, r5
 8006418:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800641c:	9201      	str	r2, [sp, #4]
 800641e:	9502      	str	r5, [sp, #8]
 8006420:	68a2      	ldr	r2, [r4, #8]
 8006422:	b15a      	cbz	r2, 800643c <_scanf_float+0x68>
 8006424:	f8d9 3000 	ldr.w	r3, [r9]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b4e      	cmp	r3, #78	@ 0x4e
 800642c:	d862      	bhi.n	80064f4 <_scanf_float+0x120>
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d83a      	bhi.n	80064a8 <_scanf_float+0xd4>
 8006432:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006436:	b2c8      	uxtb	r0, r1
 8006438:	280e      	cmp	r0, #14
 800643a:	d938      	bls.n	80064ae <_scanf_float+0xda>
 800643c:	b11f      	cbz	r7, 8006446 <_scanf_float+0x72>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800644a:	f1ba 0f01 	cmp.w	sl, #1
 800644e:	f200 8114 	bhi.w	800667a <_scanf_float+0x2a6>
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	429e      	cmp	r6, r3
 8006456:	f200 8105 	bhi.w	8006664 <_scanf_float+0x290>
 800645a:	2001      	movs	r0, #1
 800645c:	b007      	add	sp, #28
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006466:	2a0d      	cmp	r2, #13
 8006468:	d8e8      	bhi.n	800643c <_scanf_float+0x68>
 800646a:	a101      	add	r1, pc, #4	@ (adr r1, 8006470 <_scanf_float+0x9c>)
 800646c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006470:	080065b9 	.word	0x080065b9
 8006474:	0800643d 	.word	0x0800643d
 8006478:	0800643d 	.word	0x0800643d
 800647c:	0800643d 	.word	0x0800643d
 8006480:	08006615 	.word	0x08006615
 8006484:	080065ef 	.word	0x080065ef
 8006488:	0800643d 	.word	0x0800643d
 800648c:	0800643d 	.word	0x0800643d
 8006490:	080065c7 	.word	0x080065c7
 8006494:	0800643d 	.word	0x0800643d
 8006498:	0800643d 	.word	0x0800643d
 800649c:	0800643d 	.word	0x0800643d
 80064a0:	0800643d 	.word	0x0800643d
 80064a4:	08006583 	.word	0x08006583
 80064a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064ac:	e7db      	b.n	8006466 <_scanf_float+0x92>
 80064ae:	290e      	cmp	r1, #14
 80064b0:	d8c4      	bhi.n	800643c <_scanf_float+0x68>
 80064b2:	a001      	add	r0, pc, #4	@ (adr r0, 80064b8 <_scanf_float+0xe4>)
 80064b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064b8:	08006573 	.word	0x08006573
 80064bc:	0800643d 	.word	0x0800643d
 80064c0:	08006573 	.word	0x08006573
 80064c4:	08006603 	.word	0x08006603
 80064c8:	0800643d 	.word	0x0800643d
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006559 	.word	0x08006559
 80064d4:	08006559 	.word	0x08006559
 80064d8:	08006559 	.word	0x08006559
 80064dc:	08006559 	.word	0x08006559
 80064e0:	08006559 	.word	0x08006559
 80064e4:	08006559 	.word	0x08006559
 80064e8:	08006559 	.word	0x08006559
 80064ec:	08006559 	.word	0x08006559
 80064f0:	08006559 	.word	0x08006559
 80064f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80064f6:	d809      	bhi.n	800650c <_scanf_float+0x138>
 80064f8:	2b60      	cmp	r3, #96	@ 0x60
 80064fa:	d8b2      	bhi.n	8006462 <_scanf_float+0x8e>
 80064fc:	2b54      	cmp	r3, #84	@ 0x54
 80064fe:	d07b      	beq.n	80065f8 <_scanf_float+0x224>
 8006500:	2b59      	cmp	r3, #89	@ 0x59
 8006502:	d19b      	bne.n	800643c <_scanf_float+0x68>
 8006504:	2d07      	cmp	r5, #7
 8006506:	d199      	bne.n	800643c <_scanf_float+0x68>
 8006508:	2508      	movs	r5, #8
 800650a:	e02f      	b.n	800656c <_scanf_float+0x198>
 800650c:	2b74      	cmp	r3, #116	@ 0x74
 800650e:	d073      	beq.n	80065f8 <_scanf_float+0x224>
 8006510:	2b79      	cmp	r3, #121	@ 0x79
 8006512:	e7f6      	b.n	8006502 <_scanf_float+0x12e>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	05c8      	lsls	r0, r1, #23
 8006518:	d51e      	bpl.n	8006558 <_scanf_float+0x184>
 800651a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800651e:	6021      	str	r1, [r4, #0]
 8006520:	3701      	adds	r7, #1
 8006522:	f1bb 0f00 	cmp.w	fp, #0
 8006526:	d003      	beq.n	8006530 <_scanf_float+0x15c>
 8006528:	3201      	adds	r2, #1
 800652a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800652e:	60a2      	str	r2, [r4, #8]
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	3b01      	subs	r3, #1
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006540:	3b01      	subs	r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	f8c9 3004 	str.w	r3, [r9, #4]
 8006548:	f340 8083 	ble.w	8006652 <_scanf_float+0x27e>
 800654c:	f8d9 3000 	ldr.w	r3, [r9]
 8006550:	3301      	adds	r3, #1
 8006552:	f8c9 3000 	str.w	r3, [r9]
 8006556:	e763      	b.n	8006420 <_scanf_float+0x4c>
 8006558:	eb1a 0105 	adds.w	r1, sl, r5
 800655c:	f47f af6e 	bne.w	800643c <_scanf_float+0x68>
 8006560:	460d      	mov	r5, r1
 8006562:	468a      	mov	sl, r1
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800656a:	6022      	str	r2, [r4, #0]
 800656c:	f806 3b01 	strb.w	r3, [r6], #1
 8006570:	e7de      	b.n	8006530 <_scanf_float+0x15c>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	0610      	lsls	r0, r2, #24
 8006576:	f57f af61 	bpl.w	800643c <_scanf_float+0x68>
 800657a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800657e:	6022      	str	r2, [r4, #0]
 8006580:	e7f4      	b.n	800656c <_scanf_float+0x198>
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	d10c      	bne.n	80065a2 <_scanf_float+0x1ce>
 8006588:	b977      	cbnz	r7, 80065a8 <_scanf_float+0x1d4>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006590:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006594:	d108      	bne.n	80065a8 <_scanf_float+0x1d4>
 8006596:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800659a:	f04f 0a01 	mov.w	sl, #1
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	e7e4      	b.n	800656c <_scanf_float+0x198>
 80065a2:	f1ba 0f02 	cmp.w	sl, #2
 80065a6:	d051      	beq.n	800664c <_scanf_float+0x278>
 80065a8:	2d01      	cmp	r5, #1
 80065aa:	d002      	beq.n	80065b2 <_scanf_float+0x1de>
 80065ac:	2d04      	cmp	r5, #4
 80065ae:	f47f af45 	bne.w	800643c <_scanf_float+0x68>
 80065b2:	3501      	adds	r5, #1
 80065b4:	b2ed      	uxtb	r5, r5
 80065b6:	e7d9      	b.n	800656c <_scanf_float+0x198>
 80065b8:	f1ba 0f01 	cmp.w	sl, #1
 80065bc:	f47f af3e 	bne.w	800643c <_scanf_float+0x68>
 80065c0:	f04f 0a02 	mov.w	sl, #2
 80065c4:	e7d2      	b.n	800656c <_scanf_float+0x198>
 80065c6:	b975      	cbnz	r5, 80065e6 <_scanf_float+0x212>
 80065c8:	2f00      	cmp	r7, #0
 80065ca:	f47f af38 	bne.w	800643e <_scanf_float+0x6a>
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065d8:	f040 80ff 	bne.w	80067da <_scanf_float+0x406>
 80065dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065e0:	2501      	movs	r5, #1
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	e7c2      	b.n	800656c <_scanf_float+0x198>
 80065e6:	2d03      	cmp	r5, #3
 80065e8:	d0e3      	beq.n	80065b2 <_scanf_float+0x1de>
 80065ea:	2d05      	cmp	r5, #5
 80065ec:	e7df      	b.n	80065ae <_scanf_float+0x1da>
 80065ee:	2d02      	cmp	r5, #2
 80065f0:	f47f af24 	bne.w	800643c <_scanf_float+0x68>
 80065f4:	2503      	movs	r5, #3
 80065f6:	e7b9      	b.n	800656c <_scanf_float+0x198>
 80065f8:	2d06      	cmp	r5, #6
 80065fa:	f47f af1f 	bne.w	800643c <_scanf_float+0x68>
 80065fe:	2507      	movs	r5, #7
 8006600:	e7b4      	b.n	800656c <_scanf_float+0x198>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	0591      	lsls	r1, r2, #22
 8006606:	f57f af19 	bpl.w	800643c <_scanf_float+0x68>
 800660a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800660e:	6022      	str	r2, [r4, #0]
 8006610:	9702      	str	r7, [sp, #8]
 8006612:	e7ab      	b.n	800656c <_scanf_float+0x198>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800661a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800661e:	d005      	beq.n	800662c <_scanf_float+0x258>
 8006620:	0550      	lsls	r0, r2, #21
 8006622:	f57f af0b 	bpl.w	800643c <_scanf_float+0x68>
 8006626:	2f00      	cmp	r7, #0
 8006628:	f000 80d7 	beq.w	80067da <_scanf_float+0x406>
 800662c:	0591      	lsls	r1, r2, #22
 800662e:	bf58      	it	pl
 8006630:	9902      	ldrpl	r1, [sp, #8]
 8006632:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006636:	bf58      	it	pl
 8006638:	1a79      	subpl	r1, r7, r1
 800663a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800663e:	f04f 0700 	mov.w	r7, #0
 8006642:	bf58      	it	pl
 8006644:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	e78f      	b.n	800656c <_scanf_float+0x198>
 800664c:	f04f 0a03 	mov.w	sl, #3
 8006650:	e78c      	b.n	800656c <_scanf_float+0x198>
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800665a:	4798      	blx	r3
 800665c:	2800      	cmp	r0, #0
 800665e:	f43f aedf 	beq.w	8006420 <_scanf_float+0x4c>
 8006662:	e6eb      	b.n	800643c <_scanf_float+0x68>
 8006664:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006668:	464a      	mov	r2, r9
 800666a:	4640      	mov	r0, r8
 800666c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006670:	4798      	blx	r3
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	3b01      	subs	r3, #1
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	e6eb      	b.n	8006452 <_scanf_float+0x7e>
 800667a:	1e6b      	subs	r3, r5, #1
 800667c:	2b06      	cmp	r3, #6
 800667e:	d824      	bhi.n	80066ca <_scanf_float+0x2f6>
 8006680:	2d02      	cmp	r5, #2
 8006682:	d836      	bhi.n	80066f2 <_scanf_float+0x31e>
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	429e      	cmp	r6, r3
 8006688:	f67f aee7 	bls.w	800645a <_scanf_float+0x86>
 800668c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006690:	464a      	mov	r2, r9
 8006692:	4640      	mov	r0, r8
 8006694:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006698:	4798      	blx	r3
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	3b01      	subs	r3, #1
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	e7f0      	b.n	8006684 <_scanf_float+0x2b0>
 80066a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066a6:	464a      	mov	r2, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066ae:	4798      	blx	r3
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ba:	fa5f fa8a 	uxtb.w	sl, sl
 80066be:	f1ba 0f02 	cmp.w	sl, #2
 80066c2:	d1ee      	bne.n	80066a2 <_scanf_float+0x2ce>
 80066c4:	3d03      	subs	r5, #3
 80066c6:	b2ed      	uxtb	r5, r5
 80066c8:	1b76      	subs	r6, r6, r5
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	05da      	lsls	r2, r3, #23
 80066ce:	d530      	bpl.n	8006732 <_scanf_float+0x35e>
 80066d0:	055b      	lsls	r3, r3, #21
 80066d2:	d511      	bpl.n	80066f8 <_scanf_float+0x324>
 80066d4:	9b01      	ldr	r3, [sp, #4]
 80066d6:	429e      	cmp	r6, r3
 80066d8:	f67f aebf 	bls.w	800645a <_scanf_float+0x86>
 80066dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066e0:	464a      	mov	r2, r9
 80066e2:	4640      	mov	r0, r8
 80066e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066e8:	4798      	blx	r3
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	e7f0      	b.n	80066d4 <_scanf_float+0x300>
 80066f2:	46aa      	mov	sl, r5
 80066f4:	46b3      	mov	fp, r6
 80066f6:	e7de      	b.n	80066b6 <_scanf_float+0x2e2>
 80066f8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	2965      	cmp	r1, #101	@ 0x65
 8006700:	f103 33ff 	add.w	r3, r3, #4294967295
 8006704:	f106 35ff 	add.w	r5, r6, #4294967295
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	d00c      	beq.n	8006726 <_scanf_float+0x352>
 800670c:	2945      	cmp	r1, #69	@ 0x45
 800670e:	d00a      	beq.n	8006726 <_scanf_float+0x352>
 8006710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006714:	464a      	mov	r2, r9
 8006716:	4640      	mov	r0, r8
 8006718:	4798      	blx	r3
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006720:	3b01      	subs	r3, #1
 8006722:	1eb5      	subs	r5, r6, #2
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	464a      	mov	r2, r9
 8006728:	4640      	mov	r0, r8
 800672a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800672e:	4798      	blx	r3
 8006730:	462e      	mov	r6, r5
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	f012 0210 	ands.w	r2, r2, #16
 8006738:	d001      	beq.n	800673e <_scanf_float+0x36a>
 800673a:	2000      	movs	r0, #0
 800673c:	e68e      	b.n	800645c <_scanf_float+0x88>
 800673e:	7032      	strb	r2, [r6, #0]
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674a:	d125      	bne.n	8006798 <_scanf_float+0x3c4>
 800674c:	9b02      	ldr	r3, [sp, #8]
 800674e:	429f      	cmp	r7, r3
 8006750:	d00a      	beq.n	8006768 <_scanf_float+0x394>
 8006752:	1bda      	subs	r2, r3, r7
 8006754:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006758:	429e      	cmp	r6, r3
 800675a:	bf28      	it	cs
 800675c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006760:	4630      	mov	r0, r6
 8006762:	491f      	ldr	r1, [pc, #124]	@ (80067e0 <_scanf_float+0x40c>)
 8006764:	f000 f902 	bl	800696c <siprintf>
 8006768:	2200      	movs	r2, #0
 800676a:	4640      	mov	r0, r8
 800676c:	9901      	ldr	r1, [sp, #4]
 800676e:	f002 fbfb 	bl	8008f68 <_strtod_r>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f015 0f02 	tst.w	r5, #2
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	f103 0204 	add.w	r2, r3, #4
 8006784:	d015      	beq.n	80067b2 <_scanf_float+0x3de>
 8006786:	9903      	ldr	r1, [sp, #12]
 8006788:	600a      	str	r2, [r1, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	e9c3 6700 	strd	r6, r7, [r3]
 8006790:	68e3      	ldr	r3, [r4, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60e3      	str	r3, [r4, #12]
 8006796:	e7d0      	b.n	800673a <_scanf_float+0x366>
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0e4      	beq.n	8006768 <_scanf_float+0x394>
 800679e:	9905      	ldr	r1, [sp, #20]
 80067a0:	230a      	movs	r3, #10
 80067a2:	4640      	mov	r0, r8
 80067a4:	3101      	adds	r1, #1
 80067a6:	f002 fc5f 	bl	8009068 <_strtol_r>
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	9e05      	ldr	r6, [sp, #20]
 80067ae:	1ac2      	subs	r2, r0, r3
 80067b0:	e7d0      	b.n	8006754 <_scanf_float+0x380>
 80067b2:	076d      	lsls	r5, r5, #29
 80067b4:	d4e7      	bmi.n	8006786 <_scanf_float+0x3b2>
 80067b6:	9d03      	ldr	r5, [sp, #12]
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	681d      	ldr	r5, [r3, #0]
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	f7fa f924 	bl	8000a0c <__aeabi_dcmpun>
 80067c4:	b120      	cbz	r0, 80067d0 <_scanf_float+0x3fc>
 80067c6:	4807      	ldr	r0, [pc, #28]	@ (80067e4 <_scanf_float+0x410>)
 80067c8:	f000 f9d6 	bl	8006b78 <nanf>
 80067cc:	6028      	str	r0, [r5, #0]
 80067ce:	e7df      	b.n	8006790 <_scanf_float+0x3bc>
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7fa f978 	bl	8000ac8 <__aeabi_d2f>
 80067d8:	e7f8      	b.n	80067cc <_scanf_float+0x3f8>
 80067da:	2700      	movs	r7, #0
 80067dc:	e633      	b.n	8006446 <_scanf_float+0x72>
 80067de:	bf00      	nop
 80067e0:	0800a37e 	.word	0x0800a37e
 80067e4:	0800a4bf 	.word	0x0800a4bf

080067e8 <std>:
 80067e8:	2300      	movs	r3, #0
 80067ea:	b510      	push	{r4, lr}
 80067ec:	4604      	mov	r4, r0
 80067ee:	e9c0 3300 	strd	r3, r3, [r0]
 80067f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067f6:	6083      	str	r3, [r0, #8]
 80067f8:	8181      	strh	r1, [r0, #12]
 80067fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80067fc:	81c2      	strh	r2, [r0, #14]
 80067fe:	6183      	str	r3, [r0, #24]
 8006800:	4619      	mov	r1, r3
 8006802:	2208      	movs	r2, #8
 8006804:	305c      	adds	r0, #92	@ 0x5c
 8006806:	f000 f916 	bl	8006a36 <memset>
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x58>)
 800680c:	6224      	str	r4, [r4, #32]
 800680e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006810:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <std+0x5c>)
 8006812:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006814:	4b0c      	ldr	r3, [pc, #48]	@ (8006848 <std+0x60>)
 8006816:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006818:	4b0c      	ldr	r3, [pc, #48]	@ (800684c <std+0x64>)
 800681a:	6323      	str	r3, [r4, #48]	@ 0x30
 800681c:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <std+0x68>)
 800681e:	429c      	cmp	r4, r3
 8006820:	d006      	beq.n	8006830 <std+0x48>
 8006822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006826:	4294      	cmp	r4, r2
 8006828:	d002      	beq.n	8006830 <std+0x48>
 800682a:	33d0      	adds	r3, #208	@ 0xd0
 800682c:	429c      	cmp	r4, r3
 800682e:	d105      	bne.n	800683c <std+0x54>
 8006830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f000 b98c 	b.w	8006b54 <__retarget_lock_init_recursive>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	080069b1 	.word	0x080069b1
 8006844:	080069d3 	.word	0x080069d3
 8006848:	08006a0b 	.word	0x08006a0b
 800684c:	08006a2f 	.word	0x08006a2f
 8006850:	200005e8 	.word	0x200005e8

08006854 <stdio_exit_handler>:
 8006854:	4a02      	ldr	r2, [pc, #8]	@ (8006860 <stdio_exit_handler+0xc>)
 8006856:	4903      	ldr	r1, [pc, #12]	@ (8006864 <stdio_exit_handler+0x10>)
 8006858:	4803      	ldr	r0, [pc, #12]	@ (8006868 <stdio_exit_handler+0x14>)
 800685a:	f000 b869 	b.w	8006930 <_fwalk_sglue>
 800685e:	bf00      	nop
 8006860:	20000050 	.word	0x20000050
 8006864:	0800941d 	.word	0x0800941d
 8006868:	20000060 	.word	0x20000060

0800686c <cleanup_stdio>:
 800686c:	6841      	ldr	r1, [r0, #4]
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <cleanup_stdio+0x34>)
 8006870:	b510      	push	{r4, lr}
 8006872:	4299      	cmp	r1, r3
 8006874:	4604      	mov	r4, r0
 8006876:	d001      	beq.n	800687c <cleanup_stdio+0x10>
 8006878:	f002 fdd0 	bl	800941c <_fflush_r>
 800687c:	68a1      	ldr	r1, [r4, #8]
 800687e:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <cleanup_stdio+0x38>)
 8006880:	4299      	cmp	r1, r3
 8006882:	d002      	beq.n	800688a <cleanup_stdio+0x1e>
 8006884:	4620      	mov	r0, r4
 8006886:	f002 fdc9 	bl	800941c <_fflush_r>
 800688a:	68e1      	ldr	r1, [r4, #12]
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <cleanup_stdio+0x3c>)
 800688e:	4299      	cmp	r1, r3
 8006890:	d004      	beq.n	800689c <cleanup_stdio+0x30>
 8006892:	4620      	mov	r0, r4
 8006894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006898:	f002 bdc0 	b.w	800941c <_fflush_r>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	bf00      	nop
 80068a0:	200005e8 	.word	0x200005e8
 80068a4:	20000650 	.word	0x20000650
 80068a8:	200006b8 	.word	0x200006b8

080068ac <global_stdio_init.part.0>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <global_stdio_init.part.0+0x30>)
 80068b0:	4c0b      	ldr	r4, [pc, #44]	@ (80068e0 <global_stdio_init.part.0+0x34>)
 80068b2:	4a0c      	ldr	r2, [pc, #48]	@ (80068e4 <global_stdio_init.part.0+0x38>)
 80068b4:	4620      	mov	r0, r4
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	2104      	movs	r1, #4
 80068ba:	2200      	movs	r2, #0
 80068bc:	f7ff ff94 	bl	80067e8 <std>
 80068c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068c4:	2201      	movs	r2, #1
 80068c6:	2109      	movs	r1, #9
 80068c8:	f7ff ff8e 	bl	80067e8 <std>
 80068cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d0:	2202      	movs	r2, #2
 80068d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d6:	2112      	movs	r1, #18
 80068d8:	f7ff bf86 	b.w	80067e8 <std>
 80068dc:	20000720 	.word	0x20000720
 80068e0:	200005e8 	.word	0x200005e8
 80068e4:	08006855 	.word	0x08006855

080068e8 <__sfp_lock_acquire>:
 80068e8:	4801      	ldr	r0, [pc, #4]	@ (80068f0 <__sfp_lock_acquire+0x8>)
 80068ea:	f000 b934 	b.w	8006b56 <__retarget_lock_acquire_recursive>
 80068ee:	bf00      	nop
 80068f0:	20000729 	.word	0x20000729

080068f4 <__sfp_lock_release>:
 80068f4:	4801      	ldr	r0, [pc, #4]	@ (80068fc <__sfp_lock_release+0x8>)
 80068f6:	f000 b92f 	b.w	8006b58 <__retarget_lock_release_recursive>
 80068fa:	bf00      	nop
 80068fc:	20000729 	.word	0x20000729

08006900 <__sinit>:
 8006900:	b510      	push	{r4, lr}
 8006902:	4604      	mov	r4, r0
 8006904:	f7ff fff0 	bl	80068e8 <__sfp_lock_acquire>
 8006908:	6a23      	ldr	r3, [r4, #32]
 800690a:	b11b      	cbz	r3, 8006914 <__sinit+0x14>
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	f7ff bff0 	b.w	80068f4 <__sfp_lock_release>
 8006914:	4b04      	ldr	r3, [pc, #16]	@ (8006928 <__sinit+0x28>)
 8006916:	6223      	str	r3, [r4, #32]
 8006918:	4b04      	ldr	r3, [pc, #16]	@ (800692c <__sinit+0x2c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1f5      	bne.n	800690c <__sinit+0xc>
 8006920:	f7ff ffc4 	bl	80068ac <global_stdio_init.part.0>
 8006924:	e7f2      	b.n	800690c <__sinit+0xc>
 8006926:	bf00      	nop
 8006928:	0800686d 	.word	0x0800686d
 800692c:	20000720 	.word	0x20000720

08006930 <_fwalk_sglue>:
 8006930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006934:	4607      	mov	r7, r0
 8006936:	4688      	mov	r8, r1
 8006938:	4614      	mov	r4, r2
 800693a:	2600      	movs	r6, #0
 800693c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006940:	f1b9 0901 	subs.w	r9, r9, #1
 8006944:	d505      	bpl.n	8006952 <_fwalk_sglue+0x22>
 8006946:	6824      	ldr	r4, [r4, #0]
 8006948:	2c00      	cmp	r4, #0
 800694a:	d1f7      	bne.n	800693c <_fwalk_sglue+0xc>
 800694c:	4630      	mov	r0, r6
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d907      	bls.n	8006968 <_fwalk_sglue+0x38>
 8006958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800695c:	3301      	adds	r3, #1
 800695e:	d003      	beq.n	8006968 <_fwalk_sglue+0x38>
 8006960:	4629      	mov	r1, r5
 8006962:	4638      	mov	r0, r7
 8006964:	47c0      	blx	r8
 8006966:	4306      	orrs	r6, r0
 8006968:	3568      	adds	r5, #104	@ 0x68
 800696a:	e7e9      	b.n	8006940 <_fwalk_sglue+0x10>

0800696c <siprintf>:
 800696c:	b40e      	push	{r1, r2, r3}
 800696e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006972:	b510      	push	{r4, lr}
 8006974:	2400      	movs	r4, #0
 8006976:	b09d      	sub	sp, #116	@ 0x74
 8006978:	ab1f      	add	r3, sp, #124	@ 0x7c
 800697a:	9002      	str	r0, [sp, #8]
 800697c:	9006      	str	r0, [sp, #24]
 800697e:	9107      	str	r1, [sp, #28]
 8006980:	9104      	str	r1, [sp, #16]
 8006982:	4809      	ldr	r0, [pc, #36]	@ (80069a8 <siprintf+0x3c>)
 8006984:	4909      	ldr	r1, [pc, #36]	@ (80069ac <siprintf+0x40>)
 8006986:	f853 2b04 	ldr.w	r2, [r3], #4
 800698a:	9105      	str	r1, [sp, #20]
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	a902      	add	r1, sp, #8
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006994:	f002 fbc6 	bl	8009124 <_svfiprintf_r>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	701c      	strb	r4, [r3, #0]
 800699c:	b01d      	add	sp, #116	@ 0x74
 800699e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a2:	b003      	add	sp, #12
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	2000005c 	.word	0x2000005c
 80069ac:	ffff0208 	.word	0xffff0208

080069b0 <__sread>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	460c      	mov	r4, r1
 80069b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b8:	f000 f87e 	bl	8006ab8 <_read_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	bfab      	itete	ge
 80069c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069c2:	89a3      	ldrhlt	r3, [r4, #12]
 80069c4:	181b      	addge	r3, r3, r0
 80069c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069ca:	bfac      	ite	ge
 80069cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069ce:	81a3      	strhlt	r3, [r4, #12]
 80069d0:	bd10      	pop	{r4, pc}

080069d2 <__swrite>:
 80069d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d6:	461f      	mov	r7, r3
 80069d8:	898b      	ldrh	r3, [r1, #12]
 80069da:	4605      	mov	r5, r0
 80069dc:	05db      	lsls	r3, r3, #23
 80069de:	460c      	mov	r4, r1
 80069e0:	4616      	mov	r6, r2
 80069e2:	d505      	bpl.n	80069f0 <__swrite+0x1e>
 80069e4:	2302      	movs	r3, #2
 80069e6:	2200      	movs	r2, #0
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	f000 f852 	bl	8006a94 <_lseek_r>
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	4632      	mov	r2, r6
 80069f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	4628      	mov	r0, r5
 80069fc:	463b      	mov	r3, r7
 80069fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a06:	f000 b869 	b.w	8006adc <_write_r>

08006a0a <__sseek>:
 8006a0a:	b510      	push	{r4, lr}
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a12:	f000 f83f 	bl	8006a94 <_lseek_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	bf15      	itete	ne
 8006a1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a26:	81a3      	strheq	r3, [r4, #12]
 8006a28:	bf18      	it	ne
 8006a2a:	81a3      	strhne	r3, [r4, #12]
 8006a2c:	bd10      	pop	{r4, pc}

08006a2e <__sclose>:
 8006a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a32:	f000 b81f 	b.w	8006a74 <_close_r>

08006a36 <memset>:
 8006a36:	4603      	mov	r3, r0
 8006a38:	4402      	add	r2, r0
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d100      	bne.n	8006a40 <memset+0xa>
 8006a3e:	4770      	bx	lr
 8006a40:	f803 1b01 	strb.w	r1, [r3], #1
 8006a44:	e7f9      	b.n	8006a3a <memset+0x4>

08006a46 <strncmp>:
 8006a46:	b510      	push	{r4, lr}
 8006a48:	b16a      	cbz	r2, 8006a66 <strncmp+0x20>
 8006a4a:	3901      	subs	r1, #1
 8006a4c:	1884      	adds	r4, r0, r2
 8006a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d103      	bne.n	8006a62 <strncmp+0x1c>
 8006a5a:	42a0      	cmp	r0, r4
 8006a5c:	d001      	beq.n	8006a62 <strncmp+0x1c>
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	d1f5      	bne.n	8006a4e <strncmp+0x8>
 8006a62:	1ad0      	subs	r0, r2, r3
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	4610      	mov	r0, r2
 8006a68:	e7fc      	b.n	8006a64 <strncmp+0x1e>
	...

08006a6c <_localeconv_r>:
 8006a6c:	4800      	ldr	r0, [pc, #0]	@ (8006a70 <_localeconv_r+0x4>)
 8006a6e:	4770      	bx	lr
 8006a70:	2000019c 	.word	0x2000019c

08006a74 <_close_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	2300      	movs	r3, #0
 8006a78:	4d05      	ldr	r5, [pc, #20]	@ (8006a90 <_close_r+0x1c>)
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fb fabb 	bl	8001ffa <_close>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_close_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_close_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20000724 	.word	0x20000724

08006a94 <_lseek_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4d05      	ldr	r5, [pc, #20]	@ (8006ab4 <_lseek_r+0x20>)
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f7fb facd 	bl	8002042 <_lseek>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_lseek_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_lseek_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20000724 	.word	0x20000724

08006ab8 <_read_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4d05      	ldr	r5, [pc, #20]	@ (8006ad8 <_read_r+0x20>)
 8006ac4:	602a      	str	r2, [r5, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7fb fa5e 	bl	8001f88 <_read>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_read_r+0x1e>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_read_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20000724 	.word	0x20000724

08006adc <_write_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4d05      	ldr	r5, [pc, #20]	@ (8006afc <_write_r+0x20>)
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f7fb fa69 	bl	8001fc2 <_write>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_write_r+0x1e>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_write_r+0x1e>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	20000724 	.word	0x20000724

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	@ (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	2000005c 	.word	0x2000005c

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2600      	movs	r6, #0
 8006b10:	4d0c      	ldr	r5, [pc, #48]	@ (8006b44 <__libc_init_array+0x38>)
 8006b12:	4c0d      	ldr	r4, [pc, #52]	@ (8006b48 <__libc_init_array+0x3c>)
 8006b14:	1b64      	subs	r4, r4, r5
 8006b16:	10a4      	asrs	r4, r4, #2
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	f003 fb58 	bl	800a1d0 <_init>
 8006b20:	2600      	movs	r6, #0
 8006b22:	4d0a      	ldr	r5, [pc, #40]	@ (8006b4c <__libc_init_array+0x40>)
 8006b24:	4c0a      	ldr	r4, [pc, #40]	@ (8006b50 <__libc_init_array+0x44>)
 8006b26:	1b64      	subs	r4, r4, r5
 8006b28:	10a4      	asrs	r4, r4, #2
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	0800a77c 	.word	0x0800a77c
 8006b48:	0800a77c 	.word	0x0800a77c
 8006b4c:	0800a77c 	.word	0x0800a77c
 8006b50:	0800a780 	.word	0x0800a780

08006b54 <__retarget_lock_init_recursive>:
 8006b54:	4770      	bx	lr

08006b56 <__retarget_lock_acquire_recursive>:
 8006b56:	4770      	bx	lr

08006b58 <__retarget_lock_release_recursive>:
 8006b58:	4770      	bx	lr

08006b5a <memchr>:
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	b2c9      	uxtb	r1, r1
 8006b60:	4402      	add	r2, r0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	d101      	bne.n	8006b6c <memchr+0x12>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e003      	b.n	8006b74 <memchr+0x1a>
 8006b6c:	7804      	ldrb	r4, [r0, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	428c      	cmp	r4, r1
 8006b72:	d1f6      	bne.n	8006b62 <memchr+0x8>
 8006b74:	bd10      	pop	{r4, pc}
	...

08006b78 <nanf>:
 8006b78:	4800      	ldr	r0, [pc, #0]	@ (8006b7c <nanf+0x4>)
 8006b7a:	4770      	bx	lr
 8006b7c:	7fc00000 	.word	0x7fc00000

08006b80 <quorem>:
 8006b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	6903      	ldr	r3, [r0, #16]
 8006b86:	690c      	ldr	r4, [r1, #16]
 8006b88:	4607      	mov	r7, r0
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	db7e      	blt.n	8006c8c <quorem+0x10c>
 8006b8e:	3c01      	subs	r4, #1
 8006b90:	00a3      	lsls	r3, r4, #2
 8006b92:	f100 0514 	add.w	r5, r0, #20
 8006b96:	f101 0814 	add.w	r8, r1, #20
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006baa:	3301      	adds	r3, #1
 8006bac:	429a      	cmp	r2, r3
 8006bae:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bb6:	d32e      	bcc.n	8006c16 <quorem+0x96>
 8006bb8:	f04f 0a00 	mov.w	sl, #0
 8006bbc:	46c4      	mov	ip, r8
 8006bbe:	46ae      	mov	lr, r5
 8006bc0:	46d3      	mov	fp, sl
 8006bc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bc6:	b298      	uxth	r0, r3
 8006bc8:	fb06 a000 	mla	r0, r6, r0, sl
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	0c02      	lsrs	r2, r0, #16
 8006bd0:	fb06 2303 	mla	r3, r6, r3, r2
 8006bd4:	f8de 2000 	ldr.w	r2, [lr]
 8006bd8:	b280      	uxth	r0, r0
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	1a12      	subs	r2, r2, r0
 8006bde:	445a      	add	r2, fp
 8006be0:	f8de 0000 	ldr.w	r0, [lr]
 8006be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bf8:	45e1      	cmp	r9, ip
 8006bfa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bfe:	f84e 2b04 	str.w	r2, [lr], #4
 8006c02:	d2de      	bcs.n	8006bc2 <quorem+0x42>
 8006c04:	9b00      	ldr	r3, [sp, #0]
 8006c06:	58eb      	ldr	r3, [r5, r3]
 8006c08:	b92b      	cbnz	r3, 8006c16 <quorem+0x96>
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	d32f      	bcc.n	8006c74 <quorem+0xf4>
 8006c14:	613c      	str	r4, [r7, #16]
 8006c16:	4638      	mov	r0, r7
 8006c18:	f001 f9c8 	bl	8007fac <__mcmp>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	db25      	blt.n	8006c6c <quorem+0xec>
 8006c20:	4629      	mov	r1, r5
 8006c22:	2000      	movs	r0, #0
 8006c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c28:	f8d1 c000 	ldr.w	ip, [r1]
 8006c2c:	fa1f fe82 	uxth.w	lr, r2
 8006c30:	fa1f f38c 	uxth.w	r3, ip
 8006c34:	eba3 030e 	sub.w	r3, r3, lr
 8006c38:	4403      	add	r3, r0
 8006c3a:	0c12      	lsrs	r2, r2, #16
 8006c3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c4a:	45c1      	cmp	r9, r8
 8006c4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c50:	f841 3b04 	str.w	r3, [r1], #4
 8006c54:	d2e6      	bcs.n	8006c24 <quorem+0xa4>
 8006c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c5e:	b922      	cbnz	r2, 8006c6a <quorem+0xea>
 8006c60:	3b04      	subs	r3, #4
 8006c62:	429d      	cmp	r5, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	d30b      	bcc.n	8006c80 <quorem+0x100>
 8006c68:	613c      	str	r4, [r7, #16]
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	b003      	add	sp, #12
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	3b04      	subs	r3, #4
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	d1cb      	bne.n	8006c14 <quorem+0x94>
 8006c7c:	3c01      	subs	r4, #1
 8006c7e:	e7c6      	b.n	8006c0e <quorem+0x8e>
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	3b04      	subs	r3, #4
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	d1ef      	bne.n	8006c68 <quorem+0xe8>
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	e7ea      	b.n	8006c62 <quorem+0xe2>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7ee      	b.n	8006c6e <quorem+0xee>

08006c90 <_dtoa_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	69c7      	ldr	r7, [r0, #28]
 8006c9a:	b097      	sub	sp, #92	@ 0x5c
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ca2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ca4:	b97f      	cbnz	r7, 8006cc6 <_dtoa_r+0x36>
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f000 fe0e 	bl	80078c8 <malloc>
 8006cac:	4602      	mov	r2, r0
 8006cae:	f8c9 001c 	str.w	r0, [r9, #28]
 8006cb2:	b920      	cbnz	r0, 8006cbe <_dtoa_r+0x2e>
 8006cb4:	21ef      	movs	r1, #239	@ 0xef
 8006cb6:	4bac      	ldr	r3, [pc, #688]	@ (8006f68 <_dtoa_r+0x2d8>)
 8006cb8:	48ac      	ldr	r0, [pc, #688]	@ (8006f6c <_dtoa_r+0x2dc>)
 8006cba:	f002 fc15 	bl	80094e8 <__assert_func>
 8006cbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cc2:	6007      	str	r7, [r0, #0]
 8006cc4:	60c7      	str	r7, [r0, #12]
 8006cc6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cca:	6819      	ldr	r1, [r3, #0]
 8006ccc:	b159      	cbz	r1, 8006ce6 <_dtoa_r+0x56>
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4093      	lsls	r3, r2
 8006cd4:	604a      	str	r2, [r1, #4]
 8006cd6:	608b      	str	r3, [r1, #8]
 8006cd8:	4648      	mov	r0, r9
 8006cda:	f000 feeb 	bl	8007ab4 <_Bfree>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	1e2b      	subs	r3, r5, #0
 8006ce8:	bfaf      	iteee	ge
 8006cea:	2300      	movge	r3, #0
 8006cec:	2201      	movlt	r2, #1
 8006cee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cf2:	9307      	strlt	r3, [sp, #28]
 8006cf4:	bfa8      	it	ge
 8006cf6:	6033      	strge	r3, [r6, #0]
 8006cf8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8006f70 <_dtoa_r+0x2e0>)
 8006cfe:	bfb8      	it	lt
 8006d00:	6032      	strlt	r2, [r6, #0]
 8006d02:	ea33 0308 	bics.w	r3, r3, r8
 8006d06:	d112      	bne.n	8006d2e <_dtoa_r+0x9e>
 8006d08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d14:	4323      	orrs	r3, r4
 8006d16:	f000 855e 	beq.w	80077d6 <_dtoa_r+0xb46>
 8006d1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f74 <_dtoa_r+0x2e4>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8560 	beq.w	80077e6 <_dtoa_r+0xb56>
 8006d26:	f10a 0303 	add.w	r3, sl, #3
 8006d2a:	f000 bd5a 	b.w	80077e2 <_dtoa_r+0xb52>
 8006d2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f7f9 fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8006d42:	4607      	mov	r7, r0
 8006d44:	b158      	cbz	r0, 8006d5e <_dtoa_r+0xce>
 8006d46:	2301      	movs	r3, #1
 8006d48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d4e:	b113      	cbz	r3, 8006d56 <_dtoa_r+0xc6>
 8006d50:	4b89      	ldr	r3, [pc, #548]	@ (8006f78 <_dtoa_r+0x2e8>)
 8006d52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006f7c <_dtoa_r+0x2ec>
 8006d5a:	f000 bd44 	b.w	80077e6 <_dtoa_r+0xb56>
 8006d5e:	ab14      	add	r3, sp, #80	@ 0x50
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	ab15      	add	r3, sp, #84	@ 0x54
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4648      	mov	r0, r9
 8006d68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006d6c:	f001 fa36 	bl	80081dc <__d2b>
 8006d70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006d74:	9003      	str	r0, [sp, #12]
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d078      	beq.n	8006e6c <_dtoa_r+0x1dc>
 8006d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d90:	9712      	str	r7, [sp, #72]	@ 0x48
 8006d92:	4619      	mov	r1, r3
 8006d94:	2200      	movs	r2, #0
 8006d96:	4b7a      	ldr	r3, [pc, #488]	@ (8006f80 <_dtoa_r+0x2f0>)
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	a36c      	add	r3, pc, #432	@ (adr r3, 8006f50 <_dtoa_r+0x2c0>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fb99 	bl	80004d8 <__aeabi_dmul>
 8006da6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006f58 <_dtoa_r+0x2c8>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 f9de 	bl	800016c <__adddf3>
 8006db0:	4604      	mov	r4, r0
 8006db2:	4630      	mov	r0, r6
 8006db4:	460d      	mov	r5, r1
 8006db6:	f7f9 fb25 	bl	8000404 <__aeabi_i2d>
 8006dba:	a369      	add	r3, pc, #420	@ (adr r3, 8006f60 <_dtoa_r+0x2d0>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fb8a 	bl	80004d8 <__aeabi_dmul>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 f9ce 	bl	800016c <__adddf3>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	f7f9 fe30 	bl	8000a38 <__aeabi_d2iz>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4607      	mov	r7, r0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8006de6:	b140      	cbz	r0, 8006dfa <_dtoa_r+0x16a>
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7f9 fb0b 	bl	8000404 <__aeabi_i2d>
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	f7f9 fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8006df6:	b900      	cbnz	r0, 8006dfa <_dtoa_r+0x16a>
 8006df8:	3f01      	subs	r7, #1
 8006dfa:	2f16      	cmp	r7, #22
 8006dfc:	d854      	bhi.n	8006ea8 <_dtoa_r+0x218>
 8006dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e02:	4b60      	ldr	r3, [pc, #384]	@ (8006f84 <_dtoa_r+0x2f4>)
 8006e04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d04b      	beq.n	8006eac <_dtoa_r+0x21c>
 8006e14:	2300      	movs	r3, #0
 8006e16:	3f01      	subs	r7, #1
 8006e18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e1c:	1b9b      	subs	r3, r3, r6
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	bf49      	itett	mi
 8006e22:	f1c3 0301 	rsbmi	r3, r3, #1
 8006e26:	2300      	movpl	r3, #0
 8006e28:	9304      	strmi	r3, [sp, #16]
 8006e2a:	2300      	movmi	r3, #0
 8006e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e2e:	bf54      	ite	pl
 8006e30:	9304      	strpl	r3, [sp, #16]
 8006e32:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006e34:	2f00      	cmp	r7, #0
 8006e36:	db3b      	blt.n	8006eb0 <_dtoa_r+0x220>
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006e3c:	443b      	add	r3, r7
 8006e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e40:	2300      	movs	r3, #0
 8006e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d865      	bhi.n	8006f16 <_dtoa_r+0x286>
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	bfc4      	itt	gt
 8006e4e:	3b04      	subgt	r3, #4
 8006e50:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006e52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e54:	bfc8      	it	gt
 8006e56:	2400      	movgt	r4, #0
 8006e58:	f1a3 0302 	sub.w	r3, r3, #2
 8006e5c:	bfd8      	it	le
 8006e5e:	2401      	movle	r4, #1
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d864      	bhi.n	8006f2e <_dtoa_r+0x29e>
 8006e64:	e8df f003 	tbb	[pc, r3]
 8006e68:	2c385553 	.word	0x2c385553
 8006e6c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e70:	441e      	add	r6, r3
 8006e72:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	bfc1      	itttt	gt
 8006e7a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e7e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e8a:	bfd6      	itet	le
 8006e8c:	f1c3 0320 	rsble	r3, r3, #32
 8006e90:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e94:	fa04 f003 	lslle.w	r0, r4, r3
 8006e98:	f7f9 faa4 	bl	80003e4 <__aeabi_ui2d>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ea2:	3e01      	subs	r6, #1
 8006ea4:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ea6:	e774      	b.n	8006d92 <_dtoa_r+0x102>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e7b5      	b.n	8006e18 <_dtoa_r+0x188>
 8006eac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006eae:	e7b4      	b.n	8006e1a <_dtoa_r+0x18a>
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	1bdb      	subs	r3, r3, r7
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	427b      	negs	r3, r7
 8006eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eba:	2300      	movs	r3, #0
 8006ebc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ebe:	e7c1      	b.n	8006e44 <_dtoa_r+0x1b4>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ec6:	eb07 0b03 	add.w	fp, r7, r3
 8006eca:	f10b 0301 	add.w	r3, fp, #1
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	9308      	str	r3, [sp, #32]
 8006ed2:	bfb8      	it	lt
 8006ed4:	2301      	movlt	r3, #1
 8006ed6:	e006      	b.n	8006ee6 <_dtoa_r+0x256>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006edc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd28      	ble.n	8006f34 <_dtoa_r+0x2a4>
 8006ee2:	469b      	mov	fp, r3
 8006ee4:	9308      	str	r3, [sp, #32]
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	2204      	movs	r2, #4
 8006eea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006eee:	f102 0514 	add.w	r5, r2, #20
 8006ef2:	429d      	cmp	r5, r3
 8006ef4:	d926      	bls.n	8006f44 <_dtoa_r+0x2b4>
 8006ef6:	6041      	str	r1, [r0, #4]
 8006ef8:	4648      	mov	r0, r9
 8006efa:	f000 fd9b 	bl	8007a34 <_Balloc>
 8006efe:	4682      	mov	sl, r0
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d143      	bne.n	8006f8c <_dtoa_r+0x2fc>
 8006f04:	4602      	mov	r2, r0
 8006f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f88 <_dtoa_r+0x2f8>)
 8006f0c:	e6d4      	b.n	8006cb8 <_dtoa_r+0x28>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e7e3      	b.n	8006eda <_dtoa_r+0x24a>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e7d5      	b.n	8006ec2 <_dtoa_r+0x232>
 8006f16:	2401      	movs	r4, #1
 8006f18:	2300      	movs	r3, #0
 8006f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f1e:	f04f 3bff 	mov.w	fp, #4294967295
 8006f22:	2200      	movs	r2, #0
 8006f24:	2312      	movs	r3, #18
 8006f26:	f8cd b020 	str.w	fp, [sp, #32]
 8006f2a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006f2c:	e7db      	b.n	8006ee6 <_dtoa_r+0x256>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f32:	e7f4      	b.n	8006f1e <_dtoa_r+0x28e>
 8006f34:	f04f 0b01 	mov.w	fp, #1
 8006f38:	465b      	mov	r3, fp
 8006f3a:	f8cd b020 	str.w	fp, [sp, #32]
 8006f3e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006f42:	e7d0      	b.n	8006ee6 <_dtoa_r+0x256>
 8006f44:	3101      	adds	r1, #1
 8006f46:	0052      	lsls	r2, r2, #1
 8006f48:	e7d1      	b.n	8006eee <_dtoa_r+0x25e>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	636f4361 	.word	0x636f4361
 8006f54:	3fd287a7 	.word	0x3fd287a7
 8006f58:	8b60c8b3 	.word	0x8b60c8b3
 8006f5c:	3fc68a28 	.word	0x3fc68a28
 8006f60:	509f79fb 	.word	0x509f79fb
 8006f64:	3fd34413 	.word	0x3fd34413
 8006f68:	0800a390 	.word	0x0800a390
 8006f6c:	0800a3a7 	.word	0x0800a3a7
 8006f70:	7ff00000 	.word	0x7ff00000
 8006f74:	0800a38c 	.word	0x0800a38c
 8006f78:	0800a35b 	.word	0x0800a35b
 8006f7c:	0800a35a 	.word	0x0800a35a
 8006f80:	3ff80000 	.word	0x3ff80000
 8006f84:	0800a558 	.word	0x0800a558
 8006f88:	0800a3ff 	.word	0x0800a3ff
 8006f8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f90:	6018      	str	r0, [r3, #0]
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	2b0e      	cmp	r3, #14
 8006f96:	f200 80a1 	bhi.w	80070dc <_dtoa_r+0x44c>
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	f000 809e 	beq.w	80070dc <_dtoa_r+0x44c>
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	dd33      	ble.n	800700c <_dtoa_r+0x37c>
 8006fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8007218 <_dtoa_r+0x588>)
 8006fa6:	f007 020f 	and.w	r2, r7, #15
 8006faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fae:	05f8      	lsls	r0, r7, #23
 8006fb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006fb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fbc:	d516      	bpl.n	8006fec <_dtoa_r+0x35c>
 8006fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc2:	4b96      	ldr	r3, [pc, #600]	@ (800721c <_dtoa_r+0x58c>)
 8006fc4:	2603      	movs	r6, #3
 8006fc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fca:	f7f9 fbaf 	bl	800072c <__aeabi_ddiv>
 8006fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fd2:	f004 040f 	and.w	r4, r4, #15
 8006fd6:	4d91      	ldr	r5, [pc, #580]	@ (800721c <_dtoa_r+0x58c>)
 8006fd8:	b954      	cbnz	r4, 8006ff0 <_dtoa_r+0x360>
 8006fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fe2:	f7f9 fba3 	bl	800072c <__aeabi_ddiv>
 8006fe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fea:	e028      	b.n	800703e <_dtoa_r+0x3ae>
 8006fec:	2602      	movs	r6, #2
 8006fee:	e7f2      	b.n	8006fd6 <_dtoa_r+0x346>
 8006ff0:	07e1      	lsls	r1, r4, #31
 8006ff2:	d508      	bpl.n	8007006 <_dtoa_r+0x376>
 8006ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ffc:	f7f9 fa6c 	bl	80004d8 <__aeabi_dmul>
 8007000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007004:	3601      	adds	r6, #1
 8007006:	1064      	asrs	r4, r4, #1
 8007008:	3508      	adds	r5, #8
 800700a:	e7e5      	b.n	8006fd8 <_dtoa_r+0x348>
 800700c:	f000 80af 	beq.w	800716e <_dtoa_r+0x4de>
 8007010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007014:	427c      	negs	r4, r7
 8007016:	4b80      	ldr	r3, [pc, #512]	@ (8007218 <_dtoa_r+0x588>)
 8007018:	f004 020f 	and.w	r2, r4, #15
 800701c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 fa58 	bl	80004d8 <__aeabi_dmul>
 8007028:	2602      	movs	r6, #2
 800702a:	2300      	movs	r3, #0
 800702c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007030:	4d7a      	ldr	r5, [pc, #488]	@ (800721c <_dtoa_r+0x58c>)
 8007032:	1124      	asrs	r4, r4, #4
 8007034:	2c00      	cmp	r4, #0
 8007036:	f040 808f 	bne.w	8007158 <_dtoa_r+0x4c8>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1d3      	bne.n	8006fe6 <_dtoa_r+0x356>
 800703e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8094 	beq.w	8007172 <_dtoa_r+0x4e2>
 800704a:	2200      	movs	r2, #0
 800704c:	4620      	mov	r0, r4
 800704e:	4629      	mov	r1, r5
 8007050:	4b73      	ldr	r3, [pc, #460]	@ (8007220 <_dtoa_r+0x590>)
 8007052:	f7f9 fcb3 	bl	80009bc <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	f000 808b 	beq.w	8007172 <_dtoa_r+0x4e2>
 800705c:	9b08      	ldr	r3, [sp, #32]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8087 	beq.w	8007172 <_dtoa_r+0x4e2>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	dd34      	ble.n	80070d4 <_dtoa_r+0x444>
 800706a:	4620      	mov	r0, r4
 800706c:	2200      	movs	r2, #0
 800706e:	4629      	mov	r1, r5
 8007070:	4b6c      	ldr	r3, [pc, #432]	@ (8007224 <_dtoa_r+0x594>)
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	465c      	mov	r4, fp
 8007078:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800707c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007080:	3601      	adds	r6, #1
 8007082:	4630      	mov	r0, r6
 8007084:	f7f9 f9be 	bl	8000404 <__aeabi_i2d>
 8007088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800708c:	f7f9 fa24 	bl	80004d8 <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	4b65      	ldr	r3, [pc, #404]	@ (8007228 <_dtoa_r+0x598>)
 8007094:	f7f9 f86a 	bl	800016c <__adddf3>
 8007098:	4605      	mov	r5, r0
 800709a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800709e:	2c00      	cmp	r4, #0
 80070a0:	d16a      	bne.n	8007178 <_dtoa_r+0x4e8>
 80070a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a6:	2200      	movs	r2, #0
 80070a8:	4b60      	ldr	r3, [pc, #384]	@ (800722c <_dtoa_r+0x59c>)
 80070aa:	f7f9 f85d 	bl	8000168 <__aeabi_dsub>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070b6:	462a      	mov	r2, r5
 80070b8:	4633      	mov	r3, r6
 80070ba:	f7f9 fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f040 8298 	bne.w	80075f4 <_dtoa_r+0x964>
 80070c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c8:	462a      	mov	r2, r5
 80070ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070ce:	f7f9 fc75 	bl	80009bc <__aeabi_dcmplt>
 80070d2:	bb38      	cbnz	r0, 8007124 <_dtoa_r+0x494>
 80070d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f2c0 8157 	blt.w	8007392 <_dtoa_r+0x702>
 80070e4:	2f0e      	cmp	r7, #14
 80070e6:	f300 8154 	bgt.w	8007392 <_dtoa_r+0x702>
 80070ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007218 <_dtoa_r+0x588>)
 80070ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f280 80e5 	bge.w	80072ca <_dtoa_r+0x63a>
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f300 80e1 	bgt.w	80072ca <_dtoa_r+0x63a>
 8007108:	d10c      	bne.n	8007124 <_dtoa_r+0x494>
 800710a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800710e:	2200      	movs	r2, #0
 8007110:	4b46      	ldr	r3, [pc, #280]	@ (800722c <_dtoa_r+0x59c>)
 8007112:	f7f9 f9e1 	bl	80004d8 <__aeabi_dmul>
 8007116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800711a:	f7f9 fc63 	bl	80009e4 <__aeabi_dcmpge>
 800711e:	2800      	cmp	r0, #0
 8007120:	f000 8266 	beq.w	80075f0 <_dtoa_r+0x960>
 8007124:	2400      	movs	r4, #0
 8007126:	4625      	mov	r5, r4
 8007128:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800712a:	4656      	mov	r6, sl
 800712c:	ea6f 0803 	mvn.w	r8, r3
 8007130:	2700      	movs	r7, #0
 8007132:	4621      	mov	r1, r4
 8007134:	4648      	mov	r0, r9
 8007136:	f000 fcbd 	bl	8007ab4 <_Bfree>
 800713a:	2d00      	cmp	r5, #0
 800713c:	f000 80bd 	beq.w	80072ba <_dtoa_r+0x62a>
 8007140:	b12f      	cbz	r7, 800714e <_dtoa_r+0x4be>
 8007142:	42af      	cmp	r7, r5
 8007144:	d003      	beq.n	800714e <_dtoa_r+0x4be>
 8007146:	4639      	mov	r1, r7
 8007148:	4648      	mov	r0, r9
 800714a:	f000 fcb3 	bl	8007ab4 <_Bfree>
 800714e:	4629      	mov	r1, r5
 8007150:	4648      	mov	r0, r9
 8007152:	f000 fcaf 	bl	8007ab4 <_Bfree>
 8007156:	e0b0      	b.n	80072ba <_dtoa_r+0x62a>
 8007158:	07e2      	lsls	r2, r4, #31
 800715a:	d505      	bpl.n	8007168 <_dtoa_r+0x4d8>
 800715c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007160:	f7f9 f9ba 	bl	80004d8 <__aeabi_dmul>
 8007164:	2301      	movs	r3, #1
 8007166:	3601      	adds	r6, #1
 8007168:	1064      	asrs	r4, r4, #1
 800716a:	3508      	adds	r5, #8
 800716c:	e762      	b.n	8007034 <_dtoa_r+0x3a4>
 800716e:	2602      	movs	r6, #2
 8007170:	e765      	b.n	800703e <_dtoa_r+0x3ae>
 8007172:	46b8      	mov	r8, r7
 8007174:	9c08      	ldr	r4, [sp, #32]
 8007176:	e784      	b.n	8007082 <_dtoa_r+0x3f2>
 8007178:	4b27      	ldr	r3, [pc, #156]	@ (8007218 <_dtoa_r+0x588>)
 800717a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800717c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007180:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007184:	4454      	add	r4, sl
 8007186:	2900      	cmp	r1, #0
 8007188:	d054      	beq.n	8007234 <_dtoa_r+0x5a4>
 800718a:	2000      	movs	r0, #0
 800718c:	4928      	ldr	r1, [pc, #160]	@ (8007230 <_dtoa_r+0x5a0>)
 800718e:	f7f9 facd 	bl	800072c <__aeabi_ddiv>
 8007192:	4633      	mov	r3, r6
 8007194:	462a      	mov	r2, r5
 8007196:	f7f8 ffe7 	bl	8000168 <__aeabi_dsub>
 800719a:	4656      	mov	r6, sl
 800719c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a4:	f7f9 fc48 	bl	8000a38 <__aeabi_d2iz>
 80071a8:	4605      	mov	r5, r0
 80071aa:	f7f9 f92b 	bl	8000404 <__aeabi_i2d>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071b6:	f7f8 ffd7 	bl	8000168 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	3530      	adds	r5, #48	@ 0x30
 80071c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071c8:	f806 5b01 	strb.w	r5, [r6], #1
 80071cc:	f7f9 fbf6 	bl	80009bc <__aeabi_dcmplt>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d172      	bne.n	80072ba <_dtoa_r+0x62a>
 80071d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071d8:	2000      	movs	r0, #0
 80071da:	4911      	ldr	r1, [pc, #68]	@ (8007220 <_dtoa_r+0x590>)
 80071dc:	f7f8 ffc4 	bl	8000168 <__aeabi_dsub>
 80071e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071e4:	f7f9 fbea 	bl	80009bc <__aeabi_dcmplt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f040 80b4 	bne.w	8007356 <_dtoa_r+0x6c6>
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	f43f af70 	beq.w	80070d4 <_dtoa_r+0x444>
 80071f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <_dtoa_r+0x594>)
 80071fc:	f7f9 f96c 	bl	80004d8 <__aeabi_dmul>
 8007200:	2200      	movs	r2, #0
 8007202:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800720a:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <_dtoa_r+0x594>)
 800720c:	f7f9 f964 	bl	80004d8 <__aeabi_dmul>
 8007210:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007214:	e7c4      	b.n	80071a0 <_dtoa_r+0x510>
 8007216:	bf00      	nop
 8007218:	0800a558 	.word	0x0800a558
 800721c:	0800a530 	.word	0x0800a530
 8007220:	3ff00000 	.word	0x3ff00000
 8007224:	40240000 	.word	0x40240000
 8007228:	401c0000 	.word	0x401c0000
 800722c:	40140000 	.word	0x40140000
 8007230:	3fe00000 	.word	0x3fe00000
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	f7f9 f94e 	bl	80004d8 <__aeabi_dmul>
 800723c:	4656      	mov	r6, sl
 800723e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007242:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007248:	f7f9 fbf6 	bl	8000a38 <__aeabi_d2iz>
 800724c:	4605      	mov	r5, r0
 800724e:	f7f9 f8d9 	bl	8000404 <__aeabi_i2d>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800725a:	f7f8 ff85 	bl	8000168 <__aeabi_dsub>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	3530      	adds	r5, #48	@ 0x30
 8007264:	f806 5b01 	strb.w	r5, [r6], #1
 8007268:	42a6      	cmp	r6, r4
 800726a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	d124      	bne.n	80072be <_dtoa_r+0x62e>
 8007274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007278:	4bae      	ldr	r3, [pc, #696]	@ (8007534 <_dtoa_r+0x8a4>)
 800727a:	f7f8 ff77 	bl	800016c <__adddf3>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007286:	f7f9 fbb7 	bl	80009f8 <__aeabi_dcmpgt>
 800728a:	2800      	cmp	r0, #0
 800728c:	d163      	bne.n	8007356 <_dtoa_r+0x6c6>
 800728e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007292:	2000      	movs	r0, #0
 8007294:	49a7      	ldr	r1, [pc, #668]	@ (8007534 <_dtoa_r+0x8a4>)
 8007296:	f7f8 ff67 	bl	8000168 <__aeabi_dsub>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072a2:	f7f9 fb8b 	bl	80009bc <__aeabi_dcmplt>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	f43f af14 	beq.w	80070d4 <_dtoa_r+0x444>
 80072ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80072ae:	1e73      	subs	r3, r6, #1
 80072b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072b6:	2b30      	cmp	r3, #48	@ 0x30
 80072b8:	d0f8      	beq.n	80072ac <_dtoa_r+0x61c>
 80072ba:	4647      	mov	r7, r8
 80072bc:	e03b      	b.n	8007336 <_dtoa_r+0x6a6>
 80072be:	4b9e      	ldr	r3, [pc, #632]	@ (8007538 <_dtoa_r+0x8a8>)
 80072c0:	f7f9 f90a 	bl	80004d8 <__aeabi_dmul>
 80072c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072c8:	e7bc      	b.n	8007244 <_dtoa_r+0x5b4>
 80072ca:	4656      	mov	r6, sl
 80072cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80072d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d4:	4620      	mov	r0, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	f7f9 fa28 	bl	800072c <__aeabi_ddiv>
 80072dc:	f7f9 fbac 	bl	8000a38 <__aeabi_d2iz>
 80072e0:	4680      	mov	r8, r0
 80072e2:	f7f9 f88f 	bl	8000404 <__aeabi_i2d>
 80072e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ea:	f7f9 f8f5 	bl	80004d8 <__aeabi_dmul>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4620      	mov	r0, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f8 ff37 	bl	8000168 <__aeabi_dsub>
 80072fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072fe:	9d08      	ldr	r5, [sp, #32]
 8007300:	f806 4b01 	strb.w	r4, [r6], #1
 8007304:	eba6 040a 	sub.w	r4, r6, sl
 8007308:	42a5      	cmp	r5, r4
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	d133      	bne.n	8007378 <_dtoa_r+0x6e8>
 8007310:	f7f8 ff2c 	bl	800016c <__adddf3>
 8007314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	f7f9 fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8007320:	b9c0      	cbnz	r0, 8007354 <_dtoa_r+0x6c4>
 8007322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f9 fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800732e:	b110      	cbz	r0, 8007336 <_dtoa_r+0x6a6>
 8007330:	f018 0f01 	tst.w	r8, #1
 8007334:	d10e      	bne.n	8007354 <_dtoa_r+0x6c4>
 8007336:	4648      	mov	r0, r9
 8007338:	9903      	ldr	r1, [sp, #12]
 800733a:	f000 fbbb 	bl	8007ab4 <_Bfree>
 800733e:	2300      	movs	r3, #0
 8007340:	7033      	strb	r3, [r6, #0]
 8007342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007344:	3701      	adds	r7, #1
 8007346:	601f      	str	r7, [r3, #0]
 8007348:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 824b 	beq.w	80077e6 <_dtoa_r+0xb56>
 8007350:	601e      	str	r6, [r3, #0]
 8007352:	e248      	b.n	80077e6 <_dtoa_r+0xb56>
 8007354:	46b8      	mov	r8, r7
 8007356:	4633      	mov	r3, r6
 8007358:	461e      	mov	r6, r3
 800735a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800735e:	2a39      	cmp	r2, #57	@ 0x39
 8007360:	d106      	bne.n	8007370 <_dtoa_r+0x6e0>
 8007362:	459a      	cmp	sl, r3
 8007364:	d1f8      	bne.n	8007358 <_dtoa_r+0x6c8>
 8007366:	2230      	movs	r2, #48	@ 0x30
 8007368:	f108 0801 	add.w	r8, r8, #1
 800736c:	f88a 2000 	strb.w	r2, [sl]
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	3201      	adds	r2, #1
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	e7a0      	b.n	80072ba <_dtoa_r+0x62a>
 8007378:	2200      	movs	r2, #0
 800737a:	4b6f      	ldr	r3, [pc, #444]	@ (8007538 <_dtoa_r+0x8a8>)
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	2200      	movs	r2, #0
 8007382:	2300      	movs	r3, #0
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	f7f9 fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800738c:	2800      	cmp	r0, #0
 800738e:	d09f      	beq.n	80072d0 <_dtoa_r+0x640>
 8007390:	e7d1      	b.n	8007336 <_dtoa_r+0x6a6>
 8007392:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007394:	2a00      	cmp	r2, #0
 8007396:	f000 80ea 	beq.w	800756e <_dtoa_r+0x8de>
 800739a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800739c:	2a01      	cmp	r2, #1
 800739e:	f300 80cd 	bgt.w	800753c <_dtoa_r+0x8ac>
 80073a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	f000 80c1 	beq.w	800752c <_dtoa_r+0x89c>
 80073aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073b0:	9e04      	ldr	r6, [sp, #16]
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	2101      	movs	r1, #1
 80073b6:	441a      	add	r2, r3
 80073b8:	9204      	str	r2, [sp, #16]
 80073ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073bc:	4648      	mov	r0, r9
 80073be:	441a      	add	r2, r3
 80073c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c2:	f000 fc75 	bl	8007cb0 <__i2b>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b166      	cbz	r6, 80073e4 <_dtoa_r+0x754>
 80073ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dd09      	ble.n	80073e4 <_dtoa_r+0x754>
 80073d0:	42b3      	cmp	r3, r6
 80073d2:	bfa8      	it	ge
 80073d4:	4633      	movge	r3, r6
 80073d6:	9a04      	ldr	r2, [sp, #16]
 80073d8:	1af6      	subs	r6, r6, r3
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	9204      	str	r2, [sp, #16]
 80073de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073e6:	b30b      	cbz	r3, 800742c <_dtoa_r+0x79c>
 80073e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 80c6 	beq.w	800757c <_dtoa_r+0x8ec>
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	f000 80c0 	beq.w	8007576 <_dtoa_r+0x8e6>
 80073f6:	4629      	mov	r1, r5
 80073f8:	4622      	mov	r2, r4
 80073fa:	4648      	mov	r0, r9
 80073fc:	f000 fd10 	bl	8007e20 <__pow5mult>
 8007400:	9a03      	ldr	r2, [sp, #12]
 8007402:	4601      	mov	r1, r0
 8007404:	4605      	mov	r5, r0
 8007406:	4648      	mov	r0, r9
 8007408:	f000 fc68 	bl	8007cdc <__multiply>
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	4680      	mov	r8, r0
 8007410:	4648      	mov	r0, r9
 8007412:	f000 fb4f 	bl	8007ab4 <_Bfree>
 8007416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007418:	1b1b      	subs	r3, r3, r4
 800741a:	930a      	str	r3, [sp, #40]	@ 0x28
 800741c:	f000 80b1 	beq.w	8007582 <_dtoa_r+0x8f2>
 8007420:	4641      	mov	r1, r8
 8007422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fcfb 	bl	8007e20 <__pow5mult>
 800742a:	9003      	str	r0, [sp, #12]
 800742c:	2101      	movs	r1, #1
 800742e:	4648      	mov	r0, r9
 8007430:	f000 fc3e 	bl	8007cb0 <__i2b>
 8007434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007436:	4604      	mov	r4, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 81d8 	beq.w	80077ee <_dtoa_r+0xb5e>
 800743e:	461a      	mov	r2, r3
 8007440:	4601      	mov	r1, r0
 8007442:	4648      	mov	r0, r9
 8007444:	f000 fcec 	bl	8007e20 <__pow5mult>
 8007448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800744a:	4604      	mov	r4, r0
 800744c:	2b01      	cmp	r3, #1
 800744e:	f300 809f 	bgt.w	8007590 <_dtoa_r+0x900>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 8097 	bne.w	8007588 <_dtoa_r+0x8f8>
 800745a:	9b07      	ldr	r3, [sp, #28]
 800745c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007460:	2b00      	cmp	r3, #0
 8007462:	f040 8093 	bne.w	800758c <_dtoa_r+0x8fc>
 8007466:	9b07      	ldr	r3, [sp, #28]
 8007468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800746c:	0d1b      	lsrs	r3, r3, #20
 800746e:	051b      	lsls	r3, r3, #20
 8007470:	b133      	cbz	r3, 8007480 <_dtoa_r+0x7f0>
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	3301      	adds	r3, #1
 8007476:	9304      	str	r3, [sp, #16]
 8007478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747a:	3301      	adds	r3, #1
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	2301      	movs	r3, #1
 8007480:	930a      	str	r3, [sp, #40]	@ 0x28
 8007482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 81b8 	beq.w	80077fa <_dtoa_r+0xb6a>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007490:	6918      	ldr	r0, [r3, #16]
 8007492:	f000 fbc1 	bl	8007c18 <__hi0bits>
 8007496:	f1c0 0020 	rsb	r0, r0, #32
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	4418      	add	r0, r3
 800749e:	f010 001f 	ands.w	r0, r0, #31
 80074a2:	f000 8082 	beq.w	80075aa <_dtoa_r+0x91a>
 80074a6:	f1c0 0320 	rsb	r3, r0, #32
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	dd73      	ble.n	8007596 <_dtoa_r+0x906>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	f1c0 001c 	rsb	r0, r0, #28
 80074b4:	4403      	add	r3, r0
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ba:	4406      	add	r6, r0
 80074bc:	4403      	add	r3, r0
 80074be:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c0:	9b04      	ldr	r3, [sp, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dd05      	ble.n	80074d2 <_dtoa_r+0x842>
 80074c6:	461a      	mov	r2, r3
 80074c8:	4648      	mov	r0, r9
 80074ca:	9903      	ldr	r1, [sp, #12]
 80074cc:	f000 fd02 	bl	8007ed4 <__lshift>
 80074d0:	9003      	str	r0, [sp, #12]
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd05      	ble.n	80074e4 <_dtoa_r+0x854>
 80074d8:	4621      	mov	r1, r4
 80074da:	461a      	mov	r2, r3
 80074dc:	4648      	mov	r0, r9
 80074de:	f000 fcf9 	bl	8007ed4 <__lshift>
 80074e2:	4604      	mov	r4, r0
 80074e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d061      	beq.n	80075ae <_dtoa_r+0x91e>
 80074ea:	4621      	mov	r1, r4
 80074ec:	9803      	ldr	r0, [sp, #12]
 80074ee:	f000 fd5d 	bl	8007fac <__mcmp>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	da5b      	bge.n	80075ae <_dtoa_r+0x91e>
 80074f6:	2300      	movs	r3, #0
 80074f8:	220a      	movs	r2, #10
 80074fa:	4648      	mov	r0, r9
 80074fc:	9903      	ldr	r1, [sp, #12]
 80074fe:	f000 fafb 	bl	8007af8 <__multadd>
 8007502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007504:	f107 38ff 	add.w	r8, r7, #4294967295
 8007508:	9003      	str	r0, [sp, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8177 	beq.w	80077fe <_dtoa_r+0xb6e>
 8007510:	4629      	mov	r1, r5
 8007512:	2300      	movs	r3, #0
 8007514:	220a      	movs	r2, #10
 8007516:	4648      	mov	r0, r9
 8007518:	f000 faee 	bl	8007af8 <__multadd>
 800751c:	f1bb 0f00 	cmp.w	fp, #0
 8007520:	4605      	mov	r5, r0
 8007522:	dc6f      	bgt.n	8007604 <_dtoa_r+0x974>
 8007524:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007526:	2b02      	cmp	r3, #2
 8007528:	dc49      	bgt.n	80075be <_dtoa_r+0x92e>
 800752a:	e06b      	b.n	8007604 <_dtoa_r+0x974>
 800752c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800752e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007532:	e73c      	b.n	80073ae <_dtoa_r+0x71e>
 8007534:	3fe00000 	.word	0x3fe00000
 8007538:	40240000 	.word	0x40240000
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	1e5c      	subs	r4, r3, #1
 8007540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007542:	42a3      	cmp	r3, r4
 8007544:	db09      	blt.n	800755a <_dtoa_r+0x8ca>
 8007546:	1b1c      	subs	r4, r3, r4
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f6bf af30 	bge.w	80073b0 <_dtoa_r+0x720>
 8007550:	9b04      	ldr	r3, [sp, #16]
 8007552:	9a08      	ldr	r2, [sp, #32]
 8007554:	1a9e      	subs	r6, r3, r2
 8007556:	2300      	movs	r3, #0
 8007558:	e72b      	b.n	80073b2 <_dtoa_r+0x722>
 800755a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800755e:	1ae3      	subs	r3, r4, r3
 8007560:	441a      	add	r2, r3
 8007562:	940a      	str	r4, [sp, #40]	@ 0x28
 8007564:	9e04      	ldr	r6, [sp, #16]
 8007566:	2400      	movs	r4, #0
 8007568:	9b08      	ldr	r3, [sp, #32]
 800756a:	920e      	str	r2, [sp, #56]	@ 0x38
 800756c:	e721      	b.n	80073b2 <_dtoa_r+0x722>
 800756e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007570:	9e04      	ldr	r6, [sp, #16]
 8007572:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007574:	e728      	b.n	80073c8 <_dtoa_r+0x738>
 8007576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800757a:	e751      	b.n	8007420 <_dtoa_r+0x790>
 800757c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800757e:	9903      	ldr	r1, [sp, #12]
 8007580:	e750      	b.n	8007424 <_dtoa_r+0x794>
 8007582:	f8cd 800c 	str.w	r8, [sp, #12]
 8007586:	e751      	b.n	800742c <_dtoa_r+0x79c>
 8007588:	2300      	movs	r3, #0
 800758a:	e779      	b.n	8007480 <_dtoa_r+0x7f0>
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	e777      	b.n	8007480 <_dtoa_r+0x7f0>
 8007590:	2300      	movs	r3, #0
 8007592:	930a      	str	r3, [sp, #40]	@ 0x28
 8007594:	e779      	b.n	800748a <_dtoa_r+0x7fa>
 8007596:	d093      	beq.n	80074c0 <_dtoa_r+0x830>
 8007598:	9a04      	ldr	r2, [sp, #16]
 800759a:	331c      	adds	r3, #28
 800759c:	441a      	add	r2, r3
 800759e:	9204      	str	r2, [sp, #16]
 80075a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a2:	441e      	add	r6, r3
 80075a4:	441a      	add	r2, r3
 80075a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a8:	e78a      	b.n	80074c0 <_dtoa_r+0x830>
 80075aa:	4603      	mov	r3, r0
 80075ac:	e7f4      	b.n	8007598 <_dtoa_r+0x908>
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	46b8      	mov	r8, r7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc20      	bgt.n	80075f8 <_dtoa_r+0x968>
 80075b6:	469b      	mov	fp, r3
 80075b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	dd1e      	ble.n	80075fc <_dtoa_r+0x96c>
 80075be:	f1bb 0f00 	cmp.w	fp, #0
 80075c2:	f47f adb1 	bne.w	8007128 <_dtoa_r+0x498>
 80075c6:	4621      	mov	r1, r4
 80075c8:	465b      	mov	r3, fp
 80075ca:	2205      	movs	r2, #5
 80075cc:	4648      	mov	r0, r9
 80075ce:	f000 fa93 	bl	8007af8 <__multadd>
 80075d2:	4601      	mov	r1, r0
 80075d4:	4604      	mov	r4, r0
 80075d6:	9803      	ldr	r0, [sp, #12]
 80075d8:	f000 fce8 	bl	8007fac <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f77f ada3 	ble.w	8007128 <_dtoa_r+0x498>
 80075e2:	4656      	mov	r6, sl
 80075e4:	2331      	movs	r3, #49	@ 0x31
 80075e6:	f108 0801 	add.w	r8, r8, #1
 80075ea:	f806 3b01 	strb.w	r3, [r6], #1
 80075ee:	e59f      	b.n	8007130 <_dtoa_r+0x4a0>
 80075f0:	46b8      	mov	r8, r7
 80075f2:	9c08      	ldr	r4, [sp, #32]
 80075f4:	4625      	mov	r5, r4
 80075f6:	e7f4      	b.n	80075e2 <_dtoa_r+0x952>
 80075f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80075fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8101 	beq.w	8007806 <_dtoa_r+0xb76>
 8007604:	2e00      	cmp	r6, #0
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x984>
 8007608:	4629      	mov	r1, r5
 800760a:	4632      	mov	r2, r6
 800760c:	4648      	mov	r0, r9
 800760e:	f000 fc61 	bl	8007ed4 <__lshift>
 8007612:	4605      	mov	r5, r0
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05c      	beq.n	80076d4 <_dtoa_r+0xa44>
 800761a:	4648      	mov	r0, r9
 800761c:	6869      	ldr	r1, [r5, #4]
 800761e:	f000 fa09 	bl	8007a34 <_Balloc>
 8007622:	4606      	mov	r6, r0
 8007624:	b928      	cbnz	r0, 8007632 <_dtoa_r+0x9a2>
 8007626:	4602      	mov	r2, r0
 8007628:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800762c:	4b80      	ldr	r3, [pc, #512]	@ (8007830 <_dtoa_r+0xba0>)
 800762e:	f7ff bb43 	b.w	8006cb8 <_dtoa_r+0x28>
 8007632:	692a      	ldr	r2, [r5, #16]
 8007634:	f105 010c 	add.w	r1, r5, #12
 8007638:	3202      	adds	r2, #2
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	300c      	adds	r0, #12
 800763e:	f001 ff3f 	bl	80094c0 <memcpy>
 8007642:	2201      	movs	r2, #1
 8007644:	4631      	mov	r1, r6
 8007646:	4648      	mov	r0, r9
 8007648:	f000 fc44 	bl	8007ed4 <__lshift>
 800764c:	462f      	mov	r7, r5
 800764e:	4605      	mov	r5, r0
 8007650:	f10a 0301 	add.w	r3, sl, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	eb0a 030b 	add.w	r3, sl, fp
 800765a:	930a      	str	r3, [sp, #40]	@ 0x28
 800765c:	9b06      	ldr	r3, [sp, #24]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	9309      	str	r3, [sp, #36]	@ 0x24
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	9803      	ldr	r0, [sp, #12]
 800766a:	f103 3bff 	add.w	fp, r3, #4294967295
 800766e:	f7ff fa87 	bl	8006b80 <quorem>
 8007672:	4603      	mov	r3, r0
 8007674:	4639      	mov	r1, r7
 8007676:	3330      	adds	r3, #48	@ 0x30
 8007678:	9006      	str	r0, [sp, #24]
 800767a:	9803      	ldr	r0, [sp, #12]
 800767c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767e:	f000 fc95 	bl	8007fac <__mcmp>
 8007682:	462a      	mov	r2, r5
 8007684:	9008      	str	r0, [sp, #32]
 8007686:	4621      	mov	r1, r4
 8007688:	4648      	mov	r0, r9
 800768a:	f000 fcab 	bl	8007fe4 <__mdiff>
 800768e:	68c2      	ldr	r2, [r0, #12]
 8007690:	4606      	mov	r6, r0
 8007692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007694:	bb02      	cbnz	r2, 80076d8 <_dtoa_r+0xa48>
 8007696:	4601      	mov	r1, r0
 8007698:	9803      	ldr	r0, [sp, #12]
 800769a:	f000 fc87 	bl	8007fac <__mcmp>
 800769e:	4602      	mov	r2, r0
 80076a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a2:	4631      	mov	r1, r6
 80076a4:	4648      	mov	r0, r9
 80076a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80076aa:	f000 fa03 	bl	8007ab4 <_Bfree>
 80076ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076b2:	9e04      	ldr	r6, [sp, #16]
 80076b4:	ea42 0103 	orr.w	r1, r2, r3
 80076b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ba:	4319      	orrs	r1, r3
 80076bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076be:	d10d      	bne.n	80076dc <_dtoa_r+0xa4c>
 80076c0:	2b39      	cmp	r3, #57	@ 0x39
 80076c2:	d027      	beq.n	8007714 <_dtoa_r+0xa84>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	dd01      	ble.n	80076ce <_dtoa_r+0xa3e>
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	3331      	adds	r3, #49	@ 0x31
 80076ce:	f88b 3000 	strb.w	r3, [fp]
 80076d2:	e52e      	b.n	8007132 <_dtoa_r+0x4a2>
 80076d4:	4628      	mov	r0, r5
 80076d6:	e7b9      	b.n	800764c <_dtoa_r+0x9bc>
 80076d8:	2201      	movs	r2, #1
 80076da:	e7e2      	b.n	80076a2 <_dtoa_r+0xa12>
 80076dc:	9908      	ldr	r1, [sp, #32]
 80076de:	2900      	cmp	r1, #0
 80076e0:	db04      	blt.n	80076ec <_dtoa_r+0xa5c>
 80076e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80076e4:	4301      	orrs	r1, r0
 80076e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e8:	4301      	orrs	r1, r0
 80076ea:	d120      	bne.n	800772e <_dtoa_r+0xa9e>
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	ddee      	ble.n	80076ce <_dtoa_r+0xa3e>
 80076f0:	2201      	movs	r2, #1
 80076f2:	9903      	ldr	r1, [sp, #12]
 80076f4:	4648      	mov	r0, r9
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	f000 fbec 	bl	8007ed4 <__lshift>
 80076fc:	4621      	mov	r1, r4
 80076fe:	9003      	str	r0, [sp, #12]
 8007700:	f000 fc54 	bl	8007fac <__mcmp>
 8007704:	2800      	cmp	r0, #0
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	dc02      	bgt.n	8007710 <_dtoa_r+0xa80>
 800770a:	d1e0      	bne.n	80076ce <_dtoa_r+0xa3e>
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	d5de      	bpl.n	80076ce <_dtoa_r+0xa3e>
 8007710:	2b39      	cmp	r3, #57	@ 0x39
 8007712:	d1da      	bne.n	80076ca <_dtoa_r+0xa3a>
 8007714:	2339      	movs	r3, #57	@ 0x39
 8007716:	f88b 3000 	strb.w	r3, [fp]
 800771a:	4633      	mov	r3, r6
 800771c:	461e      	mov	r6, r3
 800771e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007722:	3b01      	subs	r3, #1
 8007724:	2a39      	cmp	r2, #57	@ 0x39
 8007726:	d04e      	beq.n	80077c6 <_dtoa_r+0xb36>
 8007728:	3201      	adds	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e501      	b.n	8007132 <_dtoa_r+0x4a2>
 800772e:	2a00      	cmp	r2, #0
 8007730:	dd03      	ble.n	800773a <_dtoa_r+0xaaa>
 8007732:	2b39      	cmp	r3, #57	@ 0x39
 8007734:	d0ee      	beq.n	8007714 <_dtoa_r+0xa84>
 8007736:	3301      	adds	r3, #1
 8007738:	e7c9      	b.n	80076ce <_dtoa_r+0xa3e>
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800773e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007742:	428a      	cmp	r2, r1
 8007744:	d028      	beq.n	8007798 <_dtoa_r+0xb08>
 8007746:	2300      	movs	r3, #0
 8007748:	220a      	movs	r2, #10
 800774a:	9903      	ldr	r1, [sp, #12]
 800774c:	4648      	mov	r0, r9
 800774e:	f000 f9d3 	bl	8007af8 <__multadd>
 8007752:	42af      	cmp	r7, r5
 8007754:	9003      	str	r0, [sp, #12]
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	f04f 020a 	mov.w	r2, #10
 800775e:	4639      	mov	r1, r7
 8007760:	4648      	mov	r0, r9
 8007762:	d107      	bne.n	8007774 <_dtoa_r+0xae4>
 8007764:	f000 f9c8 	bl	8007af8 <__multadd>
 8007768:	4607      	mov	r7, r0
 800776a:	4605      	mov	r5, r0
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	3301      	adds	r3, #1
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	e777      	b.n	8007664 <_dtoa_r+0x9d4>
 8007774:	f000 f9c0 	bl	8007af8 <__multadd>
 8007778:	4629      	mov	r1, r5
 800777a:	4607      	mov	r7, r0
 800777c:	2300      	movs	r3, #0
 800777e:	220a      	movs	r2, #10
 8007780:	4648      	mov	r0, r9
 8007782:	f000 f9b9 	bl	8007af8 <__multadd>
 8007786:	4605      	mov	r5, r0
 8007788:	e7f0      	b.n	800776c <_dtoa_r+0xadc>
 800778a:	f1bb 0f00 	cmp.w	fp, #0
 800778e:	bfcc      	ite	gt
 8007790:	465e      	movgt	r6, fp
 8007792:	2601      	movle	r6, #1
 8007794:	2700      	movs	r7, #0
 8007796:	4456      	add	r6, sl
 8007798:	2201      	movs	r2, #1
 800779a:	9903      	ldr	r1, [sp, #12]
 800779c:	4648      	mov	r0, r9
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	f000 fb98 	bl	8007ed4 <__lshift>
 80077a4:	4621      	mov	r1, r4
 80077a6:	9003      	str	r0, [sp, #12]
 80077a8:	f000 fc00 	bl	8007fac <__mcmp>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dcb4      	bgt.n	800771a <_dtoa_r+0xa8a>
 80077b0:	d102      	bne.n	80077b8 <_dtoa_r+0xb28>
 80077b2:	9b04      	ldr	r3, [sp, #16]
 80077b4:	07db      	lsls	r3, r3, #31
 80077b6:	d4b0      	bmi.n	800771a <_dtoa_r+0xa8a>
 80077b8:	4633      	mov	r3, r6
 80077ba:	461e      	mov	r6, r3
 80077bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c0:	2a30      	cmp	r2, #48	@ 0x30
 80077c2:	d0fa      	beq.n	80077ba <_dtoa_r+0xb2a>
 80077c4:	e4b5      	b.n	8007132 <_dtoa_r+0x4a2>
 80077c6:	459a      	cmp	sl, r3
 80077c8:	d1a8      	bne.n	800771c <_dtoa_r+0xa8c>
 80077ca:	2331      	movs	r3, #49	@ 0x31
 80077cc:	f108 0801 	add.w	r8, r8, #1
 80077d0:	f88a 3000 	strb.w	r3, [sl]
 80077d4:	e4ad      	b.n	8007132 <_dtoa_r+0x4a2>
 80077d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007834 <_dtoa_r+0xba4>
 80077dc:	b11b      	cbz	r3, 80077e6 <_dtoa_r+0xb56>
 80077de:	f10a 0308 	add.w	r3, sl, #8
 80077e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4650      	mov	r0, sl
 80077e8:	b017      	add	sp, #92	@ 0x5c
 80077ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f77f ae2e 	ble.w	8007452 <_dtoa_r+0x7c2>
 80077f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077fa:	2001      	movs	r0, #1
 80077fc:	e64d      	b.n	800749a <_dtoa_r+0x80a>
 80077fe:	f1bb 0f00 	cmp.w	fp, #0
 8007802:	f77f aed9 	ble.w	80075b8 <_dtoa_r+0x928>
 8007806:	4656      	mov	r6, sl
 8007808:	4621      	mov	r1, r4
 800780a:	9803      	ldr	r0, [sp, #12]
 800780c:	f7ff f9b8 	bl	8006b80 <quorem>
 8007810:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007814:	f806 3b01 	strb.w	r3, [r6], #1
 8007818:	eba6 020a 	sub.w	r2, r6, sl
 800781c:	4593      	cmp	fp, r2
 800781e:	ddb4      	ble.n	800778a <_dtoa_r+0xafa>
 8007820:	2300      	movs	r3, #0
 8007822:	220a      	movs	r2, #10
 8007824:	4648      	mov	r0, r9
 8007826:	9903      	ldr	r1, [sp, #12]
 8007828:	f000 f966 	bl	8007af8 <__multadd>
 800782c:	9003      	str	r0, [sp, #12]
 800782e:	e7eb      	b.n	8007808 <_dtoa_r+0xb78>
 8007830:	0800a3ff 	.word	0x0800a3ff
 8007834:	0800a383 	.word	0x0800a383

08007838 <_free_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4605      	mov	r5, r0
 800783c:	2900      	cmp	r1, #0
 800783e:	d040      	beq.n	80078c2 <_free_r+0x8a>
 8007840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007844:	1f0c      	subs	r4, r1, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	bfb8      	it	lt
 800784a:	18e4      	addlt	r4, r4, r3
 800784c:	f000 f8e6 	bl	8007a1c <__malloc_lock>
 8007850:	4a1c      	ldr	r2, [pc, #112]	@ (80078c4 <_free_r+0x8c>)
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	b933      	cbnz	r3, 8007864 <_free_r+0x2c>
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	6014      	str	r4, [r2, #0]
 800785a:	4628      	mov	r0, r5
 800785c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007860:	f000 b8e2 	b.w	8007a28 <__malloc_unlock>
 8007864:	42a3      	cmp	r3, r4
 8007866:	d908      	bls.n	800787a <_free_r+0x42>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	1821      	adds	r1, r4, r0
 800786c:	428b      	cmp	r3, r1
 800786e:	bf01      	itttt	eq
 8007870:	6819      	ldreq	r1, [r3, #0]
 8007872:	685b      	ldreq	r3, [r3, #4]
 8007874:	1809      	addeq	r1, r1, r0
 8007876:	6021      	streq	r1, [r4, #0]
 8007878:	e7ed      	b.n	8007856 <_free_r+0x1e>
 800787a:	461a      	mov	r2, r3
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b10b      	cbz	r3, 8007884 <_free_r+0x4c>
 8007880:	42a3      	cmp	r3, r4
 8007882:	d9fa      	bls.n	800787a <_free_r+0x42>
 8007884:	6811      	ldr	r1, [r2, #0]
 8007886:	1850      	adds	r0, r2, r1
 8007888:	42a0      	cmp	r0, r4
 800788a:	d10b      	bne.n	80078a4 <_free_r+0x6c>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	4401      	add	r1, r0
 8007890:	1850      	adds	r0, r2, r1
 8007892:	4283      	cmp	r3, r0
 8007894:	6011      	str	r1, [r2, #0]
 8007896:	d1e0      	bne.n	800785a <_free_r+0x22>
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	4408      	add	r0, r1
 800789e:	6010      	str	r0, [r2, #0]
 80078a0:	6053      	str	r3, [r2, #4]
 80078a2:	e7da      	b.n	800785a <_free_r+0x22>
 80078a4:	d902      	bls.n	80078ac <_free_r+0x74>
 80078a6:	230c      	movs	r3, #12
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	e7d6      	b.n	800785a <_free_r+0x22>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	1821      	adds	r1, r4, r0
 80078b0:	428b      	cmp	r3, r1
 80078b2:	bf01      	itttt	eq
 80078b4:	6819      	ldreq	r1, [r3, #0]
 80078b6:	685b      	ldreq	r3, [r3, #4]
 80078b8:	1809      	addeq	r1, r1, r0
 80078ba:	6021      	streq	r1, [r4, #0]
 80078bc:	6063      	str	r3, [r4, #4]
 80078be:	6054      	str	r4, [r2, #4]
 80078c0:	e7cb      	b.n	800785a <_free_r+0x22>
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000730 	.word	0x20000730

080078c8 <malloc>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	@ (80078d4 <malloc+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f000 b825 	b.w	800791c <_malloc_r>
 80078d2:	bf00      	nop
 80078d4:	2000005c 	.word	0x2000005c

080078d8 <sbrk_aligned>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4e0f      	ldr	r6, [pc, #60]	@ (8007918 <sbrk_aligned+0x40>)
 80078dc:	460c      	mov	r4, r1
 80078de:	6831      	ldr	r1, [r6, #0]
 80078e0:	4605      	mov	r5, r0
 80078e2:	b911      	cbnz	r1, 80078ea <sbrk_aligned+0x12>
 80078e4:	f001 fddc 	bl	80094a0 <_sbrk_r>
 80078e8:	6030      	str	r0, [r6, #0]
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f001 fdd7 	bl	80094a0 <_sbrk_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d103      	bne.n	80078fe <sbrk_aligned+0x26>
 80078f6:	f04f 34ff 	mov.w	r4, #4294967295
 80078fa:	4620      	mov	r0, r4
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	1cc4      	adds	r4, r0, #3
 8007900:	f024 0403 	bic.w	r4, r4, #3
 8007904:	42a0      	cmp	r0, r4
 8007906:	d0f8      	beq.n	80078fa <sbrk_aligned+0x22>
 8007908:	1a21      	subs	r1, r4, r0
 800790a:	4628      	mov	r0, r5
 800790c:	f001 fdc8 	bl	80094a0 <_sbrk_r>
 8007910:	3001      	adds	r0, #1
 8007912:	d1f2      	bne.n	80078fa <sbrk_aligned+0x22>
 8007914:	e7ef      	b.n	80078f6 <sbrk_aligned+0x1e>
 8007916:	bf00      	nop
 8007918:	2000072c 	.word	0x2000072c

0800791c <_malloc_r>:
 800791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007920:	1ccd      	adds	r5, r1, #3
 8007922:	f025 0503 	bic.w	r5, r5, #3
 8007926:	3508      	adds	r5, #8
 8007928:	2d0c      	cmp	r5, #12
 800792a:	bf38      	it	cc
 800792c:	250c      	movcc	r5, #12
 800792e:	2d00      	cmp	r5, #0
 8007930:	4606      	mov	r6, r0
 8007932:	db01      	blt.n	8007938 <_malloc_r+0x1c>
 8007934:	42a9      	cmp	r1, r5
 8007936:	d904      	bls.n	8007942 <_malloc_r+0x26>
 8007938:	230c      	movs	r3, #12
 800793a:	6033      	str	r3, [r6, #0]
 800793c:	2000      	movs	r0, #0
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a18 <_malloc_r+0xfc>
 8007946:	f000 f869 	bl	8007a1c <__malloc_lock>
 800794a:	f8d8 3000 	ldr.w	r3, [r8]
 800794e:	461c      	mov	r4, r3
 8007950:	bb44      	cbnz	r4, 80079a4 <_malloc_r+0x88>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff ffbf 	bl	80078d8 <sbrk_aligned>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	4604      	mov	r4, r0
 800795e:	d158      	bne.n	8007a12 <_malloc_r+0xf6>
 8007960:	f8d8 4000 	ldr.w	r4, [r8]
 8007964:	4627      	mov	r7, r4
 8007966:	2f00      	cmp	r7, #0
 8007968:	d143      	bne.n	80079f2 <_malloc_r+0xd6>
 800796a:	2c00      	cmp	r4, #0
 800796c:	d04b      	beq.n	8007a06 <_malloc_r+0xea>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	4639      	mov	r1, r7
 8007972:	4630      	mov	r0, r6
 8007974:	eb04 0903 	add.w	r9, r4, r3
 8007978:	f001 fd92 	bl	80094a0 <_sbrk_r>
 800797c:	4581      	cmp	r9, r0
 800797e:	d142      	bne.n	8007a06 <_malloc_r+0xea>
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	1a6d      	subs	r5, r5, r1
 8007986:	4629      	mov	r1, r5
 8007988:	f7ff ffa6 	bl	80078d8 <sbrk_aligned>
 800798c:	3001      	adds	r0, #1
 800798e:	d03a      	beq.n	8007a06 <_malloc_r+0xea>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	442b      	add	r3, r5
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	f8d8 3000 	ldr.w	r3, [r8]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	bb62      	cbnz	r2, 80079f8 <_malloc_r+0xdc>
 800799e:	f8c8 7000 	str.w	r7, [r8]
 80079a2:	e00f      	b.n	80079c4 <_malloc_r+0xa8>
 80079a4:	6822      	ldr	r2, [r4, #0]
 80079a6:	1b52      	subs	r2, r2, r5
 80079a8:	d420      	bmi.n	80079ec <_malloc_r+0xd0>
 80079aa:	2a0b      	cmp	r2, #11
 80079ac:	d917      	bls.n	80079de <_malloc_r+0xc2>
 80079ae:	1961      	adds	r1, r4, r5
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	6025      	str	r5, [r4, #0]
 80079b4:	bf18      	it	ne
 80079b6:	6059      	strne	r1, [r3, #4]
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	bf08      	it	eq
 80079bc:	f8c8 1000 	streq.w	r1, [r8]
 80079c0:	5162      	str	r2, [r4, r5]
 80079c2:	604b      	str	r3, [r1, #4]
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 f82f 	bl	8007a28 <__malloc_unlock>
 80079ca:	f104 000b 	add.w	r0, r4, #11
 80079ce:	1d23      	adds	r3, r4, #4
 80079d0:	f020 0007 	bic.w	r0, r0, #7
 80079d4:	1ac2      	subs	r2, r0, r3
 80079d6:	bf1c      	itt	ne
 80079d8:	1a1b      	subne	r3, r3, r0
 80079da:	50a3      	strne	r3, [r4, r2]
 80079dc:	e7af      	b.n	800793e <_malloc_r+0x22>
 80079de:	6862      	ldr	r2, [r4, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	bf0c      	ite	eq
 80079e4:	f8c8 2000 	streq.w	r2, [r8]
 80079e8:	605a      	strne	r2, [r3, #4]
 80079ea:	e7eb      	b.n	80079c4 <_malloc_r+0xa8>
 80079ec:	4623      	mov	r3, r4
 80079ee:	6864      	ldr	r4, [r4, #4]
 80079f0:	e7ae      	b.n	8007950 <_malloc_r+0x34>
 80079f2:	463c      	mov	r4, r7
 80079f4:	687f      	ldr	r7, [r7, #4]
 80079f6:	e7b6      	b.n	8007966 <_malloc_r+0x4a>
 80079f8:	461a      	mov	r2, r3
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d1fb      	bne.n	80079f8 <_malloc_r+0xdc>
 8007a00:	2300      	movs	r3, #0
 8007a02:	6053      	str	r3, [r2, #4]
 8007a04:	e7de      	b.n	80079c4 <_malloc_r+0xa8>
 8007a06:	230c      	movs	r3, #12
 8007a08:	4630      	mov	r0, r6
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	f000 f80c 	bl	8007a28 <__malloc_unlock>
 8007a10:	e794      	b.n	800793c <_malloc_r+0x20>
 8007a12:	6005      	str	r5, [r0, #0]
 8007a14:	e7d6      	b.n	80079c4 <_malloc_r+0xa8>
 8007a16:	bf00      	nop
 8007a18:	20000730 	.word	0x20000730

08007a1c <__malloc_lock>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__malloc_lock+0x8>)
 8007a1e:	f7ff b89a 	b.w	8006b56 <__retarget_lock_acquire_recursive>
 8007a22:	bf00      	nop
 8007a24:	20000728 	.word	0x20000728

08007a28 <__malloc_unlock>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__malloc_unlock+0x8>)
 8007a2a:	f7ff b895 	b.w	8006b58 <__retarget_lock_release_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20000728 	.word	0x20000728

08007a34 <_Balloc>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	69c6      	ldr	r6, [r0, #28]
 8007a38:	4604      	mov	r4, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	b976      	cbnz	r6, 8007a5c <_Balloc+0x28>
 8007a3e:	2010      	movs	r0, #16
 8007a40:	f7ff ff42 	bl	80078c8 <malloc>
 8007a44:	4602      	mov	r2, r0
 8007a46:	61e0      	str	r0, [r4, #28]
 8007a48:	b920      	cbnz	r0, 8007a54 <_Balloc+0x20>
 8007a4a:	216b      	movs	r1, #107	@ 0x6b
 8007a4c:	4b17      	ldr	r3, [pc, #92]	@ (8007aac <_Balloc+0x78>)
 8007a4e:	4818      	ldr	r0, [pc, #96]	@ (8007ab0 <_Balloc+0x7c>)
 8007a50:	f001 fd4a 	bl	80094e8 <__assert_func>
 8007a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a58:	6006      	str	r6, [r0, #0]
 8007a5a:	60c6      	str	r6, [r0, #12]
 8007a5c:	69e6      	ldr	r6, [r4, #28]
 8007a5e:	68f3      	ldr	r3, [r6, #12]
 8007a60:	b183      	cbz	r3, 8007a84 <_Balloc+0x50>
 8007a62:	69e3      	ldr	r3, [r4, #28]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a6a:	b9b8      	cbnz	r0, 8007a9c <_Balloc+0x68>
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007a72:	1d72      	adds	r2, r6, #5
 8007a74:	4620      	mov	r0, r4
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	f001 fd54 	bl	8009524 <_calloc_r>
 8007a7c:	b160      	cbz	r0, 8007a98 <_Balloc+0x64>
 8007a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a82:	e00e      	b.n	8007aa2 <_Balloc+0x6e>
 8007a84:	2221      	movs	r2, #33	@ 0x21
 8007a86:	2104      	movs	r1, #4
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f001 fd4b 	bl	8009524 <_calloc_r>
 8007a8e:	69e3      	ldr	r3, [r4, #28]
 8007a90:	60f0      	str	r0, [r6, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e4      	bne.n	8007a62 <_Balloc+0x2e>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	6802      	ldr	r2, [r0, #0]
 8007a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007aa8:	e7f7      	b.n	8007a9a <_Balloc+0x66>
 8007aaa:	bf00      	nop
 8007aac:	0800a390 	.word	0x0800a390
 8007ab0:	0800a410 	.word	0x0800a410

08007ab4 <_Bfree>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	69c6      	ldr	r6, [r0, #28]
 8007ab8:	4605      	mov	r5, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	b976      	cbnz	r6, 8007adc <_Bfree+0x28>
 8007abe:	2010      	movs	r0, #16
 8007ac0:	f7ff ff02 	bl	80078c8 <malloc>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	61e8      	str	r0, [r5, #28]
 8007ac8:	b920      	cbnz	r0, 8007ad4 <_Bfree+0x20>
 8007aca:	218f      	movs	r1, #143	@ 0x8f
 8007acc:	4b08      	ldr	r3, [pc, #32]	@ (8007af0 <_Bfree+0x3c>)
 8007ace:	4809      	ldr	r0, [pc, #36]	@ (8007af4 <_Bfree+0x40>)
 8007ad0:	f001 fd0a 	bl	80094e8 <__assert_func>
 8007ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad8:	6006      	str	r6, [r0, #0]
 8007ada:	60c6      	str	r6, [r0, #12]
 8007adc:	b13c      	cbz	r4, 8007aee <_Bfree+0x3a>
 8007ade:	69eb      	ldr	r3, [r5, #28]
 8007ae0:	6862      	ldr	r2, [r4, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ae8:	6021      	str	r1, [r4, #0]
 8007aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	0800a390 	.word	0x0800a390
 8007af4:	0800a410 	.word	0x0800a410

08007af8 <__multadd>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	4607      	mov	r7, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	461e      	mov	r6, r3
 8007b02:	2000      	movs	r0, #0
 8007b04:	690d      	ldr	r5, [r1, #16]
 8007b06:	f101 0c14 	add.w	ip, r1, #20
 8007b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b0e:	3001      	adds	r0, #1
 8007b10:	b299      	uxth	r1, r3
 8007b12:	fb02 6101 	mla	r1, r2, r1, r6
 8007b16:	0c1e      	lsrs	r6, r3, #16
 8007b18:	0c0b      	lsrs	r3, r1, #16
 8007b1a:	fb02 3306 	mla	r3, r2, r6, r3
 8007b1e:	b289      	uxth	r1, r1
 8007b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b24:	4285      	cmp	r5, r0
 8007b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b2e:	dcec      	bgt.n	8007b0a <__multadd+0x12>
 8007b30:	b30e      	cbz	r6, 8007b76 <__multadd+0x7e>
 8007b32:	68a3      	ldr	r3, [r4, #8]
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dc19      	bgt.n	8007b6c <__multadd+0x74>
 8007b38:	6861      	ldr	r1, [r4, #4]
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	3101      	adds	r1, #1
 8007b3e:	f7ff ff79 	bl	8007a34 <_Balloc>
 8007b42:	4680      	mov	r8, r0
 8007b44:	b928      	cbnz	r0, 8007b52 <__multadd+0x5a>
 8007b46:	4602      	mov	r2, r0
 8007b48:	21ba      	movs	r1, #186	@ 0xba
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b7c <__multadd+0x84>)
 8007b4c:	480c      	ldr	r0, [pc, #48]	@ (8007b80 <__multadd+0x88>)
 8007b4e:	f001 fccb 	bl	80094e8 <__assert_func>
 8007b52:	6922      	ldr	r2, [r4, #16]
 8007b54:	f104 010c 	add.w	r1, r4, #12
 8007b58:	3202      	adds	r2, #2
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	300c      	adds	r0, #12
 8007b5e:	f001 fcaf 	bl	80094c0 <memcpy>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4638      	mov	r0, r7
 8007b66:	f7ff ffa5 	bl	8007ab4 <_Bfree>
 8007b6a:	4644      	mov	r4, r8
 8007b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b70:	3501      	adds	r5, #1
 8007b72:	615e      	str	r6, [r3, #20]
 8007b74:	6125      	str	r5, [r4, #16]
 8007b76:	4620      	mov	r0, r4
 8007b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7c:	0800a3ff 	.word	0x0800a3ff
 8007b80:	0800a410 	.word	0x0800a410

08007b84 <__s2b>:
 8007b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4615      	mov	r5, r2
 8007b8a:	2209      	movs	r2, #9
 8007b8c:	461f      	mov	r7, r3
 8007b8e:	3308      	adds	r3, #8
 8007b90:	460c      	mov	r4, r1
 8007b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b96:	4606      	mov	r6, r0
 8007b98:	2201      	movs	r2, #1
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	db09      	blt.n	8007bb4 <__s2b+0x30>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff ff47 	bl	8007a34 <_Balloc>
 8007ba6:	b940      	cbnz	r0, 8007bba <__s2b+0x36>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	21d3      	movs	r1, #211	@ 0xd3
 8007bac:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <__s2b+0x8c>)
 8007bae:	4819      	ldr	r0, [pc, #100]	@ (8007c14 <__s2b+0x90>)
 8007bb0:	f001 fc9a 	bl	80094e8 <__assert_func>
 8007bb4:	0052      	lsls	r2, r2, #1
 8007bb6:	3101      	adds	r1, #1
 8007bb8:	e7f0      	b.n	8007b9c <__s2b+0x18>
 8007bba:	9b08      	ldr	r3, [sp, #32]
 8007bbc:	2d09      	cmp	r5, #9
 8007bbe:	6143      	str	r3, [r0, #20]
 8007bc0:	f04f 0301 	mov.w	r3, #1
 8007bc4:	6103      	str	r3, [r0, #16]
 8007bc6:	dd16      	ble.n	8007bf6 <__s2b+0x72>
 8007bc8:	f104 0909 	add.w	r9, r4, #9
 8007bcc:	46c8      	mov	r8, r9
 8007bce:	442c      	add	r4, r5
 8007bd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	4630      	mov	r0, r6
 8007bda:	3b30      	subs	r3, #48	@ 0x30
 8007bdc:	f7ff ff8c 	bl	8007af8 <__multadd>
 8007be0:	45a0      	cmp	r8, r4
 8007be2:	d1f5      	bne.n	8007bd0 <__s2b+0x4c>
 8007be4:	f1a5 0408 	sub.w	r4, r5, #8
 8007be8:	444c      	add	r4, r9
 8007bea:	1b2d      	subs	r5, r5, r4
 8007bec:	1963      	adds	r3, r4, r5
 8007bee:	42bb      	cmp	r3, r7
 8007bf0:	db04      	blt.n	8007bfc <__s2b+0x78>
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	2509      	movs	r5, #9
 8007bf8:	340a      	adds	r4, #10
 8007bfa:	e7f6      	b.n	8007bea <__s2b+0x66>
 8007bfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c00:	4601      	mov	r1, r0
 8007c02:	220a      	movs	r2, #10
 8007c04:	4630      	mov	r0, r6
 8007c06:	3b30      	subs	r3, #48	@ 0x30
 8007c08:	f7ff ff76 	bl	8007af8 <__multadd>
 8007c0c:	e7ee      	b.n	8007bec <__s2b+0x68>
 8007c0e:	bf00      	nop
 8007c10:	0800a3ff 	.word	0x0800a3ff
 8007c14:	0800a410 	.word	0x0800a410

08007c18 <__hi0bits>:
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c1e:	bf3a      	itte	cc
 8007c20:	0403      	lslcc	r3, r0, #16
 8007c22:	2010      	movcc	r0, #16
 8007c24:	2000      	movcs	r0, #0
 8007c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c2a:	bf3c      	itt	cc
 8007c2c:	021b      	lslcc	r3, r3, #8
 8007c2e:	3008      	addcc	r0, #8
 8007c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c34:	bf3c      	itt	cc
 8007c36:	011b      	lslcc	r3, r3, #4
 8007c38:	3004      	addcc	r0, #4
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3e:	bf3c      	itt	cc
 8007c40:	009b      	lslcc	r3, r3, #2
 8007c42:	3002      	addcc	r0, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	db05      	blt.n	8007c54 <__hi0bits+0x3c>
 8007c48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c4c:	f100 0001 	add.w	r0, r0, #1
 8007c50:	bf08      	it	eq
 8007c52:	2020      	moveq	r0, #32
 8007c54:	4770      	bx	lr

08007c56 <__lo0bits>:
 8007c56:	6803      	ldr	r3, [r0, #0]
 8007c58:	4602      	mov	r2, r0
 8007c5a:	f013 0007 	ands.w	r0, r3, #7
 8007c5e:	d00b      	beq.n	8007c78 <__lo0bits+0x22>
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d421      	bmi.n	8007ca8 <__lo0bits+0x52>
 8007c64:	0798      	lsls	r0, r3, #30
 8007c66:	bf49      	itett	mi
 8007c68:	085b      	lsrmi	r3, r3, #1
 8007c6a:	089b      	lsrpl	r3, r3, #2
 8007c6c:	2001      	movmi	r0, #1
 8007c6e:	6013      	strmi	r3, [r2, #0]
 8007c70:	bf5c      	itt	pl
 8007c72:	2002      	movpl	r0, #2
 8007c74:	6013      	strpl	r3, [r2, #0]
 8007c76:	4770      	bx	lr
 8007c78:	b299      	uxth	r1, r3
 8007c7a:	b909      	cbnz	r1, 8007c80 <__lo0bits+0x2a>
 8007c7c:	2010      	movs	r0, #16
 8007c7e:	0c1b      	lsrs	r3, r3, #16
 8007c80:	b2d9      	uxtb	r1, r3
 8007c82:	b909      	cbnz	r1, 8007c88 <__lo0bits+0x32>
 8007c84:	3008      	adds	r0, #8
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	0719      	lsls	r1, r3, #28
 8007c8a:	bf04      	itt	eq
 8007c8c:	091b      	lsreq	r3, r3, #4
 8007c8e:	3004      	addeq	r0, #4
 8007c90:	0799      	lsls	r1, r3, #30
 8007c92:	bf04      	itt	eq
 8007c94:	089b      	lsreq	r3, r3, #2
 8007c96:	3002      	addeq	r0, #2
 8007c98:	07d9      	lsls	r1, r3, #31
 8007c9a:	d403      	bmi.n	8007ca4 <__lo0bits+0x4e>
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	f100 0001 	add.w	r0, r0, #1
 8007ca2:	d003      	beq.n	8007cac <__lo0bits+0x56>
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	4770      	bx	lr
 8007ca8:	2000      	movs	r0, #0
 8007caa:	4770      	bx	lr
 8007cac:	2020      	movs	r0, #32
 8007cae:	4770      	bx	lr

08007cb0 <__i2b>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	f7ff febd 	bl	8007a34 <_Balloc>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	b928      	cbnz	r0, 8007cca <__i2b+0x1a>
 8007cbe:	f240 1145 	movw	r1, #325	@ 0x145
 8007cc2:	4b04      	ldr	r3, [pc, #16]	@ (8007cd4 <__i2b+0x24>)
 8007cc4:	4804      	ldr	r0, [pc, #16]	@ (8007cd8 <__i2b+0x28>)
 8007cc6:	f001 fc0f 	bl	80094e8 <__assert_func>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	6144      	str	r4, [r0, #20]
 8007cce:	6103      	str	r3, [r0, #16]
 8007cd0:	bd10      	pop	{r4, pc}
 8007cd2:	bf00      	nop
 8007cd4:	0800a3ff 	.word	0x0800a3ff
 8007cd8:	0800a410 	.word	0x0800a410

08007cdc <__multiply>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	4617      	mov	r7, r2
 8007ce2:	690a      	ldr	r2, [r1, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bfa2      	ittt	ge
 8007cec:	463b      	movge	r3, r7
 8007cee:	460f      	movge	r7, r1
 8007cf0:	4699      	movge	r9, r3
 8007cf2:	693d      	ldr	r5, [r7, #16]
 8007cf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	eb05 060a 	add.w	r6, r5, sl
 8007d00:	42b3      	cmp	r3, r6
 8007d02:	b085      	sub	sp, #20
 8007d04:	bfb8      	it	lt
 8007d06:	3101      	addlt	r1, #1
 8007d08:	f7ff fe94 	bl	8007a34 <_Balloc>
 8007d0c:	b930      	cbnz	r0, 8007d1c <__multiply+0x40>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d14:	4b40      	ldr	r3, [pc, #256]	@ (8007e18 <__multiply+0x13c>)
 8007d16:	4841      	ldr	r0, [pc, #260]	@ (8007e1c <__multiply+0x140>)
 8007d18:	f001 fbe6 	bl	80094e8 <__assert_func>
 8007d1c:	f100 0414 	add.w	r4, r0, #20
 8007d20:	4623      	mov	r3, r4
 8007d22:	2200      	movs	r2, #0
 8007d24:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d28:	4573      	cmp	r3, lr
 8007d2a:	d320      	bcc.n	8007d6e <__multiply+0x92>
 8007d2c:	f107 0814 	add.w	r8, r7, #20
 8007d30:	f109 0114 	add.w	r1, r9, #20
 8007d34:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d38:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d3c:	9302      	str	r3, [sp, #8]
 8007d3e:	1beb      	subs	r3, r5, r7
 8007d40:	3b15      	subs	r3, #21
 8007d42:	f023 0303 	bic.w	r3, r3, #3
 8007d46:	3304      	adds	r3, #4
 8007d48:	3715      	adds	r7, #21
 8007d4a:	42bd      	cmp	r5, r7
 8007d4c:	bf38      	it	cc
 8007d4e:	2304      	movcc	r3, #4
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	9b02      	ldr	r3, [sp, #8]
 8007d54:	9103      	str	r1, [sp, #12]
 8007d56:	428b      	cmp	r3, r1
 8007d58:	d80c      	bhi.n	8007d74 <__multiply+0x98>
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	dd03      	ble.n	8007d66 <__multiply+0x8a>
 8007d5e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d055      	beq.n	8007e12 <__multiply+0x136>
 8007d66:	6106      	str	r6, [r0, #16]
 8007d68:	b005      	add	sp, #20
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	f843 2b04 	str.w	r2, [r3], #4
 8007d72:	e7d9      	b.n	8007d28 <__multiply+0x4c>
 8007d74:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d78:	f1ba 0f00 	cmp.w	sl, #0
 8007d7c:	d01f      	beq.n	8007dbe <__multiply+0xe2>
 8007d7e:	46c4      	mov	ip, r8
 8007d80:	46a1      	mov	r9, r4
 8007d82:	2700      	movs	r7, #0
 8007d84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d88:	f8d9 3000 	ldr.w	r3, [r9]
 8007d8c:	fa1f fb82 	uxth.w	fp, r2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d96:	443b      	add	r3, r7
 8007d98:	f8d9 7000 	ldr.w	r7, [r9]
 8007d9c:	0c12      	lsrs	r2, r2, #16
 8007d9e:	0c3f      	lsrs	r7, r7, #16
 8007da0:	fb0a 7202 	mla	r2, sl, r2, r7
 8007da4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dae:	4565      	cmp	r5, ip
 8007db0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007db4:	f849 3b04 	str.w	r3, [r9], #4
 8007db8:	d8e4      	bhi.n	8007d84 <__multiply+0xa8>
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	50e7      	str	r7, [r4, r3]
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3104      	adds	r1, #4
 8007dc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dc6:	f1b9 0f00 	cmp.w	r9, #0
 8007dca:	d020      	beq.n	8007e0e <__multiply+0x132>
 8007dcc:	4647      	mov	r7, r8
 8007dce:	46a4      	mov	ip, r4
 8007dd0:	f04f 0a00 	mov.w	sl, #0
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	f8b7 b000 	ldrh.w	fp, [r7]
 8007dda:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	fb09 220b 	mla	r2, r9, fp, r2
 8007de4:	4452      	add	r2, sl
 8007de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dea:	f84c 3b04 	str.w	r3, [ip], #4
 8007dee:	f857 3b04 	ldr.w	r3, [r7], #4
 8007df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007df6:	f8bc 3000 	ldrh.w	r3, [ip]
 8007dfa:	42bd      	cmp	r5, r7
 8007dfc:	fb09 330a 	mla	r3, r9, sl, r3
 8007e00:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e08:	d8e5      	bhi.n	8007dd6 <__multiply+0xfa>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	50a3      	str	r3, [r4, r2]
 8007e0e:	3404      	adds	r4, #4
 8007e10:	e79f      	b.n	8007d52 <__multiply+0x76>
 8007e12:	3e01      	subs	r6, #1
 8007e14:	e7a1      	b.n	8007d5a <__multiply+0x7e>
 8007e16:	bf00      	nop
 8007e18:	0800a3ff 	.word	0x0800a3ff
 8007e1c:	0800a410 	.word	0x0800a410

08007e20 <__pow5mult>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4615      	mov	r5, r2
 8007e26:	f012 0203 	ands.w	r2, r2, #3
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	d007      	beq.n	8007e40 <__pow5mult+0x20>
 8007e30:	4c25      	ldr	r4, [pc, #148]	@ (8007ec8 <__pow5mult+0xa8>)
 8007e32:	3a01      	subs	r2, #1
 8007e34:	2300      	movs	r3, #0
 8007e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3a:	f7ff fe5d 	bl	8007af8 <__multadd>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	10ad      	asrs	r5, r5, #2
 8007e42:	d03d      	beq.n	8007ec0 <__pow5mult+0xa0>
 8007e44:	69fc      	ldr	r4, [r7, #28]
 8007e46:	b97c      	cbnz	r4, 8007e68 <__pow5mult+0x48>
 8007e48:	2010      	movs	r0, #16
 8007e4a:	f7ff fd3d 	bl	80078c8 <malloc>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	61f8      	str	r0, [r7, #28]
 8007e52:	b928      	cbnz	r0, 8007e60 <__pow5mult+0x40>
 8007e54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e58:	4b1c      	ldr	r3, [pc, #112]	@ (8007ecc <__pow5mult+0xac>)
 8007e5a:	481d      	ldr	r0, [pc, #116]	@ (8007ed0 <__pow5mult+0xb0>)
 8007e5c:	f001 fb44 	bl	80094e8 <__assert_func>
 8007e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e64:	6004      	str	r4, [r0, #0]
 8007e66:	60c4      	str	r4, [r0, #12]
 8007e68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e70:	b94c      	cbnz	r4, 8007e86 <__pow5mult+0x66>
 8007e72:	f240 2171 	movw	r1, #625	@ 0x271
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff ff1a 	bl	8007cb0 <__i2b>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	07eb      	lsls	r3, r5, #31
 8007e8c:	d50a      	bpl.n	8007ea4 <__pow5mult+0x84>
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4622      	mov	r2, r4
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ff22 	bl	8007cdc <__multiply>
 8007e98:	4680      	mov	r8, r0
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff fe09 	bl	8007ab4 <_Bfree>
 8007ea2:	4646      	mov	r6, r8
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	d00b      	beq.n	8007ec0 <__pow5mult+0xa0>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	b938      	cbnz	r0, 8007ebc <__pow5mult+0x9c>
 8007eac:	4622      	mov	r2, r4
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff ff13 	bl	8007cdc <__multiply>
 8007eb6:	6020      	str	r0, [r4, #0]
 8007eb8:	f8c0 9000 	str.w	r9, [r0]
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	e7e4      	b.n	8007e8a <__pow5mult+0x6a>
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	bf00      	nop
 8007ec8:	0800a520 	.word	0x0800a520
 8007ecc:	0800a390 	.word	0x0800a390
 8007ed0:	0800a410 	.word	0x0800a410

08007ed4 <__lshift>:
 8007ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	4607      	mov	r7, r0
 8007edc:	4691      	mov	r9, r2
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	6849      	ldr	r1, [r1, #4]
 8007ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ee6:	68a3      	ldr	r3, [r4, #8]
 8007ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eec:	f108 0601 	add.w	r6, r8, #1
 8007ef0:	42b3      	cmp	r3, r6
 8007ef2:	db0b      	blt.n	8007f0c <__lshift+0x38>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff fd9d 	bl	8007a34 <_Balloc>
 8007efa:	4605      	mov	r5, r0
 8007efc:	b948      	cbnz	r0, 8007f12 <__lshift+0x3e>
 8007efe:	4602      	mov	r2, r0
 8007f00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f04:	4b27      	ldr	r3, [pc, #156]	@ (8007fa4 <__lshift+0xd0>)
 8007f06:	4828      	ldr	r0, [pc, #160]	@ (8007fa8 <__lshift+0xd4>)
 8007f08:	f001 faee 	bl	80094e8 <__assert_func>
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	e7ee      	b.n	8007ef0 <__lshift+0x1c>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f100 0114 	add.w	r1, r0, #20
 8007f18:	f100 0210 	add.w	r2, r0, #16
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	4553      	cmp	r3, sl
 8007f20:	db33      	blt.n	8007f8a <__lshift+0xb6>
 8007f22:	6920      	ldr	r0, [r4, #16]
 8007f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f28:	f104 0314 	add.w	r3, r4, #20
 8007f2c:	f019 091f 	ands.w	r9, r9, #31
 8007f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f38:	d02b      	beq.n	8007f92 <__lshift+0xbe>
 8007f3a:	468a      	mov	sl, r1
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	fa00 f009 	lsl.w	r0, r0, r9
 8007f48:	4310      	orrs	r0, r2
 8007f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8007f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f52:	459c      	cmp	ip, r3
 8007f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f58:	d8f3      	bhi.n	8007f42 <__lshift+0x6e>
 8007f5a:	ebac 0304 	sub.w	r3, ip, r4
 8007f5e:	3b15      	subs	r3, #21
 8007f60:	f023 0303 	bic.w	r3, r3, #3
 8007f64:	3304      	adds	r3, #4
 8007f66:	f104 0015 	add.w	r0, r4, #21
 8007f6a:	4560      	cmp	r0, ip
 8007f6c:	bf88      	it	hi
 8007f6e:	2304      	movhi	r3, #4
 8007f70:	50ca      	str	r2, [r1, r3]
 8007f72:	b10a      	cbz	r2, 8007f78 <__lshift+0xa4>
 8007f74:	f108 0602 	add.w	r6, r8, #2
 8007f78:	3e01      	subs	r6, #1
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	612e      	str	r6, [r5, #16]
 8007f80:	f7ff fd98 	bl	8007ab4 <_Bfree>
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f8e:	3301      	adds	r3, #1
 8007f90:	e7c5      	b.n	8007f1e <__lshift+0x4a>
 8007f92:	3904      	subs	r1, #4
 8007f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f98:	459c      	cmp	ip, r3
 8007f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f9e:	d8f9      	bhi.n	8007f94 <__lshift+0xc0>
 8007fa0:	e7ea      	b.n	8007f78 <__lshift+0xa4>
 8007fa2:	bf00      	nop
 8007fa4:	0800a3ff 	.word	0x0800a3ff
 8007fa8:	0800a410 	.word	0x0800a410

08007fac <__mcmp>:
 8007fac:	4603      	mov	r3, r0
 8007fae:	690a      	ldr	r2, [r1, #16]
 8007fb0:	6900      	ldr	r0, [r0, #16]
 8007fb2:	b530      	push	{r4, r5, lr}
 8007fb4:	1a80      	subs	r0, r0, r2
 8007fb6:	d10e      	bne.n	8007fd6 <__mcmp+0x2a>
 8007fb8:	3314      	adds	r3, #20
 8007fba:	3114      	adds	r1, #20
 8007fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fcc:	4295      	cmp	r5, r2
 8007fce:	d003      	beq.n	8007fd8 <__mcmp+0x2c>
 8007fd0:	d205      	bcs.n	8007fde <__mcmp+0x32>
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd6:	bd30      	pop	{r4, r5, pc}
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	d3f3      	bcc.n	8007fc4 <__mcmp+0x18>
 8007fdc:	e7fb      	b.n	8007fd6 <__mcmp+0x2a>
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7f9      	b.n	8007fd6 <__mcmp+0x2a>
	...

08007fe4 <__mdiff>:
 8007fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4689      	mov	r9, r1
 8007fea:	4606      	mov	r6, r0
 8007fec:	4611      	mov	r1, r2
 8007fee:	4648      	mov	r0, r9
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	f7ff ffdb 	bl	8007fac <__mcmp>
 8007ff6:	1e05      	subs	r5, r0, #0
 8007ff8:	d112      	bne.n	8008020 <__mdiff+0x3c>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fd19 	bl	8007a34 <_Balloc>
 8008002:	4602      	mov	r2, r0
 8008004:	b928      	cbnz	r0, 8008012 <__mdiff+0x2e>
 8008006:	f240 2137 	movw	r1, #567	@ 0x237
 800800a:	4b3e      	ldr	r3, [pc, #248]	@ (8008104 <__mdiff+0x120>)
 800800c:	483e      	ldr	r0, [pc, #248]	@ (8008108 <__mdiff+0x124>)
 800800e:	f001 fa6b 	bl	80094e8 <__assert_func>
 8008012:	2301      	movs	r3, #1
 8008014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008018:	4610      	mov	r0, r2
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008020:	bfbc      	itt	lt
 8008022:	464b      	movlt	r3, r9
 8008024:	46a1      	movlt	r9, r4
 8008026:	4630      	mov	r0, r6
 8008028:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800802c:	bfba      	itte	lt
 800802e:	461c      	movlt	r4, r3
 8008030:	2501      	movlt	r5, #1
 8008032:	2500      	movge	r5, #0
 8008034:	f7ff fcfe 	bl	8007a34 <_Balloc>
 8008038:	4602      	mov	r2, r0
 800803a:	b918      	cbnz	r0, 8008044 <__mdiff+0x60>
 800803c:	f240 2145 	movw	r1, #581	@ 0x245
 8008040:	4b30      	ldr	r3, [pc, #192]	@ (8008104 <__mdiff+0x120>)
 8008042:	e7e3      	b.n	800800c <__mdiff+0x28>
 8008044:	f100 0b14 	add.w	fp, r0, #20
 8008048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800804c:	f109 0310 	add.w	r3, r9, #16
 8008050:	60c5      	str	r5, [r0, #12]
 8008052:	f04f 0c00 	mov.w	ip, #0
 8008056:	f109 0514 	add.w	r5, r9, #20
 800805a:	46d9      	mov	r9, fp
 800805c:	6926      	ldr	r6, [r4, #16]
 800805e:	f104 0e14 	add.w	lr, r4, #20
 8008062:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008066:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008072:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008076:	b281      	uxth	r1, r0
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	fa1f f38a 	uxth.w	r3, sl
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	0c00      	lsrs	r0, r0, #16
 8008082:	4463      	add	r3, ip
 8008084:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008088:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800808c:	b29b      	uxth	r3, r3
 800808e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008092:	4576      	cmp	r6, lr
 8008094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008098:	f849 3b04 	str.w	r3, [r9], #4
 800809c:	d8e6      	bhi.n	800806c <__mdiff+0x88>
 800809e:	1b33      	subs	r3, r6, r4
 80080a0:	3b15      	subs	r3, #21
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	3415      	adds	r4, #21
 80080a8:	3304      	adds	r3, #4
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	bf38      	it	cc
 80080ae:	2304      	movcc	r3, #4
 80080b0:	441d      	add	r5, r3
 80080b2:	445b      	add	r3, fp
 80080b4:	461e      	mov	r6, r3
 80080b6:	462c      	mov	r4, r5
 80080b8:	4544      	cmp	r4, r8
 80080ba:	d30e      	bcc.n	80080da <__mdiff+0xf6>
 80080bc:	f108 0103 	add.w	r1, r8, #3
 80080c0:	1b49      	subs	r1, r1, r5
 80080c2:	f021 0103 	bic.w	r1, r1, #3
 80080c6:	3d03      	subs	r5, #3
 80080c8:	45a8      	cmp	r8, r5
 80080ca:	bf38      	it	cc
 80080cc:	2100      	movcc	r1, #0
 80080ce:	440b      	add	r3, r1
 80080d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080d4:	b199      	cbz	r1, 80080fe <__mdiff+0x11a>
 80080d6:	6117      	str	r7, [r2, #16]
 80080d8:	e79e      	b.n	8008018 <__mdiff+0x34>
 80080da:	46e6      	mov	lr, ip
 80080dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80080e0:	fa1f fc81 	uxth.w	ip, r1
 80080e4:	44f4      	add	ip, lr
 80080e6:	0c08      	lsrs	r0, r1, #16
 80080e8:	4471      	add	r1, lr
 80080ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080ee:	b289      	uxth	r1, r1
 80080f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080f8:	f846 1b04 	str.w	r1, [r6], #4
 80080fc:	e7dc      	b.n	80080b8 <__mdiff+0xd4>
 80080fe:	3f01      	subs	r7, #1
 8008100:	e7e6      	b.n	80080d0 <__mdiff+0xec>
 8008102:	bf00      	nop
 8008104:	0800a3ff 	.word	0x0800a3ff
 8008108:	0800a410 	.word	0x0800a410

0800810c <__ulp>:
 800810c:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <__ulp+0x3c>)
 800810e:	400b      	ands	r3, r1
 8008110:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008114:	2b00      	cmp	r3, #0
 8008116:	dc08      	bgt.n	800812a <__ulp+0x1e>
 8008118:	425b      	negs	r3, r3
 800811a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800811e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008122:	da04      	bge.n	800812e <__ulp+0x22>
 8008124:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008128:	4113      	asrs	r3, r2
 800812a:	2200      	movs	r2, #0
 800812c:	e008      	b.n	8008140 <__ulp+0x34>
 800812e:	f1a2 0314 	sub.w	r3, r2, #20
 8008132:	2b1e      	cmp	r3, #30
 8008134:	bfd6      	itet	le
 8008136:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800813a:	2201      	movgt	r2, #1
 800813c:	40da      	lsrle	r2, r3
 800813e:	2300      	movs	r3, #0
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	7ff00000 	.word	0x7ff00000

0800814c <__b2d>:
 800814c:	6902      	ldr	r2, [r0, #16]
 800814e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008150:	f100 0614 	add.w	r6, r0, #20
 8008154:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008158:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800815c:	4f1e      	ldr	r7, [pc, #120]	@ (80081d8 <__b2d+0x8c>)
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff fd5a 	bl	8007c18 <__hi0bits>
 8008164:	4603      	mov	r3, r0
 8008166:	f1c0 0020 	rsb	r0, r0, #32
 800816a:	2b0a      	cmp	r3, #10
 800816c:	f1a2 0504 	sub.w	r5, r2, #4
 8008170:	6008      	str	r0, [r1, #0]
 8008172:	dc12      	bgt.n	800819a <__b2d+0x4e>
 8008174:	42ae      	cmp	r6, r5
 8008176:	bf2c      	ite	cs
 8008178:	2200      	movcs	r2, #0
 800817a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800817e:	f1c3 0c0b 	rsb	ip, r3, #11
 8008182:	3315      	adds	r3, #21
 8008184:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008188:	fa04 f303 	lsl.w	r3, r4, r3
 800818c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008190:	ea4e 0107 	orr.w	r1, lr, r7
 8008194:	431a      	orrs	r2, r3
 8008196:	4610      	mov	r0, r2
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819a:	42ae      	cmp	r6, r5
 800819c:	bf36      	itet	cc
 800819e:	f1a2 0508 	subcc.w	r5, r2, #8
 80081a2:	2200      	movcs	r2, #0
 80081a4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80081a8:	3b0b      	subs	r3, #11
 80081aa:	d012      	beq.n	80081d2 <__b2d+0x86>
 80081ac:	f1c3 0720 	rsb	r7, r3, #32
 80081b0:	fa22 f107 	lsr.w	r1, r2, r7
 80081b4:	409c      	lsls	r4, r3
 80081b6:	430c      	orrs	r4, r1
 80081b8:	42b5      	cmp	r5, r6
 80081ba:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80081be:	bf94      	ite	ls
 80081c0:	2400      	movls	r4, #0
 80081c2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80081c6:	409a      	lsls	r2, r3
 80081c8:	40fc      	lsrs	r4, r7
 80081ca:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80081ce:	4322      	orrs	r2, r4
 80081d0:	e7e1      	b.n	8008196 <__b2d+0x4a>
 80081d2:	ea44 0107 	orr.w	r1, r4, r7
 80081d6:	e7de      	b.n	8008196 <__b2d+0x4a>
 80081d8:	3ff00000 	.word	0x3ff00000

080081dc <__d2b>:
 80081dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80081e0:	2101      	movs	r1, #1
 80081e2:	4690      	mov	r8, r2
 80081e4:	4699      	mov	r9, r3
 80081e6:	9e08      	ldr	r6, [sp, #32]
 80081e8:	f7ff fc24 	bl	8007a34 <_Balloc>
 80081ec:	4604      	mov	r4, r0
 80081ee:	b930      	cbnz	r0, 80081fe <__d2b+0x22>
 80081f0:	4602      	mov	r2, r0
 80081f2:	f240 310f 	movw	r1, #783	@ 0x30f
 80081f6:	4b23      	ldr	r3, [pc, #140]	@ (8008284 <__d2b+0xa8>)
 80081f8:	4823      	ldr	r0, [pc, #140]	@ (8008288 <__d2b+0xac>)
 80081fa:	f001 f975 	bl	80094e8 <__assert_func>
 80081fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008202:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008206:	b10d      	cbz	r5, 800820c <__d2b+0x30>
 8008208:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	f1b8 0300 	subs.w	r3, r8, #0
 8008212:	d024      	beq.n	800825e <__d2b+0x82>
 8008214:	4668      	mov	r0, sp
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	f7ff fd1d 	bl	8007c56 <__lo0bits>
 800821c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008220:	b1d8      	cbz	r0, 800825a <__d2b+0x7e>
 8008222:	f1c0 0320 	rsb	r3, r0, #32
 8008226:	fa02 f303 	lsl.w	r3, r2, r3
 800822a:	430b      	orrs	r3, r1
 800822c:	40c2      	lsrs	r2, r0
 800822e:	6163      	str	r3, [r4, #20]
 8008230:	9201      	str	r2, [sp, #4]
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bf0c      	ite	eq
 8008238:	2201      	moveq	r2, #1
 800823a:	2202      	movne	r2, #2
 800823c:	61a3      	str	r3, [r4, #24]
 800823e:	6122      	str	r2, [r4, #16]
 8008240:	b1ad      	cbz	r5, 800826e <__d2b+0x92>
 8008242:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008246:	4405      	add	r5, r0
 8008248:	6035      	str	r5, [r6, #0]
 800824a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	6018      	str	r0, [r3, #0]
 8008252:	4620      	mov	r0, r4
 8008254:	b002      	add	sp, #8
 8008256:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800825a:	6161      	str	r1, [r4, #20]
 800825c:	e7e9      	b.n	8008232 <__d2b+0x56>
 800825e:	a801      	add	r0, sp, #4
 8008260:	f7ff fcf9 	bl	8007c56 <__lo0bits>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	6163      	str	r3, [r4, #20]
 800826a:	3020      	adds	r0, #32
 800826c:	e7e7      	b.n	800823e <__d2b+0x62>
 800826e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008272:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008276:	6030      	str	r0, [r6, #0]
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	f7ff fccd 	bl	8007c18 <__hi0bits>
 800827e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008282:	e7e4      	b.n	800824e <__d2b+0x72>
 8008284:	0800a3ff 	.word	0x0800a3ff
 8008288:	0800a410 	.word	0x0800a410

0800828c <__ratio>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	b085      	sub	sp, #20
 8008292:	e9cd 1000 	strd	r1, r0, [sp]
 8008296:	a902      	add	r1, sp, #8
 8008298:	f7ff ff58 	bl	800814c <__b2d>
 800829c:	468b      	mov	fp, r1
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	9800      	ldr	r0, [sp, #0]
 80082a4:	a903      	add	r1, sp, #12
 80082a6:	f7ff ff51 	bl	800814c <__b2d>
 80082aa:	460d      	mov	r5, r1
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	4689      	mov	r9, r1
 80082b0:	6919      	ldr	r1, [r3, #16]
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	4604      	mov	r4, r0
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	4630      	mov	r0, r6
 80082ba:	1ac9      	subs	r1, r1, r3
 80082bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bfcd      	iteet	gt
 80082ca:	463a      	movgt	r2, r7
 80082cc:	462a      	movle	r2, r5
 80082ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082d2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80082d6:	bfd8      	it	le
 80082d8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80082dc:	464b      	mov	r3, r9
 80082de:	4622      	mov	r2, r4
 80082e0:	4659      	mov	r1, fp
 80082e2:	f7f8 fa23 	bl	800072c <__aeabi_ddiv>
 80082e6:	b005      	add	sp, #20
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082ec <__copybits>:
 80082ec:	3901      	subs	r1, #1
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	1149      	asrs	r1, r1, #5
 80082f2:	6914      	ldr	r4, [r2, #16]
 80082f4:	3101      	adds	r1, #1
 80082f6:	f102 0314 	add.w	r3, r2, #20
 80082fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008302:	1f05      	subs	r5, r0, #4
 8008304:	42a3      	cmp	r3, r4
 8008306:	d30c      	bcc.n	8008322 <__copybits+0x36>
 8008308:	1aa3      	subs	r3, r4, r2
 800830a:	3b11      	subs	r3, #17
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	3211      	adds	r2, #17
 8008312:	42a2      	cmp	r2, r4
 8008314:	bf88      	it	hi
 8008316:	2300      	movhi	r3, #0
 8008318:	4418      	add	r0, r3
 800831a:	2300      	movs	r3, #0
 800831c:	4288      	cmp	r0, r1
 800831e:	d305      	bcc.n	800832c <__copybits+0x40>
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	f853 6b04 	ldr.w	r6, [r3], #4
 8008326:	f845 6f04 	str.w	r6, [r5, #4]!
 800832a:	e7eb      	b.n	8008304 <__copybits+0x18>
 800832c:	f840 3b04 	str.w	r3, [r0], #4
 8008330:	e7f4      	b.n	800831c <__copybits+0x30>

08008332 <__any_on>:
 8008332:	f100 0214 	add.w	r2, r0, #20
 8008336:	6900      	ldr	r0, [r0, #16]
 8008338:	114b      	asrs	r3, r1, #5
 800833a:	4298      	cmp	r0, r3
 800833c:	b510      	push	{r4, lr}
 800833e:	db11      	blt.n	8008364 <__any_on+0x32>
 8008340:	dd0a      	ble.n	8008358 <__any_on+0x26>
 8008342:	f011 011f 	ands.w	r1, r1, #31
 8008346:	d007      	beq.n	8008358 <__any_on+0x26>
 8008348:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800834c:	fa24 f001 	lsr.w	r0, r4, r1
 8008350:	fa00 f101 	lsl.w	r1, r0, r1
 8008354:	428c      	cmp	r4, r1
 8008356:	d10b      	bne.n	8008370 <__any_on+0x3e>
 8008358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800835c:	4293      	cmp	r3, r2
 800835e:	d803      	bhi.n	8008368 <__any_on+0x36>
 8008360:	2000      	movs	r0, #0
 8008362:	bd10      	pop	{r4, pc}
 8008364:	4603      	mov	r3, r0
 8008366:	e7f7      	b.n	8008358 <__any_on+0x26>
 8008368:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800836c:	2900      	cmp	r1, #0
 800836e:	d0f5      	beq.n	800835c <__any_on+0x2a>
 8008370:	2001      	movs	r0, #1
 8008372:	e7f6      	b.n	8008362 <__any_on+0x30>

08008374 <sulp>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	460f      	mov	r7, r1
 800837a:	4690      	mov	r8, r2
 800837c:	f7ff fec6 	bl	800810c <__ulp>
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	f1b8 0f00 	cmp.w	r8, #0
 8008388:	d011      	beq.n	80083ae <sulp+0x3a>
 800838a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800838e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd0b      	ble.n	80083ae <sulp+0x3a>
 8008396:	2400      	movs	r4, #0
 8008398:	051b      	lsls	r3, r3, #20
 800839a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800839e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	f7f8 f897 	bl	80004d8 <__aeabi_dmul>
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080083b8 <_strtod_l>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	b09f      	sub	sp, #124	@ 0x7c
 80083be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80083c0:	2200      	movs	r2, #0
 80083c2:	460c      	mov	r4, r1
 80083c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80083c6:	f04f 0a00 	mov.w	sl, #0
 80083ca:	f04f 0b00 	mov.w	fp, #0
 80083ce:	460a      	mov	r2, r1
 80083d0:	9005      	str	r0, [sp, #20]
 80083d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d4:	7811      	ldrb	r1, [r2, #0]
 80083d6:	292b      	cmp	r1, #43	@ 0x2b
 80083d8:	d048      	beq.n	800846c <_strtod_l+0xb4>
 80083da:	d836      	bhi.n	800844a <_strtod_l+0x92>
 80083dc:	290d      	cmp	r1, #13
 80083de:	d830      	bhi.n	8008442 <_strtod_l+0x8a>
 80083e0:	2908      	cmp	r1, #8
 80083e2:	d830      	bhi.n	8008446 <_strtod_l+0x8e>
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d039      	beq.n	800845c <_strtod_l+0xa4>
 80083e8:	2200      	movs	r2, #0
 80083ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80083ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80083ee:	782a      	ldrb	r2, [r5, #0]
 80083f0:	2a30      	cmp	r2, #48	@ 0x30
 80083f2:	f040 80b0 	bne.w	8008556 <_strtod_l+0x19e>
 80083f6:	786a      	ldrb	r2, [r5, #1]
 80083f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083fc:	2a58      	cmp	r2, #88	@ 0x58
 80083fe:	d16c      	bne.n	80084da <_strtod_l+0x122>
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008404:	4a8f      	ldr	r2, [pc, #572]	@ (8008644 <_strtod_l+0x28c>)
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	ab1a      	add	r3, sp, #104	@ 0x68
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	9805      	ldr	r0, [sp, #20]
 800840e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008410:	a919      	add	r1, sp, #100	@ 0x64
 8008412:	f001 f903 	bl	800961c <__gethex>
 8008416:	f010 060f 	ands.w	r6, r0, #15
 800841a:	4604      	mov	r4, r0
 800841c:	d005      	beq.n	800842a <_strtod_l+0x72>
 800841e:	2e06      	cmp	r6, #6
 8008420:	d126      	bne.n	8008470 <_strtod_l+0xb8>
 8008422:	2300      	movs	r3, #0
 8008424:	3501      	adds	r5, #1
 8008426:	9519      	str	r5, [sp, #100]	@ 0x64
 8008428:	930e      	str	r3, [sp, #56]	@ 0x38
 800842a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8582 	bne.w	8008f36 <_strtod_l+0xb7e>
 8008432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008434:	b1bb      	cbz	r3, 8008466 <_strtod_l+0xae>
 8008436:	4650      	mov	r0, sl
 8008438:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800843c:	b01f      	add	sp, #124	@ 0x7c
 800843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008442:	2920      	cmp	r1, #32
 8008444:	d1d0      	bne.n	80083e8 <_strtod_l+0x30>
 8008446:	3201      	adds	r2, #1
 8008448:	e7c3      	b.n	80083d2 <_strtod_l+0x1a>
 800844a:	292d      	cmp	r1, #45	@ 0x2d
 800844c:	d1cc      	bne.n	80083e8 <_strtod_l+0x30>
 800844e:	2101      	movs	r1, #1
 8008450:	910e      	str	r1, [sp, #56]	@ 0x38
 8008452:	1c51      	adds	r1, r2, #1
 8008454:	9119      	str	r1, [sp, #100]	@ 0x64
 8008456:	7852      	ldrb	r2, [r2, #1]
 8008458:	2a00      	cmp	r2, #0
 800845a:	d1c7      	bne.n	80083ec <_strtod_l+0x34>
 800845c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800845e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 8566 	bne.w	8008f32 <_strtod_l+0xb7a>
 8008466:	4650      	mov	r0, sl
 8008468:	4659      	mov	r1, fp
 800846a:	e7e7      	b.n	800843c <_strtod_l+0x84>
 800846c:	2100      	movs	r1, #0
 800846e:	e7ef      	b.n	8008450 <_strtod_l+0x98>
 8008470:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008472:	b13a      	cbz	r2, 8008484 <_strtod_l+0xcc>
 8008474:	2135      	movs	r1, #53	@ 0x35
 8008476:	a81c      	add	r0, sp, #112	@ 0x70
 8008478:	f7ff ff38 	bl	80082ec <__copybits>
 800847c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800847e:	9805      	ldr	r0, [sp, #20]
 8008480:	f7ff fb18 	bl	8007ab4 <_Bfree>
 8008484:	3e01      	subs	r6, #1
 8008486:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008488:	2e04      	cmp	r6, #4
 800848a:	d806      	bhi.n	800849a <_strtod_l+0xe2>
 800848c:	e8df f006 	tbb	[pc, r6]
 8008490:	201d0314 	.word	0x201d0314
 8008494:	14          	.byte	0x14
 8008495:	00          	.byte	0x00
 8008496:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800849a:	05e1      	lsls	r1, r4, #23
 800849c:	bf48      	it	mi
 800849e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084a6:	0d1b      	lsrs	r3, r3, #20
 80084a8:	051b      	lsls	r3, r3, #20
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1bd      	bne.n	800842a <_strtod_l+0x72>
 80084ae:	f7fe fb27 	bl	8006b00 <__errno>
 80084b2:	2322      	movs	r3, #34	@ 0x22
 80084b4:	6003      	str	r3, [r0, #0]
 80084b6:	e7b8      	b.n	800842a <_strtod_l+0x72>
 80084b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80084bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80084c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084c8:	e7e7      	b.n	800849a <_strtod_l+0xe2>
 80084ca:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008648 <_strtod_l+0x290>
 80084ce:	e7e4      	b.n	800849a <_strtod_l+0xe2>
 80084d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80084d4:	f04f 3aff 	mov.w	sl, #4294967295
 80084d8:	e7df      	b.n	800849a <_strtod_l+0xe2>
 80084da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	9219      	str	r2, [sp, #100]	@ 0x64
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	2b30      	cmp	r3, #48	@ 0x30
 80084e4:	d0f9      	beq.n	80084da <_strtod_l+0x122>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d09f      	beq.n	800842a <_strtod_l+0x72>
 80084ea:	2301      	movs	r3, #1
 80084ec:	2700      	movs	r7, #0
 80084ee:	220a      	movs	r2, #10
 80084f0:	46b9      	mov	r9, r7
 80084f2:	9308      	str	r3, [sp, #32]
 80084f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084f6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80084f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80084fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80084fc:	7805      	ldrb	r5, [r0, #0]
 80084fe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008502:	b2d9      	uxtb	r1, r3
 8008504:	2909      	cmp	r1, #9
 8008506:	d928      	bls.n	800855a <_strtod_l+0x1a2>
 8008508:	2201      	movs	r2, #1
 800850a:	4950      	ldr	r1, [pc, #320]	@ (800864c <_strtod_l+0x294>)
 800850c:	f7fe fa9b 	bl	8006a46 <strncmp>
 8008510:	2800      	cmp	r0, #0
 8008512:	d032      	beq.n	800857a <_strtod_l+0x1c2>
 8008514:	2000      	movs	r0, #0
 8008516:	462a      	mov	r2, r5
 8008518:	4603      	mov	r3, r0
 800851a:	464d      	mov	r5, r9
 800851c:	900a      	str	r0, [sp, #40]	@ 0x28
 800851e:	2a65      	cmp	r2, #101	@ 0x65
 8008520:	d001      	beq.n	8008526 <_strtod_l+0x16e>
 8008522:	2a45      	cmp	r2, #69	@ 0x45
 8008524:	d114      	bne.n	8008550 <_strtod_l+0x198>
 8008526:	b91d      	cbnz	r5, 8008530 <_strtod_l+0x178>
 8008528:	9a08      	ldr	r2, [sp, #32]
 800852a:	4302      	orrs	r2, r0
 800852c:	d096      	beq.n	800845c <_strtod_l+0xa4>
 800852e:	2500      	movs	r5, #0
 8008530:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008532:	1c62      	adds	r2, r4, #1
 8008534:	9219      	str	r2, [sp, #100]	@ 0x64
 8008536:	7862      	ldrb	r2, [r4, #1]
 8008538:	2a2b      	cmp	r2, #43	@ 0x2b
 800853a:	d07a      	beq.n	8008632 <_strtod_l+0x27a>
 800853c:	2a2d      	cmp	r2, #45	@ 0x2d
 800853e:	d07e      	beq.n	800863e <_strtod_l+0x286>
 8008540:	f04f 0c00 	mov.w	ip, #0
 8008544:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008548:	2909      	cmp	r1, #9
 800854a:	f240 8085 	bls.w	8008658 <_strtod_l+0x2a0>
 800854e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008550:	f04f 0800 	mov.w	r8, #0
 8008554:	e0a5      	b.n	80086a2 <_strtod_l+0x2ea>
 8008556:	2300      	movs	r3, #0
 8008558:	e7c8      	b.n	80084ec <_strtod_l+0x134>
 800855a:	f1b9 0f08 	cmp.w	r9, #8
 800855e:	bfd8      	it	le
 8008560:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008562:	f100 0001 	add.w	r0, r0, #1
 8008566:	bfd6      	itet	le
 8008568:	fb02 3301 	mlale	r3, r2, r1, r3
 800856c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008570:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008572:	f109 0901 	add.w	r9, r9, #1
 8008576:	9019      	str	r0, [sp, #100]	@ 0x64
 8008578:	e7bf      	b.n	80084fa <_strtod_l+0x142>
 800857a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008580:	785a      	ldrb	r2, [r3, #1]
 8008582:	f1b9 0f00 	cmp.w	r9, #0
 8008586:	d03b      	beq.n	8008600 <_strtod_l+0x248>
 8008588:	464d      	mov	r5, r9
 800858a:	900a      	str	r0, [sp, #40]	@ 0x28
 800858c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008590:	2b09      	cmp	r3, #9
 8008592:	d912      	bls.n	80085ba <_strtod_l+0x202>
 8008594:	2301      	movs	r3, #1
 8008596:	e7c2      	b.n	800851e <_strtod_l+0x166>
 8008598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800859a:	3001      	adds	r0, #1
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	9219      	str	r2, [sp, #100]	@ 0x64
 80085a0:	785a      	ldrb	r2, [r3, #1]
 80085a2:	2a30      	cmp	r2, #48	@ 0x30
 80085a4:	d0f8      	beq.n	8008598 <_strtod_l+0x1e0>
 80085a6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	f200 84c8 	bhi.w	8008f40 <_strtod_l+0xb88>
 80085b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80085b2:	2000      	movs	r0, #0
 80085b4:	4605      	mov	r5, r0
 80085b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80085ba:	3a30      	subs	r2, #48	@ 0x30
 80085bc:	f100 0301 	add.w	r3, r0, #1
 80085c0:	d018      	beq.n	80085f4 <_strtod_l+0x23c>
 80085c2:	462e      	mov	r6, r5
 80085c4:	f04f 0e0a 	mov.w	lr, #10
 80085c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085ca:	4419      	add	r1, r3
 80085cc:	910a      	str	r1, [sp, #40]	@ 0x28
 80085ce:	1c71      	adds	r1, r6, #1
 80085d0:	eba1 0c05 	sub.w	ip, r1, r5
 80085d4:	4563      	cmp	r3, ip
 80085d6:	dc15      	bgt.n	8008604 <_strtod_l+0x24c>
 80085d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80085dc:	182b      	adds	r3, r5, r0
 80085de:	2b08      	cmp	r3, #8
 80085e0:	f105 0501 	add.w	r5, r5, #1
 80085e4:	4405      	add	r5, r0
 80085e6:	dc1a      	bgt.n	800861e <_strtod_l+0x266>
 80085e8:	230a      	movs	r3, #10
 80085ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ec:	fb03 2301 	mla	r3, r3, r1, r2
 80085f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f2:	2300      	movs	r3, #0
 80085f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085f6:	4618      	mov	r0, r3
 80085f8:	1c51      	adds	r1, r2, #1
 80085fa:	9119      	str	r1, [sp, #100]	@ 0x64
 80085fc:	7852      	ldrb	r2, [r2, #1]
 80085fe:	e7c5      	b.n	800858c <_strtod_l+0x1d4>
 8008600:	4648      	mov	r0, r9
 8008602:	e7ce      	b.n	80085a2 <_strtod_l+0x1ea>
 8008604:	2e08      	cmp	r6, #8
 8008606:	dc05      	bgt.n	8008614 <_strtod_l+0x25c>
 8008608:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800860a:	fb0e f606 	mul.w	r6, lr, r6
 800860e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008610:	460e      	mov	r6, r1
 8008612:	e7dc      	b.n	80085ce <_strtod_l+0x216>
 8008614:	2910      	cmp	r1, #16
 8008616:	bfd8      	it	le
 8008618:	fb0e f707 	mulle.w	r7, lr, r7
 800861c:	e7f8      	b.n	8008610 <_strtod_l+0x258>
 800861e:	2b0f      	cmp	r3, #15
 8008620:	bfdc      	itt	le
 8008622:	230a      	movle	r3, #10
 8008624:	fb03 2707 	mlale	r7, r3, r7, r2
 8008628:	e7e3      	b.n	80085f2 <_strtod_l+0x23a>
 800862a:	2300      	movs	r3, #0
 800862c:	930a      	str	r3, [sp, #40]	@ 0x28
 800862e:	2301      	movs	r3, #1
 8008630:	e77a      	b.n	8008528 <_strtod_l+0x170>
 8008632:	f04f 0c00 	mov.w	ip, #0
 8008636:	1ca2      	adds	r2, r4, #2
 8008638:	9219      	str	r2, [sp, #100]	@ 0x64
 800863a:	78a2      	ldrb	r2, [r4, #2]
 800863c:	e782      	b.n	8008544 <_strtod_l+0x18c>
 800863e:	f04f 0c01 	mov.w	ip, #1
 8008642:	e7f8      	b.n	8008636 <_strtod_l+0x27e>
 8008644:	0800a634 	.word	0x0800a634
 8008648:	7ff00000 	.word	0x7ff00000
 800864c:	0800a469 	.word	0x0800a469
 8008650:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008652:	1c51      	adds	r1, r2, #1
 8008654:	9119      	str	r1, [sp, #100]	@ 0x64
 8008656:	7852      	ldrb	r2, [r2, #1]
 8008658:	2a30      	cmp	r2, #48	@ 0x30
 800865a:	d0f9      	beq.n	8008650 <_strtod_l+0x298>
 800865c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008660:	2908      	cmp	r1, #8
 8008662:	f63f af75 	bhi.w	8008550 <_strtod_l+0x198>
 8008666:	f04f 080a 	mov.w	r8, #10
 800866a:	3a30      	subs	r2, #48	@ 0x30
 800866c:	9209      	str	r2, [sp, #36]	@ 0x24
 800866e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008670:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008672:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008674:	1c56      	adds	r6, r2, #1
 8008676:	9619      	str	r6, [sp, #100]	@ 0x64
 8008678:	7852      	ldrb	r2, [r2, #1]
 800867a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800867e:	f1be 0f09 	cmp.w	lr, #9
 8008682:	d939      	bls.n	80086f8 <_strtod_l+0x340>
 8008684:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008686:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800868a:	1a76      	subs	r6, r6, r1
 800868c:	2e08      	cmp	r6, #8
 800868e:	dc03      	bgt.n	8008698 <_strtod_l+0x2e0>
 8008690:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008692:	4588      	cmp	r8, r1
 8008694:	bfa8      	it	ge
 8008696:	4688      	movge	r8, r1
 8008698:	f1bc 0f00 	cmp.w	ip, #0
 800869c:	d001      	beq.n	80086a2 <_strtod_l+0x2ea>
 800869e:	f1c8 0800 	rsb	r8, r8, #0
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	d14e      	bne.n	8008744 <_strtod_l+0x38c>
 80086a6:	9908      	ldr	r1, [sp, #32]
 80086a8:	4308      	orrs	r0, r1
 80086aa:	f47f aebe 	bne.w	800842a <_strtod_l+0x72>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f aed4 	bne.w	800845c <_strtod_l+0xa4>
 80086b4:	2a69      	cmp	r2, #105	@ 0x69
 80086b6:	d028      	beq.n	800870a <_strtod_l+0x352>
 80086b8:	dc25      	bgt.n	8008706 <_strtod_l+0x34e>
 80086ba:	2a49      	cmp	r2, #73	@ 0x49
 80086bc:	d025      	beq.n	800870a <_strtod_l+0x352>
 80086be:	2a4e      	cmp	r2, #78	@ 0x4e
 80086c0:	f47f aecc 	bne.w	800845c <_strtod_l+0xa4>
 80086c4:	4999      	ldr	r1, [pc, #612]	@ (800892c <_strtod_l+0x574>)
 80086c6:	a819      	add	r0, sp, #100	@ 0x64
 80086c8:	f001 f9ca 	bl	8009a60 <__match>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f aec5 	beq.w	800845c <_strtod_l+0xa4>
 80086d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b28      	cmp	r3, #40	@ 0x28
 80086d8:	d12e      	bne.n	8008738 <_strtod_l+0x380>
 80086da:	4995      	ldr	r1, [pc, #596]	@ (8008930 <_strtod_l+0x578>)
 80086dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80086de:	a819      	add	r0, sp, #100	@ 0x64
 80086e0:	f001 f9d2 	bl	8009a88 <__hexnan>
 80086e4:	2805      	cmp	r0, #5
 80086e6:	d127      	bne.n	8008738 <_strtod_l+0x380>
 80086e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80086ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80086f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80086f6:	e698      	b.n	800842a <_strtod_l+0x72>
 80086f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086fa:	fb08 2101 	mla	r1, r8, r1, r2
 80086fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008702:	9209      	str	r2, [sp, #36]	@ 0x24
 8008704:	e7b5      	b.n	8008672 <_strtod_l+0x2ba>
 8008706:	2a6e      	cmp	r2, #110	@ 0x6e
 8008708:	e7da      	b.n	80086c0 <_strtod_l+0x308>
 800870a:	498a      	ldr	r1, [pc, #552]	@ (8008934 <_strtod_l+0x57c>)
 800870c:	a819      	add	r0, sp, #100	@ 0x64
 800870e:	f001 f9a7 	bl	8009a60 <__match>
 8008712:	2800      	cmp	r0, #0
 8008714:	f43f aea2 	beq.w	800845c <_strtod_l+0xa4>
 8008718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800871a:	4987      	ldr	r1, [pc, #540]	@ (8008938 <_strtod_l+0x580>)
 800871c:	3b01      	subs	r3, #1
 800871e:	a819      	add	r0, sp, #100	@ 0x64
 8008720:	9319      	str	r3, [sp, #100]	@ 0x64
 8008722:	f001 f99d 	bl	8009a60 <__match>
 8008726:	b910      	cbnz	r0, 800872e <_strtod_l+0x376>
 8008728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800872a:	3301      	adds	r3, #1
 800872c:	9319      	str	r3, [sp, #100]	@ 0x64
 800872e:	f04f 0a00 	mov.w	sl, #0
 8008732:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800893c <_strtod_l+0x584>
 8008736:	e678      	b.n	800842a <_strtod_l+0x72>
 8008738:	4881      	ldr	r0, [pc, #516]	@ (8008940 <_strtod_l+0x588>)
 800873a:	f000 fecf 	bl	80094dc <nan>
 800873e:	4682      	mov	sl, r0
 8008740:	468b      	mov	fp, r1
 8008742:	e672      	b.n	800842a <_strtod_l+0x72>
 8008744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008746:	f1b9 0f00 	cmp.w	r9, #0
 800874a:	bf08      	it	eq
 800874c:	46a9      	moveq	r9, r5
 800874e:	eba8 0303 	sub.w	r3, r8, r3
 8008752:	2d10      	cmp	r5, #16
 8008754:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008756:	462c      	mov	r4, r5
 8008758:	9309      	str	r3, [sp, #36]	@ 0x24
 800875a:	bfa8      	it	ge
 800875c:	2410      	movge	r4, #16
 800875e:	f7f7 fe41 	bl	80003e4 <__aeabi_ui2d>
 8008762:	2d09      	cmp	r5, #9
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	dc11      	bgt.n	800878e <_strtod_l+0x3d6>
 800876a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	f43f ae5c 	beq.w	800842a <_strtod_l+0x72>
 8008772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008774:	dd76      	ble.n	8008864 <_strtod_l+0x4ac>
 8008776:	2b16      	cmp	r3, #22
 8008778:	dc5d      	bgt.n	8008836 <_strtod_l+0x47e>
 800877a:	4972      	ldr	r1, [pc, #456]	@ (8008944 <_strtod_l+0x58c>)
 800877c:	4652      	mov	r2, sl
 800877e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008782:	465b      	mov	r3, fp
 8008784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008788:	f7f7 fea6 	bl	80004d8 <__aeabi_dmul>
 800878c:	e7d7      	b.n	800873e <_strtod_l+0x386>
 800878e:	4b6d      	ldr	r3, [pc, #436]	@ (8008944 <_strtod_l+0x58c>)
 8008790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008794:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008798:	f7f7 fe9e 	bl	80004d8 <__aeabi_dmul>
 800879c:	4682      	mov	sl, r0
 800879e:	4638      	mov	r0, r7
 80087a0:	468b      	mov	fp, r1
 80087a2:	f7f7 fe1f 	bl	80003e4 <__aeabi_ui2d>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4650      	mov	r0, sl
 80087ac:	4659      	mov	r1, fp
 80087ae:	f7f7 fcdd 	bl	800016c <__adddf3>
 80087b2:	2d0f      	cmp	r5, #15
 80087b4:	4682      	mov	sl, r0
 80087b6:	468b      	mov	fp, r1
 80087b8:	ddd7      	ble.n	800876a <_strtod_l+0x3b2>
 80087ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087bc:	1b2c      	subs	r4, r5, r4
 80087be:	441c      	add	r4, r3
 80087c0:	2c00      	cmp	r4, #0
 80087c2:	f340 8093 	ble.w	80088ec <_strtod_l+0x534>
 80087c6:	f014 030f 	ands.w	r3, r4, #15
 80087ca:	d00a      	beq.n	80087e2 <_strtod_l+0x42a>
 80087cc:	495d      	ldr	r1, [pc, #372]	@ (8008944 <_strtod_l+0x58c>)
 80087ce:	4652      	mov	r2, sl
 80087d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d8:	465b      	mov	r3, fp
 80087da:	f7f7 fe7d 	bl	80004d8 <__aeabi_dmul>
 80087de:	4682      	mov	sl, r0
 80087e0:	468b      	mov	fp, r1
 80087e2:	f034 040f 	bics.w	r4, r4, #15
 80087e6:	d073      	beq.n	80088d0 <_strtod_l+0x518>
 80087e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80087ec:	dd49      	ble.n	8008882 <_strtod_l+0x4ca>
 80087ee:	2400      	movs	r4, #0
 80087f0:	46a0      	mov	r8, r4
 80087f2:	46a1      	mov	r9, r4
 80087f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087f6:	2322      	movs	r3, #34	@ 0x22
 80087f8:	f04f 0a00 	mov.w	sl, #0
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800893c <_strtod_l+0x584>
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008806:	2b00      	cmp	r3, #0
 8008808:	f43f ae0f 	beq.w	800842a <_strtod_l+0x72>
 800880c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	f7ff f950 	bl	8007ab4 <_Bfree>
 8008814:	4649      	mov	r1, r9
 8008816:	9805      	ldr	r0, [sp, #20]
 8008818:	f7ff f94c 	bl	8007ab4 <_Bfree>
 800881c:	4641      	mov	r1, r8
 800881e:	9805      	ldr	r0, [sp, #20]
 8008820:	f7ff f948 	bl	8007ab4 <_Bfree>
 8008824:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008826:	9805      	ldr	r0, [sp, #20]
 8008828:	f7ff f944 	bl	8007ab4 <_Bfree>
 800882c:	4621      	mov	r1, r4
 800882e:	9805      	ldr	r0, [sp, #20]
 8008830:	f7ff f940 	bl	8007ab4 <_Bfree>
 8008834:	e5f9      	b.n	800842a <_strtod_l+0x72>
 8008836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008838:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800883c:	4293      	cmp	r3, r2
 800883e:	dbbc      	blt.n	80087ba <_strtod_l+0x402>
 8008840:	4c40      	ldr	r4, [pc, #256]	@ (8008944 <_strtod_l+0x58c>)
 8008842:	f1c5 050f 	rsb	r5, r5, #15
 8008846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800884a:	4652      	mov	r2, sl
 800884c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008850:	465b      	mov	r3, fp
 8008852:	f7f7 fe41 	bl	80004d8 <__aeabi_dmul>
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	1b5d      	subs	r5, r3, r5
 800885a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800885e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008862:	e791      	b.n	8008788 <_strtod_l+0x3d0>
 8008864:	3316      	adds	r3, #22
 8008866:	dba8      	blt.n	80087ba <_strtod_l+0x402>
 8008868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800886a:	4650      	mov	r0, sl
 800886c:	eba3 0808 	sub.w	r8, r3, r8
 8008870:	4b34      	ldr	r3, [pc, #208]	@ (8008944 <_strtod_l+0x58c>)
 8008872:	4659      	mov	r1, fp
 8008874:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008878:	e9d8 2300 	ldrd	r2, r3, [r8]
 800887c:	f7f7 ff56 	bl	800072c <__aeabi_ddiv>
 8008880:	e75d      	b.n	800873e <_strtod_l+0x386>
 8008882:	2300      	movs	r3, #0
 8008884:	4650      	mov	r0, sl
 8008886:	4659      	mov	r1, fp
 8008888:	461e      	mov	r6, r3
 800888a:	4f2f      	ldr	r7, [pc, #188]	@ (8008948 <_strtod_l+0x590>)
 800888c:	1124      	asrs	r4, r4, #4
 800888e:	2c01      	cmp	r4, #1
 8008890:	dc21      	bgt.n	80088d6 <_strtod_l+0x51e>
 8008892:	b10b      	cbz	r3, 8008898 <_strtod_l+0x4e0>
 8008894:	4682      	mov	sl, r0
 8008896:	468b      	mov	fp, r1
 8008898:	492b      	ldr	r1, [pc, #172]	@ (8008948 <_strtod_l+0x590>)
 800889a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800889e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088a2:	4652      	mov	r2, sl
 80088a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088a8:	465b      	mov	r3, fp
 80088aa:	f7f7 fe15 	bl	80004d8 <__aeabi_dmul>
 80088ae:	4b23      	ldr	r3, [pc, #140]	@ (800893c <_strtod_l+0x584>)
 80088b0:	460a      	mov	r2, r1
 80088b2:	400b      	ands	r3, r1
 80088b4:	4925      	ldr	r1, [pc, #148]	@ (800894c <_strtod_l+0x594>)
 80088b6:	4682      	mov	sl, r0
 80088b8:	428b      	cmp	r3, r1
 80088ba:	d898      	bhi.n	80087ee <_strtod_l+0x436>
 80088bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf86      	itte	hi
 80088c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80088c8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008950 <_strtod_l+0x598>
 80088cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80088d0:	2300      	movs	r3, #0
 80088d2:	9308      	str	r3, [sp, #32]
 80088d4:	e076      	b.n	80089c4 <_strtod_l+0x60c>
 80088d6:	07e2      	lsls	r2, r4, #31
 80088d8:	d504      	bpl.n	80088e4 <_strtod_l+0x52c>
 80088da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088de:	f7f7 fdfb 	bl	80004d8 <__aeabi_dmul>
 80088e2:	2301      	movs	r3, #1
 80088e4:	3601      	adds	r6, #1
 80088e6:	1064      	asrs	r4, r4, #1
 80088e8:	3708      	adds	r7, #8
 80088ea:	e7d0      	b.n	800888e <_strtod_l+0x4d6>
 80088ec:	d0f0      	beq.n	80088d0 <_strtod_l+0x518>
 80088ee:	4264      	negs	r4, r4
 80088f0:	f014 020f 	ands.w	r2, r4, #15
 80088f4:	d00a      	beq.n	800890c <_strtod_l+0x554>
 80088f6:	4b13      	ldr	r3, [pc, #76]	@ (8008944 <_strtod_l+0x58c>)
 80088f8:	4650      	mov	r0, sl
 80088fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fe:	4659      	mov	r1, fp
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f7f7 ff12 	bl	800072c <__aeabi_ddiv>
 8008908:	4682      	mov	sl, r0
 800890a:	468b      	mov	fp, r1
 800890c:	1124      	asrs	r4, r4, #4
 800890e:	d0df      	beq.n	80088d0 <_strtod_l+0x518>
 8008910:	2c1f      	cmp	r4, #31
 8008912:	dd1f      	ble.n	8008954 <_strtod_l+0x59c>
 8008914:	2400      	movs	r4, #0
 8008916:	46a0      	mov	r8, r4
 8008918:	46a1      	mov	r9, r4
 800891a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800891c:	2322      	movs	r3, #34	@ 0x22
 800891e:	9a05      	ldr	r2, [sp, #20]
 8008920:	f04f 0a00 	mov.w	sl, #0
 8008924:	f04f 0b00 	mov.w	fp, #0
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	e76b      	b.n	8008804 <_strtod_l+0x44c>
 800892c:	0800a357 	.word	0x0800a357
 8008930:	0800a620 	.word	0x0800a620
 8008934:	0800a34f 	.word	0x0800a34f
 8008938:	0800a386 	.word	0x0800a386
 800893c:	7ff00000 	.word	0x7ff00000
 8008940:	0800a4bf 	.word	0x0800a4bf
 8008944:	0800a558 	.word	0x0800a558
 8008948:	0800a530 	.word	0x0800a530
 800894c:	7ca00000 	.word	0x7ca00000
 8008950:	7fefffff 	.word	0x7fefffff
 8008954:	f014 0310 	ands.w	r3, r4, #16
 8008958:	bf18      	it	ne
 800895a:	236a      	movne	r3, #106	@ 0x6a
 800895c:	4650      	mov	r0, sl
 800895e:	9308      	str	r3, [sp, #32]
 8008960:	4659      	mov	r1, fp
 8008962:	2300      	movs	r3, #0
 8008964:	4e77      	ldr	r6, [pc, #476]	@ (8008b44 <_strtod_l+0x78c>)
 8008966:	07e7      	lsls	r7, r4, #31
 8008968:	d504      	bpl.n	8008974 <_strtod_l+0x5bc>
 800896a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800896e:	f7f7 fdb3 	bl	80004d8 <__aeabi_dmul>
 8008972:	2301      	movs	r3, #1
 8008974:	1064      	asrs	r4, r4, #1
 8008976:	f106 0608 	add.w	r6, r6, #8
 800897a:	d1f4      	bne.n	8008966 <_strtod_l+0x5ae>
 800897c:	b10b      	cbz	r3, 8008982 <_strtod_l+0x5ca>
 800897e:	4682      	mov	sl, r0
 8008980:	468b      	mov	fp, r1
 8008982:	9b08      	ldr	r3, [sp, #32]
 8008984:	b1b3      	cbz	r3, 80089b4 <_strtod_l+0x5fc>
 8008986:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800898a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800898e:	2b00      	cmp	r3, #0
 8008990:	4659      	mov	r1, fp
 8008992:	dd0f      	ble.n	80089b4 <_strtod_l+0x5fc>
 8008994:	2b1f      	cmp	r3, #31
 8008996:	dd58      	ble.n	8008a4a <_strtod_l+0x692>
 8008998:	2b34      	cmp	r3, #52	@ 0x34
 800899a:	bfd8      	it	le
 800899c:	f04f 33ff 	movle.w	r3, #4294967295
 80089a0:	f04f 0a00 	mov.w	sl, #0
 80089a4:	bfcf      	iteee	gt
 80089a6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089aa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089ae:	4093      	lslle	r3, r2
 80089b0:	ea03 0b01 	andle.w	fp, r3, r1
 80089b4:	2200      	movs	r2, #0
 80089b6:	2300      	movs	r3, #0
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	f7f7 fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1a7      	bne.n	8008914 <_strtod_l+0x55c>
 80089c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c6:	464a      	mov	r2, r9
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80089cc:	462b      	mov	r3, r5
 80089ce:	9805      	ldr	r0, [sp, #20]
 80089d0:	f7ff f8d8 	bl	8007b84 <__s2b>
 80089d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f43f af09 	beq.w	80087ee <_strtod_l+0x436>
 80089dc:	2400      	movs	r4, #0
 80089de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	eba3 0308 	sub.w	r3, r3, r8
 80089e8:	bfa8      	it	ge
 80089ea:	2300      	movge	r3, #0
 80089ec:	46a0      	mov	r8, r4
 80089ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80089f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80089f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f8:	9805      	ldr	r0, [sp, #20]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	f7ff f81a 	bl	8007a34 <_Balloc>
 8008a00:	4681      	mov	r9, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f43f aef7 	beq.w	80087f6 <_strtod_l+0x43e>
 8008a08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a0a:	300c      	adds	r0, #12
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	f103 010c 	add.w	r1, r3, #12
 8008a12:	3202      	adds	r2, #2
 8008a14:	0092      	lsls	r2, r2, #2
 8008a16:	f000 fd53 	bl	80094c0 <memcpy>
 8008a1a:	ab1c      	add	r3, sp, #112	@ 0x70
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	4652      	mov	r2, sl
 8008a24:	465b      	mov	r3, fp
 8008a26:	9805      	ldr	r0, [sp, #20]
 8008a28:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a2c:	f7ff fbd6 	bl	80081dc <__d2b>
 8008a30:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f43f aedf 	beq.w	80087f6 <_strtod_l+0x43e>
 8008a38:	2101      	movs	r1, #1
 8008a3a:	9805      	ldr	r0, [sp, #20]
 8008a3c:	f7ff f938 	bl	8007cb0 <__i2b>
 8008a40:	4680      	mov	r8, r0
 8008a42:	b948      	cbnz	r0, 8008a58 <_strtod_l+0x6a0>
 8008a44:	f04f 0800 	mov.w	r8, #0
 8008a48:	e6d5      	b.n	80087f6 <_strtod_l+0x43e>
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	ea03 0a0a 	and.w	sl, r3, sl
 8008a56:	e7ad      	b.n	80089b4 <_strtod_l+0x5fc>
 8008a58:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a5c:	2d00      	cmp	r5, #0
 8008a5e:	bfab      	itete	ge
 8008a60:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a62:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a64:	18ef      	addge	r7, r5, r3
 8008a66:	1b5e      	sublt	r6, r3, r5
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	bfa8      	it	ge
 8008a6c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008a6e:	eba5 0503 	sub.w	r5, r5, r3
 8008a72:	4415      	add	r5, r2
 8008a74:	4b34      	ldr	r3, [pc, #208]	@ (8008b48 <_strtod_l+0x790>)
 8008a76:	f105 35ff 	add.w	r5, r5, #4294967295
 8008a7a:	bfb8      	it	lt
 8008a7c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a84:	da50      	bge.n	8008b28 <_strtod_l+0x770>
 8008a86:	1b5b      	subs	r3, r3, r5
 8008a88:	2b1f      	cmp	r3, #31
 8008a8a:	f04f 0101 	mov.w	r1, #1
 8008a8e:	eba2 0203 	sub.w	r2, r2, r3
 8008a92:	dc3d      	bgt.n	8008b10 <_strtod_l+0x758>
 8008a94:	fa01 f303 	lsl.w	r3, r1, r3
 8008a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a9e:	18bd      	adds	r5, r7, r2
 8008aa0:	9b08      	ldr	r3, [sp, #32]
 8008aa2:	42af      	cmp	r7, r5
 8008aa4:	4416      	add	r6, r2
 8008aa6:	441e      	add	r6, r3
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	bfa8      	it	ge
 8008aac:	462b      	movge	r3, r5
 8008aae:	42b3      	cmp	r3, r6
 8008ab0:	bfa8      	it	ge
 8008ab2:	4633      	movge	r3, r6
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfc2      	ittt	gt
 8008ab8:	1aed      	subgt	r5, r5, r3
 8008aba:	1af6      	subgt	r6, r6, r3
 8008abc:	1aff      	subgt	r7, r7, r3
 8008abe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd16      	ble.n	8008af2 <_strtod_l+0x73a>
 8008ac4:	4641      	mov	r1, r8
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	9805      	ldr	r0, [sp, #20]
 8008aca:	f7ff f9a9 	bl	8007e20 <__pow5mult>
 8008ace:	4680      	mov	r8, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0b7      	beq.n	8008a44 <_strtod_l+0x68c>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ad8:	9805      	ldr	r0, [sp, #20]
 8008ada:	f7ff f8ff 	bl	8007cdc <__multiply>
 8008ade:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	f43f ae88 	beq.w	80087f6 <_strtod_l+0x43e>
 8008ae6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	f7fe ffe3 	bl	8007ab4 <_Bfree>
 8008aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	dc1d      	bgt.n	8008b32 <_strtod_l+0x77a>
 8008af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dd27      	ble.n	8008b4c <_strtod_l+0x794>
 8008afc:	4649      	mov	r1, r9
 8008afe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b00:	9805      	ldr	r0, [sp, #20]
 8008b02:	f7ff f98d 	bl	8007e20 <__pow5mult>
 8008b06:	4681      	mov	r9, r0
 8008b08:	bb00      	cbnz	r0, 8008b4c <_strtod_l+0x794>
 8008b0a:	f04f 0900 	mov.w	r9, #0
 8008b0e:	e672      	b.n	80087f6 <_strtod_l+0x43e>
 8008b10:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b14:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b18:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b1c:	35e2      	adds	r5, #226	@ 0xe2
 8008b1e:	fa01 f305 	lsl.w	r3, r1, r5
 8008b22:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b24:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b26:	e7ba      	b.n	8008a9e <_strtod_l+0x6e6>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b30:	e7b5      	b.n	8008a9e <_strtod_l+0x6e6>
 8008b32:	462a      	mov	r2, r5
 8008b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	f7ff f9cc 	bl	8007ed4 <__lshift>
 8008b3c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1d9      	bne.n	8008af6 <_strtod_l+0x73e>
 8008b42:	e658      	b.n	80087f6 <_strtod_l+0x43e>
 8008b44:	0800a648 	.word	0x0800a648
 8008b48:	fffffc02 	.word	0xfffffc02
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	dd07      	ble.n	8008b60 <_strtod_l+0x7a8>
 8008b50:	4649      	mov	r1, r9
 8008b52:	4632      	mov	r2, r6
 8008b54:	9805      	ldr	r0, [sp, #20]
 8008b56:	f7ff f9bd 	bl	8007ed4 <__lshift>
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d0d4      	beq.n	8008b0a <_strtod_l+0x752>
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	dd08      	ble.n	8008b76 <_strtod_l+0x7be>
 8008b64:	4641      	mov	r1, r8
 8008b66:	463a      	mov	r2, r7
 8008b68:	9805      	ldr	r0, [sp, #20]
 8008b6a:	f7ff f9b3 	bl	8007ed4 <__lshift>
 8008b6e:	4680      	mov	r8, r0
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f43f ae40 	beq.w	80087f6 <_strtod_l+0x43e>
 8008b76:	464a      	mov	r2, r9
 8008b78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b7a:	9805      	ldr	r0, [sp, #20]
 8008b7c:	f7ff fa32 	bl	8007fe4 <__mdiff>
 8008b80:	4604      	mov	r4, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f43f ae37 	beq.w	80087f6 <_strtod_l+0x43e>
 8008b88:	68c3      	ldr	r3, [r0, #12]
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60c3      	str	r3, [r0, #12]
 8008b92:	f7ff fa0b 	bl	8007fac <__mcmp>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	da3d      	bge.n	8008c16 <_strtod_l+0x85e>
 8008b9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9c:	ea53 030a 	orrs.w	r3, r3, sl
 8008ba0:	d163      	bne.n	8008c6a <_strtod_l+0x8b2>
 8008ba2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d15f      	bne.n	8008c6a <_strtod_l+0x8b2>
 8008baa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bae:	0d1b      	lsrs	r3, r3, #20
 8008bb0:	051b      	lsls	r3, r3, #20
 8008bb2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bb6:	d958      	bls.n	8008c6a <_strtod_l+0x8b2>
 8008bb8:	6963      	ldr	r3, [r4, #20]
 8008bba:	b913      	cbnz	r3, 8008bc2 <_strtod_l+0x80a>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	dd53      	ble.n	8008c6a <_strtod_l+0x8b2>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	9805      	ldr	r0, [sp, #20]
 8008bc8:	f7ff f984 	bl	8007ed4 <__lshift>
 8008bcc:	4641      	mov	r1, r8
 8008bce:	4604      	mov	r4, r0
 8008bd0:	f7ff f9ec 	bl	8007fac <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	dd48      	ble.n	8008c6a <_strtod_l+0x8b2>
 8008bd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bdc:	9a08      	ldr	r2, [sp, #32]
 8008bde:	0d1b      	lsrs	r3, r3, #20
 8008be0:	051b      	lsls	r3, r3, #20
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d062      	beq.n	8008cac <_strtod_l+0x8f4>
 8008be6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bea:	d85f      	bhi.n	8008cac <_strtod_l+0x8f4>
 8008bec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008bf0:	f67f ae94 	bls.w	800891c <_strtod_l+0x564>
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	4ba3      	ldr	r3, [pc, #652]	@ (8008e88 <_strtod_l+0xad0>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fc6c 	bl	80004d8 <__aeabi_dmul>
 8008c00:	4ba2      	ldr	r3, [pc, #648]	@ (8008e8c <_strtod_l+0xad4>)
 8008c02:	4682      	mov	sl, r0
 8008c04:	400b      	ands	r3, r1
 8008c06:	468b      	mov	fp, r1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f47f adff 	bne.w	800880c <_strtod_l+0x454>
 8008c0e:	2322      	movs	r3, #34	@ 0x22
 8008c10:	9a05      	ldr	r2, [sp, #20]
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e5fa      	b.n	800880c <_strtod_l+0x454>
 8008c16:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c1a:	d165      	bne.n	8008ce8 <_strtod_l+0x930>
 8008c1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c22:	b35a      	cbz	r2, 8008c7c <_strtod_l+0x8c4>
 8008c24:	4a9a      	ldr	r2, [pc, #616]	@ (8008e90 <_strtod_l+0xad8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d12b      	bne.n	8008c82 <_strtod_l+0x8ca>
 8008c2a:	9b08      	ldr	r3, [sp, #32]
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	b303      	cbz	r3, 8008c72 <_strtod_l+0x8ba>
 8008c30:	465a      	mov	r2, fp
 8008c32:	4b96      	ldr	r3, [pc, #600]	@ (8008e8c <_strtod_l+0xad4>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3e:	d81b      	bhi.n	8008c78 <_strtod_l+0x8c0>
 8008c40:	0d1b      	lsrs	r3, r3, #20
 8008c42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d119      	bne.n	8008c82 <_strtod_l+0x8ca>
 8008c4e:	4b91      	ldr	r3, [pc, #580]	@ (8008e94 <_strtod_l+0xadc>)
 8008c50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d102      	bne.n	8008c5c <_strtod_l+0x8a4>
 8008c56:	3101      	adds	r1, #1
 8008c58:	f43f adcd 	beq.w	80087f6 <_strtod_l+0x43e>
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	4b8a      	ldr	r3, [pc, #552]	@ (8008e8c <_strtod_l+0xad4>)
 8008c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c64:	401a      	ands	r2, r3
 8008c66:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1c1      	bne.n	8008bf4 <_strtod_l+0x83c>
 8008c70:	e5cc      	b.n	800880c <_strtod_l+0x454>
 8008c72:	f04f 33ff 	mov.w	r3, #4294967295
 8008c76:	e7e8      	b.n	8008c4a <_strtod_l+0x892>
 8008c78:	4613      	mov	r3, r2
 8008c7a:	e7e6      	b.n	8008c4a <_strtod_l+0x892>
 8008c7c:	ea53 030a 	orrs.w	r3, r3, sl
 8008c80:	d0aa      	beq.n	8008bd8 <_strtod_l+0x820>
 8008c82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c84:	b1db      	cbz	r3, 8008cbe <_strtod_l+0x906>
 8008c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c88:	4213      	tst	r3, r2
 8008c8a:	d0ee      	beq.n	8008c6a <_strtod_l+0x8b2>
 8008c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8e:	4650      	mov	r0, sl
 8008c90:	4659      	mov	r1, fp
 8008c92:	9a08      	ldr	r2, [sp, #32]
 8008c94:	b1bb      	cbz	r3, 8008cc6 <_strtod_l+0x90e>
 8008c96:	f7ff fb6d 	bl	8008374 <sulp>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ca2:	f7f7 fa63 	bl	800016c <__adddf3>
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	468b      	mov	fp, r1
 8008caa:	e7de      	b.n	8008c6a <_strtod_l+0x8b2>
 8008cac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cb0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cb4:	f04f 3aff 	mov.w	sl, #4294967295
 8008cb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cbc:	e7d5      	b.n	8008c6a <_strtod_l+0x8b2>
 8008cbe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cc0:	ea13 0f0a 	tst.w	r3, sl
 8008cc4:	e7e1      	b.n	8008c8a <_strtod_l+0x8d2>
 8008cc6:	f7ff fb55 	bl	8008374 <sulp>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd2:	f7f7 fa49 	bl	8000168 <__aeabi_dsub>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4682      	mov	sl, r0
 8008cdc:	468b      	mov	fp, r1
 8008cde:	f7f7 fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0c1      	beq.n	8008c6a <_strtod_l+0x8b2>
 8008ce6:	e619      	b.n	800891c <_strtod_l+0x564>
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4620      	mov	r0, r4
 8008cec:	f7ff face 	bl	800828c <__ratio>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460f      	mov	r7, r1
 8008cfa:	f7f7 fe69 	bl	80009d0 <__aeabi_dcmple>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d06d      	beq.n	8008dde <_strtod_l+0xa26>
 8008d02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d178      	bne.n	8008dfa <_strtod_l+0xa42>
 8008d08:	f1ba 0f00 	cmp.w	sl, #0
 8008d0c:	d156      	bne.n	8008dbc <_strtod_l+0xa04>
 8008d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d158      	bne.n	8008dca <_strtod_l+0xa12>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8008e98 <_strtod_l+0xae0>)
 8008d20:	f7f7 fe4c 	bl	80009bc <__aeabi_dcmplt>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d157      	bne.n	8008dd8 <_strtod_l+0xa20>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8008e9c <_strtod_l+0xae4>)
 8008d30:	f7f7 fbd2 	bl	80004d8 <__aeabi_dmul>
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d3c:	9606      	str	r6, [sp, #24]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d44:	4d51      	ldr	r5, [pc, #324]	@ (8008e8c <_strtod_l+0xad4>)
 8008d46:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d4c:	401d      	ands	r5, r3
 8008d4e:	4b54      	ldr	r3, [pc, #336]	@ (8008ea0 <_strtod_l+0xae8>)
 8008d50:	429d      	cmp	r5, r3
 8008d52:	f040 80ab 	bne.w	8008eac <_strtod_l+0xaf4>
 8008d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d58:	4650      	mov	r0, sl
 8008d5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d5e:	4659      	mov	r1, fp
 8008d60:	f7ff f9d4 	bl	800810c <__ulp>
 8008d64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d68:	f7f7 fbb6 	bl	80004d8 <__aeabi_dmul>
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	465b      	mov	r3, fp
 8008d70:	f7f7 f9fc 	bl	800016c <__adddf3>
 8008d74:	460b      	mov	r3, r1
 8008d76:	4945      	ldr	r1, [pc, #276]	@ (8008e8c <_strtod_l+0xad4>)
 8008d78:	4a4a      	ldr	r2, [pc, #296]	@ (8008ea4 <_strtod_l+0xaec>)
 8008d7a:	4019      	ands	r1, r3
 8008d7c:	4291      	cmp	r1, r2
 8008d7e:	4682      	mov	sl, r0
 8008d80:	d942      	bls.n	8008e08 <_strtod_l+0xa50>
 8008d82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d84:	4b43      	ldr	r3, [pc, #268]	@ (8008e94 <_strtod_l+0xadc>)
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d103      	bne.n	8008d92 <_strtod_l+0x9da>
 8008d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f43f ad32 	beq.w	80087f6 <_strtod_l+0x43e>
 8008d92:	f04f 3aff 	mov.w	sl, #4294967295
 8008d96:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008e94 <_strtod_l+0xadc>
 8008d9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d9c:	9805      	ldr	r0, [sp, #20]
 8008d9e:	f7fe fe89 	bl	8007ab4 <_Bfree>
 8008da2:	4649      	mov	r1, r9
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	f7fe fe85 	bl	8007ab4 <_Bfree>
 8008daa:	4641      	mov	r1, r8
 8008dac:	9805      	ldr	r0, [sp, #20]
 8008dae:	f7fe fe81 	bl	8007ab4 <_Bfree>
 8008db2:	4621      	mov	r1, r4
 8008db4:	9805      	ldr	r0, [sp, #20]
 8008db6:	f7fe fe7d 	bl	8007ab4 <_Bfree>
 8008dba:	e61c      	b.n	80089f6 <_strtod_l+0x63e>
 8008dbc:	f1ba 0f01 	cmp.w	sl, #1
 8008dc0:	d103      	bne.n	8008dca <_strtod_l+0xa12>
 8008dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f43f ada9 	beq.w	800891c <_strtod_l+0x564>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4b36      	ldr	r3, [pc, #216]	@ (8008ea8 <_strtod_l+0xaf0>)
 8008dce:	2600      	movs	r6, #0
 8008dd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dd4:	4f30      	ldr	r7, [pc, #192]	@ (8008e98 <_strtod_l+0xae0>)
 8008dd6:	e7b3      	b.n	8008d40 <_strtod_l+0x988>
 8008dd8:	2600      	movs	r6, #0
 8008dda:	4f30      	ldr	r7, [pc, #192]	@ (8008e9c <_strtod_l+0xae4>)
 8008ddc:	e7ac      	b.n	8008d38 <_strtod_l+0x980>
 8008dde:	4630      	mov	r0, r6
 8008de0:	4639      	mov	r1, r7
 8008de2:	4b2e      	ldr	r3, [pc, #184]	@ (8008e9c <_strtod_l+0xae4>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	f7f7 fb77 	bl	80004d8 <__aeabi_dmul>
 8008dea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dec:	4606      	mov	r6, r0
 8008dee:	460f      	mov	r7, r1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0a1      	beq.n	8008d38 <_strtod_l+0x980>
 8008df4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008df8:	e7a2      	b.n	8008d40 <_strtod_l+0x988>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b26      	ldr	r3, [pc, #152]	@ (8008e98 <_strtod_l+0xae0>)
 8008dfe:	4616      	mov	r6, r2
 8008e00:	461f      	mov	r7, r3
 8008e02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e06:	e79b      	b.n	8008d40 <_strtod_l+0x988>
 8008e08:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e0c:	9b08      	ldr	r3, [sp, #32]
 8008e0e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1c1      	bne.n	8008d9a <_strtod_l+0x9e2>
 8008e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e1a:	0d1b      	lsrs	r3, r3, #20
 8008e1c:	051b      	lsls	r3, r3, #20
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	d1bb      	bne.n	8008d9a <_strtod_l+0x9e2>
 8008e22:	4630      	mov	r0, r6
 8008e24:	4639      	mov	r1, r7
 8008e26:	f7f8 f8fd 	bl	8001024 <__aeabi_d2lz>
 8008e2a:	f7f7 fb27 	bl	800047c <__aeabi_l2d>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 f997 	bl	8000168 <__aeabi_dsub>
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e48:	ea46 060a 	orr.w	r6, r6, sl
 8008e4c:	431e      	orrs	r6, r3
 8008e4e:	d06a      	beq.n	8008f26 <_strtod_l+0xb6e>
 8008e50:	a309      	add	r3, pc, #36	@ (adr r3, 8008e78 <_strtod_l+0xac0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fdb1 	bl	80009bc <__aeabi_dcmplt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f47f acd6 	bne.w	800880c <_strtod_l+0x454>
 8008e60:	a307      	add	r3, pc, #28	@ (adr r3, 8008e80 <_strtod_l+0xac8>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e6a:	f7f7 fdc5 	bl	80009f8 <__aeabi_dcmpgt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d093      	beq.n	8008d9a <_strtod_l+0x9e2>
 8008e72:	e4cb      	b.n	800880c <_strtod_l+0x454>
 8008e74:	f3af 8000 	nop.w
 8008e78:	94a03595 	.word	0x94a03595
 8008e7c:	3fdfffff 	.word	0x3fdfffff
 8008e80:	35afe535 	.word	0x35afe535
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	39500000 	.word	0x39500000
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	000fffff 	.word	0x000fffff
 8008e94:	7fefffff 	.word	0x7fefffff
 8008e98:	3ff00000 	.word	0x3ff00000
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	7fe00000 	.word	0x7fe00000
 8008ea4:	7c9fffff 	.word	0x7c9fffff
 8008ea8:	bff00000 	.word	0xbff00000
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	b323      	cbz	r3, 8008efa <_strtod_l+0xb42>
 8008eb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008eb4:	d821      	bhi.n	8008efa <_strtod_l+0xb42>
 8008eb6:	a328      	add	r3, pc, #160	@ (adr r3, 8008f58 <_strtod_l+0xba0>)
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7f7 fd86 	bl	80009d0 <__aeabi_dcmple>
 8008ec4:	b1a0      	cbz	r0, 8008ef0 <_strtod_l+0xb38>
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7f7 fddd 	bl	8000a88 <__aeabi_d2uiz>
 8008ece:	2801      	cmp	r0, #1
 8008ed0:	bf38      	it	cc
 8008ed2:	2001      	movcc	r0, #1
 8008ed4:	f7f7 fa86 	bl	80003e4 <__aeabi_ui2d>
 8008ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	b9fb      	cbnz	r3, 8008f20 <_strtod_l+0xb68>
 8008ee0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ee4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008ee6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ee8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008eec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ef0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ef2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008ef6:	1b5b      	subs	r3, r3, r5
 8008ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008efe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f02:	f7ff f903 	bl	800810c <__ulp>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4650      	mov	r0, sl
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	f7f7 fae3 	bl	80004d8 <__aeabi_dmul>
 8008f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f16:	f7f7 f929 	bl	800016c <__adddf3>
 8008f1a:	4682      	mov	sl, r0
 8008f1c:	468b      	mov	fp, r1
 8008f1e:	e775      	b.n	8008e0c <_strtod_l+0xa54>
 8008f20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f24:	e7e0      	b.n	8008ee8 <_strtod_l+0xb30>
 8008f26:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f60 <_strtod_l+0xba8>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f7f7 fd46 	bl	80009bc <__aeabi_dcmplt>
 8008f30:	e79d      	b.n	8008e6e <_strtod_l+0xab6>
 8008f32:	2300      	movs	r3, #0
 8008f34:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	f7ff ba79 	b.w	8008432 <_strtod_l+0x7a>
 8008f40:	2a65      	cmp	r2, #101	@ 0x65
 8008f42:	f43f ab72 	beq.w	800862a <_strtod_l+0x272>
 8008f46:	2a45      	cmp	r2, #69	@ 0x45
 8008f48:	f43f ab6f 	beq.w	800862a <_strtod_l+0x272>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f7ff bbaa 	b.w	80086a6 <_strtod_l+0x2ee>
 8008f52:	bf00      	nop
 8008f54:	f3af 8000 	nop.w
 8008f58:	ffc00000 	.word	0xffc00000
 8008f5c:	41dfffff 	.word	0x41dfffff
 8008f60:	94a03595 	.word	0x94a03595
 8008f64:	3fcfffff 	.word	0x3fcfffff

08008f68 <_strtod_r>:
 8008f68:	4b01      	ldr	r3, [pc, #4]	@ (8008f70 <_strtod_r+0x8>)
 8008f6a:	f7ff ba25 	b.w	80083b8 <_strtod_l>
 8008f6e:	bf00      	nop
 8008f70:	200000ac 	.word	0x200000ac

08008f74 <_strtol_l.isra.0>:
 8008f74:	2b24      	cmp	r3, #36	@ 0x24
 8008f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7a:	4686      	mov	lr, r0
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	d801      	bhi.n	8008f84 <_strtol_l.isra.0+0x10>
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d106      	bne.n	8008f92 <_strtol_l.isra.0+0x1e>
 8008f84:	f7fd fdbc 	bl	8006b00 <__errno>
 8008f88:	2316      	movs	r3, #22
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	460d      	mov	r5, r1
 8008f94:	4833      	ldr	r0, [pc, #204]	@ (8009064 <_strtol_l.isra.0+0xf0>)
 8008f96:	462a      	mov	r2, r5
 8008f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f9c:	5d06      	ldrb	r6, [r0, r4]
 8008f9e:	f016 0608 	ands.w	r6, r6, #8
 8008fa2:	d1f8      	bne.n	8008f96 <_strtol_l.isra.0+0x22>
 8008fa4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008fa6:	d110      	bne.n	8008fca <_strtol_l.isra.0+0x56>
 8008fa8:	2601      	movs	r6, #1
 8008faa:	782c      	ldrb	r4, [r5, #0]
 8008fac:	1c95      	adds	r5, r2, #2
 8008fae:	f033 0210 	bics.w	r2, r3, #16
 8008fb2:	d115      	bne.n	8008fe0 <_strtol_l.isra.0+0x6c>
 8008fb4:	2c30      	cmp	r4, #48	@ 0x30
 8008fb6:	d10d      	bne.n	8008fd4 <_strtol_l.isra.0+0x60>
 8008fb8:	782a      	ldrb	r2, [r5, #0]
 8008fba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fbe:	2a58      	cmp	r2, #88	@ 0x58
 8008fc0:	d108      	bne.n	8008fd4 <_strtol_l.isra.0+0x60>
 8008fc2:	786c      	ldrb	r4, [r5, #1]
 8008fc4:	3502      	adds	r5, #2
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	e00a      	b.n	8008fe0 <_strtol_l.isra.0+0x6c>
 8008fca:	2c2b      	cmp	r4, #43	@ 0x2b
 8008fcc:	bf04      	itt	eq
 8008fce:	782c      	ldrbeq	r4, [r5, #0]
 8008fd0:	1c95      	addeq	r5, r2, #2
 8008fd2:	e7ec      	b.n	8008fae <_strtol_l.isra.0+0x3a>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1f6      	bne.n	8008fc6 <_strtol_l.isra.0+0x52>
 8008fd8:	2c30      	cmp	r4, #48	@ 0x30
 8008fda:	bf14      	ite	ne
 8008fdc:	230a      	movne	r3, #10
 8008fde:	2308      	moveq	r3, #8
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008fe6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fea:	fbbc f9f3 	udiv	r9, ip, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ff4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ff8:	2f09      	cmp	r7, #9
 8008ffa:	d80f      	bhi.n	800901c <_strtol_l.isra.0+0xa8>
 8008ffc:	463c      	mov	r4, r7
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	dd1b      	ble.n	800903a <_strtol_l.isra.0+0xc6>
 8009002:	1c57      	adds	r7, r2, #1
 8009004:	d007      	beq.n	8009016 <_strtol_l.isra.0+0xa2>
 8009006:	4581      	cmp	r9, r0
 8009008:	d314      	bcc.n	8009034 <_strtol_l.isra.0+0xc0>
 800900a:	d101      	bne.n	8009010 <_strtol_l.isra.0+0x9c>
 800900c:	45a2      	cmp	sl, r4
 800900e:	db11      	blt.n	8009034 <_strtol_l.isra.0+0xc0>
 8009010:	2201      	movs	r2, #1
 8009012:	fb00 4003 	mla	r0, r0, r3, r4
 8009016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800901a:	e7eb      	b.n	8008ff4 <_strtol_l.isra.0+0x80>
 800901c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009020:	2f19      	cmp	r7, #25
 8009022:	d801      	bhi.n	8009028 <_strtol_l.isra.0+0xb4>
 8009024:	3c37      	subs	r4, #55	@ 0x37
 8009026:	e7ea      	b.n	8008ffe <_strtol_l.isra.0+0x8a>
 8009028:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800902c:	2f19      	cmp	r7, #25
 800902e:	d804      	bhi.n	800903a <_strtol_l.isra.0+0xc6>
 8009030:	3c57      	subs	r4, #87	@ 0x57
 8009032:	e7e4      	b.n	8008ffe <_strtol_l.isra.0+0x8a>
 8009034:	f04f 32ff 	mov.w	r2, #4294967295
 8009038:	e7ed      	b.n	8009016 <_strtol_l.isra.0+0xa2>
 800903a:	1c53      	adds	r3, r2, #1
 800903c:	d108      	bne.n	8009050 <_strtol_l.isra.0+0xdc>
 800903e:	2322      	movs	r3, #34	@ 0x22
 8009040:	4660      	mov	r0, ip
 8009042:	f8ce 3000 	str.w	r3, [lr]
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	d0a0      	beq.n	8008f8e <_strtol_l.isra.0+0x1a>
 800904c:	1e69      	subs	r1, r5, #1
 800904e:	e006      	b.n	800905e <_strtol_l.isra.0+0xea>
 8009050:	b106      	cbz	r6, 8009054 <_strtol_l.isra.0+0xe0>
 8009052:	4240      	negs	r0, r0
 8009054:	f1b8 0f00 	cmp.w	r8, #0
 8009058:	d099      	beq.n	8008f8e <_strtol_l.isra.0+0x1a>
 800905a:	2a00      	cmp	r2, #0
 800905c:	d1f6      	bne.n	800904c <_strtol_l.isra.0+0xd8>
 800905e:	f8c8 1000 	str.w	r1, [r8]
 8009062:	e794      	b.n	8008f8e <_strtol_l.isra.0+0x1a>
 8009064:	0800a671 	.word	0x0800a671

08009068 <_strtol_r>:
 8009068:	f7ff bf84 	b.w	8008f74 <_strtol_l.isra.0>

0800906c <__ssputs_r>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	461f      	mov	r7, r3
 8009072:	688e      	ldr	r6, [r1, #8]
 8009074:	4682      	mov	sl, r0
 8009076:	42be      	cmp	r6, r7
 8009078:	460c      	mov	r4, r1
 800907a:	4690      	mov	r8, r2
 800907c:	680b      	ldr	r3, [r1, #0]
 800907e:	d82d      	bhi.n	80090dc <__ssputs_r+0x70>
 8009080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009088:	d026      	beq.n	80090d8 <__ssputs_r+0x6c>
 800908a:	6965      	ldr	r5, [r4, #20]
 800908c:	6909      	ldr	r1, [r1, #16]
 800908e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009092:	eba3 0901 	sub.w	r9, r3, r1
 8009096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800909a:	1c7b      	adds	r3, r7, #1
 800909c:	444b      	add	r3, r9
 800909e:	106d      	asrs	r5, r5, #1
 80090a0:	429d      	cmp	r5, r3
 80090a2:	bf38      	it	cc
 80090a4:	461d      	movcc	r5, r3
 80090a6:	0553      	lsls	r3, r2, #21
 80090a8:	d527      	bpl.n	80090fa <__ssputs_r+0x8e>
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7fe fc36 	bl	800791c <_malloc_r>
 80090b0:	4606      	mov	r6, r0
 80090b2:	b360      	cbz	r0, 800910e <__ssputs_r+0xa2>
 80090b4:	464a      	mov	r2, r9
 80090b6:	6921      	ldr	r1, [r4, #16]
 80090b8:	f000 fa02 	bl	80094c0 <memcpy>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	6126      	str	r6, [r4, #16]
 80090ca:	444e      	add	r6, r9
 80090cc:	6026      	str	r6, [r4, #0]
 80090ce:	463e      	mov	r6, r7
 80090d0:	6165      	str	r5, [r4, #20]
 80090d2:	eba5 0509 	sub.w	r5, r5, r9
 80090d6:	60a5      	str	r5, [r4, #8]
 80090d8:	42be      	cmp	r6, r7
 80090da:	d900      	bls.n	80090de <__ssputs_r+0x72>
 80090dc:	463e      	mov	r6, r7
 80090de:	4632      	mov	r2, r6
 80090e0:	4641      	mov	r1, r8
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	f000 f9c2 	bl	800946c <memmove>
 80090e8:	2000      	movs	r0, #0
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	1b9b      	subs	r3, r3, r6
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	4433      	add	r3, r6
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	462a      	mov	r2, r5
 80090fc:	f000 fd71 	bl	8009be2 <_realloc_r>
 8009100:	4606      	mov	r6, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	d1e0      	bne.n	80090c8 <__ssputs_r+0x5c>
 8009106:	4650      	mov	r0, sl
 8009108:	6921      	ldr	r1, [r4, #16]
 800910a:	f7fe fb95 	bl	8007838 <_free_r>
 800910e:	230c      	movs	r3, #12
 8009110:	f8ca 3000 	str.w	r3, [sl]
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	e7e9      	b.n	80090f6 <__ssputs_r+0x8a>
	...

08009124 <_svfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4698      	mov	r8, r3
 800912a:	898b      	ldrh	r3, [r1, #12]
 800912c:	4607      	mov	r7, r0
 800912e:	061b      	lsls	r3, r3, #24
 8009130:	460d      	mov	r5, r1
 8009132:	4614      	mov	r4, r2
 8009134:	b09d      	sub	sp, #116	@ 0x74
 8009136:	d510      	bpl.n	800915a <_svfiprintf_r+0x36>
 8009138:	690b      	ldr	r3, [r1, #16]
 800913a:	b973      	cbnz	r3, 800915a <_svfiprintf_r+0x36>
 800913c:	2140      	movs	r1, #64	@ 0x40
 800913e:	f7fe fbed 	bl	800791c <_malloc_r>
 8009142:	6028      	str	r0, [r5, #0]
 8009144:	6128      	str	r0, [r5, #16]
 8009146:	b930      	cbnz	r0, 8009156 <_svfiprintf_r+0x32>
 8009148:	230c      	movs	r3, #12
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b01d      	add	sp, #116	@ 0x74
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	2340      	movs	r3, #64	@ 0x40
 8009158:	616b      	str	r3, [r5, #20]
 800915a:	2300      	movs	r3, #0
 800915c:	9309      	str	r3, [sp, #36]	@ 0x24
 800915e:	2320      	movs	r3, #32
 8009160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009164:	2330      	movs	r3, #48	@ 0x30
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	f8cd 800c 	str.w	r8, [sp, #12]
 800916e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009308 <_svfiprintf_r+0x1e4>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009176:	4623      	mov	r3, r4
 8009178:	469a      	mov	sl, r3
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	b10a      	cbz	r2, 8009184 <_svfiprintf_r+0x60>
 8009180:	2a25      	cmp	r2, #37	@ 0x25
 8009182:	d1f9      	bne.n	8009178 <_svfiprintf_r+0x54>
 8009184:	ebba 0b04 	subs.w	fp, sl, r4
 8009188:	d00b      	beq.n	80091a2 <_svfiprintf_r+0x7e>
 800918a:	465b      	mov	r3, fp
 800918c:	4622      	mov	r2, r4
 800918e:	4629      	mov	r1, r5
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff6b 	bl	800906c <__ssputs_r>
 8009196:	3001      	adds	r0, #1
 8009198:	f000 80a7 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 800919c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800919e:	445a      	add	r2, fp
 80091a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 809f 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b6:	f10a 0a01 	add.w	sl, sl, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c4:	4654      	mov	r4, sl
 80091c6:	2205      	movs	r2, #5
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	484e      	ldr	r0, [pc, #312]	@ (8009308 <_svfiprintf_r+0x1e4>)
 80091ce:	f7fd fcc4 	bl	8006b5a <memchr>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	b9d8      	cbnz	r0, 800920e <_svfiprintf_r+0xea>
 80091d6:	06d0      	lsls	r0, r2, #27
 80091d8:	bf44      	itt	mi
 80091da:	2320      	movmi	r3, #32
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e0:	0711      	lsls	r1, r2, #28
 80091e2:	bf44      	itt	mi
 80091e4:	232b      	movmi	r3, #43	@ 0x2b
 80091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f0:	d015      	beq.n	800921e <_svfiprintf_r+0xfa>
 80091f2:	4654      	mov	r4, sl
 80091f4:	2000      	movs	r0, #0
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	4621      	mov	r1, r4
 80091fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009202:	3b30      	subs	r3, #48	@ 0x30
 8009204:	2b09      	cmp	r3, #9
 8009206:	d94b      	bls.n	80092a0 <_svfiprintf_r+0x17c>
 8009208:	b1b0      	cbz	r0, 8009238 <_svfiprintf_r+0x114>
 800920a:	9207      	str	r2, [sp, #28]
 800920c:	e014      	b.n	8009238 <_svfiprintf_r+0x114>
 800920e:	eba0 0308 	sub.w	r3, r0, r8
 8009212:	fa09 f303 	lsl.w	r3, r9, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	46a2      	mov	sl, r4
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	e7d2      	b.n	80091c4 <_svfiprintf_r+0xa0>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbb      	ittet	lt
 800922a:	425b      	neglt	r3, r3
 800922c:	f042 0202 	orrlt.w	r2, r2, #2
 8009230:	9307      	strge	r3, [sp, #28]
 8009232:	9307      	strlt	r3, [sp, #28]
 8009234:	bfb8      	it	lt
 8009236:	9204      	strlt	r2, [sp, #16]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	2b2e      	cmp	r3, #46	@ 0x2e
 800923c:	d10a      	bne.n	8009254 <_svfiprintf_r+0x130>
 800923e:	7863      	ldrb	r3, [r4, #1]
 8009240:	2b2a      	cmp	r3, #42	@ 0x2a
 8009242:	d132      	bne.n	80092aa <_svfiprintf_r+0x186>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	3402      	adds	r4, #2
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	9203      	str	r2, [sp, #12]
 800924e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800930c <_svfiprintf_r+0x1e8>
 8009258:	2203      	movs	r2, #3
 800925a:	4650      	mov	r0, sl
 800925c:	7821      	ldrb	r1, [r4, #0]
 800925e:	f7fd fc7c 	bl	8006b5a <memchr>
 8009262:	b138      	cbz	r0, 8009274 <_svfiprintf_r+0x150>
 8009264:	2240      	movs	r2, #64	@ 0x40
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	eba0 000a 	sub.w	r0, r0, sl
 800926c:	4082      	lsls	r2, r0
 800926e:	4313      	orrs	r3, r2
 8009270:	3401      	adds	r4, #1
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009278:	2206      	movs	r2, #6
 800927a:	4825      	ldr	r0, [pc, #148]	@ (8009310 <_svfiprintf_r+0x1ec>)
 800927c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009280:	f7fd fc6b 	bl	8006b5a <memchr>
 8009284:	2800      	cmp	r0, #0
 8009286:	d036      	beq.n	80092f6 <_svfiprintf_r+0x1d2>
 8009288:	4b22      	ldr	r3, [pc, #136]	@ (8009314 <_svfiprintf_r+0x1f0>)
 800928a:	bb1b      	cbnz	r3, 80092d4 <_svfiprintf_r+0x1b0>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	3307      	adds	r3, #7
 8009290:	f023 0307 	bic.w	r3, r3, #7
 8009294:	3308      	adds	r3, #8
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	4433      	add	r3, r6
 800929c:	9309      	str	r3, [sp, #36]	@ 0x24
 800929e:	e76a      	b.n	8009176 <_svfiprintf_r+0x52>
 80092a0:	460c      	mov	r4, r1
 80092a2:	2001      	movs	r0, #1
 80092a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a8:	e7a8      	b.n	80091fc <_svfiprintf_r+0xd8>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4619      	mov	r1, r3
 80092b2:	3401      	adds	r4, #1
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	3a30      	subs	r2, #48	@ 0x30
 80092be:	2a09      	cmp	r2, #9
 80092c0:	d903      	bls.n	80092ca <_svfiprintf_r+0x1a6>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0c6      	beq.n	8009254 <_svfiprintf_r+0x130>
 80092c6:	9105      	str	r1, [sp, #20]
 80092c8:	e7c4      	b.n	8009254 <_svfiprintf_r+0x130>
 80092ca:	4604      	mov	r4, r0
 80092cc:	2301      	movs	r3, #1
 80092ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d2:	e7f0      	b.n	80092b6 <_svfiprintf_r+0x192>
 80092d4:	ab03      	add	r3, sp, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	462a      	mov	r2, r5
 80092da:	4638      	mov	r0, r7
 80092dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009318 <_svfiprintf_r+0x1f4>)
 80092de:	a904      	add	r1, sp, #16
 80092e0:	f7fc fcbc 	bl	8005c5c <_printf_float>
 80092e4:	1c42      	adds	r2, r0, #1
 80092e6:	4606      	mov	r6, r0
 80092e8:	d1d6      	bne.n	8009298 <_svfiprintf_r+0x174>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	065b      	lsls	r3, r3, #25
 80092ee:	f53f af2d 	bmi.w	800914c <_svfiprintf_r+0x28>
 80092f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092f4:	e72c      	b.n	8009150 <_svfiprintf_r+0x2c>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	4b06      	ldr	r3, [pc, #24]	@ (8009318 <_svfiprintf_r+0x1f4>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	f7fc ff49 	bl	8006198 <_printf_i>
 8009306:	e7ed      	b.n	80092e4 <_svfiprintf_r+0x1c0>
 8009308:	0800a46b 	.word	0x0800a46b
 800930c:	0800a471 	.word	0x0800a471
 8009310:	0800a475 	.word	0x0800a475
 8009314:	08005c5d 	.word	0x08005c5d
 8009318:	0800906d 	.word	0x0800906d

0800931c <__sflush_r>:
 800931c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	0716      	lsls	r6, r2, #28
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	d454      	bmi.n	80093d4 <__sflush_r+0xb8>
 800932a:	684b      	ldr	r3, [r1, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc02      	bgt.n	8009336 <__sflush_r+0x1a>
 8009330:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd48      	ble.n	80093c8 <__sflush_r+0xac>
 8009336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009338:	2e00      	cmp	r6, #0
 800933a:	d045      	beq.n	80093c8 <__sflush_r+0xac>
 800933c:	2300      	movs	r3, #0
 800933e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009342:	682f      	ldr	r7, [r5, #0]
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	d030      	beq.n	80093ac <__sflush_r+0x90>
 800934a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	0759      	lsls	r1, r3, #29
 8009350:	d505      	bpl.n	800935e <__sflush_r+0x42>
 8009352:	6863      	ldr	r3, [r4, #4]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009358:	b10b      	cbz	r3, 800935e <__sflush_r+0x42>
 800935a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	2300      	movs	r3, #0
 8009360:	4628      	mov	r0, r5
 8009362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009364:	6a21      	ldr	r1, [r4, #32]
 8009366:	47b0      	blx	r6
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	d106      	bne.n	800937c <__sflush_r+0x60>
 800936e:	6829      	ldr	r1, [r5, #0]
 8009370:	291d      	cmp	r1, #29
 8009372:	d82b      	bhi.n	80093cc <__sflush_r+0xb0>
 8009374:	4a28      	ldr	r2, [pc, #160]	@ (8009418 <__sflush_r+0xfc>)
 8009376:	40ca      	lsrs	r2, r1
 8009378:	07d6      	lsls	r6, r2, #31
 800937a:	d527      	bpl.n	80093cc <__sflush_r+0xb0>
 800937c:	2200      	movs	r2, #0
 800937e:	6062      	str	r2, [r4, #4]
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	04d9      	lsls	r1, r3, #19
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	d504      	bpl.n	8009392 <__sflush_r+0x76>
 8009388:	1c42      	adds	r2, r0, #1
 800938a:	d101      	bne.n	8009390 <__sflush_r+0x74>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b903      	cbnz	r3, 8009392 <__sflush_r+0x76>
 8009390:	6560      	str	r0, [r4, #84]	@ 0x54
 8009392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009394:	602f      	str	r7, [r5, #0]
 8009396:	b1b9      	cbz	r1, 80093c8 <__sflush_r+0xac>
 8009398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800939c:	4299      	cmp	r1, r3
 800939e:	d002      	beq.n	80093a6 <__sflush_r+0x8a>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f7fe fa49 	bl	8007838 <_free_r>
 80093a6:	2300      	movs	r3, #0
 80093a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093aa:	e00d      	b.n	80093c8 <__sflush_r+0xac>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b0      	blx	r6
 80093b2:	4602      	mov	r2, r0
 80093b4:	1c50      	adds	r0, r2, #1
 80093b6:	d1c9      	bne.n	800934c <__sflush_r+0x30>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0c6      	beq.n	800934c <__sflush_r+0x30>
 80093be:	2b1d      	cmp	r3, #29
 80093c0:	d001      	beq.n	80093c6 <__sflush_r+0xaa>
 80093c2:	2b16      	cmp	r3, #22
 80093c4:	d11d      	bne.n	8009402 <__sflush_r+0xe6>
 80093c6:	602f      	str	r7, [r5, #0]
 80093c8:	2000      	movs	r0, #0
 80093ca:	e021      	b.n	8009410 <__sflush_r+0xf4>
 80093cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d0:	b21b      	sxth	r3, r3
 80093d2:	e01a      	b.n	800940a <__sflush_r+0xee>
 80093d4:	690f      	ldr	r7, [r1, #16]
 80093d6:	2f00      	cmp	r7, #0
 80093d8:	d0f6      	beq.n	80093c8 <__sflush_r+0xac>
 80093da:	0793      	lsls	r3, r2, #30
 80093dc:	bf18      	it	ne
 80093de:	2300      	movne	r3, #0
 80093e0:	680e      	ldr	r6, [r1, #0]
 80093e2:	bf08      	it	eq
 80093e4:	694b      	ldreq	r3, [r1, #20]
 80093e6:	1bf6      	subs	r6, r6, r7
 80093e8:	600f      	str	r7, [r1, #0]
 80093ea:	608b      	str	r3, [r1, #8]
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	ddeb      	ble.n	80093c8 <__sflush_r+0xac>
 80093f0:	4633      	mov	r3, r6
 80093f2:	463a      	mov	r2, r7
 80093f4:	4628      	mov	r0, r5
 80093f6:	6a21      	ldr	r1, [r4, #32]
 80093f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80093fc:	47e0      	blx	ip
 80093fe:	2800      	cmp	r0, #0
 8009400:	dc07      	bgt.n	8009412 <__sflush_r+0xf6>
 8009402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009412:	4407      	add	r7, r0
 8009414:	1a36      	subs	r6, r6, r0
 8009416:	e7e9      	b.n	80093ec <__sflush_r+0xd0>
 8009418:	20400001 	.word	0x20400001

0800941c <_fflush_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	4605      	mov	r5, r0
 8009422:	460c      	mov	r4, r1
 8009424:	b913      	cbnz	r3, 800942c <_fflush_r+0x10>
 8009426:	2500      	movs	r5, #0
 8009428:	4628      	mov	r0, r5
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	b118      	cbz	r0, 8009436 <_fflush_r+0x1a>
 800942e:	6a03      	ldr	r3, [r0, #32]
 8009430:	b90b      	cbnz	r3, 8009436 <_fflush_r+0x1a>
 8009432:	f7fd fa65 	bl	8006900 <__sinit>
 8009436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f3      	beq.n	8009426 <_fflush_r+0xa>
 800943e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009440:	07d0      	lsls	r0, r2, #31
 8009442:	d404      	bmi.n	800944e <_fflush_r+0x32>
 8009444:	0599      	lsls	r1, r3, #22
 8009446:	d402      	bmi.n	800944e <_fflush_r+0x32>
 8009448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800944a:	f7fd fb84 	bl	8006b56 <__retarget_lock_acquire_recursive>
 800944e:	4628      	mov	r0, r5
 8009450:	4621      	mov	r1, r4
 8009452:	f7ff ff63 	bl	800931c <__sflush_r>
 8009456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009458:	4605      	mov	r5, r0
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d4e4      	bmi.n	8009428 <_fflush_r+0xc>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	059b      	lsls	r3, r3, #22
 8009462:	d4e1      	bmi.n	8009428 <_fflush_r+0xc>
 8009464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009466:	f7fd fb77 	bl	8006b58 <__retarget_lock_release_recursive>
 800946a:	e7dd      	b.n	8009428 <_fflush_r+0xc>

0800946c <memmove>:
 800946c:	4288      	cmp	r0, r1
 800946e:	b510      	push	{r4, lr}
 8009470:	eb01 0402 	add.w	r4, r1, r2
 8009474:	d902      	bls.n	800947c <memmove+0x10>
 8009476:	4284      	cmp	r4, r0
 8009478:	4623      	mov	r3, r4
 800947a:	d807      	bhi.n	800948c <memmove+0x20>
 800947c:	1e43      	subs	r3, r0, #1
 800947e:	42a1      	cmp	r1, r4
 8009480:	d008      	beq.n	8009494 <memmove+0x28>
 8009482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948a:	e7f8      	b.n	800947e <memmove+0x12>
 800948c:	4601      	mov	r1, r0
 800948e:	4402      	add	r2, r0
 8009490:	428a      	cmp	r2, r1
 8009492:	d100      	bne.n	8009496 <memmove+0x2a>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800949e:	e7f7      	b.n	8009490 <memmove+0x24>

080094a0 <_sbrk_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	2300      	movs	r3, #0
 80094a4:	4d05      	ldr	r5, [pc, #20]	@ (80094bc <_sbrk_r+0x1c>)
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f8 fdd6 	bl	800205c <_sbrk>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_sbrk_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_sbrk_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000724 	.word	0x20000724

080094c0 <memcpy>:
 80094c0:	440a      	add	r2, r1
 80094c2:	4291      	cmp	r1, r2
 80094c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094c8:	d100      	bne.n	80094cc <memcpy+0xc>
 80094ca:	4770      	bx	lr
 80094cc:	b510      	push	{r4, lr}
 80094ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d2:	4291      	cmp	r1, r2
 80094d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d8:	d1f9      	bne.n	80094ce <memcpy+0xe>
 80094da:	bd10      	pop	{r4, pc}

080094dc <nan>:
 80094dc:	2000      	movs	r0, #0
 80094de:	4901      	ldr	r1, [pc, #4]	@ (80094e4 <nan+0x8>)
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	7ff80000 	.word	0x7ff80000

080094e8 <__assert_func>:
 80094e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ea:	4614      	mov	r4, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	4b09      	ldr	r3, [pc, #36]	@ (8009514 <__assert_func+0x2c>)
 80094f0:	4605      	mov	r5, r0
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68d8      	ldr	r0, [r3, #12]
 80094f6:	b14c      	cbz	r4, 800950c <__assert_func+0x24>
 80094f8:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <__assert_func+0x30>)
 80094fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094fe:	9100      	str	r1, [sp, #0]
 8009500:	462b      	mov	r3, r5
 8009502:	4906      	ldr	r1, [pc, #24]	@ (800951c <__assert_func+0x34>)
 8009504:	f000 fba8 	bl	8009c58 <fiprintf>
 8009508:	f000 fbb8 	bl	8009c7c <abort>
 800950c:	4b04      	ldr	r3, [pc, #16]	@ (8009520 <__assert_func+0x38>)
 800950e:	461c      	mov	r4, r3
 8009510:	e7f3      	b.n	80094fa <__assert_func+0x12>
 8009512:	bf00      	nop
 8009514:	2000005c 	.word	0x2000005c
 8009518:	0800a484 	.word	0x0800a484
 800951c:	0800a491 	.word	0x0800a491
 8009520:	0800a4bf 	.word	0x0800a4bf

08009524 <_calloc_r>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	fba1 5402 	umull	r5, r4, r1, r2
 800952a:	b934      	cbnz	r4, 800953a <_calloc_r+0x16>
 800952c:	4629      	mov	r1, r5
 800952e:	f7fe f9f5 	bl	800791c <_malloc_r>
 8009532:	4606      	mov	r6, r0
 8009534:	b928      	cbnz	r0, 8009542 <_calloc_r+0x1e>
 8009536:	4630      	mov	r0, r6
 8009538:	bd70      	pop	{r4, r5, r6, pc}
 800953a:	220c      	movs	r2, #12
 800953c:	2600      	movs	r6, #0
 800953e:	6002      	str	r2, [r0, #0]
 8009540:	e7f9      	b.n	8009536 <_calloc_r+0x12>
 8009542:	462a      	mov	r2, r5
 8009544:	4621      	mov	r1, r4
 8009546:	f7fd fa76 	bl	8006a36 <memset>
 800954a:	e7f4      	b.n	8009536 <_calloc_r+0x12>

0800954c <rshift>:
 800954c:	6903      	ldr	r3, [r0, #16]
 800954e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009552:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009556:	f100 0414 	add.w	r4, r0, #20
 800955a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800955e:	dd46      	ble.n	80095ee <rshift+0xa2>
 8009560:	f011 011f 	ands.w	r1, r1, #31
 8009564:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009568:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800956c:	d10c      	bne.n	8009588 <rshift+0x3c>
 800956e:	4629      	mov	r1, r5
 8009570:	f100 0710 	add.w	r7, r0, #16
 8009574:	42b1      	cmp	r1, r6
 8009576:	d335      	bcc.n	80095e4 <rshift+0x98>
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	1eea      	subs	r2, r5, #3
 800957e:	4296      	cmp	r6, r2
 8009580:	bf38      	it	cc
 8009582:	2300      	movcc	r3, #0
 8009584:	4423      	add	r3, r4
 8009586:	e015      	b.n	80095b4 <rshift+0x68>
 8009588:	46a1      	mov	r9, r4
 800958a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800958e:	f1c1 0820 	rsb	r8, r1, #32
 8009592:	40cf      	lsrs	r7, r1
 8009594:	f105 0e04 	add.w	lr, r5, #4
 8009598:	4576      	cmp	r6, lr
 800959a:	46f4      	mov	ip, lr
 800959c:	d816      	bhi.n	80095cc <rshift+0x80>
 800959e:	1a9a      	subs	r2, r3, r2
 80095a0:	0092      	lsls	r2, r2, #2
 80095a2:	3a04      	subs	r2, #4
 80095a4:	3501      	adds	r5, #1
 80095a6:	42ae      	cmp	r6, r5
 80095a8:	bf38      	it	cc
 80095aa:	2200      	movcc	r2, #0
 80095ac:	18a3      	adds	r3, r4, r2
 80095ae:	50a7      	str	r7, [r4, r2]
 80095b0:	b107      	cbz	r7, 80095b4 <rshift+0x68>
 80095b2:	3304      	adds	r3, #4
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	eba3 0204 	sub.w	r2, r3, r4
 80095ba:	bf08      	it	eq
 80095bc:	2300      	moveq	r3, #0
 80095be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095c2:	6102      	str	r2, [r0, #16]
 80095c4:	bf08      	it	eq
 80095c6:	6143      	streq	r3, [r0, #20]
 80095c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095cc:	f8dc c000 	ldr.w	ip, [ip]
 80095d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80095d4:	ea4c 0707 	orr.w	r7, ip, r7
 80095d8:	f849 7b04 	str.w	r7, [r9], #4
 80095dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095e0:	40cf      	lsrs	r7, r1
 80095e2:	e7d9      	b.n	8009598 <rshift+0x4c>
 80095e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80095e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80095ec:	e7c2      	b.n	8009574 <rshift+0x28>
 80095ee:	4623      	mov	r3, r4
 80095f0:	e7e0      	b.n	80095b4 <rshift+0x68>

080095f2 <__hexdig_fun>:
 80095f2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d802      	bhi.n	8009600 <__hexdig_fun+0xe>
 80095fa:	3820      	subs	r0, #32
 80095fc:	b2c0      	uxtb	r0, r0
 80095fe:	4770      	bx	lr
 8009600:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009604:	2b05      	cmp	r3, #5
 8009606:	d801      	bhi.n	800960c <__hexdig_fun+0x1a>
 8009608:	3847      	subs	r0, #71	@ 0x47
 800960a:	e7f7      	b.n	80095fc <__hexdig_fun+0xa>
 800960c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009610:	2b05      	cmp	r3, #5
 8009612:	d801      	bhi.n	8009618 <__hexdig_fun+0x26>
 8009614:	3827      	subs	r0, #39	@ 0x27
 8009616:	e7f1      	b.n	80095fc <__hexdig_fun+0xa>
 8009618:	2000      	movs	r0, #0
 800961a:	4770      	bx	lr

0800961c <__gethex>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	468a      	mov	sl, r1
 8009622:	4690      	mov	r8, r2
 8009624:	b085      	sub	sp, #20
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	680b      	ldr	r3, [r1, #0]
 800962a:	9001      	str	r0, [sp, #4]
 800962c:	1c9c      	adds	r4, r3, #2
 800962e:	46a1      	mov	r9, r4
 8009630:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009634:	2830      	cmp	r0, #48	@ 0x30
 8009636:	d0fa      	beq.n	800962e <__gethex+0x12>
 8009638:	eba9 0303 	sub.w	r3, r9, r3
 800963c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009640:	f7ff ffd7 	bl	80095f2 <__hexdig_fun>
 8009644:	4605      	mov	r5, r0
 8009646:	2800      	cmp	r0, #0
 8009648:	d168      	bne.n	800971c <__gethex+0x100>
 800964a:	2201      	movs	r2, #1
 800964c:	4648      	mov	r0, r9
 800964e:	499f      	ldr	r1, [pc, #636]	@ (80098cc <__gethex+0x2b0>)
 8009650:	f7fd f9f9 	bl	8006a46 <strncmp>
 8009654:	4607      	mov	r7, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d167      	bne.n	800972a <__gethex+0x10e>
 800965a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800965e:	4626      	mov	r6, r4
 8009660:	f7ff ffc7 	bl	80095f2 <__hexdig_fun>
 8009664:	2800      	cmp	r0, #0
 8009666:	d062      	beq.n	800972e <__gethex+0x112>
 8009668:	4623      	mov	r3, r4
 800966a:	7818      	ldrb	r0, [r3, #0]
 800966c:	4699      	mov	r9, r3
 800966e:	2830      	cmp	r0, #48	@ 0x30
 8009670:	f103 0301 	add.w	r3, r3, #1
 8009674:	d0f9      	beq.n	800966a <__gethex+0x4e>
 8009676:	f7ff ffbc 	bl	80095f2 <__hexdig_fun>
 800967a:	fab0 f580 	clz	r5, r0
 800967e:	f04f 0b01 	mov.w	fp, #1
 8009682:	096d      	lsrs	r5, r5, #5
 8009684:	464a      	mov	r2, r9
 8009686:	4616      	mov	r6, r2
 8009688:	7830      	ldrb	r0, [r6, #0]
 800968a:	3201      	adds	r2, #1
 800968c:	f7ff ffb1 	bl	80095f2 <__hexdig_fun>
 8009690:	2800      	cmp	r0, #0
 8009692:	d1f8      	bne.n	8009686 <__gethex+0x6a>
 8009694:	2201      	movs	r2, #1
 8009696:	4630      	mov	r0, r6
 8009698:	498c      	ldr	r1, [pc, #560]	@ (80098cc <__gethex+0x2b0>)
 800969a:	f7fd f9d4 	bl	8006a46 <strncmp>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d13f      	bne.n	8009722 <__gethex+0x106>
 80096a2:	b944      	cbnz	r4, 80096b6 <__gethex+0x9a>
 80096a4:	1c74      	adds	r4, r6, #1
 80096a6:	4622      	mov	r2, r4
 80096a8:	4616      	mov	r6, r2
 80096aa:	7830      	ldrb	r0, [r6, #0]
 80096ac:	3201      	adds	r2, #1
 80096ae:	f7ff ffa0 	bl	80095f2 <__hexdig_fun>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d1f8      	bne.n	80096a8 <__gethex+0x8c>
 80096b6:	1ba4      	subs	r4, r4, r6
 80096b8:	00a7      	lsls	r7, r4, #2
 80096ba:	7833      	ldrb	r3, [r6, #0]
 80096bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80096c0:	2b50      	cmp	r3, #80	@ 0x50
 80096c2:	d13e      	bne.n	8009742 <__gethex+0x126>
 80096c4:	7873      	ldrb	r3, [r6, #1]
 80096c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80096c8:	d033      	beq.n	8009732 <__gethex+0x116>
 80096ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80096cc:	d034      	beq.n	8009738 <__gethex+0x11c>
 80096ce:	2400      	movs	r4, #0
 80096d0:	1c71      	adds	r1, r6, #1
 80096d2:	7808      	ldrb	r0, [r1, #0]
 80096d4:	f7ff ff8d 	bl	80095f2 <__hexdig_fun>
 80096d8:	1e43      	subs	r3, r0, #1
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b18      	cmp	r3, #24
 80096de:	d830      	bhi.n	8009742 <__gethex+0x126>
 80096e0:	f1a0 0210 	sub.w	r2, r0, #16
 80096e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096e8:	f7ff ff83 	bl	80095f2 <__hexdig_fun>
 80096ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80096f0:	fa5f fc8c 	uxtb.w	ip, ip
 80096f4:	f1bc 0f18 	cmp.w	ip, #24
 80096f8:	f04f 030a 	mov.w	r3, #10
 80096fc:	d91e      	bls.n	800973c <__gethex+0x120>
 80096fe:	b104      	cbz	r4, 8009702 <__gethex+0xe6>
 8009700:	4252      	negs	r2, r2
 8009702:	4417      	add	r7, r2
 8009704:	f8ca 1000 	str.w	r1, [sl]
 8009708:	b1ed      	cbz	r5, 8009746 <__gethex+0x12a>
 800970a:	f1bb 0f00 	cmp.w	fp, #0
 800970e:	bf0c      	ite	eq
 8009710:	2506      	moveq	r5, #6
 8009712:	2500      	movne	r5, #0
 8009714:	4628      	mov	r0, r5
 8009716:	b005      	add	sp, #20
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	2500      	movs	r5, #0
 800971e:	462c      	mov	r4, r5
 8009720:	e7b0      	b.n	8009684 <__gethex+0x68>
 8009722:	2c00      	cmp	r4, #0
 8009724:	d1c7      	bne.n	80096b6 <__gethex+0x9a>
 8009726:	4627      	mov	r7, r4
 8009728:	e7c7      	b.n	80096ba <__gethex+0x9e>
 800972a:	464e      	mov	r6, r9
 800972c:	462f      	mov	r7, r5
 800972e:	2501      	movs	r5, #1
 8009730:	e7c3      	b.n	80096ba <__gethex+0x9e>
 8009732:	2400      	movs	r4, #0
 8009734:	1cb1      	adds	r1, r6, #2
 8009736:	e7cc      	b.n	80096d2 <__gethex+0xb6>
 8009738:	2401      	movs	r4, #1
 800973a:	e7fb      	b.n	8009734 <__gethex+0x118>
 800973c:	fb03 0002 	mla	r0, r3, r2, r0
 8009740:	e7ce      	b.n	80096e0 <__gethex+0xc4>
 8009742:	4631      	mov	r1, r6
 8009744:	e7de      	b.n	8009704 <__gethex+0xe8>
 8009746:	4629      	mov	r1, r5
 8009748:	eba6 0309 	sub.w	r3, r6, r9
 800974c:	3b01      	subs	r3, #1
 800974e:	2b07      	cmp	r3, #7
 8009750:	dc0a      	bgt.n	8009768 <__gethex+0x14c>
 8009752:	9801      	ldr	r0, [sp, #4]
 8009754:	f7fe f96e 	bl	8007a34 <_Balloc>
 8009758:	4604      	mov	r4, r0
 800975a:	b940      	cbnz	r0, 800976e <__gethex+0x152>
 800975c:	4602      	mov	r2, r0
 800975e:	21e4      	movs	r1, #228	@ 0xe4
 8009760:	4b5b      	ldr	r3, [pc, #364]	@ (80098d0 <__gethex+0x2b4>)
 8009762:	485c      	ldr	r0, [pc, #368]	@ (80098d4 <__gethex+0x2b8>)
 8009764:	f7ff fec0 	bl	80094e8 <__assert_func>
 8009768:	3101      	adds	r1, #1
 800976a:	105b      	asrs	r3, r3, #1
 800976c:	e7ef      	b.n	800974e <__gethex+0x132>
 800976e:	2300      	movs	r3, #0
 8009770:	f100 0a14 	add.w	sl, r0, #20
 8009774:	4655      	mov	r5, sl
 8009776:	469b      	mov	fp, r3
 8009778:	45b1      	cmp	r9, r6
 800977a:	d337      	bcc.n	80097ec <__gethex+0x1d0>
 800977c:	f845 bb04 	str.w	fp, [r5], #4
 8009780:	eba5 050a 	sub.w	r5, r5, sl
 8009784:	10ad      	asrs	r5, r5, #2
 8009786:	6125      	str	r5, [r4, #16]
 8009788:	4658      	mov	r0, fp
 800978a:	f7fe fa45 	bl	8007c18 <__hi0bits>
 800978e:	016d      	lsls	r5, r5, #5
 8009790:	f8d8 6000 	ldr.w	r6, [r8]
 8009794:	1a2d      	subs	r5, r5, r0
 8009796:	42b5      	cmp	r5, r6
 8009798:	dd54      	ble.n	8009844 <__gethex+0x228>
 800979a:	1bad      	subs	r5, r5, r6
 800979c:	4629      	mov	r1, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	f7fe fdc7 	bl	8008332 <__any_on>
 80097a4:	4681      	mov	r9, r0
 80097a6:	b178      	cbz	r0, 80097c8 <__gethex+0x1ac>
 80097a8:	f04f 0901 	mov.w	r9, #1
 80097ac:	1e6b      	subs	r3, r5, #1
 80097ae:	1159      	asrs	r1, r3, #5
 80097b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097b4:	f003 021f 	and.w	r2, r3, #31
 80097b8:	fa09 f202 	lsl.w	r2, r9, r2
 80097bc:	420a      	tst	r2, r1
 80097be:	d003      	beq.n	80097c8 <__gethex+0x1ac>
 80097c0:	454b      	cmp	r3, r9
 80097c2:	dc36      	bgt.n	8009832 <__gethex+0x216>
 80097c4:	f04f 0902 	mov.w	r9, #2
 80097c8:	4629      	mov	r1, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7ff febe 	bl	800954c <rshift>
 80097d0:	442f      	add	r7, r5
 80097d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097d6:	42bb      	cmp	r3, r7
 80097d8:	da42      	bge.n	8009860 <__gethex+0x244>
 80097da:	4621      	mov	r1, r4
 80097dc:	9801      	ldr	r0, [sp, #4]
 80097de:	f7fe f969 	bl	8007ab4 <_Bfree>
 80097e2:	2300      	movs	r3, #0
 80097e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097e6:	25a3      	movs	r5, #163	@ 0xa3
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e793      	b.n	8009714 <__gethex+0xf8>
 80097ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80097f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80097f2:	d012      	beq.n	800981a <__gethex+0x1fe>
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d104      	bne.n	8009802 <__gethex+0x1e6>
 80097f8:	f845 bb04 	str.w	fp, [r5], #4
 80097fc:	f04f 0b00 	mov.w	fp, #0
 8009800:	465b      	mov	r3, fp
 8009802:	7830      	ldrb	r0, [r6, #0]
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	f7ff fef4 	bl	80095f2 <__hexdig_fun>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	f000 000f 	and.w	r0, r0, #15
 8009810:	4098      	lsls	r0, r3
 8009812:	ea4b 0b00 	orr.w	fp, fp, r0
 8009816:	3304      	adds	r3, #4
 8009818:	e7ae      	b.n	8009778 <__gethex+0x15c>
 800981a:	45b1      	cmp	r9, r6
 800981c:	d8ea      	bhi.n	80097f4 <__gethex+0x1d8>
 800981e:	2201      	movs	r2, #1
 8009820:	4630      	mov	r0, r6
 8009822:	492a      	ldr	r1, [pc, #168]	@ (80098cc <__gethex+0x2b0>)
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	f7fd f90e 	bl	8006a46 <strncmp>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	2800      	cmp	r0, #0
 800982e:	d1e1      	bne.n	80097f4 <__gethex+0x1d8>
 8009830:	e7a2      	b.n	8009778 <__gethex+0x15c>
 8009832:	4620      	mov	r0, r4
 8009834:	1ea9      	subs	r1, r5, #2
 8009836:	f7fe fd7c 	bl	8008332 <__any_on>
 800983a:	2800      	cmp	r0, #0
 800983c:	d0c2      	beq.n	80097c4 <__gethex+0x1a8>
 800983e:	f04f 0903 	mov.w	r9, #3
 8009842:	e7c1      	b.n	80097c8 <__gethex+0x1ac>
 8009844:	da09      	bge.n	800985a <__gethex+0x23e>
 8009846:	1b75      	subs	r5, r6, r5
 8009848:	4621      	mov	r1, r4
 800984a:	462a      	mov	r2, r5
 800984c:	9801      	ldr	r0, [sp, #4]
 800984e:	f7fe fb41 	bl	8007ed4 <__lshift>
 8009852:	4604      	mov	r4, r0
 8009854:	1b7f      	subs	r7, r7, r5
 8009856:	f100 0a14 	add.w	sl, r0, #20
 800985a:	f04f 0900 	mov.w	r9, #0
 800985e:	e7b8      	b.n	80097d2 <__gethex+0x1b6>
 8009860:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009864:	42bd      	cmp	r5, r7
 8009866:	dd6f      	ble.n	8009948 <__gethex+0x32c>
 8009868:	1bed      	subs	r5, r5, r7
 800986a:	42ae      	cmp	r6, r5
 800986c:	dc34      	bgt.n	80098d8 <__gethex+0x2bc>
 800986e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d022      	beq.n	80098bc <__gethex+0x2a0>
 8009876:	2b03      	cmp	r3, #3
 8009878:	d024      	beq.n	80098c4 <__gethex+0x2a8>
 800987a:	2b01      	cmp	r3, #1
 800987c:	d115      	bne.n	80098aa <__gethex+0x28e>
 800987e:	42ae      	cmp	r6, r5
 8009880:	d113      	bne.n	80098aa <__gethex+0x28e>
 8009882:	2e01      	cmp	r6, #1
 8009884:	d10b      	bne.n	800989e <__gethex+0x282>
 8009886:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800988a:	9a02      	ldr	r2, [sp, #8]
 800988c:	2562      	movs	r5, #98	@ 0x62
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	2301      	movs	r3, #1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	f8ca 3000 	str.w	r3, [sl]
 8009898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800989a:	601c      	str	r4, [r3, #0]
 800989c:	e73a      	b.n	8009714 <__gethex+0xf8>
 800989e:	4620      	mov	r0, r4
 80098a0:	1e71      	subs	r1, r6, #1
 80098a2:	f7fe fd46 	bl	8008332 <__any_on>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1ed      	bne.n	8009886 <__gethex+0x26a>
 80098aa:	4621      	mov	r1, r4
 80098ac:	9801      	ldr	r0, [sp, #4]
 80098ae:	f7fe f901 	bl	8007ab4 <_Bfree>
 80098b2:	2300      	movs	r3, #0
 80098b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098b6:	2550      	movs	r5, #80	@ 0x50
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	e72b      	b.n	8009714 <__gethex+0xf8>
 80098bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f3      	bne.n	80098aa <__gethex+0x28e>
 80098c2:	e7e0      	b.n	8009886 <__gethex+0x26a>
 80098c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1dd      	bne.n	8009886 <__gethex+0x26a>
 80098ca:	e7ee      	b.n	80098aa <__gethex+0x28e>
 80098cc:	0800a469 	.word	0x0800a469
 80098d0:	0800a3ff 	.word	0x0800a3ff
 80098d4:	0800a4c0 	.word	0x0800a4c0
 80098d8:	1e6f      	subs	r7, r5, #1
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	d130      	bne.n	8009942 <__gethex+0x326>
 80098e0:	b127      	cbz	r7, 80098ec <__gethex+0x2d0>
 80098e2:	4639      	mov	r1, r7
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7fe fd24 	bl	8008332 <__any_on>
 80098ea:	4681      	mov	r9, r0
 80098ec:	2301      	movs	r3, #1
 80098ee:	4629      	mov	r1, r5
 80098f0:	1b76      	subs	r6, r6, r5
 80098f2:	2502      	movs	r5, #2
 80098f4:	117a      	asrs	r2, r7, #5
 80098f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80098fa:	f007 071f 	and.w	r7, r7, #31
 80098fe:	40bb      	lsls	r3, r7
 8009900:	4213      	tst	r3, r2
 8009902:	4620      	mov	r0, r4
 8009904:	bf18      	it	ne
 8009906:	f049 0902 	orrne.w	r9, r9, #2
 800990a:	f7ff fe1f 	bl	800954c <rshift>
 800990e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009912:	f1b9 0f00 	cmp.w	r9, #0
 8009916:	d047      	beq.n	80099a8 <__gethex+0x38c>
 8009918:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d015      	beq.n	800994c <__gethex+0x330>
 8009920:	2b03      	cmp	r3, #3
 8009922:	d017      	beq.n	8009954 <__gethex+0x338>
 8009924:	2b01      	cmp	r3, #1
 8009926:	d109      	bne.n	800993c <__gethex+0x320>
 8009928:	f019 0f02 	tst.w	r9, #2
 800992c:	d006      	beq.n	800993c <__gethex+0x320>
 800992e:	f8da 3000 	ldr.w	r3, [sl]
 8009932:	ea49 0903 	orr.w	r9, r9, r3
 8009936:	f019 0f01 	tst.w	r9, #1
 800993a:	d10e      	bne.n	800995a <__gethex+0x33e>
 800993c:	f045 0510 	orr.w	r5, r5, #16
 8009940:	e032      	b.n	80099a8 <__gethex+0x38c>
 8009942:	f04f 0901 	mov.w	r9, #1
 8009946:	e7d1      	b.n	80098ec <__gethex+0x2d0>
 8009948:	2501      	movs	r5, #1
 800994a:	e7e2      	b.n	8009912 <__gethex+0x2f6>
 800994c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994e:	f1c3 0301 	rsb	r3, r3, #1
 8009952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0f0      	beq.n	800993c <__gethex+0x320>
 800995a:	f04f 0c00 	mov.w	ip, #0
 800995e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009962:	f104 0314 	add.w	r3, r4, #20
 8009966:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800996a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800996e:	4618      	mov	r0, r3
 8009970:	f853 2b04 	ldr.w	r2, [r3], #4
 8009974:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009978:	d01b      	beq.n	80099b2 <__gethex+0x396>
 800997a:	3201      	adds	r2, #1
 800997c:	6002      	str	r2, [r0, #0]
 800997e:	2d02      	cmp	r5, #2
 8009980:	f104 0314 	add.w	r3, r4, #20
 8009984:	d13c      	bne.n	8009a00 <__gethex+0x3e4>
 8009986:	f8d8 2000 	ldr.w	r2, [r8]
 800998a:	3a01      	subs	r2, #1
 800998c:	42b2      	cmp	r2, r6
 800998e:	d109      	bne.n	80099a4 <__gethex+0x388>
 8009990:	2201      	movs	r2, #1
 8009992:	1171      	asrs	r1, r6, #5
 8009994:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009998:	f006 061f 	and.w	r6, r6, #31
 800999c:	fa02 f606 	lsl.w	r6, r2, r6
 80099a0:	421e      	tst	r6, r3
 80099a2:	d13a      	bne.n	8009a1a <__gethex+0x3fe>
 80099a4:	f045 0520 	orr.w	r5, r5, #32
 80099a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099aa:	601c      	str	r4, [r3, #0]
 80099ac:	9b02      	ldr	r3, [sp, #8]
 80099ae:	601f      	str	r7, [r3, #0]
 80099b0:	e6b0      	b.n	8009714 <__gethex+0xf8>
 80099b2:	4299      	cmp	r1, r3
 80099b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80099b8:	d8d9      	bhi.n	800996e <__gethex+0x352>
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	459b      	cmp	fp, r3
 80099be:	db17      	blt.n	80099f0 <__gethex+0x3d4>
 80099c0:	6861      	ldr	r1, [r4, #4]
 80099c2:	9801      	ldr	r0, [sp, #4]
 80099c4:	3101      	adds	r1, #1
 80099c6:	f7fe f835 	bl	8007a34 <_Balloc>
 80099ca:	4681      	mov	r9, r0
 80099cc:	b918      	cbnz	r0, 80099d6 <__gethex+0x3ba>
 80099ce:	4602      	mov	r2, r0
 80099d0:	2184      	movs	r1, #132	@ 0x84
 80099d2:	4b19      	ldr	r3, [pc, #100]	@ (8009a38 <__gethex+0x41c>)
 80099d4:	e6c5      	b.n	8009762 <__gethex+0x146>
 80099d6:	6922      	ldr	r2, [r4, #16]
 80099d8:	f104 010c 	add.w	r1, r4, #12
 80099dc:	3202      	adds	r2, #2
 80099de:	0092      	lsls	r2, r2, #2
 80099e0:	300c      	adds	r0, #12
 80099e2:	f7ff fd6d 	bl	80094c0 <memcpy>
 80099e6:	4621      	mov	r1, r4
 80099e8:	9801      	ldr	r0, [sp, #4]
 80099ea:	f7fe f863 	bl	8007ab4 <_Bfree>
 80099ee:	464c      	mov	r4, r9
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	6122      	str	r2, [r4, #16]
 80099f6:	2201      	movs	r2, #1
 80099f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099fc:	615a      	str	r2, [r3, #20]
 80099fe:	e7be      	b.n	800997e <__gethex+0x362>
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	455a      	cmp	r2, fp
 8009a04:	dd0b      	ble.n	8009a1e <__gethex+0x402>
 8009a06:	2101      	movs	r1, #1
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f7ff fd9f 	bl	800954c <rshift>
 8009a0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a12:	3701      	adds	r7, #1
 8009a14:	42bb      	cmp	r3, r7
 8009a16:	f6ff aee0 	blt.w	80097da <__gethex+0x1be>
 8009a1a:	2501      	movs	r5, #1
 8009a1c:	e7c2      	b.n	80099a4 <__gethex+0x388>
 8009a1e:	f016 061f 	ands.w	r6, r6, #31
 8009a22:	d0fa      	beq.n	8009a1a <__gethex+0x3fe>
 8009a24:	4453      	add	r3, sl
 8009a26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a2a:	f7fe f8f5 	bl	8007c18 <__hi0bits>
 8009a2e:	f1c6 0620 	rsb	r6, r6, #32
 8009a32:	42b0      	cmp	r0, r6
 8009a34:	dbe7      	blt.n	8009a06 <__gethex+0x3ea>
 8009a36:	e7f0      	b.n	8009a1a <__gethex+0x3fe>
 8009a38:	0800a3ff 	.word	0x0800a3ff

08009a3c <L_shift>:
 8009a3c:	f1c2 0208 	rsb	r2, r2, #8
 8009a40:	0092      	lsls	r2, r2, #2
 8009a42:	b570      	push	{r4, r5, r6, lr}
 8009a44:	f1c2 0620 	rsb	r6, r2, #32
 8009a48:	6843      	ldr	r3, [r0, #4]
 8009a4a:	6804      	ldr	r4, [r0, #0]
 8009a4c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a50:	432c      	orrs	r4, r5
 8009a52:	40d3      	lsrs	r3, r2
 8009a54:	6004      	str	r4, [r0, #0]
 8009a56:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a5a:	4288      	cmp	r0, r1
 8009a5c:	d3f4      	bcc.n	8009a48 <L_shift+0xc>
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}

08009a60 <__match>:
 8009a60:	b530      	push	{r4, r5, lr}
 8009a62:	6803      	ldr	r3, [r0, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6a:	b914      	cbnz	r4, 8009a72 <__match+0x12>
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	2001      	movs	r0, #1
 8009a70:	bd30      	pop	{r4, r5, pc}
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009a7a:	2d19      	cmp	r5, #25
 8009a7c:	bf98      	it	ls
 8009a7e:	3220      	addls	r2, #32
 8009a80:	42a2      	cmp	r2, r4
 8009a82:	d0f0      	beq.n	8009a66 <__match+0x6>
 8009a84:	2000      	movs	r0, #0
 8009a86:	e7f3      	b.n	8009a70 <__match+0x10>

08009a88 <__hexnan>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	680b      	ldr	r3, [r1, #0]
 8009a90:	4682      	mov	sl, r0
 8009a92:	115e      	asrs	r6, r3, #5
 8009a94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a98:	f013 031f 	ands.w	r3, r3, #31
 8009a9c:	bf18      	it	ne
 8009a9e:	3604      	addne	r6, #4
 8009aa0:	1f37      	subs	r7, r6, #4
 8009aa2:	4690      	mov	r8, r2
 8009aa4:	46b9      	mov	r9, r7
 8009aa6:	463c      	mov	r4, r7
 8009aa8:	46ab      	mov	fp, r5
 8009aaa:	b087      	sub	sp, #28
 8009aac:	6801      	ldr	r1, [r0, #0]
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ab4:	9502      	str	r5, [sp, #8]
 8009ab6:	784a      	ldrb	r2, [r1, #1]
 8009ab8:	1c4b      	adds	r3, r1, #1
 8009aba:	9303      	str	r3, [sp, #12]
 8009abc:	b342      	cbz	r2, 8009b10 <__hexnan+0x88>
 8009abe:	4610      	mov	r0, r2
 8009ac0:	9105      	str	r1, [sp, #20]
 8009ac2:	9204      	str	r2, [sp, #16]
 8009ac4:	f7ff fd95 	bl	80095f2 <__hexdig_fun>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d151      	bne.n	8009b70 <__hexnan+0xe8>
 8009acc:	9a04      	ldr	r2, [sp, #16]
 8009ace:	9905      	ldr	r1, [sp, #20]
 8009ad0:	2a20      	cmp	r2, #32
 8009ad2:	d818      	bhi.n	8009b06 <__hexnan+0x7e>
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	459b      	cmp	fp, r3
 8009ad8:	dd13      	ble.n	8009b02 <__hexnan+0x7a>
 8009ada:	454c      	cmp	r4, r9
 8009adc:	d206      	bcs.n	8009aec <__hexnan+0x64>
 8009ade:	2d07      	cmp	r5, #7
 8009ae0:	dc04      	bgt.n	8009aec <__hexnan+0x64>
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f7ff ffa8 	bl	8009a3c <L_shift>
 8009aec:	4544      	cmp	r4, r8
 8009aee:	d952      	bls.n	8009b96 <__hexnan+0x10e>
 8009af0:	2300      	movs	r3, #0
 8009af2:	f1a4 0904 	sub.w	r9, r4, #4
 8009af6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009afa:	461d      	mov	r5, r3
 8009afc:	464c      	mov	r4, r9
 8009afe:	f8cd b008 	str.w	fp, [sp, #8]
 8009b02:	9903      	ldr	r1, [sp, #12]
 8009b04:	e7d7      	b.n	8009ab6 <__hexnan+0x2e>
 8009b06:	2a29      	cmp	r2, #41	@ 0x29
 8009b08:	d157      	bne.n	8009bba <__hexnan+0x132>
 8009b0a:	3102      	adds	r1, #2
 8009b0c:	f8ca 1000 	str.w	r1, [sl]
 8009b10:	f1bb 0f00 	cmp.w	fp, #0
 8009b14:	d051      	beq.n	8009bba <__hexnan+0x132>
 8009b16:	454c      	cmp	r4, r9
 8009b18:	d206      	bcs.n	8009b28 <__hexnan+0xa0>
 8009b1a:	2d07      	cmp	r5, #7
 8009b1c:	dc04      	bgt.n	8009b28 <__hexnan+0xa0>
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4649      	mov	r1, r9
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7ff ff8a 	bl	8009a3c <L_shift>
 8009b28:	4544      	cmp	r4, r8
 8009b2a:	d936      	bls.n	8009b9a <__hexnan+0x112>
 8009b2c:	4623      	mov	r3, r4
 8009b2e:	f1a8 0204 	sub.w	r2, r8, #4
 8009b32:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b36:	429f      	cmp	r7, r3
 8009b38:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b3c:	d2f9      	bcs.n	8009b32 <__hexnan+0xaa>
 8009b3e:	1b3b      	subs	r3, r7, r4
 8009b40:	f023 0303 	bic.w	r3, r3, #3
 8009b44:	3304      	adds	r3, #4
 8009b46:	3401      	adds	r4, #1
 8009b48:	3e03      	subs	r6, #3
 8009b4a:	42b4      	cmp	r4, r6
 8009b4c:	bf88      	it	hi
 8009b4e:	2304      	movhi	r3, #4
 8009b50:	2200      	movs	r2, #0
 8009b52:	4443      	add	r3, r8
 8009b54:	f843 2b04 	str.w	r2, [r3], #4
 8009b58:	429f      	cmp	r7, r3
 8009b5a:	d2fb      	bcs.n	8009b54 <__hexnan+0xcc>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	b91b      	cbnz	r3, 8009b68 <__hexnan+0xe0>
 8009b60:	4547      	cmp	r7, r8
 8009b62:	d128      	bne.n	8009bb6 <__hexnan+0x12e>
 8009b64:	2301      	movs	r3, #1
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	2005      	movs	r0, #5
 8009b6a:	b007      	add	sp, #28
 8009b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b70:	3501      	adds	r5, #1
 8009b72:	2d08      	cmp	r5, #8
 8009b74:	f10b 0b01 	add.w	fp, fp, #1
 8009b78:	dd06      	ble.n	8009b88 <__hexnan+0x100>
 8009b7a:	4544      	cmp	r4, r8
 8009b7c:	d9c1      	bls.n	8009b02 <__hexnan+0x7a>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2501      	movs	r5, #1
 8009b82:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b86:	3c04      	subs	r4, #4
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	f000 000f 	and.w	r0, r0, #15
 8009b8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b92:	6020      	str	r0, [r4, #0]
 8009b94:	e7b5      	b.n	8009b02 <__hexnan+0x7a>
 8009b96:	2508      	movs	r5, #8
 8009b98:	e7b3      	b.n	8009b02 <__hexnan+0x7a>
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0dd      	beq.n	8009b5c <__hexnan+0xd4>
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba4:	f1c3 0320 	rsb	r3, r3, #32
 8009ba8:	40da      	lsrs	r2, r3
 8009baa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009bb4:	e7d2      	b.n	8009b5c <__hexnan+0xd4>
 8009bb6:	3f04      	subs	r7, #4
 8009bb8:	e7d0      	b.n	8009b5c <__hexnan+0xd4>
 8009bba:	2004      	movs	r0, #4
 8009bbc:	e7d5      	b.n	8009b6a <__hexnan+0xe2>

08009bbe <__ascii_mbtowc>:
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	b901      	cbnz	r1, 8009bc4 <__ascii_mbtowc+0x6>
 8009bc2:	a901      	add	r1, sp, #4
 8009bc4:	b142      	cbz	r2, 8009bd8 <__ascii_mbtowc+0x1a>
 8009bc6:	b14b      	cbz	r3, 8009bdc <__ascii_mbtowc+0x1e>
 8009bc8:	7813      	ldrb	r3, [r2, #0]
 8009bca:	600b      	str	r3, [r1, #0]
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	1e10      	subs	r0, r2, #0
 8009bd0:	bf18      	it	ne
 8009bd2:	2001      	movne	r0, #1
 8009bd4:	b002      	add	sp, #8
 8009bd6:	4770      	bx	lr
 8009bd8:	4610      	mov	r0, r2
 8009bda:	e7fb      	b.n	8009bd4 <__ascii_mbtowc+0x16>
 8009bdc:	f06f 0001 	mvn.w	r0, #1
 8009be0:	e7f8      	b.n	8009bd4 <__ascii_mbtowc+0x16>

08009be2 <_realloc_r>:
 8009be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	4607      	mov	r7, r0
 8009be8:	4614      	mov	r4, r2
 8009bea:	460d      	mov	r5, r1
 8009bec:	b921      	cbnz	r1, 8009bf8 <_realloc_r+0x16>
 8009bee:	4611      	mov	r1, r2
 8009bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	f7fd be92 	b.w	800791c <_malloc_r>
 8009bf8:	b92a      	cbnz	r2, 8009c06 <_realloc_r+0x24>
 8009bfa:	f7fd fe1d 	bl	8007838 <_free_r>
 8009bfe:	4625      	mov	r5, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c06:	f000 f840 	bl	8009c8a <_malloc_usable_size_r>
 8009c0a:	4284      	cmp	r4, r0
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	d802      	bhi.n	8009c16 <_realloc_r+0x34>
 8009c10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c14:	d8f4      	bhi.n	8009c00 <_realloc_r+0x1e>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7fd fe7f 	bl	800791c <_malloc_r>
 8009c1e:	4680      	mov	r8, r0
 8009c20:	b908      	cbnz	r0, 8009c26 <_realloc_r+0x44>
 8009c22:	4645      	mov	r5, r8
 8009c24:	e7ec      	b.n	8009c00 <_realloc_r+0x1e>
 8009c26:	42b4      	cmp	r4, r6
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	bf28      	it	cs
 8009c2e:	4632      	movcs	r2, r6
 8009c30:	f7ff fc46 	bl	80094c0 <memcpy>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7fd fdfe 	bl	8007838 <_free_r>
 8009c3c:	e7f1      	b.n	8009c22 <_realloc_r+0x40>

08009c3e <__ascii_wctomb>:
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	b141      	cbz	r1, 8009c56 <__ascii_wctomb+0x18>
 8009c44:	2aff      	cmp	r2, #255	@ 0xff
 8009c46:	d904      	bls.n	8009c52 <__ascii_wctomb+0x14>
 8009c48:	228a      	movs	r2, #138	@ 0x8a
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	4770      	bx	lr
 8009c52:	2001      	movs	r0, #1
 8009c54:	700a      	strb	r2, [r1, #0]
 8009c56:	4770      	bx	lr

08009c58 <fiprintf>:
 8009c58:	b40e      	push	{r1, r2, r3}
 8009c5a:	b503      	push	{r0, r1, lr}
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	4805      	ldr	r0, [pc, #20]	@ (8009c78 <fiprintf+0x20>)
 8009c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c66:	6800      	ldr	r0, [r0, #0]
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f000 f83d 	bl	8009ce8 <_vfiprintf_r>
 8009c6e:	b002      	add	sp, #8
 8009c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c74:	b003      	add	sp, #12
 8009c76:	4770      	bx	lr
 8009c78:	2000005c 	.word	0x2000005c

08009c7c <abort>:
 8009c7c:	2006      	movs	r0, #6
 8009c7e:	b508      	push	{r3, lr}
 8009c80:	f000 fa06 	bl	800a090 <raise>
 8009c84:	2001      	movs	r0, #1
 8009c86:	f7f8 f974 	bl	8001f72 <_exit>

08009c8a <_malloc_usable_size_r>:
 8009c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c8e:	1f18      	subs	r0, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfbc      	itt	lt
 8009c94:	580b      	ldrlt	r3, [r1, r0]
 8009c96:	18c0      	addlt	r0, r0, r3
 8009c98:	4770      	bx	lr

08009c9a <__sfputc_r>:
 8009c9a:	6893      	ldr	r3, [r2, #8]
 8009c9c:	b410      	push	{r4}
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	6093      	str	r3, [r2, #8]
 8009ca4:	da07      	bge.n	8009cb6 <__sfputc_r+0x1c>
 8009ca6:	6994      	ldr	r4, [r2, #24]
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	db01      	blt.n	8009cb0 <__sfputc_r+0x16>
 8009cac:	290a      	cmp	r1, #10
 8009cae:	d102      	bne.n	8009cb6 <__sfputc_r+0x1c>
 8009cb0:	bc10      	pop	{r4}
 8009cb2:	f000 b931 	b.w	8009f18 <__swbuf_r>
 8009cb6:	6813      	ldr	r3, [r2, #0]
 8009cb8:	1c58      	adds	r0, r3, #1
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	7019      	strb	r1, [r3, #0]
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	bc10      	pop	{r4}
 8009cc2:	4770      	bx	lr

08009cc4 <__sfputs_r>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	4614      	mov	r4, r2
 8009ccc:	18d5      	adds	r5, r2, r3
 8009cce:	42ac      	cmp	r4, r5
 8009cd0:	d101      	bne.n	8009cd6 <__sfputs_r+0x12>
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	e007      	b.n	8009ce6 <__sfputs_r+0x22>
 8009cd6:	463a      	mov	r2, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	f7ff ffdc 	bl	8009c9a <__sfputc_r>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d1f3      	bne.n	8009cce <__sfputs_r+0xa>
 8009ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ce8 <_vfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	460d      	mov	r5, r1
 8009cee:	4614      	mov	r4, r2
 8009cf0:	4698      	mov	r8, r3
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	b09d      	sub	sp, #116	@ 0x74
 8009cf6:	b118      	cbz	r0, 8009d00 <_vfiprintf_r+0x18>
 8009cf8:	6a03      	ldr	r3, [r0, #32]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_vfiprintf_r+0x18>
 8009cfc:	f7fc fe00 	bl	8006900 <__sinit>
 8009d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d02:	07d9      	lsls	r1, r3, #31
 8009d04:	d405      	bmi.n	8009d12 <_vfiprintf_r+0x2a>
 8009d06:	89ab      	ldrh	r3, [r5, #12]
 8009d08:	059a      	lsls	r2, r3, #22
 8009d0a:	d402      	bmi.n	8009d12 <_vfiprintf_r+0x2a>
 8009d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0e:	f7fc ff22 	bl	8006b56 <__retarget_lock_acquire_recursive>
 8009d12:	89ab      	ldrh	r3, [r5, #12]
 8009d14:	071b      	lsls	r3, r3, #28
 8009d16:	d501      	bpl.n	8009d1c <_vfiprintf_r+0x34>
 8009d18:	692b      	ldr	r3, [r5, #16]
 8009d1a:	b99b      	cbnz	r3, 8009d44 <_vfiprintf_r+0x5c>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f938 	bl	8009f94 <__swsetup_r>
 8009d24:	b170      	cbz	r0, 8009d44 <_vfiprintf_r+0x5c>
 8009d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d28:	07dc      	lsls	r4, r3, #31
 8009d2a:	d504      	bpl.n	8009d36 <_vfiprintf_r+0x4e>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	b01d      	add	sp, #116	@ 0x74
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	0598      	lsls	r0, r3, #22
 8009d3a:	d4f7      	bmi.n	8009d2c <_vfiprintf_r+0x44>
 8009d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d3e:	f7fc ff0b 	bl	8006b58 <__retarget_lock_release_recursive>
 8009d42:	e7f3      	b.n	8009d2c <_vfiprintf_r+0x44>
 8009d44:	2300      	movs	r3, #0
 8009d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d4e:	2330      	movs	r3, #48	@ 0x30
 8009d50:	f04f 0901 	mov.w	r9, #1
 8009d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d58:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f04 <_vfiprintf_r+0x21c>
 8009d5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d60:	4623      	mov	r3, r4
 8009d62:	469a      	mov	sl, r3
 8009d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d68:	b10a      	cbz	r2, 8009d6e <_vfiprintf_r+0x86>
 8009d6a:	2a25      	cmp	r2, #37	@ 0x25
 8009d6c:	d1f9      	bne.n	8009d62 <_vfiprintf_r+0x7a>
 8009d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d72:	d00b      	beq.n	8009d8c <_vfiprintf_r+0xa4>
 8009d74:	465b      	mov	r3, fp
 8009d76:	4622      	mov	r2, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ffa2 	bl	8009cc4 <__sfputs_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	f000 80a7 	beq.w	8009ed4 <_vfiprintf_r+0x1ec>
 8009d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d88:	445a      	add	r2, fp
 8009d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 809f 	beq.w	8009ed4 <_vfiprintf_r+0x1ec>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da0:	f10a 0a01 	add.w	sl, sl, #1
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	9307      	str	r3, [sp, #28]
 8009da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dae:	4654      	mov	r4, sl
 8009db0:	2205      	movs	r2, #5
 8009db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db6:	4853      	ldr	r0, [pc, #332]	@ (8009f04 <_vfiprintf_r+0x21c>)
 8009db8:	f7fc fecf 	bl	8006b5a <memchr>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	b9d8      	cbnz	r0, 8009df8 <_vfiprintf_r+0x110>
 8009dc0:	06d1      	lsls	r1, r2, #27
 8009dc2:	bf44      	itt	mi
 8009dc4:	2320      	movmi	r3, #32
 8009dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dca:	0713      	lsls	r3, r2, #28
 8009dcc:	bf44      	itt	mi
 8009dce:	232b      	movmi	r3, #43	@ 0x2b
 8009dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dda:	d015      	beq.n	8009e08 <_vfiprintf_r+0x120>
 8009ddc:	4654      	mov	r4, sl
 8009dde:	2000      	movs	r0, #0
 8009de0:	f04f 0c0a 	mov.w	ip, #10
 8009de4:	9a07      	ldr	r2, [sp, #28]
 8009de6:	4621      	mov	r1, r4
 8009de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dec:	3b30      	subs	r3, #48	@ 0x30
 8009dee:	2b09      	cmp	r3, #9
 8009df0:	d94b      	bls.n	8009e8a <_vfiprintf_r+0x1a2>
 8009df2:	b1b0      	cbz	r0, 8009e22 <_vfiprintf_r+0x13a>
 8009df4:	9207      	str	r2, [sp, #28]
 8009df6:	e014      	b.n	8009e22 <_vfiprintf_r+0x13a>
 8009df8:	eba0 0308 	sub.w	r3, r0, r8
 8009dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	46a2      	mov	sl, r4
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	e7d2      	b.n	8009dae <_vfiprintf_r+0xc6>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	1d19      	adds	r1, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	9103      	str	r1, [sp, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	bfbb      	ittet	lt
 8009e14:	425b      	neglt	r3, r3
 8009e16:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1a:	9307      	strge	r3, [sp, #28]
 8009e1c:	9307      	strlt	r3, [sp, #28]
 8009e1e:	bfb8      	it	lt
 8009e20:	9204      	strlt	r2, [sp, #16]
 8009e22:	7823      	ldrb	r3, [r4, #0]
 8009e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e26:	d10a      	bne.n	8009e3e <_vfiprintf_r+0x156>
 8009e28:	7863      	ldrb	r3, [r4, #1]
 8009e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e2c:	d132      	bne.n	8009e94 <_vfiprintf_r+0x1ac>
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	3402      	adds	r4, #2
 8009e32:	1d1a      	adds	r2, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	9203      	str	r2, [sp, #12]
 8009e38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009f08 <_vfiprintf_r+0x220>
 8009e42:	2203      	movs	r2, #3
 8009e44:	4650      	mov	r0, sl
 8009e46:	7821      	ldrb	r1, [r4, #0]
 8009e48:	f7fc fe87 	bl	8006b5a <memchr>
 8009e4c:	b138      	cbz	r0, 8009e5e <_vfiprintf_r+0x176>
 8009e4e:	2240      	movs	r2, #64	@ 0x40
 8009e50:	9b04      	ldr	r3, [sp, #16]
 8009e52:	eba0 000a 	sub.w	r0, r0, sl
 8009e56:	4082      	lsls	r2, r0
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	2206      	movs	r2, #6
 8009e64:	4829      	ldr	r0, [pc, #164]	@ (8009f0c <_vfiprintf_r+0x224>)
 8009e66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e6a:	f7fc fe76 	bl	8006b5a <memchr>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d03f      	beq.n	8009ef2 <_vfiprintf_r+0x20a>
 8009e72:	4b27      	ldr	r3, [pc, #156]	@ (8009f10 <_vfiprintf_r+0x228>)
 8009e74:	bb1b      	cbnz	r3, 8009ebe <_vfiprintf_r+0x1d6>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	3307      	adds	r3, #7
 8009e7a:	f023 0307 	bic.w	r3, r3, #7
 8009e7e:	3308      	adds	r3, #8
 8009e80:	9303      	str	r3, [sp, #12]
 8009e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e84:	443b      	add	r3, r7
 8009e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e88:	e76a      	b.n	8009d60 <_vfiprintf_r+0x78>
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e92:	e7a8      	b.n	8009de6 <_vfiprintf_r+0xfe>
 8009e94:	2300      	movs	r3, #0
 8009e96:	f04f 0c0a 	mov.w	ip, #10
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	9305      	str	r3, [sp, #20]
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea6:	3a30      	subs	r2, #48	@ 0x30
 8009ea8:	2a09      	cmp	r2, #9
 8009eaa:	d903      	bls.n	8009eb4 <_vfiprintf_r+0x1cc>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0c6      	beq.n	8009e3e <_vfiprintf_r+0x156>
 8009eb0:	9105      	str	r1, [sp, #20]
 8009eb2:	e7c4      	b.n	8009e3e <_vfiprintf_r+0x156>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebc:	e7f0      	b.n	8009ea0 <_vfiprintf_r+0x1b8>
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4b13      	ldr	r3, [pc, #76]	@ (8009f14 <_vfiprintf_r+0x22c>)
 8009ec8:	a904      	add	r1, sp, #16
 8009eca:	f7fb fec7 	bl	8005c5c <_printf_float>
 8009ece:	4607      	mov	r7, r0
 8009ed0:	1c78      	adds	r0, r7, #1
 8009ed2:	d1d6      	bne.n	8009e82 <_vfiprintf_r+0x19a>
 8009ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ed6:	07d9      	lsls	r1, r3, #31
 8009ed8:	d405      	bmi.n	8009ee6 <_vfiprintf_r+0x1fe>
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	059a      	lsls	r2, r3, #22
 8009ede:	d402      	bmi.n	8009ee6 <_vfiprintf_r+0x1fe>
 8009ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ee2:	f7fc fe39 	bl	8006b58 <__retarget_lock_release_recursive>
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	065b      	lsls	r3, r3, #25
 8009eea:	f53f af1f 	bmi.w	8009d2c <_vfiprintf_r+0x44>
 8009eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ef0:	e71e      	b.n	8009d30 <_vfiprintf_r+0x48>
 8009ef2:	ab03      	add	r3, sp, #12
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4b06      	ldr	r3, [pc, #24]	@ (8009f14 <_vfiprintf_r+0x22c>)
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	f7fc f94b 	bl	8006198 <_printf_i>
 8009f02:	e7e4      	b.n	8009ece <_vfiprintf_r+0x1e6>
 8009f04:	0800a46b 	.word	0x0800a46b
 8009f08:	0800a471 	.word	0x0800a471
 8009f0c:	0800a475 	.word	0x0800a475
 8009f10:	08005c5d 	.word	0x08005c5d
 8009f14:	08009cc5 	.word	0x08009cc5

08009f18 <__swbuf_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b118      	cbz	r0, 8009f2a <__swbuf_r+0x12>
 8009f22:	6a03      	ldr	r3, [r0, #32]
 8009f24:	b90b      	cbnz	r3, 8009f2a <__swbuf_r+0x12>
 8009f26:	f7fc fceb 	bl	8006900 <__sinit>
 8009f2a:	69a3      	ldr	r3, [r4, #24]
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	071a      	lsls	r2, r3, #28
 8009f32:	d501      	bpl.n	8009f38 <__swbuf_r+0x20>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b943      	cbnz	r3, 8009f4a <__swbuf_r+0x32>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	f000 f82a 	bl	8009f94 <__swsetup_r>
 8009f40:	b118      	cbz	r0, 8009f4a <__swbuf_r+0x32>
 8009f42:	f04f 37ff 	mov.w	r7, #4294967295
 8009f46:	4638      	mov	r0, r7
 8009f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	b2f6      	uxtb	r6, r6
 8009f50:	1a98      	subs	r0, r3, r2
 8009f52:	6963      	ldr	r3, [r4, #20]
 8009f54:	4637      	mov	r7, r6
 8009f56:	4283      	cmp	r3, r0
 8009f58:	dc05      	bgt.n	8009f66 <__swbuf_r+0x4e>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff fa5d 	bl	800941c <_fflush_r>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d1ed      	bne.n	8009f42 <__swbuf_r+0x2a>
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	701e      	strb	r6, [r3, #0]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d004      	beq.n	8009f86 <__swbuf_r+0x6e>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	07db      	lsls	r3, r3, #31
 8009f80:	d5e1      	bpl.n	8009f46 <__swbuf_r+0x2e>
 8009f82:	2e0a      	cmp	r6, #10
 8009f84:	d1df      	bne.n	8009f46 <__swbuf_r+0x2e>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f7ff fa47 	bl	800941c <_fflush_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0d9      	beq.n	8009f46 <__swbuf_r+0x2e>
 8009f92:	e7d6      	b.n	8009f42 <__swbuf_r+0x2a>

08009f94 <__swsetup_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4b29      	ldr	r3, [pc, #164]	@ (800a03c <__swsetup_r+0xa8>)
 8009f98:	4605      	mov	r5, r0
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	b118      	cbz	r0, 8009fa8 <__swsetup_r+0x14>
 8009fa0:	6a03      	ldr	r3, [r0, #32]
 8009fa2:	b90b      	cbnz	r3, 8009fa8 <__swsetup_r+0x14>
 8009fa4:	f7fc fcac 	bl	8006900 <__sinit>
 8009fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fac:	0719      	lsls	r1, r3, #28
 8009fae:	d422      	bmi.n	8009ff6 <__swsetup_r+0x62>
 8009fb0:	06da      	lsls	r2, r3, #27
 8009fb2:	d407      	bmi.n	8009fc4 <__swsetup_r+0x30>
 8009fb4:	2209      	movs	r2, #9
 8009fb6:	602a      	str	r2, [r5, #0]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	e033      	b.n	800a02c <__swsetup_r+0x98>
 8009fc4:	0758      	lsls	r0, r3, #29
 8009fc6:	d512      	bpl.n	8009fee <__swsetup_r+0x5a>
 8009fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fca:	b141      	cbz	r1, 8009fde <__swsetup_r+0x4a>
 8009fcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	d002      	beq.n	8009fda <__swsetup_r+0x46>
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	f7fd fc2f 	bl	8007838 <_free_r>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	f043 0308 	orr.w	r3, r3, #8
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	b94b      	cbnz	r3, 800a00e <__swsetup_r+0x7a>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a004:	d003      	beq.n	800a00e <__swsetup_r+0x7a>
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 f882 	bl	800a112 <__smakebuf_r>
 800a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a012:	f013 0201 	ands.w	r2, r3, #1
 800a016:	d00a      	beq.n	800a02e <__swsetup_r+0x9a>
 800a018:	2200      	movs	r2, #0
 800a01a:	60a2      	str	r2, [r4, #8]
 800a01c:	6962      	ldr	r2, [r4, #20]
 800a01e:	4252      	negs	r2, r2
 800a020:	61a2      	str	r2, [r4, #24]
 800a022:	6922      	ldr	r2, [r4, #16]
 800a024:	b942      	cbnz	r2, 800a038 <__swsetup_r+0xa4>
 800a026:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a02a:	d1c5      	bne.n	8009fb8 <__swsetup_r+0x24>
 800a02c:	bd38      	pop	{r3, r4, r5, pc}
 800a02e:	0799      	lsls	r1, r3, #30
 800a030:	bf58      	it	pl
 800a032:	6962      	ldrpl	r2, [r4, #20]
 800a034:	60a2      	str	r2, [r4, #8]
 800a036:	e7f4      	b.n	800a022 <__swsetup_r+0x8e>
 800a038:	2000      	movs	r0, #0
 800a03a:	e7f7      	b.n	800a02c <__swsetup_r+0x98>
 800a03c:	2000005c 	.word	0x2000005c

0800a040 <_raise_r>:
 800a040:	291f      	cmp	r1, #31
 800a042:	b538      	push	{r3, r4, r5, lr}
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	d904      	bls.n	800a054 <_raise_r+0x14>
 800a04a:	2316      	movs	r3, #22
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a056:	b112      	cbz	r2, 800a05e <_raise_r+0x1e>
 800a058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a05c:	b94b      	cbnz	r3, 800a072 <_raise_r+0x32>
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f830 	bl	800a0c4 <_getpid_r>
 800a064:	4622      	mov	r2, r4
 800a066:	4601      	mov	r1, r0
 800a068:	4628      	mov	r0, r5
 800a06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a06e:	f000 b817 	b.w	800a0a0 <_kill_r>
 800a072:	2b01      	cmp	r3, #1
 800a074:	d00a      	beq.n	800a08c <_raise_r+0x4c>
 800a076:	1c59      	adds	r1, r3, #1
 800a078:	d103      	bne.n	800a082 <_raise_r+0x42>
 800a07a:	2316      	movs	r3, #22
 800a07c:	6003      	str	r3, [r0, #0]
 800a07e:	2001      	movs	r0, #1
 800a080:	e7e7      	b.n	800a052 <_raise_r+0x12>
 800a082:	2100      	movs	r1, #0
 800a084:	4620      	mov	r0, r4
 800a086:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a08a:	4798      	blx	r3
 800a08c:	2000      	movs	r0, #0
 800a08e:	e7e0      	b.n	800a052 <_raise_r+0x12>

0800a090 <raise>:
 800a090:	4b02      	ldr	r3, [pc, #8]	@ (800a09c <raise+0xc>)
 800a092:	4601      	mov	r1, r0
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	f7ff bfd3 	b.w	800a040 <_raise_r>
 800a09a:	bf00      	nop
 800a09c:	2000005c 	.word	0x2000005c

0800a0a0 <_kill_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4d06      	ldr	r5, [pc, #24]	@ (800a0c0 <_kill_r+0x20>)
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	f7f7 ff50 	bl	8001f52 <_kill>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d102      	bne.n	800a0bc <_kill_r+0x1c>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b103      	cbz	r3, 800a0bc <_kill_r+0x1c>
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000724 	.word	0x20000724

0800a0c4 <_getpid_r>:
 800a0c4:	f7f7 bf3e 	b.w	8001f44 <_getpid>

0800a0c8 <__swhatbuf_r>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	461e      	mov	r6, r3
 800a0d6:	b096      	sub	sp, #88	@ 0x58
 800a0d8:	da0c      	bge.n	800a0f4 <__swhatbuf_r+0x2c>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	2100      	movs	r1, #0
 800a0de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0e2:	bf14      	ite	ne
 800a0e4:	2340      	movne	r3, #64	@ 0x40
 800a0e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	6031      	str	r1, [r6, #0]
 800a0ee:	602b      	str	r3, [r5, #0]
 800a0f0:	b016      	add	sp, #88	@ 0x58
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	466a      	mov	r2, sp
 800a0f6:	f000 f849 	bl	800a18c <_fstat_r>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	dbed      	blt.n	800a0da <__swhatbuf_r+0x12>
 800a0fe:	9901      	ldr	r1, [sp, #4]
 800a100:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a104:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a108:	4259      	negs	r1, r3
 800a10a:	4159      	adcs	r1, r3
 800a10c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a110:	e7eb      	b.n	800a0ea <__swhatbuf_r+0x22>

0800a112 <__smakebuf_r>:
 800a112:	898b      	ldrh	r3, [r1, #12]
 800a114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a116:	079d      	lsls	r5, r3, #30
 800a118:	4606      	mov	r6, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	d507      	bpl.n	800a12e <__smakebuf_r+0x1c>
 800a11e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	2301      	movs	r3, #1
 800a128:	6163      	str	r3, [r4, #20]
 800a12a:	b003      	add	sp, #12
 800a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12e:	466a      	mov	r2, sp
 800a130:	ab01      	add	r3, sp, #4
 800a132:	f7ff ffc9 	bl	800a0c8 <__swhatbuf_r>
 800a136:	9f00      	ldr	r7, [sp, #0]
 800a138:	4605      	mov	r5, r0
 800a13a:	4639      	mov	r1, r7
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7fd fbed 	bl	800791c <_malloc_r>
 800a142:	b948      	cbnz	r0, 800a158 <__smakebuf_r+0x46>
 800a144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a148:	059a      	lsls	r2, r3, #22
 800a14a:	d4ee      	bmi.n	800a12a <__smakebuf_r+0x18>
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	f043 0302 	orr.w	r3, r3, #2
 800a154:	81a3      	strh	r3, [r4, #12]
 800a156:	e7e2      	b.n	800a11e <__smakebuf_r+0xc>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a15e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	6020      	str	r0, [r4, #0]
 800a168:	b15b      	cbz	r3, 800a182 <__smakebuf_r+0x70>
 800a16a:	4630      	mov	r0, r6
 800a16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a170:	f000 f81e 	bl	800a1b0 <_isatty_r>
 800a174:	b128      	cbz	r0, 800a182 <__smakebuf_r+0x70>
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	f043 0301 	orr.w	r3, r3, #1
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	431d      	orrs	r5, r3
 800a186:	81a5      	strh	r5, [r4, #12]
 800a188:	e7cf      	b.n	800a12a <__smakebuf_r+0x18>
	...

0800a18c <_fstat_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	2300      	movs	r3, #0
 800a190:	4d06      	ldr	r5, [pc, #24]	@ (800a1ac <_fstat_r+0x20>)
 800a192:	4604      	mov	r4, r0
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	602b      	str	r3, [r5, #0]
 800a19a:	f7f7 ff39 	bl	8002010 <_fstat>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	d102      	bne.n	800a1a8 <_fstat_r+0x1c>
 800a1a2:	682b      	ldr	r3, [r5, #0]
 800a1a4:	b103      	cbz	r3, 800a1a8 <_fstat_r+0x1c>
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	bd38      	pop	{r3, r4, r5, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000724 	.word	0x20000724

0800a1b0 <_isatty_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4d05      	ldr	r5, [pc, #20]	@ (800a1cc <_isatty_r+0x1c>)
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	f7f7 ff37 	bl	800202e <_isatty>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_isatty_r+0x1a>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_isatty_r+0x1a>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20000724 	.word	0x20000724

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr
