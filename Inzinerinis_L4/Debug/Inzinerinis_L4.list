
Inzinerinis_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800b5b8  0800b5b8  0000c5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb28  0800bb28  0000d218  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb28  0800bb28  0000cb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb30  0800bb30  0000d218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb30  0800bb30  0000cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb34  0800bb34  0000cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800bb38  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000218  0800bd50  0000d218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800bd50  0000d824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016821  00000000  00000000  0000d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003126  00000000  00000000  00023a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00026b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00027fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002620c  00000000  00000000  00028f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001879c  00000000  00000000  0004f152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf6f  00000000  00000000  000678ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015285d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006988  00000000  00000000  001528a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00159228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b59c 	.word	0x0800b59c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800b59c 	.word	0x0800b59c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SEND_4_BIT>:
#include "main.h"
#include "stm32l4xx_hal.h"
#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, int rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	2110      	movs	r1, #16
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f003 fb04 	bl	8004618 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f003 faf9 	bl	8004618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	085b      	lsrs	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	2108      	movs	r1, #8
 8001036:	4817      	ldr	r0, [pc, #92]	@ (8001094 <SEND_4_BIT+0xa0>)
 8001038:	f003 faee 	bl	8004618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	2120      	movs	r1, #32
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <SEND_4_BIT+0xa0>)
 800104e:	f003 fae3 	bl	8004618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f003 fad6 	bl	8004618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2140      	movs	r1, #64	@ 0x40
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f003 fad0 	bl	8004618 <HAL_GPIO_WritePin>
	  DELAY_US(500);
 8001078:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800107c:	f000 fd94 	bl	8001ba8 <DELAY_US>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	@ 0x40
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f003 fac6 	bl	8004618 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	48000400 	.word	0x48000400

08001098 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010aa:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff9e 	bl	8000ff4 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010c2:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff92 	bl	8000ff4 <SEND_4_BIT>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000234 	.word	0x20000234

080010dc <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <LCD_SEND_DATA+0x40>)
 80010ee:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <LCD_SEND_DATA+0x40>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff7c 	bl	8000ff4 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <LCD_SEND_DATA+0x40>)
 8001106:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <LCD_SEND_DATA+0x40>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff70 	bl	8000ff4 <SEND_4_BIT>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000235 	.word	0x20000235

08001120 <LCD_CLEAR>:

void LCD_CLEAR()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff ffb7 	bl	8001098 <LCD_SEND_COMMAND>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <LCD_CLEAR_DRAM>:

void LCD_CLEAR_DRAM()
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 8001134:	2002      	movs	r0, #2
 8001136:	f7ff ffaf 	bl	8001098 <LCD_SEND_COMMAND>
	for(uint8_t x = 0;x<0x28;x++)
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e005      	b.n	800114c <LCD_CLEAR_DRAM+0x1e>
	{
		LCD_SEND_DATA(' ');
 8001140:	2020      	movs	r0, #32
 8001142:	f7ff ffcb 	bl	80010dc <LCD_SEND_DATA>
	for(uint8_t x = 0;x<0x28;x++)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b27      	cmp	r3, #39	@ 0x27
 8001150:	d9f6      	bls.n	8001140 <LCD_CLEAR_DRAM+0x12>
	}
	for(uint8_t x = 0x40;x<0x68;x++)
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	71bb      	strb	r3, [r7, #6]
 8001156:	e005      	b.n	8001164 <LCD_CLEAR_DRAM+0x36>
	{
		LCD_SEND_DATA(' ');
 8001158:	2020      	movs	r0, #32
 800115a:	f7ff ffbf 	bl	80010dc <LCD_SEND_DATA>
	for(uint8_t x = 0x40;x<0x68;x++)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	3301      	adds	r3, #1
 8001162:	71bb      	strb	r3, [r7, #6]
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b67      	cmp	r3, #103	@ 0x67
 8001168:	d9f6      	bls.n	8001158 <LCD_CLEAR_DRAM+0x2a>
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ff94 	bl	8001098 <LCD_SEND_COMMAND>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LCD_Init>:

void LCD_Init()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	  HAL_Delay(70);
 800117c:	2046      	movs	r0, #70	@ 0x46
 800117e:	f001 f9b5 	bl	80024ec <HAL_Delay>
	  LCD_SEND_COMMAND(LCD_FUNCTION_SET);//x28 kad 2 line
 8001182:	2020      	movs	r0, #32
 8001184:	f7ff ff88 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f001 f9af 	bl	80024ec <HAL_Delay>
	  LCD_SEND_COMMAND(0x28);
 800118e:	2028      	movs	r0, #40	@ 0x28
 8001190:	f7ff ff82 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 8001194:	2002      	movs	r0, #2
 8001196:	f001 f9a9 	bl	80024ec <HAL_Delay>
////////////////////////
	  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);//display
 800119a:	200c      	movs	r0, #12
 800119c:	f7ff ff7c 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f001 f9a3 	bl	80024ec <HAL_Delay>
	  LCD_CLEAR();
 80011a6:	f7ff ffbb 	bl	8001120 <LCD_CLEAR>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], unsigned int place, unsigned int level)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	if(level==1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <LCD_SEND_STR+0x22>
		{
		LCD_SEND_COMMAND(0xC0+place);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3b40      	subs	r3, #64	@ 0x40
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff64 	bl	8001098 <LCD_SEND_COMMAND>
 80011d0:	e006      	b.n	80011e0 <LCD_SEND_STR+0x30>
		}
	else LCD_SEND_COMMAND(0x80+place);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3b80      	subs	r3, #128	@ 0x80
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff5c 	bl	8001098 <LCD_SEND_COMMAND>
//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 80011e6:	e00e      	b.n	8001206 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff71 	bl	80010dc <LCD_SEND_DATA>
		x++;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <LCD_SEND_STR+0x70>)
 8001204:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <LCD_SEND_STR+0x70>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e8      	bne.n	80011e8 <LCD_SEND_STR+0x38>
	}
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000236 	.word	0x20000236

08001224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <MX_ADC1_Init+0xf8>)
 800123c:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_ADC1_Init+0xfc>)
 800123e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001240:	4b36      	ldr	r3, [pc, #216]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001246:	4b35      	ldr	r3, [pc, #212]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124c:	4b33      	ldr	r3, [pc, #204]	@ (800131c <MX_ADC1_Init+0xf8>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001252:	4b32      	ldr	r3, [pc, #200]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001254:	2201      	movs	r2, #1
 8001256:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001258:	4b30      	ldr	r3, [pc, #192]	@ (800131c <MX_ADC1_Init+0xf8>)
 800125a:	2208      	movs	r2, #8
 800125c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001266:	2200      	movs	r2, #0
 8001268:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <MX_ADC1_Init+0xf8>)
 800126c:	2203      	movs	r2, #3
 800126e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <MX_ADC1_Init+0xf8>)
 800127a:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001280:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <MX_ADC1_Init+0xf8>)
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001292:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <MX_ADC1_Init+0xf8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	481e      	ldr	r0, [pc, #120]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012a2:	f001 fb5b 	bl	800295c <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 fd40 	bl	8001d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_ADC1_Init+0x100>)
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2306      	movs	r3, #6
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012bc:	237f      	movs	r3, #127	@ 0x7f
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c0:	2304      	movs	r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012ce:	f001 feeb 	bl	80030a8 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80012d8:	f000 fd2a 	bl	8001d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_ADC1_Init+0x104>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012e0:	230c      	movs	r3, #12
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012ea:	f001 fedd 	bl	80030a8 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80012f4:	f000 fd1c 	bl	8001d30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_ADC1_Init+0x108>)
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012fc:	2312      	movs	r3, #18
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001306:	f001 fecf 	bl	80030a8 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001310:	f000 fd0e 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000238 	.word	0x20000238
 8001320:	50040000 	.word	0x50040000
 8001324:	04300002 	.word	0x04300002
 8001328:	08600004 	.word	0x08600004
 800132c:	0c900008 	.word	0x0c900008

08001330 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0a4      	sub	sp, #144	@ 0x90
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2268      	movs	r2, #104	@ 0x68
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fd4e 	bl	8007df2 <memset>
  if(adcHandle->Instance==ADC1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <HAL_ADC_MspInit+0x128>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d177      	bne.n	8001450 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001360:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001364:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001366:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800136a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001378:	2307      	movs	r3, #7
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f828 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800139a:	f000 fcc9 	bl	8001d30 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a28      	ldr	r2, [pc, #160]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d2:	230b      	movs	r3, #11
 80013d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013e2:	4619      	mov	r1, r3
 80013e4:	481e      	ldr	r0, [pc, #120]	@ (8001460 <HAL_ADC_MspInit+0x130>)
 80013e6:	f002 ff9d 	bl	8004324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <HAL_ADC_MspInit+0x138>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800140a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001416:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800141a:	2220      	movs	r2, #32
 800141c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001426:	f002 fd85 	bl	8003f34 <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001430:	f000 fc7e 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001438:	651a      	str	r2, [r3, #80]	@ 0x50
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2102      	movs	r1, #2
 8001444:	2012      	movs	r0, #18
 8001446:	f002 fd3e 	bl	8003ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800144a:	2012      	movs	r0, #18
 800144c:	f002 fd57 	bl	8003efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001450:	bf00      	nop
 8001452:	3790      	adds	r7, #144	@ 0x90
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	50040000 	.word	0x50040000
 800145c:	40021000 	.word	0x40021000
 8001460:	48000800 	.word	0x48000800
 8001464:	200002a0 	.word	0x200002a0
 8001468:	40020008 	.word	0x40020008

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200b      	movs	r0, #11
 8001490:	f002 fd19 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001494:	200b      	movs	r0, #11
 8001496:	f002 fd32 	bl	8003efe <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b53      	ldr	r3, [pc, #332]	@ (800160c <MX_GPIO_Init+0x164>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a52      	ldr	r2, [pc, #328]	@ (800160c <MX_GPIO_Init+0x164>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b50      	ldr	r3, [pc, #320]	@ (800160c <MX_GPIO_Init+0x164>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	4b4d      	ldr	r3, [pc, #308]	@ (800160c <MX_GPIO_Init+0x164>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a4c      	ldr	r2, [pc, #304]	@ (800160c <MX_GPIO_Init+0x164>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <MX_GPIO_Init+0x164>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <MX_GPIO_Init+0x164>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a46      	ldr	r2, [pc, #280]	@ (800160c <MX_GPIO_Init+0x164>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b44      	ldr	r3, [pc, #272]	@ (800160c <MX_GPIO_Init+0x164>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <MX_GPIO_Init+0x164>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a40      	ldr	r2, [pc, #256]	@ (800160c <MX_GPIO_Init+0x164>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <MX_GPIO_Init+0x164>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LUX_VCC_GPIO_Port, LUX_VCC_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2108      	movs	r1, #8
 8001522:	483b      	ldr	r0, [pc, #236]	@ (8001610 <MX_GPIO_Init+0x168>)
 8001524:	f003 f878 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8001528:	2200      	movs	r2, #0
 800152a:	f249 0170 	movw	r1, #36976	@ 0x9070
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f003 f871 	bl	8004618 <HAL_GPIO_WritePin>
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|D5_Pin|D6_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f242 0128 	movw	r1, #8232	@ 0x2028
 800153c:	4835      	ldr	r0, [pc, #212]	@ (8001614 <MX_GPIO_Init+0x16c>)
 800153e:	f003 f86b 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001548:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	482d      	ldr	r0, [pc, #180]	@ (8001610 <MX_GPIO_Init+0x168>)
 800155a:	f002 fee3 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LUX_VCC_Pin;
 800155e:	2308      	movs	r3, #8
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LUX_VCC_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4826      	ldr	r0, [pc, #152]	@ (8001610 <MX_GPIO_Init+0x168>)
 8001576:	f002 fed5 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 800157a:	2370      	movs	r3, #112	@ 0x70
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001594:	f002 fec6 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4818      	ldr	r0, [pc, #96]	@ (8001614 <MX_GPIO_Init+0x16c>)
 80015b2:	f002 feb7 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D4_Pin|D7_Pin;
 80015b6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f002 fea7 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 80015d6:	2328      	movs	r3, #40	@ 0x28
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <MX_GPIO_Init+0x16c>)
 80015ee:	f002 fe99 	bl	8004324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	2028      	movs	r0, #40	@ 0x28
 80015f8:	f002 fc65 	bl	8003ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015fc:	2028      	movs	r0, #40	@ 0x28
 80015fe:	f002 fc7e 	bl	8003efe <HAL_NVIC_EnableIRQ>

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	48000800 	.word	0x48000800
 8001614:	48000400 	.word	0x48000400

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 fee9 	bl	80023f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fa33 	bl	8001a8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(300);
 8001626:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800162a:	f000 ff5f 	bl	80024ec <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f7ff ff3b 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001632:	f7ff ff1b 	bl	800146c <MX_DMA_Init>
  MX_TIM6_Init();
 8001636:	f000 fcef 	bl	8002018 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800163a:	f000 fddf 	bl	80021fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800163e:	f7ff fdf1 	bl	8001224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001642:	f000 fdab 	bl	800219c <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8001646:	f000 fd1d 	bl	8002084 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK)
 800164a:	217f      	movs	r1, #127	@ 0x7f
 800164c:	489d      	ldr	r0, [pc, #628]	@ (80018c4 <main+0x2ac>)
 800164e:	f002 facd 	bl	8003bec <HAL_ADCEx_Calibration_Start>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <main+0x56>
  {
  	sprintf(LCD_top_text,"ERR CALIBRATION");
 8001658:	499b      	ldr	r1, [pc, #620]	@ (80018c8 <main+0x2b0>)
 800165a:	489c      	ldr	r0, [pc, #624]	@ (80018cc <main+0x2b4>)
 800165c:	f006 fb66 	bl	8007d2c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 8001660:	499b      	ldr	r1, [pc, #620]	@ (80018d0 <main+0x2b8>)
 8001662:	489c      	ldr	r0, [pc, #624]	@ (80018d4 <main+0x2bc>)
 8001664:	f006 fb62 	bl	8007d2c <siprintf>
  	ERROR_FLAG = 1;
 8001668:	4b9b      	ldr	r3, [pc, #620]	@ (80018d8 <main+0x2c0>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Samples,ADC_BUFFER_SIZE) != HAL_OK)
 800166e:	22f0      	movs	r2, #240	@ 0xf0
 8001670:	499a      	ldr	r1, [pc, #616]	@ (80018dc <main+0x2c4>)
 8001672:	4894      	ldr	r0, [pc, #592]	@ (80018c4 <main+0x2ac>)
 8001674:	f001 fab8 	bl	8002be8 <HAL_ADC_Start_DMA>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <main+0x7c>
  {
  	sprintf(LCD_top_text,"ERROR ADC");
 800167e:	4998      	ldr	r1, [pc, #608]	@ (80018e0 <main+0x2c8>)
 8001680:	4892      	ldr	r0, [pc, #584]	@ (80018cc <main+0x2b4>)
 8001682:	f006 fb53 	bl	8007d2c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 8001686:	4992      	ldr	r1, [pc, #584]	@ (80018d0 <main+0x2b8>)
 8001688:	4892      	ldr	r0, [pc, #584]	@ (80018d4 <main+0x2bc>)
 800168a:	f006 fb4f 	bl	8007d2c <siprintf>
  	ERROR_FLAG = 1;
 800168e:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <main+0x2c0>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8001694:	4893      	ldr	r0, [pc, #588]	@ (80018e4 <main+0x2cc>)
 8001696:	f004 faaf 	bl	8005bf8 <HAL_TIM_Base_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00a      	beq.n	80016b6 <main+0x9e>
  {
  	sprintf(LCD_top_text,"DISPLAY TIM ERR");
 80016a0:	4991      	ldr	r1, [pc, #580]	@ (80018e8 <main+0x2d0>)
 80016a2:	488a      	ldr	r0, [pc, #552]	@ (80018cc <main+0x2b4>)
 80016a4:	f006 fb42 	bl	8007d2c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016a8:	4989      	ldr	r1, [pc, #548]	@ (80018d0 <main+0x2b8>)
 80016aa:	488a      	ldr	r0, [pc, #552]	@ (80018d4 <main+0x2bc>)
 80016ac:	f006 fb3e 	bl	8007d2c <siprintf>
  	ERROR_FLAG = 1;
 80016b0:	4b89      	ldr	r3, [pc, #548]	@ (80018d8 <main+0x2c0>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start(&htim6) != HAL_OK)
 80016b6:	488d      	ldr	r0, [pc, #564]	@ (80018ec <main+0x2d4>)
 80016b8:	f004 fa4a 	bl	8005b50 <HAL_TIM_Base_Start>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <main+0xc0>
  {
  	sprintf(LCD_top_text,"ERROR MAIN TIM");
 80016c2:	498b      	ldr	r1, [pc, #556]	@ (80018f0 <main+0x2d8>)
 80016c4:	4881      	ldr	r0, [pc, #516]	@ (80018cc <main+0x2b4>)
 80016c6:	f006 fb31 	bl	8007d2c <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016ca:	4981      	ldr	r1, [pc, #516]	@ (80018d0 <main+0x2b8>)
 80016cc:	4881      	ldr	r0, [pc, #516]	@ (80018d4 <main+0x2bc>)
 80016ce:	f006 fb2d 	bl	8007d2c <siprintf>
  	ERROR_FLAG = 1;
 80016d2:	4b81      	ldr	r3, [pc, #516]	@ (80018d8 <main+0x2c0>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
  }
  //NEVEIKIA VCC is PIN, kodel??
  //HAL_GPIO_WritePin(LUX_VCC_GPIO_Port, LUX_VCC_Pin, GPIO_PIN_SET);// turn on LCD DATA transmission power
  LCD_Init();
 80016d8:	f7ff fd4e 	bl	8001178 <LCD_Init>
  HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 ff05 	bl	80024ec <HAL_Delay>
  LCD_SEND_COMMAND(LCD_DISPLAY_OFF);
 80016e2:	2008      	movs	r0, #8
 80016e4:	f7ff fcd8 	bl	8001098 <LCD_SEND_COMMAND>
  HAL_Delay(10);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f000 feff 	bl	80024ec <HAL_Delay>
  LCD_CLEAR();
 80016ee:	f7ff fd17 	bl	8001120 <LCD_CLEAR>
  HAL_Delay(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 fefa 	bl	80024ec <HAL_Delay>
  LCD_CLEAR_DRAM();
 80016f8:	f7ff fd19 	bl	800112e <LCD_CLEAR_DRAM>
  HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f000 fef5 	bl	80024ec <HAL_Delay>
  LCD_SEND_STR(LCD_top_text,0x3,0);
 8001702:	2200      	movs	r2, #0
 8001704:	2103      	movs	r1, #3
 8001706:	4871      	ldr	r0, [pc, #452]	@ (80018cc <main+0x2b4>)
 8001708:	f7ff fd52 	bl	80011b0 <LCD_SEND_STR>
  LCD_SEND_STR(LCD_bottom_text,0,1);
 800170c:	2201      	movs	r2, #1
 800170e:	2100      	movs	r1, #0
 8001710:	4870      	ldr	r0, [pc, #448]	@ (80018d4 <main+0x2bc>)
 8001712:	f7ff fd4d 	bl	80011b0 <LCD_SEND_STR>
  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);
 8001716:	200c      	movs	r0, #12
 8001718:	f7ff fcbe 	bl	8001098 <LCD_SEND_COMMAND>
  HAL_Delay(2000);
 800171c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001720:	f000 fee4 	bl	80024ec <HAL_Delay>
  LCD_CLEAR();
 8001724:	f7ff fcfc 	bl	8001120 <LCD_CLEAR>

	if(ERROR_FLAG) Error_Handler();//REIKIA PALEISTI TAIMERI TIM6 PRIES ATVAIZDAVIMA, us delay
 8001728:	4b6b      	ldr	r3, [pc, #428]	@ (80018d8 <main+0x2c0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <main+0x11c>
 8001730:	f000 fafe 	bl	8001d30 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t SUM[NUM_OF_CHANNELS] = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  while (1)
  {
	  if(ADC_CALC_AVG_FLAG)
 800173e:	4b6d      	ldr	r3, [pc, #436]	@ (80018f4 <main+0x2dc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d07a      	beq.n	800183e <main+0x226>
	  {
		  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e01e      	b.n	800178c <main+0x174>
		  {
			  SUM[x%3] += ADC_Samples[x];
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4a62      	ldr	r2, [pc, #392]	@ (80018dc <main+0x2c4>)
 8001752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001756:	b298      	uxth	r0, r3
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	4b67      	ldr	r3, [pc, #412]	@ (80018f8 <main+0x2e0>)
 800175c:	fba3 1302 	umull	r1, r3, r3, r2
 8001760:	0859      	lsrs	r1, r3, #1
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	3310      	adds	r3, #16
 8001772:	443b      	add	r3, r7
 8001774:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001778:	4611      	mov	r1, r2
 800177a:	181a      	adds	r2, r3, r0
 800177c:	008b      	lsls	r3, r1, #2
 800177e:	3310      	adds	r3, #16
 8001780:	443b      	add	r3, r7
 8001782:	f843 2c10 	str.w	r2, [r3, #-16]
		  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	3301      	adds	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2bef      	cmp	r3, #239	@ 0xef
 8001790:	d9dd      	bls.n	800174e <main+0x136>
		  }

		  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 8001792:	2300      	movs	r3, #0
 8001794:	73bb      	strb	r3, [r7, #14]
 8001796:	e03a      	b.n	800180e <main+0x1f6>
		  {
			  SUM[x] /= (ADC_BUFFER_SIZE/NUM_OF_CHANNELS);
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3310      	adds	r3, #16
 800179e:	443b      	add	r3, r7
 80017a0:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
 80017a6:	4955      	ldr	r1, [pc, #340]	@ (80018fc <main+0x2e4>)
 80017a8:	fba1 1202 	umull	r1, r2, r1, r2
 80017ac:	0992      	lsrs	r2, r2, #6
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3310      	adds	r3, #16
 80017b2:	443b      	add	r3, r7
 80017b4:	f843 2c10 	str.w	r2, [r3, #-16]
			  ADC_Voltages[x] = SUM[x]*ADC_V_Step;
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3310      	adds	r3, #16
 80017be:	443b      	add	r3, r7
 80017c0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001900 <main+0x2e8>
 80017d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001904 <main+0x2ec>)
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	edc3 7a00 	vstr	s15, [r3]
			  LUX_Values[x] = Voltage_to_lux(ADC_Voltages[x]);
 80017e0:	7bbb      	ldrb	r3, [r7, #14]
 80017e2:	4a48      	ldr	r2, [pc, #288]	@ (8001904 <main+0x2ec>)
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	7bbc      	ldrb	r4, [r7, #14]
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	f000 f99d 	bl	8001b30 <Voltage_to_lux>
 80017f6:	eeb0 7a40 	vmov.f32	s14, s0
 80017fa:	eef0 7a60 	vmov.f32	s15, s1
 80017fe:	4a42      	ldr	r2, [pc, #264]	@ (8001908 <main+0x2f0>)
 8001800:	00e3      	lsls	r3, r4, #3
 8001802:	4413      	add	r3, r2
 8001804:	ed83 7b00 	vstr	d7, [r3]
		  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	3301      	adds	r3, #1
 800180c:	73bb      	strb	r3, [r7, #14]
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d9c1      	bls.n	8001798 <main+0x180>
		  }
		  ADC_CALC_AVG_FLAG=0;
 8001814:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <main+0x2dc>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		  if(!LCD_SHOW_TYPE)
 800181a:	4b3c      	ldr	r3, [pc, #240]	@ (800190c <main+0x2f4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <main+0x226>
		  {
			  LUX_Difference = LUX_Values[0]-LUX_Values[1];
 8001824:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <main+0x2f0>)
 8001826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182a:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <main+0x2f0>)
 800182c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001830:	f7fe fd32 	bl	8000298 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4935      	ldr	r1, [pc, #212]	@ (8001910 <main+0x2f8>)
 800183a:	e9c1 2300 	strd	r2, r3, [r1]
		  }
	  }
	  if(UART_UPDATE_FLAG && !ADC_CALC_AVG_FLAG)
 800183e:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <main+0x2fc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8089 	beq.w	800195c <main+0x344>
 800184a:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <main+0x2dc>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 8083 	bne.w	800195c <main+0x344>
	  {
		  if(LCD_SHOW_TYPE)
 8001856:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <main+0x2f4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d063      	beq.n	8001928 <main+0x310>
		  {
			  sprintf(UART_data, "CH1 value = %1.2f at %d ms\r\n",LUX_Values[0],(int)HAL_GetTick());
 8001860:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <main+0x2f0>)
 8001862:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001866:	f000 fe35 	bl	80024d4 <HAL_GetTick>
 800186a:	4603      	mov	r3, r0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4622      	mov	r2, r4
 8001870:	462b      	mov	r3, r5
 8001872:	4929      	ldr	r1, [pc, #164]	@ (8001918 <main+0x300>)
 8001874:	4829      	ldr	r0, [pc, #164]	@ (800191c <main+0x304>)
 8001876:	f006 fa59 	bl	8007d2c <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 800187a:	4828      	ldr	r0, [pc, #160]	@ (800191c <main+0x304>)
 800187c:	f7fe fd00 	bl	8000280 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	2364      	movs	r3, #100	@ 0x64
 8001886:	4925      	ldr	r1, [pc, #148]	@ (800191c <main+0x304>)
 8001888:	4825      	ldr	r0, [pc, #148]	@ (8001920 <main+0x308>)
 800188a:	f004 fdf7 	bl	800647c <HAL_UART_Transmit>
			  sprintf(UART_data, "CH2 value = %1.2f at %d ms\r\n",LUX_Values[1],(int)HAL_GetTick());
 800188e:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <main+0x2f0>)
 8001890:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001894:	f000 fe1e 	bl	80024d4 <HAL_GetTick>
 8001898:	4603      	mov	r3, r0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4622      	mov	r2, r4
 800189e:	462b      	mov	r3, r5
 80018a0:	4920      	ldr	r1, [pc, #128]	@ (8001924 <main+0x30c>)
 80018a2:	481e      	ldr	r0, [pc, #120]	@ (800191c <main+0x304>)
 80018a4:	f006 fa42 	bl	8007d2c <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 80018a8:	481c      	ldr	r0, [pc, #112]	@ (800191c <main+0x304>)
 80018aa:	f7fe fce9 	bl	8000280 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	2364      	movs	r3, #100	@ 0x64
 80018b4:	4919      	ldr	r1, [pc, #100]	@ (800191c <main+0x304>)
 80018b6:	481a      	ldr	r0, [pc, #104]	@ (8001920 <main+0x308>)
 80018b8:	f004 fde0 	bl	800647c <HAL_UART_Transmit>
			  UART_UPDATE_FLAG = 0;
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <main+0x2fc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e04b      	b.n	800195c <main+0x344>
 80018c4:	20000238 	.word	0x20000238
 80018c8:	0800b5b8 	.word	0x0800b5b8
 80018cc:	20000004 	.word	0x20000004
 80018d0:	0800b5c8 	.word	0x0800b5c8
 80018d4:	20000024 	.word	0x20000024
 80018d8:	20000518 	.word	0x20000518
 80018dc:	200002e8 	.word	0x200002e8
 80018e0:	0800b5d4 	.word	0x0800b5d4
 80018e4:	20000578 	.word	0x20000578
 80018e8:	0800b5e0 	.word	0x0800b5e0
 80018ec:	2000052c 	.word	0x2000052c
 80018f0:	0800b5f0 	.word	0x0800b5f0
 80018f4:	2000051b 	.word	0x2000051b
 80018f8:	aaaaaaab 	.word	0xaaaaaaab
 80018fc:	cccccccd 	.word	0xcccccccd
 8001900:	3a53406b 	.word	0x3a53406b
 8001904:	200004c8 	.word	0x200004c8
 8001908:	200004d8 	.word	0x200004d8
 800190c:	20000000 	.word	0x20000000
 8001910:	200004e8 	.word	0x200004e8
 8001914:	2000051a 	.word	0x2000051a
 8001918:	0800b600 	.word	0x0800b600
 800191c:	200004f0 	.word	0x200004f0
 8001920:	2000064c 	.word	0x2000064c
 8001924:	0800b620 	.word	0x0800b620
		  }
		  else
		  {
			  sprintf(UART_data, "CH1-CH2 value = %1.2f at %d ms\r\n",LUX_Difference,(int)HAL_GetTick());
 8001928:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <main+0x430>)
 800192a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800192e:	f000 fdd1 	bl	80024d4 <HAL_GetTick>
 8001932:	4603      	mov	r3, r0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4622      	mov	r2, r4
 8001938:	462b      	mov	r3, r5
 800193a:	4944      	ldr	r1, [pc, #272]	@ (8001a4c <main+0x434>)
 800193c:	4844      	ldr	r0, [pc, #272]	@ (8001a50 <main+0x438>)
 800193e:	f006 f9f5 	bl	8007d2c <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 8001942:	4843      	ldr	r0, [pc, #268]	@ (8001a50 <main+0x438>)
 8001944:	f7fe fc9c 	bl	8000280 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	2364      	movs	r3, #100	@ 0x64
 800194e:	4940      	ldr	r1, [pc, #256]	@ (8001a50 <main+0x438>)
 8001950:	4840      	ldr	r0, [pc, #256]	@ (8001a54 <main+0x43c>)
 8001952:	f004 fd93 	bl	800647c <HAL_UART_Transmit>
			  UART_UPDATE_FLAG = 0;
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <main+0x440>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(LCD_SHOW_FLAG && !ADC_CALC_AVG_FLAG)
 800195c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a5c <main+0x444>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f43f aeeb 	beq.w	800173e <main+0x126>
 8001968:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <main+0x448>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f aee5 	bne.w	800173e <main+0x126>
	  {
		  if(LCD_SHOW_TYPE)
 8001974:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <main+0x44c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01e      	beq.n	80019bc <main+0x3a4>
		  {
			  sprintf((char*)LCD_top_text,"CH1=%1.1f lx    ",LUX_Values[0]);
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <main+0x450>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	4939      	ldr	r1, [pc, #228]	@ (8001a6c <main+0x454>)
 8001986:	483a      	ldr	r0, [pc, #232]	@ (8001a70 <main+0x458>)
 8001988:	f006 f9d0 	bl	8007d2c <siprintf>
			  LCD_SEND_COMMAND(LCD_RETURN_HOME);
 800198c:	2002      	movs	r0, #2
 800198e:	f7ff fb83 	bl	8001098 <LCD_SEND_COMMAND>
			  LCD_SEND_STR((char*)LCD_top_text, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	4836      	ldr	r0, [pc, #216]	@ (8001a70 <main+0x458>)
 8001998:	f7ff fc0a 	bl	80011b0 <LCD_SEND_STR>
			  sprintf((char*)LCD_bottom_text,"CH2=%1.1f lx    ",LUX_Values[1]);
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <main+0x450>)
 800199e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019a2:	4934      	ldr	r1, [pc, #208]	@ (8001a74 <main+0x45c>)
 80019a4:	4834      	ldr	r0, [pc, #208]	@ (8001a78 <main+0x460>)
 80019a6:	f006 f9c1 	bl	8007d2c <siprintf>
			  LCD_SEND_STR((char*)LCD_bottom_text, 0, 1);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2100      	movs	r1, #0
 80019ae:	4832      	ldr	r0, [pc, #200]	@ (8001a78 <main+0x460>)
 80019b0:	f7ff fbfe 	bl	80011b0 <LCD_SEND_STR>
			  LCD_SHOW_FLAG = 0;
 80019b4:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <main+0x444>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e6c0      	b.n	800173e <main+0x126>
		  }
		  else
		  {
			  if(LCD_CLEAR_ONCE)
 80019bc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <main+0x464>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d026      	beq.n	8001a14 <main+0x3fc>
			  {
				  LCD_CLEAR_DRAM();
 80019c6:	f7ff fbb2 	bl	800112e <LCD_CLEAR_DRAM>
				  LCD_CLEAR_ONCE = 0;
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <main+0x464>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
				  sprintf((char*)LCD_top_text,"DIFFERENCE");
 80019d0:	492b      	ldr	r1, [pc, #172]	@ (8001a80 <main+0x468>)
 80019d2:	4827      	ldr	r0, [pc, #156]	@ (8001a70 <main+0x458>)
 80019d4:	f006 f9aa 	bl	8007d2c <siprintf>
				  LCD_SEND_STR((char*)LCD_top_text, 3, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2103      	movs	r1, #3
 80019dc:	4824      	ldr	r0, [pc, #144]	@ (8001a70 <main+0x458>)
 80019de:	f7ff fbe7 	bl	80011b0 <LCD_SEND_STR>
				  sprintf((char*)LCD_bottom_text,"%1.1f lx",LUX_Difference);
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <main+0x430>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	4926      	ldr	r1, [pc, #152]	@ (8001a84 <main+0x46c>)
 80019ea:	4823      	ldr	r0, [pc, #140]	@ (8001a78 <main+0x460>)
 80019ec:	f006 f99e 	bl	8007d2c <siprintf>
				  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 80019f0:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <main+0x460>)
 80019f2:	f7fe fc45 	bl	8000280 <strlen>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f1c3 0310 	rsb	r3, r3, #16
 80019fc:	0fda      	lsrs	r2, r3, #31
 80019fe:	4413      	add	r3, r2
 8001a00:	105b      	asrs	r3, r3, #1
 8001a02:	2201      	movs	r2, #1
 8001a04:	4619      	mov	r1, r3
 8001a06:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <main+0x460>)
 8001a08:	f7ff fbd2 	bl	80011b0 <LCD_SEND_STR>
				  LCD_SHOW_FLAG = 0;
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <main+0x444>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e694      	b.n	800173e <main+0x126>
			  }
			  else
			  {
				  sprintf((char*)LCD_bottom_text,"   %1.1f lx   ",LUX_Difference);
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <main+0x430>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	491b      	ldr	r1, [pc, #108]	@ (8001a88 <main+0x470>)
 8001a1c:	4816      	ldr	r0, [pc, #88]	@ (8001a78 <main+0x460>)
 8001a1e:	f006 f985 	bl	8007d2c <siprintf>
				  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 8001a22:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <main+0x460>)
 8001a24:	f7fe fc2c 	bl	8000280 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f1c3 0310 	rsb	r3, r3, #16
 8001a2e:	0fda      	lsrs	r2, r3, #31
 8001a30:	4413      	add	r3, r2
 8001a32:	105b      	asrs	r3, r3, #1
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <main+0x460>)
 8001a3a:	f7ff fbb9 	bl	80011b0 <LCD_SEND_STR>
				  LCD_SHOW_FLAG = 0;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <main+0x444>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	  if(ADC_CALC_AVG_FLAG)
 8001a44:	e67b      	b.n	800173e <main+0x126>
 8001a46:	bf00      	nop
 8001a48:	200004e8 	.word	0x200004e8
 8001a4c:	0800b640 	.word	0x0800b640
 8001a50:	200004f0 	.word	0x200004f0
 8001a54:	2000064c 	.word	0x2000064c
 8001a58:	2000051a 	.word	0x2000051a
 8001a5c:	20000519 	.word	0x20000519
 8001a60:	2000051b 	.word	0x2000051b
 8001a64:	20000000 	.word	0x20000000
 8001a68:	200004d8 	.word	0x200004d8
 8001a6c:	0800b664 	.word	0x0800b664
 8001a70:	20000004 	.word	0x20000004
 8001a74:	0800b678 	.word	0x0800b678
 8001a78:	20000024 	.word	0x20000024
 8001a7c:	2000051c 	.word	0x2000051c
 8001a80:	0800b68c 	.word	0x0800b68c
 8001a84:	0800b698 	.word	0x0800b698
 8001a88:	0800b6a4 	.word	0x0800b6a4

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b096      	sub	sp, #88	@ 0x58
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2244      	movs	r2, #68	@ 0x44
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 f9a9 	bl	8007df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ab2:	f002 fe09 	bl	80046c8 <HAL_PWREx_ControlVoltageScaling>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001abc:	f000 f938 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001aca:	2340      	movs	r3, #64	@ 0x40
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ada:	230a      	movs	r3, #10
 8001adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fe40 	bl	8004774 <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001afa:	f000 f919 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afe:	230f      	movs	r3, #15
 8001b00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b02:	2303      	movs	r3, #3
 8001b04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fa40 	bl	8004f9c <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b22:	f000 f905 	bl	8001d30 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3758      	adds	r7, #88	@ 0x58
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <Voltage_to_lux>:
//	{
//
//	}

	double Voltage_to_lux(float Vadc)
	{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	ed87 0a01 	vstr	s0, [r7, #4]
		// Vdda maitinimas operacinio Vadc nuskaityta isejimo reiksme
		volatile  double Current=0;
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9c7 2302 	strd	r2, r3, [r7, #8]
		static double LUX=0;

		//GAIN RES 820 k DIODE_COEF 2.5 e9, galima rodiklius suprastinti per 3
		Current = Vadc/GAIN_RESISTANCE;
 8001b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b4a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001ba0 <Voltage_to_lux+0x70>
 8001b4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b52:	ee16 0a90 	vmov	r0, s13
 8001b56:	f7fe fcff 	bl	8000558 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		LUX = (double)(DIODE_coefficient*Current);
 8001b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b66:	a30c      	add	r3, pc, #48	@ (adr r3, 8001b98 <Voltage_to_lux+0x68>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd4c 	bl	8000608 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	490b      	ldr	r1, [pc, #44]	@ (8001ba4 <Voltage_to_lux+0x74>)
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
		return LUX;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <Voltage_to_lux+0x74>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	ec43 2b17 	vmov	d7, r2, r3
	}
 8001b84:	eeb0 0a47 	vmov.f32	s0, s14
 8001b88:	eef0 0a67 	vmov.f32	s1, s15
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	414312d0 	.word	0x414312d0
 8001ba0:	444d0000 	.word	0x444d0000
 8001ba4:	20000520 	.word	0x20000520

08001ba8 <DELAY_US>:

	void DELAY_US(uint16_t TIME_US)
	{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
	    uint32_t old_timer_value = TIM6->CNT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <DELAY_US+0x58>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	60fb      	str	r3, [r7, #12]
	    uint32_t target_time = (old_timer_value + TIME_US) % (TIM6->ARR + 1);
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <DELAY_US+0x58>)
 8001bc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bc2:	3201      	adds	r2, #1
 8001bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bc8:	fb01 f202 	mul.w	r2, r1, r2
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]

	    if (target_time < old_timer_value)  // Handle timer overflow
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d205      	bcs.n	8001be4 <DELAY_US+0x3c>
	    {
	        while (TIM6->CNT >= old_timer_value);  // Wait for overflow
 8001bd8:	bf00      	nop
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <DELAY_US+0x58>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d9fa      	bls.n	8001bda <DELAY_US+0x32>
	    }

	    while (TIM6->CNT < target_time);  // Wait until target time is reached
 8001be4:	bf00      	nop
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <DELAY_US+0x58>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8fa      	bhi.n	8001be6 <DELAY_US+0x3e>
	}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40001000 	.word	0x40001000

08001c04 <HAL_TIM_PeriodElapsedCallback>:
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	if(htim == &htim15)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d124      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		UART_UPDATE_FLAG = 1;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
		ADC_CALC_AVG_FLAG = 1;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		if(LCD_Delay_cnt<LCD_UPDATE_CNT) LCD_Delay_cnt++;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d807      	bhi.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x36>
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c36:	701a      	strb	r2, [r3, #0]
		{
			LCD_Delay_cnt %=LCD_UPDATE_CNT;
			LCD_SHOW_FLAG = 1;
		}
	}
	}
 8001c38:	e011      	b.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x5a>
			LCD_Delay_cnt %=LCD_UPDATE_CNT;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c42:	fba3 1302 	umull	r1, r3, r3, r2
 8001c46:	08d9      	lsrs	r1, r3, #3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c56:	701a      	strb	r2, [r3, #0]
			LCD_SHOW_FLAG = 1;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
	}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000578 	.word	0x20000578
 8001c70:	2000051a 	.word	0x2000051a
 8001c74:	2000051b 	.word	0x2000051b
 8001c78:	2000051d 	.word	0x2000051d
 8001c7c:	cccccccd 	.word	0xcccccccd
 8001c80:	20000519 	.word	0x20000519

08001c84 <HAL_GPIO_EXTI_Callback>:
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == B1_Pin)
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c94:	d117      	bne.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x42>
		{
			LCD_SHOW_FLAG = 1;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
			ADC_CALC_AVG_FLAG = 1;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <HAL_GPIO_EXTI_Callback+0x90>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
			UART_UPDATE_FLAG = 1;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <HAL_GPIO_EXTI_Callback+0x94>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
			LCD_CLEAR_ONCE = 1;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <HAL_GPIO_EXTI_Callback+0x98>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
			if(LCD_SHOW_TYPE) LCD_SHOW_TYPE = SHOW_DIFFERENCE;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x42>
			else LCD_SHOW_TYPE = SHOW_ABSOLUTE;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
		}
		for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_EXTI_Callback+0x56>
		{
			UART_data[x] = '\0';
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b27      	cmp	r3, #39	@ 0x27
 8001cde:	d9f5      	bls.n	8001ccc <HAL_GPIO_EXTI_Callback+0x48>
		}
		for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0x78>
		{
			LCD_top_text[x] = ' ';
 8001ce6:	7bbb      	ldrb	r3, [r7, #14]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cea:	2120      	movs	r1, #32
 8001cec:	54d1      	strb	r1, [r2, r3]
			LCD_bottom_text[x] = ' ';
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	73bb      	strb	r3, [r7, #14]
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	2b1f      	cmp	r3, #31
 8001d00:	d9f1      	bls.n	8001ce6 <HAL_GPIO_EXTI_Callback+0x62>
		}
	}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000519 	.word	0x20000519
 8001d14:	2000051b 	.word	0x2000051b
 8001d18:	2000051a 	.word	0x2000051a
 8001d1c:	2000051c 	.word	0x2000051c
 8001d20:	20000000 	.word	0x20000000
 8001d24:	200004f0 	.word	0x200004f0
 8001d28:	20000004 	.word	0x20000004
 8001d2c:	20000024 	.word	0x20000024

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LCD_Init();
 8001d34:	f7ff fa20 	bl	8001178 <LCD_Init>
	HAL_Delay(2);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f000 fbd7 	bl	80024ec <HAL_Delay>
	LCD_SEND_STR(LCD_top_text,0,0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	4809      	ldr	r0, [pc, #36]	@ (8001d68 <Error_Handler+0x38>)
 8001d44:	f7ff fa34 	bl	80011b0 <LCD_SEND_STR>
	LCD_SEND_STR(LCD_bottom_text,0,1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4807      	ldr	r0, [pc, #28]	@ (8001d6c <Error_Handler+0x3c>)
 8001d4e:	f7ff fa2f 	bl	80011b0 <LCD_SEND_STR>
	while (1)
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001d52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d56:	4806      	ldr	r0, [pc, #24]	@ (8001d70 <Error_Handler+0x40>)
 8001d58:	f002 fc76 	bl	8004648 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001d5c:	20c8      	movs	r0, #200	@ 0xc8
 8001d5e:	f000 fbc5 	bl	80024ec <HAL_Delay>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001d62:	bf00      	nop
 8001d64:	e7f5      	b.n	8001d52 <Error_Handler+0x22>
 8001d66:	bf00      	nop
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000024 	.word	0x20000024
 8001d70:	48000400 	.word	0x48000400

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_MspInit+0x44>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_MspInit+0x44>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x44>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x44>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e12:	f000 fb4b 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Channel1_IRQHandler+0x10>)
 8001e22:	f002 f99f 	bl	8004164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200002a0 	.word	0x200002a0

08001e30 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <ADC1_IRQHandler+0x10>)
 8001e36:	f000 ff5b 	bl	8002cf0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000238 	.word	0x20000238

08001e44 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e4a:	f003 ff31 	bl	8005cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000578 	.word	0x20000578

08001e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e60:	f002 fc0c 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_kill>:

int _kill(int pid, int sig)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e82:	f006 f809 	bl	8007e98 <__errno>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2216      	movs	r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_exit>:

void _exit (int status)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ffe7 	bl	8001e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <_exit+0x12>

08001eae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e00a      	b.n	8001ed6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec0:	f3af 8000 	nop.w
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	60ba      	str	r2, [r7, #8]
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbf0      	blt.n	8001ec0 <_read+0x12>
  }

  return len;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e009      	b.n	8001f0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dbf1      	blt.n	8001efa <_write+0x12>
  }
  return len;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_close>:

int _close(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f48:	605a      	str	r2, [r3, #4]
  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_isatty>:

int _isatty(int file)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f90:	4a14      	ldr	r2, [pc, #80]	@ (8001fe4 <_sbrk+0x5c>)
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <_sbrk+0x60>)
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <_sbrk+0x64>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <_sbrk+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb8:	f005 ff6e 	bl	8007e98 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e009      	b.n	8001fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fce:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <_sbrk+0x64>)
 8001fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20028000 	.word	0x20028000
 8001fe8:	00000400 	.word	0x00000400
 8001fec:	20000528 	.word	0x20000528
 8001ff0:	20000828 	.word	0x20000828

08001ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <SystemInit+0x20>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <SystemInit+0x20>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_TIM6_Init+0x64>)
 800202a:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <MX_TIM6_Init+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20-1;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_TIM6_Init+0x64>)
 8002030:	2213      	movs	r2, #19
 8002032:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_TIM6_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500-1;
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <MX_TIM6_Init+0x64>)
 800203c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002040:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_TIM6_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <MX_TIM6_Init+0x64>)
 800204a:	f003 fd29 	bl	8005aa0 <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002054:	f7ff fe6c 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002058:	2320      	movs	r3, #32
 800205a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_TIM6_Init+0x64>)
 8002066:	f004 f92f 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002070:	f7ff fe5e 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000052c 	.word	0x2000052c
 8002080:	40001000 	.word	0x40001000

08002084 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <MX_TIM15_Init+0xa0>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2000-1;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020aa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80020ae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000-1;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020b8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80020bc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80020d0:	4813      	ldr	r0, [pc, #76]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020d2:	f003 fce5 	bl	8005aa0 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80020dc:	f7ff fe28 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <MX_TIM15_Init+0x9c>)
 80020ee:	f003 fee6 	bl	8005ebe <HAL_TIM_ConfigClockSource>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80020f8:	f7ff fe1a 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_TIM15_Init+0x9c>)
 800210a:	f004 f8dd 	bl	80062c8 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002114:	f7ff fe0c 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000578 	.word	0x20000578
 8002124:	40014000 	.word	0x40014000

08002128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a16      	ldr	r2, [pc, #88]	@ (8002190 <HAL_TIM_Base_MspInit+0x68>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10c      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a15      	ldr	r2, [pc, #84]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002152:	e018      	b.n	8002186 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM15)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0f      	ldr	r2, [pc, #60]	@ (8002198 <HAL_TIM_Base_MspInit+0x70>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d113      	bne.n	8002186 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6613      	str	r3, [r2, #96]	@ 0x60
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2102      	movs	r1, #2
 800217a:	2018      	movs	r0, #24
 800217c:	f001 fea3 	bl	8003ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002180:	2018      	movs	r0, #24
 8002182:	f001 febc 	bl	8003efe <HAL_NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40001000 	.word	0x40001000
 8002194:	40021000 	.word	0x40021000
 8002198:	40014000 	.word	0x40014000

0800219c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021a2:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <MX_USART1_UART_Init+0x5c>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_USART1_UART_Init+0x58>)
 80021e0:	f004 f8fe 	bl	80063e0 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021ea:	f7ff fda1 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200005c4 	.word	0x200005c4
 80021f8:	40013800 	.word	0x40013800

080021fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <MX_USART2_UART_Init+0x5c>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_USART2_UART_Init+0x58>)
 8002240:	f004 f8ce 	bl	80063e0 <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800224a:	f7ff fd71 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000064c 	.word	0x2000064c
 8002258:	40004400 	.word	0x40004400

0800225c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0a6      	sub	sp, #152	@ 0x98
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	2268      	movs	r2, #104	@ 0x68
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f005 fdb8 	bl	8007df2 <memset>
  if(uartHandle->Instance==USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <HAL_UART_MspInit+0x138>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d13d      	bne.n	8002308 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800228c:	2301      	movs	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002290:	2300      	movs	r3, #0
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f8a3 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a4:	f7ff fd44 	bl	8001d30 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80022b4:	4b38      	ldr	r3, [pc, #224]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	4a34      	ldr	r2, [pc, #208]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f2:	2307      	movs	r3, #7
 80022f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002302:	f002 f80f 	bl	8004324 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002306:	e040      	b.n	800238a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a23      	ldr	r2, [pc, #140]	@ (800239c <HAL_UART_MspInit+0x140>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d13b      	bne.n	800238a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002312:	2302      	movs	r3, #2
 8002314:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002316:	2300      	movs	r3, #0
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f860 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800232a:	f7ff fd01 	bl	8001d30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800232e:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a19      	ldr	r2, [pc, #100]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
 800233a:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	4a13      	ldr	r2, [pc, #76]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_UART_MspInit+0x13c>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800235e:	230c      	movs	r3, #12
 8002360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002376:	2307      	movs	r3, #7
 8002378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f001 ffcd 	bl	8004324 <HAL_GPIO_Init>
}
 800238a:	bf00      	nop
 800238c:	3798      	adds	r7, #152	@ 0x98
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40013800 	.word	0x40013800
 8002398:	40021000 	.word	0x40021000
 800239c:	40004400 	.word	0x40004400

080023a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a4:	f7ff fe26 	bl	8001ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a8:	480c      	ldr	r0, [pc, #48]	@ (80023dc <LoopForever+0x6>)
  ldr r1, =_edata
 80023aa:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <LoopForever+0xe>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023c0:	4c0a      	ldr	r4, [pc, #40]	@ (80023ec <LoopForever+0x16>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ce:	f005 fd69 	bl	8007ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d2:	f7ff f921 	bl	8001618 <main>

080023d6 <LoopForever>:

LoopForever:
    b LoopForever
 80023d6:	e7fe      	b.n	80023d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023d8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80023e4:	0800bb38 	.word	0x0800bb38
  ldr r2, =_sbss
 80023e8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80023ec:	20000824 	.word	0x20000824

080023f0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f0:	e7fe      	b.n	80023f0 <CAN1_RX0_IRQHandler>
	...

080023f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_Init+0x3c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0b      	ldr	r2, [pc, #44]	@ (8002430 <HAL_Init+0x3c>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002408:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240a:	2003      	movs	r0, #3
 800240c:	f001 fd50 	bl	8003eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002410:	2000      	movs	r0, #0
 8002412:	f000 f80f 	bl	8002434 <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	e001      	b.n	8002426 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002422:	f7ff fca7 	bl	8001d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002426:	79fb      	ldrb	r3, [r7, #7]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <HAL_InitTick+0x6c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002448:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <HAL_InitTick+0x70>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <HAL_InitTick+0x6c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fd5b 	bl	8003f1a <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d809      	bhi.n	8002484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002470:	2200      	movs	r2, #0
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f001 fd25 	bl	8003ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800247c:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <HAL_InitTick+0x74>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e007      	b.n	8002494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e004      	b.n	8002494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e001      	b.n	8002494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000004c 	.word	0x2000004c
 80024a4:	20000044 	.word	0x20000044
 80024a8:	20000048 	.word	0x20000048

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000004c 	.word	0x2000004c
 80024d0:	200006d4 	.word	0x200006d4

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	200006d4 	.word	0x200006d4

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000004c 	.word	0x2000004c

08002534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3360      	adds	r3, #96	@ 0x60
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <LL_ADC_SetOffset+0x44>)
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	03fff000 	.word	0x03fff000

080025e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3360      	adds	r3, #96	@ 0x60
 80025f2:	461a      	mov	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3360      	adds	r3, #96	@ 0x60
 8002620:	461a      	mov	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	615a      	str	r2, [r3, #20]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3330      	adds	r3, #48	@ 0x30
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	4413      	add	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	211f      	movs	r1, #31
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 011f 	and.w	r1, r3, #31
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3314      	adds	r3, #20
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0e5b      	lsrs	r3, r3, #25
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2107      	movs	r1, #7
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0318 	and.w	r3, r3, #24
 800278a:	4908      	ldr	r1, [pc, #32]	@ (80027ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800278c:	40d9      	lsrs	r1, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	400b      	ands	r3, r1
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	0007ffff 	.word	0x0007ffff

080027b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800280c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002810:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_IsEnabled+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_IsEnabled+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d101      	bne.n	80028da <LL_ADC_IsDisableOngoing+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_IsDisableOngoing+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d101      	bne.n	8002928 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d101      	bne.n	800294e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e129      	b.n	8002bca <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fe fcd3 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff19 	bl	80027d4 <LL_ADC_IsDeepPowerDownEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff feff 	bl	80027b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff34 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff18 	bl	80027fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029cc:	4b81      	ldr	r3, [pc, #516]	@ (8002bd4 <HAL_ADC_Init+0x278>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a81      	ldr	r2, [pc, #516]	@ (8002bd8 <HAL_ADC_Init+0x27c>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f9      	bne.n	80029e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff16 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff76 	bl	8002910 <LL_ADC_REG_IsConversionOngoing>
 8002a24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 80c2 	bne.w	8002bb8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 80be 	bne.w	8002bb8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a44:	f043 0202 	orr.w	r2, r3, #2
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff23 	bl	800289c <LL_ADC_IsEnabled>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5c:	485f      	ldr	r0, [pc, #380]	@ (8002bdc <HAL_ADC_Init+0x280>)
 8002a5e:	f7ff ff1d 	bl	800289c <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	485c      	ldr	r0, [pc, #368]	@ (8002be0 <HAL_ADC_Init+0x284>)
 8002a70:	f7ff fd60 	bl	8002534 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e5b      	ldrb	r3, [r3, #25]
 8002a78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	045b      	lsls	r3, r3, #17
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_ADC_Init+0x288>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff26 	bl	8002936 <LL_ADC_INJ_IsConversionOngoing>
 8002aea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d140      	bne.n	8002b74 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d13d      	bne.n	8002b74 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7e1b      	ldrb	r3, [r3, #24]
 8002b00:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b02:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b1a:	f023 0306 	bic.w	r3, r3, #6
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d118      	bne.n	8002b64 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b54:	430a      	orrs	r2, r1
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	e007      	b.n	8002b74 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10c      	bne.n	8002b96 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f023 010f 	bic.w	r1, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	1e5a      	subs	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b94:	e007      	b.n	8002ba6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 020f 	bic.w	r2, r2, #15
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bb6:	e007      	b.n	8002bc8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	f043 0210 	orr.w	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000044 	.word	0x20000044
 8002bd8:	053e2d63 	.word	0x053e2d63
 8002bdc:	50040000 	.word	0x50040000
 8002be0:	50040300 	.word	0x50040300
 8002be4:	fff0c007 	.word	0xfff0c007

08002be8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fe89 	bl	8002910 <LL_ADC_REG_IsConversionOngoing>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d167      	bne.n	8002cd4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Start_DMA+0x2a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e063      	b.n	8002cda <HAL_ADC_Start_DMA+0xf2>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fe40 	bl	80038a0 <ADC_Enable>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14f      	bne.n	8002cca <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f023 0206 	bic.w	r2, r3, #6
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c56:	e002      	b.n	8002c5e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c62:	4a20      	ldr	r2, [pc, #128]	@ (8002ce4 <HAL_ADC_Start_DMA+0xfc>)
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce8 <HAL_ADC_Start_DMA+0x100>)
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c72:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_ADC_Start_DMA+0x104>)
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	221c      	movs	r2, #28
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0210 	orr.w	r2, r2, #16
 8002c94:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3340      	adds	r3, #64	@ 0x40
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f001 f9f5 	bl	80040a4 <HAL_DMA_Start_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fe10 	bl	80028e8 <LL_ADC_REG_StartConversion>
 8002cc8:	e006      	b.n	8002cd8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002cd2:	e001      	b.n	8002cd8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08003a6b 	.word	0x08003a6b
 8002ce8:	08003b43 	.word	0x08003b43
 8002cec:	08003b5f 	.word	0x08003b5f

08002cf0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d017      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x56>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 ffdf 	bl	8003cfc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x6a>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05e      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d059      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc6e 	bl	800266c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03e      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d135      	bne.n	8002e14 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d12e      	bne.n	8002e14 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fda8 	bl	8002910 <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11a      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020c 	bic.w	r2, r2, #12
 8002dd4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d112      	bne.n	8002e14 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dfa:	e00b      	b.n	8002e14 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f043 0210 	orr.w	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f91f 	bl	8003058 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_IRQHandler+0x146>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d072      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06d      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fc3f 	bl	80026ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e6c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fbfa 	bl	800266c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e78:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d047      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x1b2>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03f      	beq.n	8002f18 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d13a      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eac:	2b40      	cmp	r3, #64	@ 0x40
 8002eae:	d133      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d12e      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fd39 	bl	8002936 <LL_ADC_INJ_IsConversionOngoing>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11a      	bne.n	8002f00 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ed8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d112      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002efe:	e00b      	b.n	8002f18 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fec7 	bl	8003cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2260      	movs	r2, #96	@ 0x60
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x264>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f89a 	bl	8003080 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x294>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fead 	bl	8003cd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x2c4>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fe9f 	bl	8003ce8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02a      	beq.n	8003014 <HAL_ADC_IRQHandler+0x324>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d025      	beq.n	8003014 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e008      	b.n	8002fe8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10e      	bne.n	800300c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f844 	bl	8003094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <HAL_ADC_IRQHandler+0x360>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	f043 0208 	orr.w	r2, r3, #8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003048:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fe38 	bl	8003cc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b0b6      	sub	sp, #216	@ 0xd8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x22>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e3d5      	b.n	8003876 <HAL_ADC_ConfigChannel+0x7ce>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fc1a 	bl	8002910 <LL_ADC_REG_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 83ba 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d824      	bhi.n	800313e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	3b02      	subs	r3, #2
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d81b      	bhi.n	8003136 <HAL_ADC_ConfigChannel+0x8e>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <HAL_ADC_ConfigChannel+0x5c>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311d 	.word	0x0800311d
 800310c:	08003125 	.word	0x08003125
 8003110:	0800312d 	.word	0x0800312d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003114:	230c      	movs	r3, #12
 8003116:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800311a:	e010      	b.n	800313e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800311c:	2312      	movs	r3, #18
 800311e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003122:	e00c      	b.n	800313e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003124:	2318      	movs	r3, #24
 8003126:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800312a:	e008      	b.n	800313e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800312c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003134:	e003      	b.n	800313e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003136:	2306      	movs	r3, #6
 8003138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800313c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800314c:	f7ff faa1 	bl	8002692 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbdb 	bl	8002910 <LL_ADC_REG_IsConversionOngoing>
 800315a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fbe7 	bl	8002936 <LL_ADC_INJ_IsConversionOngoing>
 8003168:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800316c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 81bf 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 81ba 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003188:	d10f      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	4619      	mov	r1, r3
 8003196:	f7ff fabb 	bl	8002710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fa4f 	bl	8002646 <LL_ADC_SetSamplingTimeCommonConfig>
 80031a8:	e00e      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f7ff faaa 	bl	8002710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa3f 	bl	8002646 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00a      	beq.n	8003200 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031fa:	f7ff f9cf 	bl	800259c <LL_ADC_SetOffset>
 80031fe:	e179      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f9ec 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_ADC_ConfigChannel+0x184>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f9e1 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	e01e      	b.n	800326a <HAL_ADC_ConfigChannel+0x1c2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff f9d6 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800324a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800324e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e004      	b.n	8003268 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800325e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x1da>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0e9b      	lsrs	r3, r3, #26
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	e018      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x20c>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800329a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800329e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e004      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80032aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f9a5 	bl	8002610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f989 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x24a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f97e 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	0e9b      	lsrs	r3, r3, #26
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	e01e      	b.n	8003330 <HAL_ADC_ConfigChannel+0x288>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f973 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e004      	b.n	800332e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x2a0>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	e018      	b.n	800337a <HAL_ADC_ConfigChannel+0x2d2>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800335c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e004      	b.n	800337a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800337a:	429a      	cmp	r2, r3
 800337c:	d106      	bne.n	800338c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f942 	bl	8002610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2102      	movs	r1, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f926 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x310>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f91b 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	f003 021f 	and.w	r2, r3, #31
 80033b6:	e01e      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x34e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff f910 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80033d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80033e6:	2320      	movs	r3, #32
 80033e8:	e004      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_ADC_ConfigChannel+0x366>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	e014      	b.n	8003438 <HAL_ADC_ConfigChannel+0x390>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800341c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800341e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003422:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e004      	b.n	8003438 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800342e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f8e3 	bl	8002610 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2103      	movs	r1, #3
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8c7 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x3ce>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2103      	movs	r1, #3
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f8bc 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 800346c:	4603      	mov	r3, r0
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	e017      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x3fe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2103      	movs	r1, #3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f8b1 	bl	80025e4 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003490:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_ConfigChannel+0x416>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0e9b      	lsrs	r3, r3, #26
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	e011      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x43a>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80034cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80034d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e003      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80034da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d106      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2103      	movs	r1, #3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f88e 	bl	8002610 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f9cf 	bl	800289c <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 813f 	bne.w	8003784 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff f928 	bl	8002768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a8e      	ldr	r2, [pc, #568]	@ (8003758 <HAL_ADC_ConfigChannel+0x6b0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f040 8130 	bne.w	8003784 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_ConfigChannel+0x4a4>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2b09      	cmp	r3, #9
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e019      	b.n	8003580 <HAL_ADC_ConfigChannel+0x4d8>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800355e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2b09      	cmp	r3, #9
 8003578:	bf94      	ite	ls
 800357a:	2301      	movls	r3, #1
 800357c:	2300      	movhi	r3, #0
 800357e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	2b00      	cmp	r3, #0
 8003582:	d079      	beq.n	8003678 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x4f8>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800359e:	e015      	b.n	80035cc <HAL_ADC_ConfigChannel+0x524>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80035b8:	2320      	movs	r3, #32
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80035bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	069b      	lsls	r3, r3, #26
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x544>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	e017      	b.n	800361c <HAL_ADC_ConfigChannel+0x574>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80035fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80035fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x59a>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	051b      	lsls	r3, r3, #20
 8003640:	e018      	b.n	8003674 <HAL_ADC_ConfigChannel+0x5cc>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	430b      	orrs	r3, r1
 8003676:	e080      	b.n	800377a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x5ec>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003692:	e015      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x618>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x638>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x668>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	61bb      	str	r3, [r7, #24]
  return result;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_ADC_ConfigChannel+0x694>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	3b1e      	subs	r3, #30
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800373a:	e01d      	b.n	8003778 <HAL_ADC_ConfigChannel+0x6d0>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	60fb      	str	r3, [r7, #12]
  return result;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e005      	b.n	8003764 <HAL_ADC_ConfigChannel+0x6bc>
 8003758:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	3b1e      	subs	r3, #30
 8003772:	051b      	lsls	r3, r3, #20
 8003774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003778:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377e:	4619      	mov	r1, r3
 8003780:	f7fe ffc6 	bl	8002710 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b3d      	ldr	r3, [pc, #244]	@ (8003880 <HAL_ADC_ConfigChannel+0x7d8>)
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d06c      	beq.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003790:	483c      	ldr	r0, [pc, #240]	@ (8003884 <HAL_ADC_ConfigChannel+0x7dc>)
 8003792:	f7fe fef5 	bl	8002580 <LL_ADC_GetCommonPathInternalCh>
 8003796:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3a      	ldr	r2, [pc, #232]	@ (8003888 <HAL_ADC_ConfigChannel+0x7e0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d127      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d121      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a35      	ldr	r2, [pc, #212]	@ (800388c <HAL_ADC_ConfigChannel+0x7e4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d157      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037c2:	4619      	mov	r1, r3
 80037c4:	482f      	ldr	r0, [pc, #188]	@ (8003884 <HAL_ADC_ConfigChannel+0x7dc>)
 80037c6:	f7fe fec8 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ca:	4b31      	ldr	r3, [pc, #196]	@ (8003890 <HAL_ADC_ConfigChannel+0x7e8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	4a30      	ldr	r2, [pc, #192]	@ (8003894 <HAL_ADC_ConfigChannel+0x7ec>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	099b      	lsrs	r3, r3, #6
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037e4:	e002      	b.n	80037ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f9      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f2:	e03a      	b.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <HAL_ADC_ConfigChannel+0x7f0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d113      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <HAL_ADC_ConfigChannel+0x7e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d12a      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003818:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800381c:	4619      	mov	r1, r3
 800381e:	4819      	ldr	r0, [pc, #100]	@ (8003884 <HAL_ADC_ConfigChannel+0x7dc>)
 8003820:	f7fe fe9b 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003824:	e021      	b.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <HAL_ADC_ConfigChannel+0x7f4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d11c      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a12      	ldr	r2, [pc, #72]	@ (800388c <HAL_ADC_ConfigChannel+0x7e4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d111      	bne.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800384a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800384e:	4619      	mov	r1, r3
 8003850:	480c      	ldr	r0, [pc, #48]	@ (8003884 <HAL_ADC_ConfigChannel+0x7dc>)
 8003852:	f7fe fe82 	bl	800255a <LL_ADC_SetCommonPathInternalCh>
 8003856:	e008      	b.n	800386a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003872:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003876:	4618      	mov	r0, r3
 8003878:	37d8      	adds	r7, #216	@ 0xd8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	80080000 	.word	0x80080000
 8003884:	50040300 	.word	0x50040300
 8003888:	c7520000 	.word	0xc7520000
 800388c:	50040000 	.word	0x50040000
 8003890:	20000044 	.word	0x20000044
 8003894:	053e2d63 	.word	0x053e2d63
 8003898:	cb840000 	.word	0xcb840000
 800389c:	80000001 	.word	0x80000001

080038a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fff3 	bl	800289c <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d169      	bne.n	8003990 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b36      	ldr	r3, [pc, #216]	@ (800399c <ADC_Enable+0xfc>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e055      	b.n	8003992 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe ffae 	bl	800284c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038f0:	482b      	ldr	r0, [pc, #172]	@ (80039a0 <ADC_Enable+0x100>)
 80038f2:	f7fe fe45 	bl	8002580 <LL_ADC_GetCommonPathInternalCh>
 80038f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d013      	beq.n	8003928 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <ADC_Enable+0x104>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <ADC_Enable+0x108>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800391a:	e002      	b.n	8003922 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3b01      	subs	r3, #1
 8003920:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f9      	bne.n	800391c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003928:	f7fe fdd4 	bl	80024d4 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392e:	e028      	b.n	8003982 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ffb1 	bl	800289c <LL_ADC_IsEnabled>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe ff81 	bl	800284c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800394a:	f7fe fdc3 	bl	80024d4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d914      	bls.n	8003982 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00d      	beq.n	8003982 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d1cf      	bne.n	8003930 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	8000003f 	.word	0x8000003f
 80039a0:	50040300 	.word	0x50040300
 80039a4:	20000044 	.word	0x20000044
 80039a8:	053e2d63 	.word	0x053e2d63

080039ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe ff82 	bl	80028c2 <LL_ADC_IsDisableOngoing>
 80039be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe ff69 	bl	800289c <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d047      	beq.n	8003a60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d144      	bne.n	8003a60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030d 	and.w	r3, r3, #13
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe ff43 	bl	8002874 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2203      	movs	r2, #3
 80039f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f6:	f7fe fd6d 	bl	80024d4 <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fc:	e029      	b.n	8003a52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f043 0210 	orr.w	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e023      	b.n	8003a62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a1a:	f7fe fd5b 	bl	80024d4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d914      	bls.n	8003a52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	f043 0210 	orr.w	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1dc      	bne.n	8003a1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d14b      	bne.n	8003b1c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d021      	beq.n	8003ae2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fde2 	bl	800266c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d032      	beq.n	8003b14 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d12b      	bne.n	8003b14 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11f      	bne.n	8003b14 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ae0:	e018      	b.n	8003b14 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff fa9f 	bl	8003058 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b1a:	e00e      	b.n	8003b3a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff fab3 	bl	8003094 <HAL_ADC_ErrorCallback>
}
 8003b2e:	e004      	b.n	8003b3a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fa8b 	bl	800306c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff fa85 	bl	8003094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <LL_ADC_StartCalibration>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e04d      	b.n	8003ca4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fecb 	bl	80039ac <ADC_Disable>
 8003c16:	4603      	mov	r3, r0
 8003c18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d136      	bne.n	8003c8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff ffa9 	bl	8003b92 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c40:	e014      	b.n	8003c6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003c4e:	d30d      	bcc.n	8003c6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01b      	b.n	8003ca4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ffa7 	bl	8003bc4 <LL_ADC_IsCalibrationOnGoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e2      	bne.n	8003c42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	f023 0303 	bic.w	r3, r3, #3
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c8c:	e005      	b.n	8003c9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	f043 0210 	orr.w	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <__NVIC_SetPriorityGrouping+0x44>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	60d3      	str	r3, [r2, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <__NVIC_GetPriorityGrouping+0x18>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 0307 	and.w	r3, r3, #7
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db0b      	blt.n	8003d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	4907      	ldr	r1, [pc, #28]	@ (8003dac <__NVIC_EnableIRQ+0x38>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e100 	.word	0xe000e100

08003db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db0a      	blt.n	8003dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	490c      	ldr	r1, [pc, #48]	@ (8003dfc <__NVIC_SetPriority+0x4c>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd8:	e00a      	b.n	8003df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4908      	ldr	r1, [pc, #32]	@ (8003e00 <__NVIC_SetPriority+0x50>)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3b04      	subs	r3, #4
 8003de8:	0112      	lsls	r2, r2, #4
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	440b      	add	r3, r1
 8003dee:	761a      	strb	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f1c3 0307 	rsb	r3, r3, #7
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	bf28      	it	cs
 8003e22:	2304      	movcs	r3, #4
 8003e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d902      	bls.n	8003e34 <NVIC_EncodePriority+0x30>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3b03      	subs	r3, #3
 8003e32:	e000      	b.n	8003e36 <NVIC_EncodePriority+0x32>
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	401a      	ands	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	43d9      	mvns	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	4313      	orrs	r3, r2
         );
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	@ 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7c:	d301      	bcc.n	8003e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00f      	b.n	8003ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e82:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <SysTick_Config+0x40>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e8a:	210f      	movs	r1, #15
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	f7ff ff8e 	bl	8003db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <SysTick_Config+0x40>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e9a:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <SysTick_Config+0x40>)
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff29 	bl	8003d10 <__NVIC_SetPriorityGrouping>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed8:	f7ff ff3e 	bl	8003d58 <__NVIC_GetPriorityGrouping>
 8003edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	6978      	ldr	r0, [r7, #20]
 8003ee4:	f7ff ff8e 	bl	8003e04 <NVIC_EncodePriority>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff5d 	bl	8003db0 <__NVIC_SetPriority>
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff31 	bl	8003d74 <__NVIC_EnableIRQ>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffa2 	bl	8003e6c <SysTick_Config>
 8003f28:	4603      	mov	r3, r0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e098      	b.n	8004078 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8004084 <HAL_DMA_Init+0x150>)
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d80f      	bhi.n	8003f72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <HAL_DMA_Init+0x154>)
 8003f5a:	4413      	add	r3, r2
 8003f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800408c <HAL_DMA_Init+0x158>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	009a      	lsls	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a48      	ldr	r2, [pc, #288]	@ (8004090 <HAL_DMA_Init+0x15c>)
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f70:	e00e      	b.n	8003f90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b46      	ldr	r3, [pc, #280]	@ (8004094 <HAL_DMA_Init+0x160>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a43      	ldr	r2, [pc, #268]	@ (800408c <HAL_DMA_Init+0x158>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	091b      	lsrs	r3, r3, #4
 8003f84:	009a      	lsls	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a42      	ldr	r2, [pc, #264]	@ (8004098 <HAL_DMA_Init+0x164>)
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fea:	d039      	beq.n	8004060 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	4a27      	ldr	r2, [pc, #156]	@ (8004090 <HAL_DMA_Init+0x15c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d11a      	bne.n	800402c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ff6:	4b29      	ldr	r3, [pc, #164]	@ (800409c <HAL_DMA_Init+0x168>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f003 031c 	and.w	r3, r3, #28
 8004002:	210f      	movs	r1, #15
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	4924      	ldr	r1, [pc, #144]	@ (800409c <HAL_DMA_Init+0x168>)
 800400c:	4013      	ands	r3, r2
 800400e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004010:	4b22      	ldr	r3, [pc, #136]	@ (800409c <HAL_DMA_Init+0x168>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f003 031c 	and.w	r3, r3, #28
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	491d      	ldr	r1, [pc, #116]	@ (800409c <HAL_DMA_Init+0x168>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
 800402a:	e019      	b.n	8004060 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800402c:	4b1c      	ldr	r3, [pc, #112]	@ (80040a0 <HAL_DMA_Init+0x16c>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f003 031c 	and.w	r3, r3, #28
 8004038:	210f      	movs	r1, #15
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	4917      	ldr	r1, [pc, #92]	@ (80040a0 <HAL_DMA_Init+0x16c>)
 8004042:	4013      	ands	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004046:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <HAL_DMA_Init+0x16c>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f003 031c 	and.w	r3, r3, #28
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	4911      	ldr	r1, [pc, #68]	@ (80040a0 <HAL_DMA_Init+0x16c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40020407 	.word	0x40020407
 8004088:	bffdfff8 	.word	0xbffdfff8
 800408c:	cccccccd 	.word	0xcccccccd
 8004090:	40020000 	.word	0x40020000
 8004094:	bffdfbf8 	.word	0xbffdfbf8
 8004098:	40020400 	.word	0x40020400
 800409c:	400200a8 	.word	0x400200a8
 80040a0:	400204a8 	.word	0x400204a8

080040a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Start_IT+0x20>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e04b      	b.n	800415c <HAL_DMA_Start_IT+0xb8>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d13a      	bne.n	800414e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f8e0 	bl	80042c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 020e 	orr.w	r2, r2, #14
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e00f      	b.n	800413c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0204 	bic.w	r2, r2, #4
 800412a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 020a 	orr.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e005      	b.n	800415a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	f003 031c 	and.w	r3, r3, #28
 8004184:	2204      	movs	r2, #4
 8004186:	409a      	lsls	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d026      	beq.n	80041de <HAL_DMA_IRQHandler+0x7a>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d021      	beq.n	80041de <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	f003 021c 	and.w	r2, r3, #28
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	2104      	movs	r1, #4
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d071      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80041dc:	e06c      	b.n	80042b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f003 031c 	and.w	r3, r3, #28
 80041e6:	2202      	movs	r2, #2
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02e      	beq.n	8004250 <HAL_DMA_IRQHandler+0xec>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d029      	beq.n	8004250 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 020a 	bic.w	r2, r2, #10
 8004218:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f003 021c 	and.w	r2, r3, #28
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2102      	movs	r1, #2
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d038      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800424e:	e033      	b.n	80042b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	f003 031c 	and.w	r3, r3, #28
 8004258:	2208      	movs	r2, #8
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02a      	beq.n	80042ba <HAL_DMA_IRQHandler+0x156>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d025      	beq.n	80042ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 020e 	bic.w	r2, r2, #14
 800427c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
}
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f003 021c 	and.w	r2, r3, #28
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d108      	bne.n	8004306 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004304:	e007      	b.n	8004316 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004332:	e154      	b.n	80045de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	4013      	ands	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8146 	beq.w	80045d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d005      	beq.n	8004364 <HAL_GPIO_Init+0x40>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d130      	bne.n	80043c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800439a:	2201      	movs	r2, #1
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0201 	and.w	r2, r3, #1
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d017      	beq.n	8004402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d123      	bne.n	8004456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	08da      	lsrs	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3208      	adds	r2, #8
 8004416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	08da      	lsrs	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3208      	adds	r2, #8
 8004450:	6939      	ldr	r1, [r7, #16]
 8004452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	2203      	movs	r2, #3
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0203 	and.w	r2, r3, #3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80a0 	beq.w	80045d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004498:	4b58      	ldr	r3, [pc, #352]	@ (80045fc <HAL_GPIO_Init+0x2d8>)
 800449a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449c:	4a57      	ldr	r2, [pc, #348]	@ (80045fc <HAL_GPIO_Init+0x2d8>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80044a4:	4b55      	ldr	r3, [pc, #340]	@ (80045fc <HAL_GPIO_Init+0x2d8>)
 80044a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044b0:	4a53      	ldr	r2, [pc, #332]	@ (8004600 <HAL_GPIO_Init+0x2dc>)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	3302      	adds	r3, #2
 80044b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	220f      	movs	r2, #15
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044da:	d019      	beq.n	8004510 <HAL_GPIO_Init+0x1ec>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a49      	ldr	r2, [pc, #292]	@ (8004604 <HAL_GPIO_Init+0x2e0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_GPIO_Init+0x1e8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a48      	ldr	r2, [pc, #288]	@ (8004608 <HAL_GPIO_Init+0x2e4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00d      	beq.n	8004508 <HAL_GPIO_Init+0x1e4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a47      	ldr	r2, [pc, #284]	@ (800460c <HAL_GPIO_Init+0x2e8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <HAL_GPIO_Init+0x1e0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a46      	ldr	r2, [pc, #280]	@ (8004610 <HAL_GPIO_Init+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_GPIO_Init+0x1dc>
 80044fc:	2304      	movs	r3, #4
 80044fe:	e008      	b.n	8004512 <HAL_GPIO_Init+0x1ee>
 8004500:	2307      	movs	r3, #7
 8004502:	e006      	b.n	8004512 <HAL_GPIO_Init+0x1ee>
 8004504:	2303      	movs	r3, #3
 8004506:	e004      	b.n	8004512 <HAL_GPIO_Init+0x1ee>
 8004508:	2302      	movs	r3, #2
 800450a:	e002      	b.n	8004512 <HAL_GPIO_Init+0x1ee>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_GPIO_Init+0x1ee>
 8004510:	2300      	movs	r3, #0
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f002 0203 	and.w	r2, r2, #3
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	4093      	lsls	r3, r2
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004522:	4937      	ldr	r1, [pc, #220]	@ (8004600 <HAL_GPIO_Init+0x2dc>)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	3302      	adds	r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004530:	4b38      	ldr	r3, [pc, #224]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004554:	4a2f      	ldr	r2, [pc, #188]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800455a:	4b2e      	ldr	r3, [pc, #184]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800457e:	4a25      	ldr	r2, [pc, #148]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004584:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045ae:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045d2:	4a10      	ldr	r2, [pc, #64]	@ (8004614 <HAL_GPIO_Init+0x2f0>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f aea3 	bne.w	8004334 <HAL_GPIO_Init+0x10>
  }
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40021000 	.word	0x40021000
 8004600:	40010000 	.word	0x40010000
 8004604:	48000400 	.word	0x48000400
 8004608:	48000800 	.word	0x48000800
 800460c:	48000c00 	.word	0x48000c00
 8004610:	48001000 	.word	0x48001000
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
 8004624:	4613      	mov	r3, r2
 8004626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004628:	787b      	ldrb	r3, [r7, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004634:	e002      	b.n	800463c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4013      	ands	r3, r2
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	43d9      	mvns	r1, r3
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	400b      	ands	r3, r1
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	619a      	str	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004692:	4a05      	ldr	r2, [pc, #20]	@ (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd faf2 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40010400 	.word	0x40010400

080046ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b0:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40007000 	.word	0x40007000

080046c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d6:	d130      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d038      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2232      	movs	r2, #50	@ 0x32
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0c9b      	lsrs	r3, r3, #18
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800470c:	e002      	b.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3b01      	subs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d102      	bne.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f2      	bne.n	800470e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004728:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004734:	d110      	bne.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00f      	b.n	800475a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800473a:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d007      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004748:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004750:	4a05      	ldr	r2, [pc, #20]	@ (8004768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40007000 	.word	0x40007000
 800476c:	20000044 	.word	0x20000044
 8004770:	431bde83 	.word	0x431bde83

08004774 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f000 bc02 	b.w	8004f8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004788:	4b96      	ldr	r3, [pc, #600]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004792:	4b94      	ldr	r3, [pc, #592]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80e4 	beq.w	8004972 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4c>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	f040 808b 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 8087 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c0:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_OscConfig+0x64>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e3d9      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	4b81      	ldr	r3, [pc, #516]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_RCC_OscConfig+0x7e>
 80047e8:	4b7e      	ldr	r3, [pc, #504]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f0:	e005      	b.n	80047fe <HAL_RCC_OscConfig+0x8a>
 80047f2:	4b7c      	ldr	r3, [pc, #496]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047fe:	4293      	cmp	r3, r2
 8004800:	d223      	bcs.n	800484a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd8c 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e3ba      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004816:	4b73      	ldr	r3, [pc, #460]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a72      	ldr	r2, [pc, #456]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b70      	ldr	r3, [pc, #448]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	496d      	ldr	r1, [pc, #436]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004834:	4b6b      	ldr	r3, [pc, #428]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	4968      	ldr	r1, [pc, #416]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
 8004848:	e025      	b.n	8004896 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b66      	ldr	r3, [pc, #408]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a65      	ldr	r2, [pc, #404]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4960      	ldr	r1, [pc, #384]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b5e      	ldr	r3, [pc, #376]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	495b      	ldr	r1, [pc, #364]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd4c 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e37a      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004896:	f000 fc81 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b51      	ldr	r3, [pc, #324]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4950      	ldr	r1, [pc, #320]	@ (80049e8 <HAL_RCC_OscConfig+0x274>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	4a4e      	ldr	r2, [pc, #312]	@ (80049ec <HAL_RCC_OscConfig+0x278>)
 80048b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b6:	4b4e      	ldr	r3, [pc, #312]	@ (80049f0 <HAL_RCC_OscConfig+0x27c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fdba 	bl	8002434 <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	e35e      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d6:	4b43      	ldr	r3, [pc, #268]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a42      	ldr	r2, [pc, #264]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e2:	f7fd fdf7 	bl	80024d4 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ea:	f7fd fdf3 	bl	80024d4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e347      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fc:	4b39      	ldr	r3, [pc, #228]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800490e:	f043 0308 	orr.w	r3, r3, #8
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4930      	ldr	r1, [pc, #192]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004926:	4b2f      	ldr	r3, [pc, #188]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	492b      	ldr	r1, [pc, #172]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	e01a      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800493c:	4b29      	ldr	r3, [pc, #164]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a28      	ldr	r2, [pc, #160]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004948:	f7fd fdc4 	bl	80024d4 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004950:	f7fd fdc0 	bl	80024d4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e314      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004962:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1dc>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d073      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d005      	beq.n	8004990 <HAL_RCC_OscConfig+0x21c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d10b      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d063      	beq.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d15f      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e2f1      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x24c>
 80049b2:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a0b      	ldr	r2, [pc, #44]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e025      	b.n	8004a0c <HAL_RCC_OscConfig+0x298>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049c8:	d114      	bne.n	80049f4 <HAL_RCC_OscConfig+0x280>
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a05      	ldr	r2, [pc, #20]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCC_OscConfig+0x270>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e013      	b.n	8004a0c <HAL_RCC_OscConfig+0x298>
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800b6b4 	.word	0x0800b6b4
 80049ec:	20000044 	.word	0x20000044
 80049f0:	20000048 	.word	0x20000048
 80049f4:	4ba0      	ldr	r3, [pc, #640]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b9d      	ldr	r3, [pc, #628]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9c      	ldr	r2, [pc, #624]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fd fd5e 	bl	80024d4 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd fd5a 	bl	80024d4 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	@ 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e2ae      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2e:	4b92      	ldr	r3, [pc, #584]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x2a8>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fd4a 	bl	80024d4 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd fd46 	bl	80024d4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e29a      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a56:	4b88      	ldr	r3, [pc, #544]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2d0>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d060      	beq.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x310>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d116      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a84:	4b7c      	ldr	r3, [pc, #496]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x328>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e277      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	4973      	ldr	r1, [pc, #460]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab0:	e040      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d023      	beq.n	8004b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aba:	4b6f      	ldr	r3, [pc, #444]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6e      	ldr	r2, [pc, #440]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fd fd05 	bl	80024d4 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ace:	f7fd fd01 	bl	80024d4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e255      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae0:	4b65      	ldr	r3, [pc, #404]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b62      	ldr	r3, [pc, #392]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	495f      	ldr	r1, [pc, #380]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	e018      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	4b5d      	ldr	r3, [pc, #372]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5c      	ldr	r2, [pc, #368]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fd fce1 	bl	80024d4 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b16:	f7fd fcdd 	bl	80024d4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e231      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b28:	4b53      	ldr	r3, [pc, #332]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03c      	beq.n	8004bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b48:	4b4b      	ldr	r3, [pc, #300]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fcbc 	bl	80024d4 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fd fcb8 	bl	80024d4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e20c      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b72:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ef      	beq.n	8004b60 <HAL_RCC_OscConfig+0x3ec>
 8004b80:	e01b      	b.n	8004bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b82:	4b3d      	ldr	r3, [pc, #244]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b88:	4a3b      	ldr	r2, [pc, #236]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fd fc9f 	bl	80024d4 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fc9b 	bl	80024d4 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e1ef      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bac:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ef      	bne.n	8004b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be4:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d118      	bne.n	8004c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fc62 	bl	80024d4 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fd fc5e 	bl	80024d4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1b2      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c26:	4b15      	ldr	r3, [pc, #84]	@ (8004c7c <HAL_RCC_OscConfig+0x508>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4d8>
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c40:	4a0d      	ldr	r2, [pc, #52]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c4a:	e029      	b.n	8004ca0 <HAL_RCC_OscConfig+0x52c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d115      	bne.n	8004c80 <HAL_RCC_OscConfig+0x50c>
 8004c54:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	4a07      	ldr	r2, [pc, #28]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	4a03      	ldr	r2, [pc, #12]	@ (8004c78 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c74:	e014      	b.n	8004ca0 <HAL_RCC_OscConfig+0x52c>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	4b9a      	ldr	r3, [pc, #616]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c86:	4a99      	ldr	r2, [pc, #612]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c90:	4b96      	ldr	r3, [pc, #600]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c96:	4a95      	ldr	r2, [pc, #596]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d016      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fc14 	bl	80024d4 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd fc10 	bl	80024d4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e162      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc6:	4b89      	ldr	r3, [pc, #548]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ed      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x53c>
 8004cd4:	e015      	b.n	8004d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fbfd 	bl	80024d4 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fd fbf9 	bl	80024d4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e14b      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ed      	bne.n	8004cde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d02:	7ffb      	ldrb	r3, [r7, #31]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d08:	4b78      	ldr	r3, [pc, #480]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0c:	4a77      	ldr	r2, [pc, #476]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d03c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d28:	4b70      	ldr	r3, [pc, #448]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fd fbcc 	bl	80024d4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d40:	f7fd fbc8 	bl	80024d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e11c      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d52:	4b66      	ldr	r3, [pc, #408]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <HAL_RCC_OscConfig+0x5cc>
 8004d60:	e01b      	b.n	8004d9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d62:	4b62      	ldr	r3, [pc, #392]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d68:	4a60      	ldr	r2, [pc, #384]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fbaf 	bl	80024d4 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7a:	f7fd fbab 	bl	80024d4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e0ff      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d8c:	4b57      	ldr	r3, [pc, #348]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ef      	bne.n	8004d7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80f3 	beq.w	8004f8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f040 80c9 	bne.w	8004f40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d12c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d123      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d11b      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d113      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d109      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d06b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d062      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e22:	4b32      	ldr	r3, [pc, #200]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0ac      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e32:	4b2e      	ldr	r3, [pc, #184]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2d      	ldr	r2, [pc, #180]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e3e:	f7fd fb49 	bl	80024d4 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fd fb45 	bl	80024d4 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e099      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f0      	bne.n	8004e46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	4b21      	ldr	r3, [pc, #132]	@ (8004ef0 <HAL_RCC_OscConfig+0x77c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e7e:	0212      	lsls	r2, r2, #8
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e86:	0852      	lsrs	r2, r2, #1
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0552      	lsls	r2, r2, #21
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0652      	lsls	r2, r2, #25
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e9e:	06d2      	lsls	r2, r2, #27
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	4912      	ldr	r1, [pc, #72]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ea8:	4b10      	ldr	r3, [pc, #64]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a0f      	ldr	r2, [pc, #60]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec0:	f7fd fb08 	bl	80024d4 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fd fb04 	bl	80024d4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e058      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	4b04      	ldr	r3, [pc, #16]	@ (8004eec <HAL_RCC_OscConfig+0x778>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ee6:	e050      	b.n	8004f8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e04f      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef4:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d144      	bne.n	8004f8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f00:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a23      	ldr	r2, [pc, #140]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	4b21      	ldr	r3, [pc, #132]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a20      	ldr	r2, [pc, #128]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f18:	f7fd fadc 	bl	80024d4 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd fad8 	bl	80024d4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e02c      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	4b18      	ldr	r3, [pc, #96]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x7ac>
 8004f3e:	e024      	b.n	8004f8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d01f      	beq.n	8004f86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	4b13      	ldr	r3, [pc, #76]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a12      	ldr	r2, [pc, #72]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fd fabf 	bl	80024d4 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd fabb 	bl	80024d4 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e00f      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6c:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	4905      	ldr	r1, [pc, #20]	@ (8004f94 <HAL_RCC_OscConfig+0x820>)
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60cb      	str	r3, [r1, #12]
 8004f84:	e001      	b.n	8004f8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	feeefffc 	.word	0xfeeefffc

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0e7      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b75      	ldr	r3, [pc, #468]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d910      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b72      	ldr	r3, [pc, #456]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	4970      	ldr	r1, [pc, #448]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b6e      	ldr	r3, [pc, #440]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0cf      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	4b66      	ldr	r3, [pc, #408]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d908      	bls.n	800500e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b63      	ldr	r3, [pc, #396]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4960      	ldr	r1, [pc, #384]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d04c      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005022:	4b5a      	ldr	r3, [pc, #360]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d121      	bne.n	8005072 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0a6      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503a:	4b54      	ldr	r3, [pc, #336]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d115      	bne.n	8005072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e09a      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005052:	4b4e      	ldr	r3, [pc, #312]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e08e      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005062:	4b4a      	ldr	r3, [pc, #296]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e086      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005072:	4b46      	ldr	r3, [pc, #280]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 0203 	bic.w	r2, r3, #3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4943      	ldr	r1, [pc, #268]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fd fa26 	bl	80024d4 <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fd fa22 	bl	80024d4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e06e      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	4b3a      	ldr	r3, [pc, #232]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 020c 	and.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1eb      	bne.n	800508c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	4b31      	ldr	r3, [pc, #196]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d208      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d0:	4b2e      	ldr	r3, [pc, #184]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	492b      	ldr	r1, [pc, #172]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e2:	4b29      	ldr	r3, [pc, #164]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d210      	bcs.n	8005112 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f0:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 0207 	bic.w	r2, r3, #7
 80050f8:	4923      	ldr	r1, [pc, #140]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005100:	4b21      	ldr	r3, [pc, #132]	@ (8005188 <HAL_RCC_ClockConfig+0x1ec>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d001      	beq.n	8005112 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e036      	b.n	8005180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800511e:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	4918      	ldr	r1, [pc, #96]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513c:	4b13      	ldr	r3, [pc, #76]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4910      	ldr	r1, [pc, #64]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005150:	f000 f824 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <HAL_RCC_ClockConfig+0x1f0>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	490b      	ldr	r1, [pc, #44]	@ (8005190 <HAL_RCC_ClockConfig+0x1f4>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	4a09      	ldr	r2, [pc, #36]	@ (8005194 <HAL_RCC_ClockConfig+0x1f8>)
 800516e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005170:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <HAL_RCC_ClockConfig+0x1fc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd f95d 	bl	8002434 <HAL_InitTick>
 800517a:	4603      	mov	r3, r0
 800517c:	72fb      	strb	r3, [r7, #11]

  return status;
 800517e:	7afb      	ldrb	r3, [r7, #11]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40022000 	.word	0x40022000
 800518c:	40021000 	.word	0x40021000
 8005190:	0800b6b4 	.word	0x0800b6b4
 8005194:	20000044 	.word	0x20000044
 8005198:	20000048 	.word	0x20000048

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b480      	push	{r7}
 800519e:	b089      	sub	sp, #36	@ 0x24
 80051a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051aa:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051b4:	4b3b      	ldr	r3, [pc, #236]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d121      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d11e      	bne.n	800520e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051d0:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051dc:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	e005      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051ec:	4b2d      	ldr	r3, [pc, #180]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051f8:	4a2b      	ldr	r2, [pc, #172]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d102      	bne.n	800521a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005214:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e004      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d101      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005220:	4b23      	ldr	r3, [pc, #140]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005222:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d134      	bne.n	8005294 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800522a:	4b1e      	ldr	r3, [pc, #120]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_GetSysClockFreq+0xa6>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d003      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0xac>
 8005240:	e005      	b.n	800524e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005242:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005244:	617b      	str	r3, [r7, #20]
      break;
 8005246:	e005      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800524a:	617b      	str	r3, [r7, #20]
      break;
 800524c:	e002      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	617b      	str	r3, [r7, #20]
      break;
 8005252:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005254:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	3301      	adds	r3, #1
 8005260:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005262:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	fb03 f202 	mul.w	r2, r3, r2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800527a:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	0e5b      	lsrs	r3, r3, #25
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005294:	69bb      	ldr	r3, [r7, #24]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3724      	adds	r7, #36	@ 0x24
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	0800b6cc 	.word	0x0800b6cc
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	007a1200 	.word	0x007a1200

080052b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000044 	.word	0x20000044

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4904      	ldr	r1, [pc, #16]	@ (80052f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	0800b6c4 	.word	0x0800b6c4

080052f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052fc:	f7ff ffda 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0adb      	lsrs	r3, r3, #11
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4904      	ldr	r1, [pc, #16]	@ (8005320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800b6c4 	.word	0x0800b6c4

08005324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005330:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800533c:	f7ff f9b6 	bl	80046ac <HAL_PWREx_GetVoltageRange>
 8005340:	6178      	str	r0, [r7, #20]
 8005342:	e014      	b.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	4a24      	ldr	r2, [pc, #144]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800535c:	f7ff f9a6 	bl	80046ac <HAL_PWREx_GetVoltageRange>
 8005360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005366:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005374:	d10b      	bne.n	800538e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d919      	bls.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005380:	d902      	bls.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005382:	2302      	movs	r3, #2
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e013      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005388:	2301      	movs	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e010      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b80      	cmp	r3, #128	@ 0x80
 8005392:	d902      	bls.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005394:	2303      	movs	r3, #3
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e00a      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b80      	cmp	r3, #128	@ 0x80
 800539e:	d102      	bne.n	80053a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a0:	2302      	movs	r3, #2
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	e004      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b70      	cmp	r3, #112	@ 0x70
 80053aa:	d101      	bne.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053ac:	2301      	movs	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 0207 	bic.w	r2, r3, #7
 80053b8:	4909      	ldr	r1, [pc, #36]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d001      	beq.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40022000 	.word	0x40022000

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d031      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005404:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005408:	d01a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800540a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800540e:	d814      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005414:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005418:	d10f      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800541a:	4b5d      	ldr	r3, [pc, #372]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4a5c      	ldr	r2, [pc, #368]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005424:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005426:	e00c      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fa44 	bl	80058bc <RCCEx_PLLSAI1_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005438:	e003      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	74fb      	strb	r3, [r7, #19]
      break;
 800543e:	e000      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005448:	4b51      	ldr	r3, [pc, #324]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005456:	494e      	ldr	r1, [pc, #312]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800545e:	e001      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 809e 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005476:	4b46      	ldr	r3, [pc, #280]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	4b40      	ldr	r3, [pc, #256]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	4a3f      	ldr	r2, [pc, #252]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005496:	6593      	str	r3, [r2, #88]	@ 0x58
 8005498:	4b3d      	ldr	r3, [pc, #244]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a4:	2301      	movs	r3, #1
 80054a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a39      	ldr	r2, [pc, #228]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b4:	f7fd f80e 	bl	80024d4 <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ba:	e009      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fd f80a 	bl	80024d4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d902      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	74fb      	strb	r3, [r7, #19]
        break;
 80054ce:	e005      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054d0:	4b30      	ldr	r3, [pc, #192]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ef      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d15a      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d019      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054fe:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005508:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800550a:	4b21      	ldr	r3, [pc, #132]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005510:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800551a:	4b1d      	ldr	r3, [pc, #116]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005520:	4a1b      	ldr	r2, [pc, #108]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800552a:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d016      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fc ffca 	bl	80024d4 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005542:	e00b      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fc ffc6 	bl	80024d4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d902      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	74fb      	strb	r3, [r7, #19]
            break;
 800555a:	e006      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ec      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005570:	4b07      	ldr	r3, [pc, #28]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005576:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800557e:	4904      	ldr	r1, [pc, #16]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005586:	e009      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559c:	7c7b      	ldrb	r3, [r7, #17]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a2:	4b9e      	ldr	r3, [pc, #632]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	4a9d      	ldr	r2, [pc, #628]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ba:	4b98      	ldr	r3, [pc, #608]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f023 0203 	bic.w	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	4994      	ldr	r1, [pc, #592]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055dc:	4b8f      	ldr	r3, [pc, #572]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	f023 020c 	bic.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	498c      	ldr	r1, [pc, #560]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055fe:	4b87      	ldr	r3, [pc, #540]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	4983      	ldr	r1, [pc, #524]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005620:	4b7e      	ldr	r3, [pc, #504]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	497b      	ldr	r1, [pc, #492]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005642:	4b76      	ldr	r3, [pc, #472]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005648:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	4972      	ldr	r1, [pc, #456]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005664:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	496a      	ldr	r1, [pc, #424]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005686:	4b65      	ldr	r3, [pc, #404]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005694:	4961      	ldr	r1, [pc, #388]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a8:	4b5c      	ldr	r3, [pc, #368]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b6:	4959      	ldr	r1, [pc, #356]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ca:	4b54      	ldr	r3, [pc, #336]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	4950      	ldr	r1, [pc, #320]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ec:	4b4b      	ldr	r3, [pc, #300]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	4948      	ldr	r1, [pc, #288]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800570e:	4b43      	ldr	r3, [pc, #268]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005714:	f023 0203 	bic.w	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	493f      	ldr	r1, [pc, #252]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d028      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005730:	4b3a      	ldr	r3, [pc, #232]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005736:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573e:	4937      	ldr	r1, [pc, #220]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800574e:	d106      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b32      	ldr	r3, [pc, #200]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a31      	ldr	r2, [pc, #196]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
 800575c:	e011      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005762:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005766:	d10c      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f8a4 	bl	80058bc <RCCEx_PLLSAI1_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d028      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800578e:	4b23      	ldr	r3, [pc, #140]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	491f      	ldr	r1, [pc, #124]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ac:	d106      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ae:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b8:	60d3      	str	r3, [r2, #12]
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	2101      	movs	r1, #1
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f875 	bl	80058bc <RCCEx_PLLSAI1_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fa:	4908      	ldr	r1, [pc, #32]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580c:	4b03      	ldr	r3, [pc, #12]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a02      	ldr	r2, [pc, #8]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005816:	60d3      	str	r3, [r2, #12]
 8005818:	e014      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f843 	bl	80058bc <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01c      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585e:	4916      	ldr	r1, [pc, #88]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800586e:	d10c      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f820 	bl	80058bc <RCCEx_PLLSAI1_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005896:	4b08      	ldr	r3, [pc, #32]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a4:	4904      	ldr	r1, [pc, #16]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000

080058bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ca:	4b74      	ldr	r3, [pc, #464]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d018      	beq.n	8005908 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058d6:	4b71      	ldr	r3, [pc, #452]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0203 	and.w	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d10d      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
       ||
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058ee:	4b6b      	ldr	r3, [pc, #428]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
       ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d047      	beq.n	8005992 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
 8005906:	e044      	b.n	8005992 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d018      	beq.n	8005942 <RCCEx_PLLSAI1_Config+0x86>
 8005910:	2b03      	cmp	r3, #3
 8005912:	d825      	bhi.n	8005960 <RCCEx_PLLSAI1_Config+0xa4>
 8005914:	2b01      	cmp	r3, #1
 8005916:	d002      	beq.n	800591e <RCCEx_PLLSAI1_Config+0x62>
 8005918:	2b02      	cmp	r3, #2
 800591a:	d009      	beq.n	8005930 <RCCEx_PLLSAI1_Config+0x74>
 800591c:	e020      	b.n	8005960 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800591e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11d      	bne.n	8005966 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592e:	e01a      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005930:	4b5a      	ldr	r3, [pc, #360]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d116      	bne.n	800596a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005940:	e013      	b.n	800596a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005942:	4b56      	ldr	r3, [pc, #344]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10f      	bne.n	800596e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800594e:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800595e:	e006      	b.n	800596e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
      break;
 8005964:	e004      	b.n	8005970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005966:	bf00      	nop
 8005968:	e002      	b.n	8005970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800596e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10d      	bne.n	8005992 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005976:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	3b01      	subs	r3, #1
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	430b      	orrs	r3, r1
 800598c:	4943      	ldr	r1, [pc, #268]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d17c      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005998:	4b40      	ldr	r3, [pc, #256]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800599e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a4:	f7fc fd96 	bl	80024d4 <HAL_GetTick>
 80059a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059aa:	e009      	b.n	80059c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ac:	f7fc fd92 	bl	80024d4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d902      	bls.n	80059c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	73fb      	strb	r3, [r7, #15]
        break;
 80059be:	e005      	b.n	80059cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ef      	bne.n	80059ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d15f      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d110      	bne.n	80059fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d8:	4b30      	ldr	r3, [pc, #192]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80059e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6892      	ldr	r2, [r2, #8]
 80059e8:	0211      	lsls	r1, r2, #8
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68d2      	ldr	r2, [r2, #12]
 80059ee:	06d2      	lsls	r2, r2, #27
 80059f0:	430a      	orrs	r2, r1
 80059f2:	492a      	ldr	r1, [pc, #168]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
 80059f8:	e027      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d112      	bne.n	8005a26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a00:	4b26      	ldr	r3, [pc, #152]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6892      	ldr	r2, [r2, #8]
 8005a10:	0211      	lsls	r1, r2, #8
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6912      	ldr	r2, [r2, #16]
 8005a16:	0852      	lsrs	r2, r2, #1
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0552      	lsls	r2, r2, #21
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	491f      	ldr	r1, [pc, #124]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
 8005a24:	e011      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a26:	4b1d      	ldr	r3, [pc, #116]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6892      	ldr	r2, [r2, #8]
 8005a36:	0211      	lsls	r1, r2, #8
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6952      	ldr	r2, [r2, #20]
 8005a3c:	0852      	lsrs	r2, r2, #1
 8005a3e:	3a01      	subs	r2, #1
 8005a40:	0652      	lsls	r2, r2, #25
 8005a42:	430a      	orrs	r2, r1
 8005a44:	4915      	ldr	r1, [pc, #84]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a4a:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fc fd3d 	bl	80024d4 <HAL_GetTick>
 8005a5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a5c:	e009      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a5e:	f7fc fd39 	bl	80024d4 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d902      	bls.n	8005a72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a70:	e005      	b.n	8005a7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ef      	beq.n	8005a5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e049      	b.n	8005b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc fb2e 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fade 	bl	80060a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e038      	b.n	8005bda <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1c      	ldr	r2, [pc, #112]	@ (8005be8 <HAL_TIM_Base_Start+0x98>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <HAL_TIM_Base_Start+0x48>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b82:	d009      	beq.n	8005b98 <HAL_TIM_Base_Start+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <HAL_TIM_Base_Start+0x9c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIM_Base_Start+0x48>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <HAL_TIM_Base_Start+0xa0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d115      	bne.n	8005bc4 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <HAL_TIM_Base_Start+0xa4>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b06      	cmp	r3, #6
 8005ba8:	d015      	beq.n	8005bd6 <HAL_TIM_Base_Start+0x86>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb0:	d011      	beq.n	8005bd6 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0201 	orr.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc2:	e008      	b.n	8005bd6 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	00010007 	.word	0x00010007

08005bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e040      	b.n	8005c92 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xa8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a18      	ldr	r2, [pc, #96]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xac>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d115      	bne.n	8005c7c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <HAL_TIM_Base_Start_IT+0xb4>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d015      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x96>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d011      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e000      	b.n	8005c90 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	00010007 	.word	0x00010007

08005cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d020      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01b      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0202 	mvn.w	r2, #2
 8005ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9b2 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f9a4 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f9b5 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d020      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0204 	mvn.w	r2, #4
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f98c 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f97e 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f98f 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d020      	beq.n	8005dac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0208 	mvn.w	r2, #8
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f966 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f958 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f969 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d020      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0210 	mvn.w	r2, #16
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f940 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f932 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f943 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00c      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0201 	mvn.w	r2, #1
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fef4 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fab7 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 faaf 	bl	80063cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f8fd 	bl	800608c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0220 	mvn.w	r2, #32
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa77 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_ConfigClockSource+0x1c>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0b6      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x18a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005efc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f16:	d03e      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0xd8>
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1c:	f200 8087 	bhi.w	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f24:	f000 8086 	beq.w	8006034 <HAL_TIM_ConfigClockSource+0x176>
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2c:	d87f      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f2e:	2b70      	cmp	r3, #112	@ 0x70
 8005f30:	d01a      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0xaa>
 8005f32:	2b70      	cmp	r3, #112	@ 0x70
 8005f34:	d87b      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f36:	2b60      	cmp	r3, #96	@ 0x60
 8005f38:	d050      	beq.n	8005fdc <HAL_TIM_ConfigClockSource+0x11e>
 8005f3a:	2b60      	cmp	r3, #96	@ 0x60
 8005f3c:	d877      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f3e:	2b50      	cmp	r3, #80	@ 0x50
 8005f40:	d03c      	beq.n	8005fbc <HAL_TIM_ConfigClockSource+0xfe>
 8005f42:	2b50      	cmp	r3, #80	@ 0x50
 8005f44:	d873      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d058      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0x13e>
 8005f4a:	2b40      	cmp	r3, #64	@ 0x40
 8005f4c:	d86f      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f4e:	2b30      	cmp	r3, #48	@ 0x30
 8005f50:	d064      	beq.n	800601c <HAL_TIM_ConfigClockSource+0x15e>
 8005f52:	2b30      	cmp	r3, #48	@ 0x30
 8005f54:	d86b      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d060      	beq.n	800601c <HAL_TIM_ConfigClockSource+0x15e>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	d867      	bhi.n	800602e <HAL_TIM_ConfigClockSource+0x170>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d05c      	beq.n	800601c <HAL_TIM_ConfigClockSource+0x15e>
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d05a      	beq.n	800601c <HAL_TIM_ConfigClockSource+0x15e>
 8005f66:	e062      	b.n	800602e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f78:	f000 f986 	bl	8006288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	609a      	str	r2, [r3, #8]
      break;
 8005f94:	e04f      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	f000 f96f 	bl	8006288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fb8:	609a      	str	r2, [r3, #8]
      break;
 8005fba:	e03c      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f000 f8e3 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2150      	movs	r1, #80	@ 0x50
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f93c 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005fda:	e02c      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f000 f902 	bl	80061f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2160      	movs	r1, #96	@ 0x60
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f92c 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 8005ffa:	e01c      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006008:	461a      	mov	r2, r3
 800600a:	f000 f8c3 	bl	8006194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2140      	movs	r1, #64	@ 0x40
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f91c 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 800601a:	e00c      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f000 f913 	bl	8006252 <TIM_ITRx_SetConfig>
      break;
 800602c:	e003      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
      break;
 8006032:	e000      	b.n	8006036 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a34      	ldr	r2, [pc, #208]	@ (8006184 <TIM_Base_SetConfig+0xe4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x28>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x28>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a31      	ldr	r2, [pc, #196]	@ (8006188 <TIM_Base_SetConfig+0xe8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a29      	ldr	r2, [pc, #164]	@ (8006184 <TIM_Base_SetConfig+0xe4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00f      	beq.n	8006102 <TIM_Base_SetConfig+0x62>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0x62>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a26      	ldr	r2, [pc, #152]	@ (8006188 <TIM_Base_SetConfig+0xe8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0x62>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a25      	ldr	r2, [pc, #148]	@ (800618c <TIM_Base_SetConfig+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0x62>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a24      	ldr	r2, [pc, #144]	@ (8006190 <TIM_Base_SetConfig+0xf0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a12      	ldr	r2, [pc, #72]	@ (8006184 <TIM_Base_SetConfig+0xe4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a12      	ldr	r2, [pc, #72]	@ (800618c <TIM_Base_SetConfig+0xec>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0xb0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a11      	ldr	r2, [pc, #68]	@ (8006190 <TIM_Base_SetConfig+0xf0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d103      	bne.n	8006158 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d105      	bne.n	8006176 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]
  }
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400

08006194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 030a 	bic.w	r3, r3, #10
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f023 0210 	bic.w	r2, r3, #16
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800621c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800622e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	f043 0307 	orr.w	r3, r3, #7
 8006274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	609a      	str	r2, [r3, #8]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062dc:	2302      	movs	r3, #2
 80062de:	e054      	b.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a24      	ldr	r2, [pc, #144]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006310:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006348:	d009      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a13      	ldr	r2, [pc, #76]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a11      	ldr	r2, [pc, #68]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d10c      	bne.n	8006378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4313      	orrs	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40000400 	.word	0x40000400
 80063a0:	40014000 	.word	0x40014000

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e040      	b.n	8006474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fb ff2a 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2224      	movs	r2, #36	@ 0x24
 800640c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb38 	bl	8006a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f8af 	bl	8006590 <UART_SetConfig>
 8006432:	4603      	mov	r3, r0
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e01b      	b.n	8006474 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800644a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800645a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbb7 	bl	8006be0 <UART_CheckIdleState>
 8006472:	4603      	mov	r3, r0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006490:	2b20      	cmp	r3, #32
 8006492:	d177      	bne.n	8006584 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_UART_Transmit+0x24>
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e070      	b.n	8006586 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	@ 0x21
 80064b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b2:	f7fc f80f 	bl	80024d4 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d0:	d108      	bne.n	80064e4 <HAL_UART_Transmit+0x68>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064ec:	e02f      	b.n	800654e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2180      	movs	r1, #128	@ 0x80
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 fc19 	bl	8006d30 <UART_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e03b      	b.n	8006586 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006520:	b292      	uxth	r2, r2
 8006522:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3302      	adds	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e007      	b.n	800653c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3301      	adds	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1c9      	bne.n	80064ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2140      	movs	r1, #64	@ 0x40
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fbe3 	bl	8006d30 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e005      	b.n	8006586 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006594:	b08a      	sub	sp, #40	@ 0x28
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4ba5      	ldr	r3, [pc, #660]	@ (8006854 <UART_SetConfig+0x2c4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006858 <UART_SetConfig+0x2c8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f8:	4313      	orrs	r3, r2
 80065fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a91      	ldr	r2, [pc, #580]	@ (800685c <UART_SetConfig+0x2cc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d126      	bne.n	8006668 <UART_SetConfig+0xd8>
 800661a:	4b91      	ldr	r3, [pc, #580]	@ (8006860 <UART_SetConfig+0x2d0>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d81b      	bhi.n	8006660 <UART_SetConfig+0xd0>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0xa0>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006641 	.word	0x08006641
 8006634:	08006651 	.word	0x08006651
 8006638:	08006649 	.word	0x08006649
 800663c:	08006659 	.word	0x08006659
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e0d6      	b.n	80067f6 <UART_SetConfig+0x266>
 8006648:	2302      	movs	r3, #2
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e0d2      	b.n	80067f6 <UART_SetConfig+0x266>
 8006650:	2304      	movs	r3, #4
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e0ce      	b.n	80067f6 <UART_SetConfig+0x266>
 8006658:	2308      	movs	r3, #8
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e0ca      	b.n	80067f6 <UART_SetConfig+0x266>
 8006660:	2310      	movs	r3, #16
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006666:	e0c6      	b.n	80067f6 <UART_SetConfig+0x266>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a7d      	ldr	r2, [pc, #500]	@ (8006864 <UART_SetConfig+0x2d4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d138      	bne.n	80066e4 <UART_SetConfig+0x154>
 8006672:	4b7b      	ldr	r3, [pc, #492]	@ (8006860 <UART_SetConfig+0x2d0>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d82d      	bhi.n	80066dc <UART_SetConfig+0x14c>
 8006680:	a201      	add	r2, pc, #4	@ (adr r2, 8006688 <UART_SetConfig+0xf8>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066bd 	.word	0x080066bd
 800668c:	080066dd 	.word	0x080066dd
 8006690:	080066dd 	.word	0x080066dd
 8006694:	080066dd 	.word	0x080066dd
 8006698:	080066cd 	.word	0x080066cd
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066dd 	.word	0x080066dd
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	080066dd 	.word	0x080066dd
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e098      	b.n	80067f6 <UART_SetConfig+0x266>
 80066c4:	2302      	movs	r3, #2
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e094      	b.n	80067f6 <UART_SetConfig+0x266>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e090      	b.n	80067f6 <UART_SetConfig+0x266>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066da:	e08c      	b.n	80067f6 <UART_SetConfig+0x266>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e088      	b.n	80067f6 <UART_SetConfig+0x266>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006868 <UART_SetConfig+0x2d8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d125      	bne.n	800673a <UART_SetConfig+0x1aa>
 80066ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006860 <UART_SetConfig+0x2d0>)
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066f8:	2b30      	cmp	r3, #48	@ 0x30
 80066fa:	d016      	beq.n	800672a <UART_SetConfig+0x19a>
 80066fc:	2b30      	cmp	r3, #48	@ 0x30
 80066fe:	d818      	bhi.n	8006732 <UART_SetConfig+0x1a2>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d00a      	beq.n	800671a <UART_SetConfig+0x18a>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d814      	bhi.n	8006732 <UART_SetConfig+0x1a2>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <UART_SetConfig+0x182>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d008      	beq.n	8006722 <UART_SetConfig+0x192>
 8006710:	e00f      	b.n	8006732 <UART_SetConfig+0x1a2>
 8006712:	2300      	movs	r3, #0
 8006714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006718:	e06d      	b.n	80067f6 <UART_SetConfig+0x266>
 800671a:	2302      	movs	r3, #2
 800671c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006720:	e069      	b.n	80067f6 <UART_SetConfig+0x266>
 8006722:	2304      	movs	r3, #4
 8006724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006728:	e065      	b.n	80067f6 <UART_SetConfig+0x266>
 800672a:	2308      	movs	r3, #8
 800672c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006730:	e061      	b.n	80067f6 <UART_SetConfig+0x266>
 8006732:	2310      	movs	r3, #16
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006738:	e05d      	b.n	80067f6 <UART_SetConfig+0x266>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4b      	ldr	r2, [pc, #300]	@ (800686c <UART_SetConfig+0x2dc>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d125      	bne.n	8006790 <UART_SetConfig+0x200>
 8006744:	4b46      	ldr	r3, [pc, #280]	@ (8006860 <UART_SetConfig+0x2d0>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800674e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006750:	d016      	beq.n	8006780 <UART_SetConfig+0x1f0>
 8006752:	2bc0      	cmp	r3, #192	@ 0xc0
 8006754:	d818      	bhi.n	8006788 <UART_SetConfig+0x1f8>
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d00a      	beq.n	8006770 <UART_SetConfig+0x1e0>
 800675a:	2b80      	cmp	r3, #128	@ 0x80
 800675c:	d814      	bhi.n	8006788 <UART_SetConfig+0x1f8>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <UART_SetConfig+0x1d8>
 8006762:	2b40      	cmp	r3, #64	@ 0x40
 8006764:	d008      	beq.n	8006778 <UART_SetConfig+0x1e8>
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x1f8>
 8006768:	2300      	movs	r3, #0
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676e:	e042      	b.n	80067f6 <UART_SetConfig+0x266>
 8006770:	2302      	movs	r3, #2
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006776:	e03e      	b.n	80067f6 <UART_SetConfig+0x266>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677e:	e03a      	b.n	80067f6 <UART_SetConfig+0x266>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006786:	e036      	b.n	80067f6 <UART_SetConfig+0x266>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e032      	b.n	80067f6 <UART_SetConfig+0x266>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a30      	ldr	r2, [pc, #192]	@ (8006858 <UART_SetConfig+0x2c8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d12a      	bne.n	80067f0 <UART_SetConfig+0x260>
 800679a:	4b31      	ldr	r3, [pc, #196]	@ (8006860 <UART_SetConfig+0x2d0>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a8:	d01a      	beq.n	80067e0 <UART_SetConfig+0x250>
 80067aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ae:	d81b      	bhi.n	80067e8 <UART_SetConfig+0x258>
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b4:	d00c      	beq.n	80067d0 <UART_SetConfig+0x240>
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ba:	d815      	bhi.n	80067e8 <UART_SetConfig+0x258>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <UART_SetConfig+0x238>
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0x248>
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x258>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ce:	e012      	b.n	80067f6 <UART_SetConfig+0x266>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e00e      	b.n	80067f6 <UART_SetConfig+0x266>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e00a      	b.n	80067f6 <UART_SetConfig+0x266>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e006      	b.n	80067f6 <UART_SetConfig+0x266>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e002      	b.n	80067f6 <UART_SetConfig+0x266>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a17      	ldr	r2, [pc, #92]	@ (8006858 <UART_SetConfig+0x2c8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	f040 808b 	bne.w	8006918 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006802:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006806:	2b08      	cmp	r3, #8
 8006808:	d834      	bhi.n	8006874 <UART_SetConfig+0x2e4>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <UART_SetConfig+0x280>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006835 	.word	0x08006835
 8006814:	08006875 	.word	0x08006875
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006875 	.word	0x08006875
 8006820:	08006843 	.word	0x08006843
 8006824:	08006875 	.word	0x08006875
 8006828:	08006875 	.word	0x08006875
 800682c:	08006875 	.word	0x08006875
 8006830:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe fd4a 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006838:	61f8      	str	r0, [r7, #28]
        break;
 800683a:	e021      	b.n	8006880 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <UART_SetConfig+0x2e0>)
 800683e:	61fb      	str	r3, [r7, #28]
        break;
 8006840:	e01e      	b.n	8006880 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe fcab 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8006846:	61f8      	str	r0, [r7, #28]
        break;
 8006848:	e01a      	b.n	8006880 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684e:	61fb      	str	r3, [r7, #28]
        break;
 8006850:	e016      	b.n	8006880 <UART_SetConfig+0x2f0>
 8006852:	bf00      	nop
 8006854:	efff69f3 	.word	0xefff69f3
 8006858:	40008000 	.word	0x40008000
 800685c:	40013800 	.word	0x40013800
 8006860:	40021000 	.word	0x40021000
 8006864:	40004400 	.word	0x40004400
 8006868:	40004800 	.word	0x40004800
 800686c:	40004c00 	.word	0x40004c00
 8006870:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800687e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80fa 	beq.w	8006a7c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	4413      	add	r3, r2
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	429a      	cmp	r2, r3
 8006896:	d305      	bcc.n	80068a4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d903      	bls.n	80068ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068aa:	e0e7      	b.n	8006a7c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2200      	movs	r2, #0
 80068b0:	461c      	mov	r4, r3
 80068b2:	4615      	mov	r5, r2
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	022b      	lsls	r3, r5, #8
 80068be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068c2:	0222      	lsls	r2, r4, #8
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	6849      	ldr	r1, [r1, #4]
 80068c8:	0849      	lsrs	r1, r1, #1
 80068ca:	2000      	movs	r0, #0
 80068cc:	4688      	mov	r8, r1
 80068ce:	4681      	mov	r9, r0
 80068d0:	eb12 0a08 	adds.w	sl, r2, r8
 80068d4:	eb43 0b09 	adc.w	fp, r3, r9
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e6:	4650      	mov	r0, sl
 80068e8:	4659      	mov	r1, fp
 80068ea:	f7fa f9d5 	bl	8000c98 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4613      	mov	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068fc:	d308      	bcc.n	8006910 <UART_SetConfig+0x380>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006904:	d204      	bcs.n	8006910 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	60da      	str	r2, [r3, #12]
 800690e:	e0b5      	b.n	8006a7c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006916:	e0b1      	b.n	8006a7c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006920:	d15d      	bne.n	80069de <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006922:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006926:	2b08      	cmp	r3, #8
 8006928:	d827      	bhi.n	800697a <UART_SetConfig+0x3ea>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <UART_SetConfig+0x3a0>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	0800697b 	.word	0x0800697b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800697b 	.word	0x0800697b
 8006948:	0800697b 	.word	0x0800697b
 800694c:	0800697b 	.word	0x0800697b
 8006950:	08006973 	.word	0x08006973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fe fcba 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006958:	61f8      	str	r0, [r7, #28]
        break;
 800695a:	e014      	b.n	8006986 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fe fccc 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006960:	61f8      	str	r0, [r7, #28]
        break;
 8006962:	e010      	b.n	8006986 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006964:	4b4c      	ldr	r3, [pc, #304]	@ (8006a98 <UART_SetConfig+0x508>)
 8006966:	61fb      	str	r3, [r7, #28]
        break;
 8006968:	e00d      	b.n	8006986 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696a:	f7fe fc17 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800696e:	61f8      	str	r0, [r7, #28]
        break;
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006976:	61fb      	str	r3, [r7, #28]
        break;
 8006978:	e005      	b.n	8006986 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d077      	beq.n	8006a7c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	005a      	lsls	r2, r3, #1
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	441a      	add	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d916      	bls.n	80069d6 <UART_SetConfig+0x446>
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ae:	d212      	bcs.n	80069d6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f023 030f 	bic.w	r3, r3, #15
 80069b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	8afb      	ldrh	r3, [r7, #22]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	8afa      	ldrh	r2, [r7, #22]
 80069d2:	60da      	str	r2, [r3, #12]
 80069d4:	e052      	b.n	8006a7c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069dc:	e04e      	b.n	8006a7c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d827      	bhi.n	8006a36 <UART_SetConfig+0x4a6>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <UART_SetConfig+0x45c>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	08006a37 	.word	0x08006a37
 80069fc:	08006a27 	.word	0x08006a27
 8006a00:	08006a37 	.word	0x08006a37
 8006a04:	08006a37 	.word	0x08006a37
 8006a08:	08006a37 	.word	0x08006a37
 8006a0c:	08006a2f 	.word	0x08006a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a10:	f7fe fc5c 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006a14:	61f8      	str	r0, [r7, #28]
        break;
 8006a16:	e014      	b.n	8006a42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a18:	f7fe fc6e 	bl	80052f8 <HAL_RCC_GetPCLK2Freq>
 8006a1c:	61f8      	str	r0, [r7, #28]
        break;
 8006a1e:	e010      	b.n	8006a42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	@ (8006a98 <UART_SetConfig+0x508>)
 8006a22:	61fb      	str	r3, [r7, #28]
        break;
 8006a24:	e00d      	b.n	8006a42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a26:	f7fe fbb9 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8006a2a:	61f8      	str	r0, [r7, #28]
        break;
 8006a2c:	e009      	b.n	8006a42 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a32:	61fb      	str	r3, [r7, #28]
        break;
 8006a34:	e005      	b.n	8006a42 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a40:	bf00      	nop
    }

    if (pclk != 0U)
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d019      	beq.n	8006a7c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	085a      	lsrs	r2, r3, #1
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	441a      	add	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d909      	bls.n	8006a76 <UART_SetConfig+0x4e6>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d205      	bcs.n	8006a76 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e002      	b.n	8006a7c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3728      	adds	r7, #40	@ 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a96:	bf00      	nop
 8006a98:	00f42400 	.word	0x00f42400

08006a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9a:	d10a      	bne.n	8006bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b098      	sub	sp, #96	@ 0x60
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bf0:	f7fb fc70 	bl	80024d4 <HAL_GetTick>
 8006bf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d12e      	bne.n	8006c62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f88c 	bl	8006d30 <UART_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d021      	beq.n	8006c62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e062      	b.n	8006d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d149      	bne.n	8006d04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f856 	bl	8006d30 <UART_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03c      	beq.n	8006d04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	623b      	str	r3, [r7, #32]
   return(result);
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cdc:	61fa      	str	r2, [r7, #28]
 8006cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	69b9      	ldr	r1, [r7, #24]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e5      	bne.n	8006cbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e011      	b.n	8006d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3758      	adds	r7, #88	@ 0x58
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d40:	e04f      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d04b      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4a:	f7fb fbc3 	bl	80024d4 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d302      	bcc.n	8006d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e04e      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d037      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b80      	cmp	r3, #128	@ 0x80
 8006d76:	d034      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b40      	cmp	r3, #64	@ 0x40
 8006d7c:	d031      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d110      	bne.n	8006dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2208      	movs	r2, #8
 8006d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f838 	bl	8006e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e029      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dbc:	d111      	bne.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f81e 	bl	8006e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e00f      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	bf0c      	ite	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	2300      	movne	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d0a0      	beq.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b095      	sub	sp, #84	@ 0x54
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d118      	bne.n	8006eb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ec6:	bf00      	nop
 8006ec8:	3754      	adds	r7, #84	@ 0x54
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <__cvt>:
 8006ed2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed6:	ec57 6b10 	vmov	r6, r7, d0
 8006eda:	2f00      	cmp	r7, #0
 8006edc:	460c      	mov	r4, r1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	bfbb      	ittet	lt
 8006ee4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ee8:	461f      	movlt	r7, r3
 8006eea:	2300      	movge	r3, #0
 8006eec:	232d      	movlt	r3, #45	@ 0x2d
 8006eee:	700b      	strb	r3, [r1, #0]
 8006ef0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ef2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ef6:	4691      	mov	r9, r2
 8006ef8:	f023 0820 	bic.w	r8, r3, #32
 8006efc:	bfbc      	itt	lt
 8006efe:	4632      	movlt	r2, r6
 8006f00:	4616      	movlt	r6, r2
 8006f02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f06:	d005      	beq.n	8006f14 <__cvt+0x42>
 8006f08:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f0c:	d100      	bne.n	8006f10 <__cvt+0x3e>
 8006f0e:	3401      	adds	r4, #1
 8006f10:	2102      	movs	r1, #2
 8006f12:	e000      	b.n	8006f16 <__cvt+0x44>
 8006f14:	2103      	movs	r1, #3
 8006f16:	ab03      	add	r3, sp, #12
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	ab02      	add	r3, sp, #8
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	ec47 6b10 	vmov	d0, r6, r7
 8006f22:	4653      	mov	r3, sl
 8006f24:	4622      	mov	r2, r4
 8006f26:	f001 f873 	bl	8008010 <_dtoa_r>
 8006f2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f2e:	4605      	mov	r5, r0
 8006f30:	d119      	bne.n	8006f66 <__cvt+0x94>
 8006f32:	f019 0f01 	tst.w	r9, #1
 8006f36:	d00e      	beq.n	8006f56 <__cvt+0x84>
 8006f38:	eb00 0904 	add.w	r9, r0, r4
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f48:	b108      	cbz	r0, 8006f4e <__cvt+0x7c>
 8006f4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f4e:	2230      	movs	r2, #48	@ 0x30
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	454b      	cmp	r3, r9
 8006f54:	d31e      	bcc.n	8006f94 <__cvt+0xc2>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f5a:	1b5b      	subs	r3, r3, r5
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	b004      	add	sp, #16
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f6a:	eb00 0904 	add.w	r9, r0, r4
 8006f6e:	d1e5      	bne.n	8006f3c <__cvt+0x6a>
 8006f70:	7803      	ldrb	r3, [r0, #0]
 8006f72:	2b30      	cmp	r3, #48	@ 0x30
 8006f74:	d10a      	bne.n	8006f8c <__cvt+0xba>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f82:	b918      	cbnz	r0, 8006f8c <__cvt+0xba>
 8006f84:	f1c4 0401 	rsb	r4, r4, #1
 8006f88:	f8ca 4000 	str.w	r4, [sl]
 8006f8c:	f8da 3000 	ldr.w	r3, [sl]
 8006f90:	4499      	add	r9, r3
 8006f92:	e7d3      	b.n	8006f3c <__cvt+0x6a>
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	9103      	str	r1, [sp, #12]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e7d9      	b.n	8006f50 <__cvt+0x7e>

08006f9c <__exponent>:
 8006f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	bfba      	itte	lt
 8006fa2:	4249      	neglt	r1, r1
 8006fa4:	232d      	movlt	r3, #45	@ 0x2d
 8006fa6:	232b      	movge	r3, #43	@ 0x2b
 8006fa8:	2909      	cmp	r1, #9
 8006faa:	7002      	strb	r2, [r0, #0]
 8006fac:	7043      	strb	r3, [r0, #1]
 8006fae:	dd29      	ble.n	8007004 <__exponent+0x68>
 8006fb0:	f10d 0307 	add.w	r3, sp, #7
 8006fb4:	461d      	mov	r5, r3
 8006fb6:	270a      	movs	r7, #10
 8006fb8:	461a      	mov	r2, r3
 8006fba:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fbe:	fb07 1416 	mls	r4, r7, r6, r1
 8006fc2:	3430      	adds	r4, #48	@ 0x30
 8006fc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fc8:	460c      	mov	r4, r1
 8006fca:	2c63      	cmp	r4, #99	@ 0x63
 8006fcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	dcf1      	bgt.n	8006fb8 <__exponent+0x1c>
 8006fd4:	3130      	adds	r1, #48	@ 0x30
 8006fd6:	1e94      	subs	r4, r2, #2
 8006fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fdc:	1c41      	adds	r1, r0, #1
 8006fde:	4623      	mov	r3, r4
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	d30a      	bcc.n	8006ffa <__exponent+0x5e>
 8006fe4:	f10d 0309 	add.w	r3, sp, #9
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	42ac      	cmp	r4, r5
 8006fec:	bf88      	it	hi
 8006fee:	2300      	movhi	r3, #0
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	4403      	add	r3, r0
 8006ff4:	1a18      	subs	r0, r3, r0
 8006ff6:	b003      	add	sp, #12
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ffe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007002:	e7ed      	b.n	8006fe0 <__exponent+0x44>
 8007004:	2330      	movs	r3, #48	@ 0x30
 8007006:	3130      	adds	r1, #48	@ 0x30
 8007008:	7083      	strb	r3, [r0, #2]
 800700a:	70c1      	strb	r1, [r0, #3]
 800700c:	1d03      	adds	r3, r0, #4
 800700e:	e7f1      	b.n	8006ff4 <__exponent+0x58>

08007010 <_printf_float>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b08d      	sub	sp, #52	@ 0x34
 8007016:	460c      	mov	r4, r1
 8007018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800701c:	4616      	mov	r6, r2
 800701e:	461f      	mov	r7, r3
 8007020:	4605      	mov	r5, r0
 8007022:	f000 feef 	bl	8007e04 <_localeconv_r>
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	9304      	str	r3, [sp, #16]
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 f928 	bl	8000280 <strlen>
 8007030:	2300      	movs	r3, #0
 8007032:	930a      	str	r3, [sp, #40]	@ 0x28
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	9005      	str	r0, [sp, #20]
 800703a:	3307      	adds	r3, #7
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	f103 0208 	add.w	r2, r3, #8
 8007044:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007048:	f8d4 b000 	ldr.w	fp, [r4]
 800704c:	f8c8 2000 	str.w	r2, [r8]
 8007050:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007054:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007058:	9307      	str	r3, [sp, #28]
 800705a:	f8cd 8018 	str.w	r8, [sp, #24]
 800705e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007066:	4b9c      	ldr	r3, [pc, #624]	@ (80072d8 <_printf_float+0x2c8>)
 8007068:	f04f 32ff 	mov.w	r2, #4294967295
 800706c:	f7f9 fd66 	bl	8000b3c <__aeabi_dcmpun>
 8007070:	bb70      	cbnz	r0, 80070d0 <_printf_float+0xc0>
 8007072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007076:	4b98      	ldr	r3, [pc, #608]	@ (80072d8 <_printf_float+0x2c8>)
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	f7f9 fd40 	bl	8000b00 <__aeabi_dcmple>
 8007080:	bb30      	cbnz	r0, 80070d0 <_printf_float+0xc0>
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	4640      	mov	r0, r8
 8007088:	4649      	mov	r1, r9
 800708a:	f7f9 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800708e:	b110      	cbz	r0, 8007096 <_printf_float+0x86>
 8007090:	232d      	movs	r3, #45	@ 0x2d
 8007092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007096:	4a91      	ldr	r2, [pc, #580]	@ (80072dc <_printf_float+0x2cc>)
 8007098:	4b91      	ldr	r3, [pc, #580]	@ (80072e0 <_printf_float+0x2d0>)
 800709a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800709e:	bf94      	ite	ls
 80070a0:	4690      	movls	r8, r2
 80070a2:	4698      	movhi	r8, r3
 80070a4:	2303      	movs	r3, #3
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	f02b 0304 	bic.w	r3, fp, #4
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	9700      	str	r7, [sp, #0]
 80070b4:	4633      	mov	r3, r6
 80070b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f9d2 	bl	8007464 <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	f040 808d 	bne.w	80071e0 <_printf_float+0x1d0>
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	b00d      	add	sp, #52	@ 0x34
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	4640      	mov	r0, r8
 80070d6:	4649      	mov	r1, r9
 80070d8:	f7f9 fd30 	bl	8000b3c <__aeabi_dcmpun>
 80070dc:	b140      	cbz	r0, 80070f0 <_printf_float+0xe0>
 80070de:	464b      	mov	r3, r9
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfbc      	itt	lt
 80070e4:	232d      	movlt	r3, #45	@ 0x2d
 80070e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070ea:	4a7e      	ldr	r2, [pc, #504]	@ (80072e4 <_printf_float+0x2d4>)
 80070ec:	4b7e      	ldr	r3, [pc, #504]	@ (80072e8 <_printf_float+0x2d8>)
 80070ee:	e7d4      	b.n	800709a <_printf_float+0x8a>
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80070f6:	9206      	str	r2, [sp, #24]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	d13b      	bne.n	8007174 <_printf_float+0x164>
 80070fc:	2306      	movs	r3, #6
 80070fe:	6063      	str	r3, [r4, #4]
 8007100:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007104:	2300      	movs	r3, #0
 8007106:	6022      	str	r2, [r4, #0]
 8007108:	9303      	str	r3, [sp, #12]
 800710a:	ab0a      	add	r3, sp, #40	@ 0x28
 800710c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007110:	ab09      	add	r3, sp, #36	@ 0x24
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	6861      	ldr	r1, [r4, #4]
 8007116:	ec49 8b10 	vmov	d0, r8, r9
 800711a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800711e:	4628      	mov	r0, r5
 8007120:	f7ff fed7 	bl	8006ed2 <__cvt>
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007128:	2b47      	cmp	r3, #71	@ 0x47
 800712a:	4680      	mov	r8, r0
 800712c:	d129      	bne.n	8007182 <_printf_float+0x172>
 800712e:	1cc8      	adds	r0, r1, #3
 8007130:	db02      	blt.n	8007138 <_printf_float+0x128>
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	4299      	cmp	r1, r3
 8007136:	dd41      	ble.n	80071bc <_printf_float+0x1ac>
 8007138:	f1aa 0a02 	sub.w	sl, sl, #2
 800713c:	fa5f fa8a 	uxtb.w	sl, sl
 8007140:	3901      	subs	r1, #1
 8007142:	4652      	mov	r2, sl
 8007144:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007148:	9109      	str	r1, [sp, #36]	@ 0x24
 800714a:	f7ff ff27 	bl	8006f9c <__exponent>
 800714e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007150:	1813      	adds	r3, r2, r0
 8007152:	2a01      	cmp	r2, #1
 8007154:	4681      	mov	r9, r0
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	dc02      	bgt.n	8007160 <_printf_float+0x150>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	07d2      	lsls	r2, r2, #31
 800715e:	d501      	bpl.n	8007164 <_printf_float+0x154>
 8007160:	3301      	adds	r3, #1
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0a2      	beq.n	80070b2 <_printf_float+0xa2>
 800716c:	232d      	movs	r3, #45	@ 0x2d
 800716e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007172:	e79e      	b.n	80070b2 <_printf_float+0xa2>
 8007174:	9a06      	ldr	r2, [sp, #24]
 8007176:	2a47      	cmp	r2, #71	@ 0x47
 8007178:	d1c2      	bne.n	8007100 <_printf_float+0xf0>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1c0      	bne.n	8007100 <_printf_float+0xf0>
 800717e:	2301      	movs	r3, #1
 8007180:	e7bd      	b.n	80070fe <_printf_float+0xee>
 8007182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007186:	d9db      	bls.n	8007140 <_printf_float+0x130>
 8007188:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800718c:	d118      	bne.n	80071c0 <_printf_float+0x1b0>
 800718e:	2900      	cmp	r1, #0
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	dd0b      	ble.n	80071ac <_printf_float+0x19c>
 8007194:	6121      	str	r1, [r4, #16]
 8007196:	b913      	cbnz	r3, 800719e <_printf_float+0x18e>
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	07d0      	lsls	r0, r2, #31
 800719c:	d502      	bpl.n	80071a4 <_printf_float+0x194>
 800719e:	3301      	adds	r3, #1
 80071a0:	440b      	add	r3, r1
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071a6:	f04f 0900 	mov.w	r9, #0
 80071aa:	e7db      	b.n	8007164 <_printf_float+0x154>
 80071ac:	b913      	cbnz	r3, 80071b4 <_printf_float+0x1a4>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	07d2      	lsls	r2, r2, #31
 80071b2:	d501      	bpl.n	80071b8 <_printf_float+0x1a8>
 80071b4:	3302      	adds	r3, #2
 80071b6:	e7f4      	b.n	80071a2 <_printf_float+0x192>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e7f2      	b.n	80071a2 <_printf_float+0x192>
 80071bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071c2:	4299      	cmp	r1, r3
 80071c4:	db05      	blt.n	80071d2 <_printf_float+0x1c2>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	6121      	str	r1, [r4, #16]
 80071ca:	07d8      	lsls	r0, r3, #31
 80071cc:	d5ea      	bpl.n	80071a4 <_printf_float+0x194>
 80071ce:	1c4b      	adds	r3, r1, #1
 80071d0:	e7e7      	b.n	80071a2 <_printf_float+0x192>
 80071d2:	2900      	cmp	r1, #0
 80071d4:	bfd4      	ite	le
 80071d6:	f1c1 0202 	rsble	r2, r1, #2
 80071da:	2201      	movgt	r2, #1
 80071dc:	4413      	add	r3, r2
 80071de:	e7e0      	b.n	80071a2 <_printf_float+0x192>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	055a      	lsls	r2, r3, #21
 80071e4:	d407      	bmi.n	80071f6 <_printf_float+0x1e6>
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	4642      	mov	r2, r8
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	d12b      	bne.n	800724c <_printf_float+0x23c>
 80071f4:	e767      	b.n	80070c6 <_printf_float+0xb6>
 80071f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071fa:	f240 80dd 	bls.w	80073b8 <_printf_float+0x3a8>
 80071fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	f7f9 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800720a:	2800      	cmp	r0, #0
 800720c:	d033      	beq.n	8007276 <_printf_float+0x266>
 800720e:	4a37      	ldr	r2, [pc, #220]	@ (80072ec <_printf_float+0x2dc>)
 8007210:	2301      	movs	r3, #1
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f af54 	beq.w	80070c6 <_printf_float+0xb6>
 800721e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007222:	4543      	cmp	r3, r8
 8007224:	db02      	blt.n	800722c <_printf_float+0x21c>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07d8      	lsls	r0, r3, #31
 800722a:	d50f      	bpl.n	800724c <_printf_float+0x23c>
 800722c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	f43f af45 	beq.w	80070c6 <_printf_float+0xb6>
 800723c:	f04f 0900 	mov.w	r9, #0
 8007240:	f108 38ff 	add.w	r8, r8, #4294967295
 8007244:	f104 0a1a 	add.w	sl, r4, #26
 8007248:	45c8      	cmp	r8, r9
 800724a:	dc09      	bgt.n	8007260 <_printf_float+0x250>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	079b      	lsls	r3, r3, #30
 8007250:	f100 8103 	bmi.w	800745a <_printf_float+0x44a>
 8007254:	68e0      	ldr	r0, [r4, #12]
 8007256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007258:	4298      	cmp	r0, r3
 800725a:	bfb8      	it	lt
 800725c:	4618      	movlt	r0, r3
 800725e:	e734      	b.n	80070ca <_printf_float+0xba>
 8007260:	2301      	movs	r3, #1
 8007262:	4652      	mov	r2, sl
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f af2b 	beq.w	80070c6 <_printf_float+0xb6>
 8007270:	f109 0901 	add.w	r9, r9, #1
 8007274:	e7e8      	b.n	8007248 <_printf_float+0x238>
 8007276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	dc39      	bgt.n	80072f0 <_printf_float+0x2e0>
 800727c:	4a1b      	ldr	r2, [pc, #108]	@ (80072ec <_printf_float+0x2dc>)
 800727e:	2301      	movs	r3, #1
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af1d 	beq.w	80070c6 <_printf_float+0xb6>
 800728c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007290:	ea59 0303 	orrs.w	r3, r9, r3
 8007294:	d102      	bne.n	800729c <_printf_float+0x28c>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	07d9      	lsls	r1, r3, #31
 800729a:	d5d7      	bpl.n	800724c <_printf_float+0x23c>
 800729c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	f43f af0d 	beq.w	80070c6 <_printf_float+0xb6>
 80072ac:	f04f 0a00 	mov.w	sl, #0
 80072b0:	f104 0b1a 	add.w	fp, r4, #26
 80072b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b6:	425b      	negs	r3, r3
 80072b8:	4553      	cmp	r3, sl
 80072ba:	dc01      	bgt.n	80072c0 <_printf_float+0x2b0>
 80072bc:	464b      	mov	r3, r9
 80072be:	e793      	b.n	80071e8 <_printf_float+0x1d8>
 80072c0:	2301      	movs	r3, #1
 80072c2:	465a      	mov	r2, fp
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f aefb 	beq.w	80070c6 <_printf_float+0xb6>
 80072d0:	f10a 0a01 	add.w	sl, sl, #1
 80072d4:	e7ee      	b.n	80072b4 <_printf_float+0x2a4>
 80072d6:	bf00      	nop
 80072d8:	7fefffff 	.word	0x7fefffff
 80072dc:	0800b6fc 	.word	0x0800b6fc
 80072e0:	0800b700 	.word	0x0800b700
 80072e4:	0800b704 	.word	0x0800b704
 80072e8:	0800b708 	.word	0x0800b708
 80072ec:	0800b70c 	.word	0x0800b70c
 80072f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072f6:	4553      	cmp	r3, sl
 80072f8:	bfa8      	it	ge
 80072fa:	4653      	movge	r3, sl
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	4699      	mov	r9, r3
 8007300:	dc36      	bgt.n	8007370 <_printf_float+0x360>
 8007302:	f04f 0b00 	mov.w	fp, #0
 8007306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800730a:	f104 021a 	add.w	r2, r4, #26
 800730e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007310:	9306      	str	r3, [sp, #24]
 8007312:	eba3 0309 	sub.w	r3, r3, r9
 8007316:	455b      	cmp	r3, fp
 8007318:	dc31      	bgt.n	800737e <_printf_float+0x36e>
 800731a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731c:	459a      	cmp	sl, r3
 800731e:	dc3a      	bgt.n	8007396 <_printf_float+0x386>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	07da      	lsls	r2, r3, #31
 8007324:	d437      	bmi.n	8007396 <_printf_float+0x386>
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	ebaa 0903 	sub.w	r9, sl, r3
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	ebaa 0303 	sub.w	r3, sl, r3
 8007332:	4599      	cmp	r9, r3
 8007334:	bfa8      	it	ge
 8007336:	4699      	movge	r9, r3
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	dc33      	bgt.n	80073a6 <_printf_float+0x396>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007346:	f104 0b1a 	add.w	fp, r4, #26
 800734a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734c:	ebaa 0303 	sub.w	r3, sl, r3
 8007350:	eba3 0309 	sub.w	r3, r3, r9
 8007354:	4543      	cmp	r3, r8
 8007356:	f77f af79 	ble.w	800724c <_printf_float+0x23c>
 800735a:	2301      	movs	r3, #1
 800735c:	465a      	mov	r2, fp
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f aeae 	beq.w	80070c6 <_printf_float+0xb6>
 800736a:	f108 0801 	add.w	r8, r8, #1
 800736e:	e7ec      	b.n	800734a <_printf_float+0x33a>
 8007370:	4642      	mov	r2, r8
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	d1c2      	bne.n	8007302 <_printf_float+0x2f2>
 800737c:	e6a3      	b.n	80070c6 <_printf_float+0xb6>
 800737e:	2301      	movs	r3, #1
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	9206      	str	r2, [sp, #24]
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f ae9c 	beq.w	80070c6 <_printf_float+0xb6>
 800738e:	9a06      	ldr	r2, [sp, #24]
 8007390:	f10b 0b01 	add.w	fp, fp, #1
 8007394:	e7bb      	b.n	800730e <_printf_float+0x2fe>
 8007396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800739a:	4631      	mov	r1, r6
 800739c:	4628      	mov	r0, r5
 800739e:	47b8      	blx	r7
 80073a0:	3001      	adds	r0, #1
 80073a2:	d1c0      	bne.n	8007326 <_printf_float+0x316>
 80073a4:	e68f      	b.n	80070c6 <_printf_float+0xb6>
 80073a6:	9a06      	ldr	r2, [sp, #24]
 80073a8:	464b      	mov	r3, r9
 80073aa:	4442      	add	r2, r8
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	d1c3      	bne.n	800733e <_printf_float+0x32e>
 80073b6:	e686      	b.n	80070c6 <_printf_float+0xb6>
 80073b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073bc:	f1ba 0f01 	cmp.w	sl, #1
 80073c0:	dc01      	bgt.n	80073c6 <_printf_float+0x3b6>
 80073c2:	07db      	lsls	r3, r3, #31
 80073c4:	d536      	bpl.n	8007434 <_printf_float+0x424>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4642      	mov	r2, r8
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	f43f ae78 	beq.w	80070c6 <_printf_float+0xb6>
 80073d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f ae70 	beq.w	80070c6 <_printf_float+0xb6>
 80073e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f2:	f7f9 fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f6:	b9c0      	cbnz	r0, 800742a <_printf_float+0x41a>
 80073f8:	4653      	mov	r3, sl
 80073fa:	f108 0201 	add.w	r2, r8, #1
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	d10c      	bne.n	8007422 <_printf_float+0x412>
 8007408:	e65d      	b.n	80070c6 <_printf_float+0xb6>
 800740a:	2301      	movs	r3, #1
 800740c:	465a      	mov	r2, fp
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f ae56 	beq.w	80070c6 <_printf_float+0xb6>
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	45d0      	cmp	r8, sl
 8007420:	dbf3      	blt.n	800740a <_printf_float+0x3fa>
 8007422:	464b      	mov	r3, r9
 8007424:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007428:	e6df      	b.n	80071ea <_printf_float+0x1da>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	f104 0b1a 	add.w	fp, r4, #26
 8007432:	e7f4      	b.n	800741e <_printf_float+0x40e>
 8007434:	2301      	movs	r3, #1
 8007436:	4642      	mov	r2, r8
 8007438:	e7e1      	b.n	80073fe <_printf_float+0x3ee>
 800743a:	2301      	movs	r3, #1
 800743c:	464a      	mov	r2, r9
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f ae3e 	beq.w	80070c6 <_printf_float+0xb6>
 800744a:	f108 0801 	add.w	r8, r8, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007452:	1a5b      	subs	r3, r3, r1
 8007454:	4543      	cmp	r3, r8
 8007456:	dcf0      	bgt.n	800743a <_printf_float+0x42a>
 8007458:	e6fc      	b.n	8007254 <_printf_float+0x244>
 800745a:	f04f 0800 	mov.w	r8, #0
 800745e:	f104 0919 	add.w	r9, r4, #25
 8007462:	e7f4      	b.n	800744e <_printf_float+0x43e>

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	4293      	cmp	r3, r2
 8007476:	bfb8      	it	lt
 8007478:	4613      	movlt	r3, r2
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007480:	4607      	mov	r7, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc26      	bgt.n	80074fa <_printf_common+0x96>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d42b      	bmi.n	8007514 <_printf_common+0xb0>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d01e      	beq.n	8007508 <_printf_common+0xa4>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf02      	ittt	eq
 80074d6:	68e5      	ldreq	r5, [r4, #12]
 80074d8:	6833      	ldreq	r3, [r6, #0]
 80074da:	1aed      	subeq	r5, r5, r3
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	bf0c      	ite	eq
 80074e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e4:	2500      	movne	r5, #0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bfc4      	itt	gt
 80074ea:	1a9b      	subgt	r3, r3, r2
 80074ec:	18ed      	addgt	r5, r5, r3
 80074ee:	2600      	movs	r6, #0
 80074f0:	341a      	adds	r4, #26
 80074f2:	42b5      	cmp	r5, r6
 80074f4:	d11a      	bne.n	800752c <_printf_common+0xc8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e008      	b.n	800750c <_printf_common+0xa8>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4652      	mov	r2, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	4638      	mov	r0, r7
 8007502:	47c8      	blx	r9
 8007504:	3001      	adds	r0, #1
 8007506:	d103      	bne.n	8007510 <_printf_common+0xac>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007510:	3501      	adds	r5, #1
 8007512:	e7c6      	b.n	80074a2 <_printf_common+0x3e>
 8007514:	18e1      	adds	r1, r4, r3
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	2030      	movs	r0, #48	@ 0x30
 800751a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800751e:	4422      	add	r2, r4
 8007520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007528:	3302      	adds	r3, #2
 800752a:	e7c7      	b.n	80074bc <_printf_common+0x58>
 800752c:	2301      	movs	r3, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d0e6      	beq.n	8007508 <_printf_common+0xa4>
 800753a:	3601      	adds	r6, #1
 800753c:	e7d9      	b.n	80074f2 <_printf_common+0x8e>
	...

08007540 <_printf_i>:
 8007540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	7e0f      	ldrb	r7, [r1, #24]
 8007546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007548:	2f78      	cmp	r7, #120	@ 0x78
 800754a:	4691      	mov	r9, r2
 800754c:	4680      	mov	r8, r0
 800754e:	460c      	mov	r4, r1
 8007550:	469a      	mov	sl, r3
 8007552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007556:	d807      	bhi.n	8007568 <_printf_i+0x28>
 8007558:	2f62      	cmp	r7, #98	@ 0x62
 800755a:	d80a      	bhi.n	8007572 <_printf_i+0x32>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f000 80d2 	beq.w	8007706 <_printf_i+0x1c6>
 8007562:	2f58      	cmp	r7, #88	@ 0x58
 8007564:	f000 80b9 	beq.w	80076da <_printf_i+0x19a>
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007570:	e03a      	b.n	80075e8 <_printf_i+0xa8>
 8007572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007576:	2b15      	cmp	r3, #21
 8007578:	d8f6      	bhi.n	8007568 <_printf_i+0x28>
 800757a:	a101      	add	r1, pc, #4	@ (adr r1, 8007580 <_printf_i+0x40>)
 800757c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075ed 	.word	0x080075ed
 8007588:	08007569 	.word	0x08007569
 800758c:	08007569 	.word	0x08007569
 8007590:	08007569 	.word	0x08007569
 8007594:	08007569 	.word	0x08007569
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007569 	.word	0x08007569
 80075a0:	08007569 	.word	0x08007569
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	080076ed 	.word	0x080076ed
 80075b0:	08007617 	.word	0x08007617
 80075b4:	080076a7 	.word	0x080076a7
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	0800770f 	.word	0x0800770f
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007617 	.word	0x08007617
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076af 	.word	0x080076af
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09d      	b.n	8007728 <_printf_i+0x1e8>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	6031      	str	r1, [r6, #0]
 80075f4:	0606      	lsls	r6, r0, #24
 80075f6:	d501      	bpl.n	80075fc <_printf_i+0xbc>
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	e003      	b.n	8007604 <_printf_i+0xc4>
 80075fc:	0645      	lsls	r5, r0, #25
 80075fe:	d5fb      	bpl.n	80075f8 <_printf_i+0xb8>
 8007600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007604:	2d00      	cmp	r5, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xd0>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	426d      	negs	r5, r5
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	4859      	ldr	r0, [pc, #356]	@ (8007778 <_printf_i+0x238>)
 8007612:	230a      	movs	r3, #10
 8007614:	e011      	b.n	800763a <_printf_i+0xfa>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	0608      	lsls	r0, r1, #24
 800761c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007620:	d402      	bmi.n	8007628 <_printf_i+0xe8>
 8007622:	0649      	lsls	r1, r1, #25
 8007624:	bf48      	it	mi
 8007626:	b2ad      	uxthmi	r5, r5
 8007628:	2f6f      	cmp	r7, #111	@ 0x6f
 800762a:	4853      	ldr	r0, [pc, #332]	@ (8007778 <_printf_i+0x238>)
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	bf14      	ite	ne
 8007630:	230a      	movne	r3, #10
 8007632:	2308      	moveq	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800763a:	6866      	ldr	r6, [r4, #4]
 800763c:	60a6      	str	r6, [r4, #8]
 800763e:	2e00      	cmp	r6, #0
 8007640:	bfa2      	ittt	ge
 8007642:	6821      	ldrge	r1, [r4, #0]
 8007644:	f021 0104 	bicge.w	r1, r1, #4
 8007648:	6021      	strge	r1, [r4, #0]
 800764a:	b90d      	cbnz	r5, 8007650 <_printf_i+0x110>
 800764c:	2e00      	cmp	r6, #0
 800764e:	d04b      	beq.n	80076e8 <_printf_i+0x1a8>
 8007650:	4616      	mov	r6, r2
 8007652:	fbb5 f1f3 	udiv	r1, r5, r3
 8007656:	fb03 5711 	mls	r7, r3, r1, r5
 800765a:	5dc7      	ldrb	r7, [r0, r7]
 800765c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007660:	462f      	mov	r7, r5
 8007662:	42bb      	cmp	r3, r7
 8007664:	460d      	mov	r5, r1
 8007666:	d9f4      	bls.n	8007652 <_printf_i+0x112>
 8007668:	2b08      	cmp	r3, #8
 800766a:	d10b      	bne.n	8007684 <_printf_i+0x144>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	07df      	lsls	r7, r3, #31
 8007670:	d508      	bpl.n	8007684 <_printf_i+0x144>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	4299      	cmp	r1, r3
 8007678:	bfde      	ittt	le
 800767a:	2330      	movle	r3, #48	@ 0x30
 800767c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007684:	1b92      	subs	r2, r2, r6
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	f8cd a000 	str.w	sl, [sp]
 800768c:	464b      	mov	r3, r9
 800768e:	aa03      	add	r2, sp, #12
 8007690:	4621      	mov	r1, r4
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fee6 	bl	8007464 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	d14a      	bne.n	8007732 <_printf_i+0x1f2>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	b004      	add	sp, #16
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	f043 0320 	orr.w	r3, r3, #32
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	4833      	ldr	r0, [pc, #204]	@ (800777c <_printf_i+0x23c>)
 80076b0:	2778      	movs	r7, #120	@ 0x78
 80076b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6831      	ldr	r1, [r6, #0]
 80076ba:	061f      	lsls	r7, r3, #24
 80076bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80076c0:	d402      	bmi.n	80076c8 <_printf_i+0x188>
 80076c2:	065f      	lsls	r7, r3, #25
 80076c4:	bf48      	it	mi
 80076c6:	b2ad      	uxthmi	r5, r5
 80076c8:	6031      	str	r1, [r6, #0]
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	bf44      	itt	mi
 80076ce:	f043 0320 	orrmi.w	r3, r3, #32
 80076d2:	6023      	strmi	r3, [r4, #0]
 80076d4:	b11d      	cbz	r5, 80076de <_printf_i+0x19e>
 80076d6:	2310      	movs	r3, #16
 80076d8:	e7ac      	b.n	8007634 <_printf_i+0xf4>
 80076da:	4827      	ldr	r0, [pc, #156]	@ (8007778 <_printf_i+0x238>)
 80076dc:	e7e9      	b.n	80076b2 <_printf_i+0x172>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	e7f6      	b.n	80076d6 <_printf_i+0x196>
 80076e8:	4616      	mov	r6, r2
 80076ea:	e7bd      	b.n	8007668 <_printf_i+0x128>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	6961      	ldr	r1, [r4, #20]
 80076f2:	1d18      	adds	r0, r3, #4
 80076f4:	6030      	str	r0, [r6, #0]
 80076f6:	062e      	lsls	r6, r5, #24
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0x1c0>
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	e002      	b.n	8007706 <_printf_i+0x1c6>
 8007700:	0668      	lsls	r0, r5, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0x1bc>
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	4616      	mov	r6, r2
 800770c:	e7bc      	b.n	8007688 <_printf_i+0x148>
 800770e:	6833      	ldr	r3, [r6, #0]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	6032      	str	r2, [r6, #0]
 8007714:	681e      	ldr	r6, [r3, #0]
 8007716:	6862      	ldr	r2, [r4, #4]
 8007718:	2100      	movs	r1, #0
 800771a:	4630      	mov	r0, r6
 800771c:	f7f8 fd60 	bl	80001e0 <memchr>
 8007720:	b108      	cbz	r0, 8007726 <_printf_i+0x1e6>
 8007722:	1b80      	subs	r0, r0, r6
 8007724:	6060      	str	r0, [r4, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	2300      	movs	r3, #0
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007730:	e7aa      	b.n	8007688 <_printf_i+0x148>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	4632      	mov	r2, r6
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d0ad      	beq.n	800769c <_printf_i+0x15c>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	d413      	bmi.n	800776e <_printf_i+0x22e>
 8007746:	68e0      	ldr	r0, [r4, #12]
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	4298      	cmp	r0, r3
 800774c:	bfb8      	it	lt
 800774e:	4618      	movlt	r0, r3
 8007750:	e7a6      	b.n	80076a0 <_printf_i+0x160>
 8007752:	2301      	movs	r3, #1
 8007754:	4632      	mov	r2, r6
 8007756:	4649      	mov	r1, r9
 8007758:	4640      	mov	r0, r8
 800775a:	47d0      	blx	sl
 800775c:	3001      	adds	r0, #1
 800775e:	d09d      	beq.n	800769c <_printf_i+0x15c>
 8007760:	3501      	adds	r5, #1
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	42ab      	cmp	r3, r5
 800776a:	dcf2      	bgt.n	8007752 <_printf_i+0x212>
 800776c:	e7eb      	b.n	8007746 <_printf_i+0x206>
 800776e:	2500      	movs	r5, #0
 8007770:	f104 0619 	add.w	r6, r4, #25
 8007774:	e7f5      	b.n	8007762 <_printf_i+0x222>
 8007776:	bf00      	nop
 8007778:	0800b70e 	.word	0x0800b70e
 800777c:	0800b71f 	.word	0x0800b71f

08007780 <_scanf_float>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	b087      	sub	sp, #28
 8007786:	4617      	mov	r7, r2
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	688b      	ldr	r3, [r1, #8]
 800778c:	1e5a      	subs	r2, r3, #1
 800778e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007792:	bf81      	itttt	hi
 8007794:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007798:	eb03 0b05 	addhi.w	fp, r3, r5
 800779c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80077a0:	608b      	strhi	r3, [r1, #8]
 80077a2:	680b      	ldr	r3, [r1, #0]
 80077a4:	460a      	mov	r2, r1
 80077a6:	f04f 0500 	mov.w	r5, #0
 80077aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80077ae:	f842 3b1c 	str.w	r3, [r2], #28
 80077b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077b6:	4680      	mov	r8, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	bf98      	it	ls
 80077bc:	f04f 0b00 	movls.w	fp, #0
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	4616      	mov	r6, r2
 80077c4:	46aa      	mov	sl, r5
 80077c6:	46a9      	mov	r9, r5
 80077c8:	9502      	str	r5, [sp, #8]
 80077ca:	68a2      	ldr	r2, [r4, #8]
 80077cc:	b152      	cbz	r2, 80077e4 <_scanf_float+0x64>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80077d4:	d864      	bhi.n	80078a0 <_scanf_float+0x120>
 80077d6:	2b40      	cmp	r3, #64	@ 0x40
 80077d8:	d83c      	bhi.n	8007854 <_scanf_float+0xd4>
 80077da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80077de:	b2c8      	uxtb	r0, r1
 80077e0:	280e      	cmp	r0, #14
 80077e2:	d93a      	bls.n	800785a <_scanf_float+0xda>
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	d003      	beq.n	80077f2 <_scanf_float+0x72>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f6:	f1ba 0f01 	cmp.w	sl, #1
 80077fa:	f200 8117 	bhi.w	8007a2c <_scanf_float+0x2ac>
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	429e      	cmp	r6, r3
 8007802:	f200 8108 	bhi.w	8007a16 <_scanf_float+0x296>
 8007806:	2001      	movs	r0, #1
 8007808:	b007      	add	sp, #28
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007812:	2a0d      	cmp	r2, #13
 8007814:	d8e6      	bhi.n	80077e4 <_scanf_float+0x64>
 8007816:	a101      	add	r1, pc, #4	@ (adr r1, 800781c <_scanf_float+0x9c>)
 8007818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800781c:	08007963 	.word	0x08007963
 8007820:	080077e5 	.word	0x080077e5
 8007824:	080077e5 	.word	0x080077e5
 8007828:	080077e5 	.word	0x080077e5
 800782c:	080079c3 	.word	0x080079c3
 8007830:	0800799b 	.word	0x0800799b
 8007834:	080077e5 	.word	0x080077e5
 8007838:	080077e5 	.word	0x080077e5
 800783c:	08007971 	.word	0x08007971
 8007840:	080077e5 	.word	0x080077e5
 8007844:	080077e5 	.word	0x080077e5
 8007848:	080077e5 	.word	0x080077e5
 800784c:	080077e5 	.word	0x080077e5
 8007850:	08007929 	.word	0x08007929
 8007854:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007858:	e7db      	b.n	8007812 <_scanf_float+0x92>
 800785a:	290e      	cmp	r1, #14
 800785c:	d8c2      	bhi.n	80077e4 <_scanf_float+0x64>
 800785e:	a001      	add	r0, pc, #4	@ (adr r0, 8007864 <_scanf_float+0xe4>)
 8007860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007864:	08007919 	.word	0x08007919
 8007868:	080077e5 	.word	0x080077e5
 800786c:	08007919 	.word	0x08007919
 8007870:	080079af 	.word	0x080079af
 8007874:	080077e5 	.word	0x080077e5
 8007878:	080078c1 	.word	0x080078c1
 800787c:	080078ff 	.word	0x080078ff
 8007880:	080078ff 	.word	0x080078ff
 8007884:	080078ff 	.word	0x080078ff
 8007888:	080078ff 	.word	0x080078ff
 800788c:	080078ff 	.word	0x080078ff
 8007890:	080078ff 	.word	0x080078ff
 8007894:	080078ff 	.word	0x080078ff
 8007898:	080078ff 	.word	0x080078ff
 800789c:	080078ff 	.word	0x080078ff
 80078a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80078a2:	d809      	bhi.n	80078b8 <_scanf_float+0x138>
 80078a4:	2b60      	cmp	r3, #96	@ 0x60
 80078a6:	d8b2      	bhi.n	800780e <_scanf_float+0x8e>
 80078a8:	2b54      	cmp	r3, #84	@ 0x54
 80078aa:	d07b      	beq.n	80079a4 <_scanf_float+0x224>
 80078ac:	2b59      	cmp	r3, #89	@ 0x59
 80078ae:	d199      	bne.n	80077e4 <_scanf_float+0x64>
 80078b0:	2d07      	cmp	r5, #7
 80078b2:	d197      	bne.n	80077e4 <_scanf_float+0x64>
 80078b4:	2508      	movs	r5, #8
 80078b6:	e02c      	b.n	8007912 <_scanf_float+0x192>
 80078b8:	2b74      	cmp	r3, #116	@ 0x74
 80078ba:	d073      	beq.n	80079a4 <_scanf_float+0x224>
 80078bc:	2b79      	cmp	r3, #121	@ 0x79
 80078be:	e7f6      	b.n	80078ae <_scanf_float+0x12e>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	05c8      	lsls	r0, r1, #23
 80078c4:	d51b      	bpl.n	80078fe <_scanf_float+0x17e>
 80078c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80078ca:	6021      	str	r1, [r4, #0]
 80078cc:	f109 0901 	add.w	r9, r9, #1
 80078d0:	f1bb 0f00 	cmp.w	fp, #0
 80078d4:	d003      	beq.n	80078de <_scanf_float+0x15e>
 80078d6:	3201      	adds	r2, #1
 80078d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078dc:	60a2      	str	r2, [r4, #8]
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	f340 8087 	ble.w	8007a04 <_scanf_float+0x284>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	e765      	b.n	80077ca <_scanf_float+0x4a>
 80078fe:	eb1a 0105 	adds.w	r1, sl, r5
 8007902:	f47f af6f 	bne.w	80077e4 <_scanf_float+0x64>
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	460d      	mov	r5, r1
 8007910:	468a      	mov	sl, r1
 8007912:	f806 3b01 	strb.w	r3, [r6], #1
 8007916:	e7e2      	b.n	80078de <_scanf_float+0x15e>
 8007918:	6822      	ldr	r2, [r4, #0]
 800791a:	0610      	lsls	r0, r2, #24
 800791c:	f57f af62 	bpl.w	80077e4 <_scanf_float+0x64>
 8007920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	e7f4      	b.n	8007912 <_scanf_float+0x192>
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	d10e      	bne.n	800794c <_scanf_float+0x1cc>
 800792e:	f1b9 0f00 	cmp.w	r9, #0
 8007932:	d10e      	bne.n	8007952 <_scanf_float+0x1d2>
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800793a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800793e:	d108      	bne.n	8007952 <_scanf_float+0x1d2>
 8007940:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	f04f 0a01 	mov.w	sl, #1
 800794a:	e7e2      	b.n	8007912 <_scanf_float+0x192>
 800794c:	f1ba 0f02 	cmp.w	sl, #2
 8007950:	d055      	beq.n	80079fe <_scanf_float+0x27e>
 8007952:	2d01      	cmp	r5, #1
 8007954:	d002      	beq.n	800795c <_scanf_float+0x1dc>
 8007956:	2d04      	cmp	r5, #4
 8007958:	f47f af44 	bne.w	80077e4 <_scanf_float+0x64>
 800795c:	3501      	adds	r5, #1
 800795e:	b2ed      	uxtb	r5, r5
 8007960:	e7d7      	b.n	8007912 <_scanf_float+0x192>
 8007962:	f1ba 0f01 	cmp.w	sl, #1
 8007966:	f47f af3d 	bne.w	80077e4 <_scanf_float+0x64>
 800796a:	f04f 0a02 	mov.w	sl, #2
 800796e:	e7d0      	b.n	8007912 <_scanf_float+0x192>
 8007970:	b97d      	cbnz	r5, 8007992 <_scanf_float+0x212>
 8007972:	f1b9 0f00 	cmp.w	r9, #0
 8007976:	f47f af38 	bne.w	80077ea <_scanf_float+0x6a>
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007980:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007984:	f040 8108 	bne.w	8007b98 <_scanf_float+0x418>
 8007988:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	2501      	movs	r5, #1
 8007990:	e7bf      	b.n	8007912 <_scanf_float+0x192>
 8007992:	2d03      	cmp	r5, #3
 8007994:	d0e2      	beq.n	800795c <_scanf_float+0x1dc>
 8007996:	2d05      	cmp	r5, #5
 8007998:	e7de      	b.n	8007958 <_scanf_float+0x1d8>
 800799a:	2d02      	cmp	r5, #2
 800799c:	f47f af22 	bne.w	80077e4 <_scanf_float+0x64>
 80079a0:	2503      	movs	r5, #3
 80079a2:	e7b6      	b.n	8007912 <_scanf_float+0x192>
 80079a4:	2d06      	cmp	r5, #6
 80079a6:	f47f af1d 	bne.w	80077e4 <_scanf_float+0x64>
 80079aa:	2507      	movs	r5, #7
 80079ac:	e7b1      	b.n	8007912 <_scanf_float+0x192>
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	0591      	lsls	r1, r2, #22
 80079b2:	f57f af17 	bpl.w	80077e4 <_scanf_float+0x64>
 80079b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80079c0:	e7a7      	b.n	8007912 <_scanf_float+0x192>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80079c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80079cc:	d006      	beq.n	80079dc <_scanf_float+0x25c>
 80079ce:	0550      	lsls	r0, r2, #21
 80079d0:	f57f af08 	bpl.w	80077e4 <_scanf_float+0x64>
 80079d4:	f1b9 0f00 	cmp.w	r9, #0
 80079d8:	f000 80de 	beq.w	8007b98 <_scanf_float+0x418>
 80079dc:	0591      	lsls	r1, r2, #22
 80079de:	bf58      	it	pl
 80079e0:	9902      	ldrpl	r1, [sp, #8]
 80079e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079e6:	bf58      	it	pl
 80079e8:	eba9 0101 	subpl.w	r1, r9, r1
 80079ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80079f0:	bf58      	it	pl
 80079f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	f04f 0900 	mov.w	r9, #0
 80079fc:	e789      	b.n	8007912 <_scanf_float+0x192>
 80079fe:	f04f 0a03 	mov.w	sl, #3
 8007a02:	e786      	b.n	8007912 <_scanf_float+0x192>
 8007a04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a08:	4639      	mov	r1, r7
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4798      	blx	r3
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f43f aedb 	beq.w	80077ca <_scanf_float+0x4a>
 8007a14:	e6e6      	b.n	80077e4 <_scanf_float+0x64>
 8007a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4640      	mov	r0, r8
 8007a22:	4798      	blx	r3
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	e6e8      	b.n	80077fe <_scanf_float+0x7e>
 8007a2c:	1e6b      	subs	r3, r5, #1
 8007a2e:	2b06      	cmp	r3, #6
 8007a30:	d824      	bhi.n	8007a7c <_scanf_float+0x2fc>
 8007a32:	2d02      	cmp	r5, #2
 8007a34:	d836      	bhi.n	8007aa4 <_scanf_float+0x324>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	429e      	cmp	r6, r3
 8007a3a:	f67f aee4 	bls.w	8007806 <_scanf_float+0x86>
 8007a3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a46:	463a      	mov	r2, r7
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4798      	blx	r3
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	e7f0      	b.n	8007a36 <_scanf_float+0x2b6>
 8007a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4798      	blx	r3
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a70:	f1ba 0f02 	cmp.w	sl, #2
 8007a74:	d1ee      	bne.n	8007a54 <_scanf_float+0x2d4>
 8007a76:	3d03      	subs	r5, #3
 8007a78:	b2ed      	uxtb	r5, r5
 8007a7a:	1b76      	subs	r6, r6, r5
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	05da      	lsls	r2, r3, #23
 8007a80:	d530      	bpl.n	8007ae4 <_scanf_float+0x364>
 8007a82:	055b      	lsls	r3, r3, #21
 8007a84:	d511      	bpl.n	8007aaa <_scanf_float+0x32a>
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	429e      	cmp	r6, r3
 8007a8a:	f67f aebc 	bls.w	8007806 <_scanf_float+0x86>
 8007a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a96:	463a      	mov	r2, r7
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4798      	blx	r3
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	e7f0      	b.n	8007a86 <_scanf_float+0x306>
 8007aa4:	46aa      	mov	sl, r5
 8007aa6:	46b3      	mov	fp, r6
 8007aa8:	e7de      	b.n	8007a68 <_scanf_float+0x2e8>
 8007aaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	2965      	cmp	r1, #101	@ 0x65
 8007ab2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ab6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	d00c      	beq.n	8007ad8 <_scanf_float+0x358>
 8007abe:	2945      	cmp	r1, #69	@ 0x45
 8007ac0:	d00a      	beq.n	8007ad8 <_scanf_float+0x358>
 8007ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ac6:	463a      	mov	r2, r7
 8007ac8:	4640      	mov	r0, r8
 8007aca:	4798      	blx	r3
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	1eb5      	subs	r5, r6, #2
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007adc:	463a      	mov	r2, r7
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4798      	blx	r3
 8007ae2:	462e      	mov	r6, r5
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	f012 0210 	ands.w	r2, r2, #16
 8007aea:	d001      	beq.n	8007af0 <_scanf_float+0x370>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e68b      	b.n	8007808 <_scanf_float+0x88>
 8007af0:	7032      	strb	r2, [r6, #0]
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afc:	d11c      	bne.n	8007b38 <_scanf_float+0x3b8>
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	454b      	cmp	r3, r9
 8007b02:	eba3 0209 	sub.w	r2, r3, r9
 8007b06:	d123      	bne.n	8007b50 <_scanf_float+0x3d0>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	f002 fbf7 	bl	800a300 <_strtod_r>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f011 0f02 	tst.w	r1, #2
 8007b1c:	ec57 6b10 	vmov	r6, r7, d0
 8007b20:	f103 0204 	add.w	r2, r3, #4
 8007b24:	d01f      	beq.n	8007b66 <_scanf_float+0x3e6>
 8007b26:	9903      	ldr	r1, [sp, #12]
 8007b28:	600a      	str	r2, [r1, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	e9c3 6700 	strd	r6, r7, [r3]
 8007b30:	68e3      	ldr	r3, [r4, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60e3      	str	r3, [r4, #12]
 8007b36:	e7d9      	b.n	8007aec <_scanf_float+0x36c>
 8007b38:	9b04      	ldr	r3, [sp, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0e4      	beq.n	8007b08 <_scanf_float+0x388>
 8007b3e:	9905      	ldr	r1, [sp, #20]
 8007b40:	230a      	movs	r3, #10
 8007b42:	3101      	adds	r1, #1
 8007b44:	4640      	mov	r0, r8
 8007b46:	f002 fc5b 	bl	800a400 <_strtol_r>
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	9e05      	ldr	r6, [sp, #20]
 8007b4e:	1ac2      	subs	r2, r0, r3
 8007b50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007b54:	429e      	cmp	r6, r3
 8007b56:	bf28      	it	cs
 8007b58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007b5c:	4910      	ldr	r1, [pc, #64]	@ (8007ba0 <_scanf_float+0x420>)
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 f8e4 	bl	8007d2c <siprintf>
 8007b64:	e7d0      	b.n	8007b08 <_scanf_float+0x388>
 8007b66:	f011 0f04 	tst.w	r1, #4
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	600a      	str	r2, [r1, #0]
 8007b6e:	d1dc      	bne.n	8007b2a <_scanf_float+0x3aa>
 8007b70:	681d      	ldr	r5, [r3, #0]
 8007b72:	4632      	mov	r2, r6
 8007b74:	463b      	mov	r3, r7
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 ffdf 	bl	8000b3c <__aeabi_dcmpun>
 8007b7e:	b128      	cbz	r0, 8007b8c <_scanf_float+0x40c>
 8007b80:	4808      	ldr	r0, [pc, #32]	@ (8007ba4 <_scanf_float+0x424>)
 8007b82:	f000 f9b7 	bl	8007ef4 <nanf>
 8007b86:	ed85 0a00 	vstr	s0, [r5]
 8007b8a:	e7d1      	b.n	8007b30 <_scanf_float+0x3b0>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f7f9 f832 	bl	8000bf8 <__aeabi_d2f>
 8007b94:	6028      	str	r0, [r5, #0]
 8007b96:	e7cb      	b.n	8007b30 <_scanf_float+0x3b0>
 8007b98:	f04f 0900 	mov.w	r9, #0
 8007b9c:	e629      	b.n	80077f2 <_scanf_float+0x72>
 8007b9e:	bf00      	nop
 8007ba0:	0800b730 	.word	0x0800b730
 8007ba4:	0800bac5 	.word	0x0800bac5

08007ba8 <std>:
 8007ba8:	2300      	movs	r3, #0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb6:	6083      	str	r3, [r0, #8]
 8007bb8:	8181      	strh	r1, [r0, #12]
 8007bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bbc:	81c2      	strh	r2, [r0, #14]
 8007bbe:	6183      	str	r3, [r0, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	305c      	adds	r0, #92	@ 0x5c
 8007bc6:	f000 f914 	bl	8007df2 <memset>
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <std+0x58>)
 8007bcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <std+0x5c>)
 8007bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <std+0x60>)
 8007bd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x64>)
 8007bd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <std+0x68>)
 8007bdc:	6224      	str	r4, [r4, #32]
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d006      	beq.n	8007bf0 <std+0x48>
 8007be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007be6:	4294      	cmp	r4, r2
 8007be8:	d002      	beq.n	8007bf0 <std+0x48>
 8007bea:	33d0      	adds	r3, #208	@ 0xd0
 8007bec:	429c      	cmp	r4, r3
 8007bee:	d105      	bne.n	8007bfc <std+0x54>
 8007bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f000 b978 	b.w	8007eec <__retarget_lock_init_recursive>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	08007d6d 	.word	0x08007d6d
 8007c04:	08007d8f 	.word	0x08007d8f
 8007c08:	08007dc7 	.word	0x08007dc7
 8007c0c:	08007deb 	.word	0x08007deb
 8007c10:	200006d8 	.word	0x200006d8

08007c14 <stdio_exit_handler>:
 8007c14:	4a02      	ldr	r2, [pc, #8]	@ (8007c20 <stdio_exit_handler+0xc>)
 8007c16:	4903      	ldr	r1, [pc, #12]	@ (8007c24 <stdio_exit_handler+0x10>)
 8007c18:	4803      	ldr	r0, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x14>)
 8007c1a:	f000 b869 	b.w	8007cf0 <_fwalk_sglue>
 8007c1e:	bf00      	nop
 8007c20:	20000050 	.word	0x20000050
 8007c24:	0800a7bd 	.word	0x0800a7bd
 8007c28:	20000060 	.word	0x20000060

08007c2c <cleanup_stdio>:
 8007c2c:	6841      	ldr	r1, [r0, #4]
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <cleanup_stdio+0x34>)
 8007c30:	4299      	cmp	r1, r3
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	d001      	beq.n	8007c3c <cleanup_stdio+0x10>
 8007c38:	f002 fdc0 	bl	800a7bc <_fflush_r>
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <cleanup_stdio+0x38>)
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <cleanup_stdio+0x1e>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f002 fdb9 	bl	800a7bc <_fflush_r>
 8007c4a:	68e1      	ldr	r1, [r4, #12]
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <cleanup_stdio+0x3c>)
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d004      	beq.n	8007c5c <cleanup_stdio+0x30>
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f002 bdb0 	b.w	800a7bc <_fflush_r>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop
 8007c60:	200006d8 	.word	0x200006d8
 8007c64:	20000740 	.word	0x20000740
 8007c68:	200007a8 	.word	0x200007a8

08007c6c <global_stdio_init.part.0>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <global_stdio_init.part.0+0x30>)
 8007c70:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x34>)
 8007c72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <global_stdio_init.part.0+0x38>)
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	4620      	mov	r0, r4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	f7ff ff94 	bl	8007ba8 <std>
 8007c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c84:	2201      	movs	r2, #1
 8007c86:	2109      	movs	r1, #9
 8007c88:	f7ff ff8e 	bl	8007ba8 <std>
 8007c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c90:	2202      	movs	r2, #2
 8007c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff bf86 	b.w	8007ba8 <std>
 8007c9c:	20000810 	.word	0x20000810
 8007ca0:	200006d8 	.word	0x200006d8
 8007ca4:	08007c15 	.word	0x08007c15

08007ca8 <__sfp_lock_acquire>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__sfp_lock_acquire+0x8>)
 8007caa:	f000 b920 	b.w	8007eee <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20000819 	.word	0x20000819

08007cb4 <__sfp_lock_release>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__sfp_lock_release+0x8>)
 8007cb6:	f000 b91b 	b.w	8007ef0 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20000819 	.word	0x20000819

08007cc0 <__sinit>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	f7ff fff0 	bl	8007ca8 <__sfp_lock_acquire>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	b11b      	cbz	r3, 8007cd4 <__sinit+0x14>
 8007ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd0:	f7ff bff0 	b.w	8007cb4 <__sfp_lock_release>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <__sinit+0x28>)
 8007cd6:	6223      	str	r3, [r4, #32]
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x2c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f5      	bne.n	8007ccc <__sinit+0xc>
 8007ce0:	f7ff ffc4 	bl	8007c6c <global_stdio_init.part.0>
 8007ce4:	e7f2      	b.n	8007ccc <__sinit+0xc>
 8007ce6:	bf00      	nop
 8007ce8:	08007c2d 	.word	0x08007c2d
 8007cec:	20000810 	.word	0x20000810

08007cf0 <_fwalk_sglue>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d00:	f1b9 0901 	subs.w	r9, r9, #1
 8007d04:	d505      	bpl.n	8007d12 <_fwalk_sglue+0x22>
 8007d06:	6824      	ldr	r4, [r4, #0]
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d1f7      	bne.n	8007cfc <_fwalk_sglue+0xc>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d907      	bls.n	8007d28 <_fwalk_sglue+0x38>
 8007d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d003      	beq.n	8007d28 <_fwalk_sglue+0x38>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	4306      	orrs	r6, r0
 8007d28:	3568      	adds	r5, #104	@ 0x68
 8007d2a:	e7e9      	b.n	8007d00 <_fwalk_sglue+0x10>

08007d2c <siprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	b500      	push	{lr}
 8007d30:	b09c      	sub	sp, #112	@ 0x70
 8007d32:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d34:	9002      	str	r0, [sp, #8]
 8007d36:	9006      	str	r0, [sp, #24]
 8007d38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d3c:	4809      	ldr	r0, [pc, #36]	@ (8007d64 <siprintf+0x38>)
 8007d3e:	9107      	str	r1, [sp, #28]
 8007d40:	9104      	str	r1, [sp, #16]
 8007d42:	4909      	ldr	r1, [pc, #36]	@ (8007d68 <siprintf+0x3c>)
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	9105      	str	r1, [sp, #20]
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	a902      	add	r1, sp, #8
 8007d50:	f002 fbb4 	bl	800a4bc <_svfiprintf_r>
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	b01c      	add	sp, #112	@ 0x70
 8007d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d60:	b003      	add	sp, #12
 8007d62:	4770      	bx	lr
 8007d64:	2000005c 	.word	0x2000005c
 8007d68:	ffff0208 	.word	0xffff0208

08007d6c <__sread>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	f000 f86c 	bl	8007e50 <_read_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	bfab      	itete	ge
 8007d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d80:	181b      	addge	r3, r3, r0
 8007d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d86:	bfac      	ite	ge
 8007d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d8a:	81a3      	strhlt	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__swrite>:
 8007d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	461f      	mov	r7, r3
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	05db      	lsls	r3, r3, #23
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	d505      	bpl.n	8007dac <__swrite+0x1e>
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	2302      	movs	r3, #2
 8007da6:	2200      	movs	r2, #0
 8007da8:	f000 f840 	bl	8007e2c <_lseek_r>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	f000 b857 	b.w	8007e74 <_write_r>

08007dc6 <__sseek>:
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dce:	f000 f82d 	bl	8007e2c <_lseek_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	bf15      	itete	ne
 8007dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007de2:	81a3      	strheq	r3, [r4, #12]
 8007de4:	bf18      	it	ne
 8007de6:	81a3      	strhne	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__sclose>:
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	f000 b80d 	b.w	8007e0c <_close_r>

08007df2 <memset>:
 8007df2:	4402      	add	r2, r0
 8007df4:	4603      	mov	r3, r0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d100      	bne.n	8007dfc <memset+0xa>
 8007dfa:	4770      	bx	lr
 8007dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8007e00:	e7f9      	b.n	8007df6 <memset+0x4>
	...

08007e04 <_localeconv_r>:
 8007e04:	4800      	ldr	r0, [pc, #0]	@ (8007e08 <_localeconv_r+0x4>)
 8007e06:	4770      	bx	lr
 8007e08:	2000019c 	.word	0x2000019c

08007e0c <_close_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	@ (8007e28 <_close_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7fa f882 	bl	8001f20 <_close>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_close_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_close_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20000814 	.word	0x20000814

08007e2c <_lseek_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	@ (8007e4c <_lseek_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7fa f897 	bl	8001f6e <_lseek>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_lseek_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_lseek_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000814 	.word	0x20000814

08007e50 <_read_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	@ (8007e70 <_read_r+0x20>)
 8007e54:	4604      	mov	r4, r0
 8007e56:	4608      	mov	r0, r1
 8007e58:	4611      	mov	r1, r2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7fa f825 	bl	8001eae <_read>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_read_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_read_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20000814 	.word	0x20000814

08007e74 <_write_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d07      	ldr	r5, [pc, #28]	@ (8007e94 <_write_r+0x20>)
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f7fa f830 	bl	8001ee8 <_write>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_write_r+0x1e>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_write_r+0x1e>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20000814 	.word	0x20000814

08007e98 <__errno>:
 8007e98:	4b01      	ldr	r3, [pc, #4]	@ (8007ea0 <__errno+0x8>)
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	2000005c 	.word	0x2000005c

08007ea4 <__libc_init_array>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8007edc <__libc_init_array+0x38>)
 8007ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee0 <__libc_init_array+0x3c>)
 8007eaa:	1b64      	subs	r4, r4, r5
 8007eac:	10a4      	asrs	r4, r4, #2
 8007eae:	2600      	movs	r6, #0
 8007eb0:	42a6      	cmp	r6, r4
 8007eb2:	d109      	bne.n	8007ec8 <__libc_init_array+0x24>
 8007eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ee4 <__libc_init_array+0x40>)
 8007eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee8 <__libc_init_array+0x44>)
 8007eb8:	f003 fb70 	bl	800b59c <_init>
 8007ebc:	1b64      	subs	r4, r4, r5
 8007ebe:	10a4      	asrs	r4, r4, #2
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	42a6      	cmp	r6, r4
 8007ec4:	d105      	bne.n	8007ed2 <__libc_init_array+0x2e>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ecc:	4798      	blx	r3
 8007ece:	3601      	adds	r6, #1
 8007ed0:	e7ee      	b.n	8007eb0 <__libc_init_array+0xc>
 8007ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed6:	4798      	blx	r3
 8007ed8:	3601      	adds	r6, #1
 8007eda:	e7f2      	b.n	8007ec2 <__libc_init_array+0x1e>
 8007edc:	0800bb30 	.word	0x0800bb30
 8007ee0:	0800bb30 	.word	0x0800bb30
 8007ee4:	0800bb30 	.word	0x0800bb30
 8007ee8:	0800bb34 	.word	0x0800bb34

08007eec <__retarget_lock_init_recursive>:
 8007eec:	4770      	bx	lr

08007eee <__retarget_lock_acquire_recursive>:
 8007eee:	4770      	bx	lr

08007ef0 <__retarget_lock_release_recursive>:
 8007ef0:	4770      	bx	lr
	...

08007ef4 <nanf>:
 8007ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007efc <nanf+0x8>
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	7fc00000 	.word	0x7fc00000

08007f00 <quorem>:
 8007f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	6903      	ldr	r3, [r0, #16]
 8007f06:	690c      	ldr	r4, [r1, #16]
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	db7e      	blt.n	800800c <quorem+0x10c>
 8007f0e:	3c01      	subs	r4, #1
 8007f10:	f101 0814 	add.w	r8, r1, #20
 8007f14:	00a3      	lsls	r3, r4, #2
 8007f16:	f100 0514 	add.w	r5, r0, #20
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f32:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f36:	d32e      	bcc.n	8007f96 <quorem+0x96>
 8007f38:	f04f 0a00 	mov.w	sl, #0
 8007f3c:	46c4      	mov	ip, r8
 8007f3e:	46ae      	mov	lr, r5
 8007f40:	46d3      	mov	fp, sl
 8007f42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f46:	b298      	uxth	r0, r3
 8007f48:	fb06 a000 	mla	r0, r6, r0, sl
 8007f4c:	0c02      	lsrs	r2, r0, #16
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	fb06 2303 	mla	r3, r6, r3, r2
 8007f54:	f8de 2000 	ldr.w	r2, [lr]
 8007f58:	b280      	uxth	r0, r0
 8007f5a:	b292      	uxth	r2, r2
 8007f5c:	1a12      	subs	r2, r2, r0
 8007f5e:	445a      	add	r2, fp
 8007f60:	f8de 0000 	ldr.w	r0, [lr]
 8007f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f72:	b292      	uxth	r2, r2
 8007f74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f78:	45e1      	cmp	r9, ip
 8007f7a:	f84e 2b04 	str.w	r2, [lr], #4
 8007f7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f82:	d2de      	bcs.n	8007f42 <quorem+0x42>
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	58eb      	ldr	r3, [r5, r3]
 8007f88:	b92b      	cbnz	r3, 8007f96 <quorem+0x96>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	429d      	cmp	r5, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	d32f      	bcc.n	8007ff4 <quorem+0xf4>
 8007f94:	613c      	str	r4, [r7, #16]
 8007f96:	4638      	mov	r0, r7
 8007f98:	f001 f9c2 	bl	8009320 <__mcmp>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	db25      	blt.n	8007fec <quorem+0xec>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fa8:	f8d1 c000 	ldr.w	ip, [r1]
 8007fac:	fa1f fe82 	uxth.w	lr, r2
 8007fb0:	fa1f f38c 	uxth.w	r3, ip
 8007fb4:	eba3 030e 	sub.w	r3, r3, lr
 8007fb8:	4403      	add	r3, r0
 8007fba:	0c12      	lsrs	r2, r2, #16
 8007fbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fca:	45c1      	cmp	r9, r8
 8007fcc:	f841 3b04 	str.w	r3, [r1], #4
 8007fd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fd4:	d2e6      	bcs.n	8007fa4 <quorem+0xa4>
 8007fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fde:	b922      	cbnz	r2, 8007fea <quorem+0xea>
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	429d      	cmp	r5, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	d30b      	bcc.n	8008000 <quorem+0x100>
 8007fe8:	613c      	str	r4, [r7, #16]
 8007fea:	3601      	adds	r6, #1
 8007fec:	4630      	mov	r0, r6
 8007fee:	b003      	add	sp, #12
 8007ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	3b04      	subs	r3, #4
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d1cb      	bne.n	8007f94 <quorem+0x94>
 8007ffc:	3c01      	subs	r4, #1
 8007ffe:	e7c6      	b.n	8007f8e <quorem+0x8e>
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	3b04      	subs	r3, #4
 8008004:	2a00      	cmp	r2, #0
 8008006:	d1ef      	bne.n	8007fe8 <quorem+0xe8>
 8008008:	3c01      	subs	r4, #1
 800800a:	e7ea      	b.n	8007fe2 <quorem+0xe2>
 800800c:	2000      	movs	r0, #0
 800800e:	e7ee      	b.n	8007fee <quorem+0xee>

08008010 <_dtoa_r>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	69c7      	ldr	r7, [r0, #28]
 8008016:	b099      	sub	sp, #100	@ 0x64
 8008018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800801c:	ec55 4b10 	vmov	r4, r5, d0
 8008020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008022:	9109      	str	r1, [sp, #36]	@ 0x24
 8008024:	4683      	mov	fp, r0
 8008026:	920e      	str	r2, [sp, #56]	@ 0x38
 8008028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800802a:	b97f      	cbnz	r7, 800804c <_dtoa_r+0x3c>
 800802c:	2010      	movs	r0, #16
 800802e:	f000 fdfd 	bl	8008c2c <malloc>
 8008032:	4602      	mov	r2, r0
 8008034:	f8cb 001c 	str.w	r0, [fp, #28]
 8008038:	b920      	cbnz	r0, 8008044 <_dtoa_r+0x34>
 800803a:	4ba7      	ldr	r3, [pc, #668]	@ (80082d8 <_dtoa_r+0x2c8>)
 800803c:	21ef      	movs	r1, #239	@ 0xef
 800803e:	48a7      	ldr	r0, [pc, #668]	@ (80082dc <_dtoa_r+0x2cc>)
 8008040:	f002 fc36 	bl	800a8b0 <__assert_func>
 8008044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008048:	6007      	str	r7, [r0, #0]
 800804a:	60c7      	str	r7, [r0, #12]
 800804c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008050:	6819      	ldr	r1, [r3, #0]
 8008052:	b159      	cbz	r1, 800806c <_dtoa_r+0x5c>
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	604a      	str	r2, [r1, #4]
 8008058:	2301      	movs	r3, #1
 800805a:	4093      	lsls	r3, r2
 800805c:	608b      	str	r3, [r1, #8]
 800805e:	4658      	mov	r0, fp
 8008060:	f000 feda 	bl	8008e18 <_Bfree>
 8008064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	1e2b      	subs	r3, r5, #0
 800806e:	bfb9      	ittee	lt
 8008070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008074:	9303      	strlt	r3, [sp, #12]
 8008076:	2300      	movge	r3, #0
 8008078:	6033      	strge	r3, [r6, #0]
 800807a:	9f03      	ldr	r7, [sp, #12]
 800807c:	4b98      	ldr	r3, [pc, #608]	@ (80082e0 <_dtoa_r+0x2d0>)
 800807e:	bfbc      	itt	lt
 8008080:	2201      	movlt	r2, #1
 8008082:	6032      	strlt	r2, [r6, #0]
 8008084:	43bb      	bics	r3, r7
 8008086:	d112      	bne.n	80080ae <_dtoa_r+0x9e>
 8008088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800808a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008094:	4323      	orrs	r3, r4
 8008096:	f000 854d 	beq.w	8008b34 <_dtoa_r+0xb24>
 800809a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800809c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80082f4 <_dtoa_r+0x2e4>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 854f 	beq.w	8008b44 <_dtoa_r+0xb34>
 80080a6:	f10a 0303 	add.w	r3, sl, #3
 80080aa:	f000 bd49 	b.w	8008b40 <_dtoa_r+0xb30>
 80080ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	ec51 0b17 	vmov	r0, r1, d7
 80080b8:	2300      	movs	r3, #0
 80080ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80080be:	f7f8 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80080c2:	4680      	mov	r8, r0
 80080c4:	b158      	cbz	r0, 80080de <_dtoa_r+0xce>
 80080c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080c8:	2301      	movs	r3, #1
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ce:	b113      	cbz	r3, 80080d6 <_dtoa_r+0xc6>
 80080d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80080d2:	4b84      	ldr	r3, [pc, #528]	@ (80082e4 <_dtoa_r+0x2d4>)
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80082f8 <_dtoa_r+0x2e8>
 80080da:	f000 bd33 	b.w	8008b44 <_dtoa_r+0xb34>
 80080de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080e2:	aa16      	add	r2, sp, #88	@ 0x58
 80080e4:	a917      	add	r1, sp, #92	@ 0x5c
 80080e6:	4658      	mov	r0, fp
 80080e8:	f001 fa3a 	bl	8009560 <__d2b>
 80080ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80080f0:	4681      	mov	r9, r0
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	d077      	beq.n	80081e6 <_dtoa_r+0x1d6>
 80080f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80080fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800810c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008110:	4619      	mov	r1, r3
 8008112:	2200      	movs	r2, #0
 8008114:	4b74      	ldr	r3, [pc, #464]	@ (80082e8 <_dtoa_r+0x2d8>)
 8008116:	f7f8 f8bf 	bl	8000298 <__aeabi_dsub>
 800811a:	a369      	add	r3, pc, #420	@ (adr r3, 80082c0 <_dtoa_r+0x2b0>)
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	a368      	add	r3, pc, #416	@ (adr r3, 80082c8 <_dtoa_r+0x2b8>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f8b7 	bl	800029c <__adddf3>
 800812e:	4604      	mov	r4, r0
 8008130:	4630      	mov	r0, r6
 8008132:	460d      	mov	r5, r1
 8008134:	f7f8 f9fe 	bl	8000534 <__aeabi_i2d>
 8008138:	a365      	add	r3, pc, #404	@ (adr r3, 80082d0 <_dtoa_r+0x2c0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 fa63 	bl	8000608 <__aeabi_dmul>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 f8a7 	bl	800029c <__adddf3>
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	f7f8 fd09 	bl	8000b68 <__aeabi_d2iz>
 8008156:	2200      	movs	r2, #0
 8008158:	4607      	mov	r7, r0
 800815a:	2300      	movs	r3, #0
 800815c:	4620      	mov	r0, r4
 800815e:	4629      	mov	r1, r5
 8008160:	f7f8 fcc4 	bl	8000aec <__aeabi_dcmplt>
 8008164:	b140      	cbz	r0, 8008178 <_dtoa_r+0x168>
 8008166:	4638      	mov	r0, r7
 8008168:	f7f8 f9e4 	bl	8000534 <__aeabi_i2d>
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	f7f8 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008174:	b900      	cbnz	r0, 8008178 <_dtoa_r+0x168>
 8008176:	3f01      	subs	r7, #1
 8008178:	2f16      	cmp	r7, #22
 800817a:	d851      	bhi.n	8008220 <_dtoa_r+0x210>
 800817c:	4b5b      	ldr	r3, [pc, #364]	@ (80082ec <_dtoa_r+0x2dc>)
 800817e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800818a:	f7f8 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800818e:	2800      	cmp	r0, #0
 8008190:	d048      	beq.n	8008224 <_dtoa_r+0x214>
 8008192:	3f01      	subs	r7, #1
 8008194:	2300      	movs	r3, #0
 8008196:	9312      	str	r3, [sp, #72]	@ 0x48
 8008198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800819a:	1b9b      	subs	r3, r3, r6
 800819c:	1e5a      	subs	r2, r3, #1
 800819e:	bf44      	itt	mi
 80081a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80081a4:	2300      	movmi	r3, #0
 80081a6:	9208      	str	r2, [sp, #32]
 80081a8:	bf54      	ite	pl
 80081aa:	f04f 0800 	movpl.w	r8, #0
 80081ae:	9308      	strmi	r3, [sp, #32]
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	db39      	blt.n	8008228 <_dtoa_r+0x218>
 80081b4:	9b08      	ldr	r3, [sp, #32]
 80081b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80081b8:	443b      	add	r3, r7
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	2300      	movs	r3, #0
 80081be:	930a      	str	r3, [sp, #40]	@ 0x28
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	d864      	bhi.n	8008290 <_dtoa_r+0x280>
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	bfc4      	itt	gt
 80081ca:	3b04      	subgt	r3, #4
 80081cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	f1a3 0302 	sub.w	r3, r3, #2
 80081d4:	bfcc      	ite	gt
 80081d6:	2400      	movgt	r4, #0
 80081d8:	2401      	movle	r4, #1
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d863      	bhi.n	80082a6 <_dtoa_r+0x296>
 80081de:	e8df f003 	tbb	[pc, r3]
 80081e2:	372a      	.short	0x372a
 80081e4:	5535      	.short	0x5535
 80081e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80081ea:	441e      	add	r6, r3
 80081ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	bfc1      	itttt	gt
 80081f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081f8:	409f      	lslgt	r7, r3
 80081fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008202:	bfd6      	itet	le
 8008204:	f1c3 0320 	rsble	r3, r3, #32
 8008208:	ea47 0003 	orrgt.w	r0, r7, r3
 800820c:	fa04 f003 	lslle.w	r0, r4, r3
 8008210:	f7f8 f980 	bl	8000514 <__aeabi_ui2d>
 8008214:	2201      	movs	r2, #1
 8008216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800821a:	3e01      	subs	r6, #1
 800821c:	9214      	str	r2, [sp, #80]	@ 0x50
 800821e:	e777      	b.n	8008110 <_dtoa_r+0x100>
 8008220:	2301      	movs	r3, #1
 8008222:	e7b8      	b.n	8008196 <_dtoa_r+0x186>
 8008224:	9012      	str	r0, [sp, #72]	@ 0x48
 8008226:	e7b7      	b.n	8008198 <_dtoa_r+0x188>
 8008228:	427b      	negs	r3, r7
 800822a:	930a      	str	r3, [sp, #40]	@ 0x28
 800822c:	2300      	movs	r3, #0
 800822e:	eba8 0807 	sub.w	r8, r8, r7
 8008232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008234:	e7c4      	b.n	80081c0 <_dtoa_r+0x1b0>
 8008236:	2300      	movs	r3, #0
 8008238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800823a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc35      	bgt.n	80082ac <_dtoa_r+0x29c>
 8008240:	2301      	movs	r3, #1
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	9307      	str	r3, [sp, #28]
 8008246:	461a      	mov	r2, r3
 8008248:	920e      	str	r2, [sp, #56]	@ 0x38
 800824a:	e00b      	b.n	8008264 <_dtoa_r+0x254>
 800824c:	2301      	movs	r3, #1
 800824e:	e7f3      	b.n	8008238 <_dtoa_r+0x228>
 8008250:	2300      	movs	r3, #0
 8008252:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	2b01      	cmp	r3, #1
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	bfb8      	it	lt
 8008262:	2301      	movlt	r3, #1
 8008264:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008268:	2100      	movs	r1, #0
 800826a:	2204      	movs	r2, #4
 800826c:	f102 0514 	add.w	r5, r2, #20
 8008270:	429d      	cmp	r5, r3
 8008272:	d91f      	bls.n	80082b4 <_dtoa_r+0x2a4>
 8008274:	6041      	str	r1, [r0, #4]
 8008276:	4658      	mov	r0, fp
 8008278:	f000 fd8e 	bl	8008d98 <_Balloc>
 800827c:	4682      	mov	sl, r0
 800827e:	2800      	cmp	r0, #0
 8008280:	d13c      	bne.n	80082fc <_dtoa_r+0x2ec>
 8008282:	4b1b      	ldr	r3, [pc, #108]	@ (80082f0 <_dtoa_r+0x2e0>)
 8008284:	4602      	mov	r2, r0
 8008286:	f240 11af 	movw	r1, #431	@ 0x1af
 800828a:	e6d8      	b.n	800803e <_dtoa_r+0x2e>
 800828c:	2301      	movs	r3, #1
 800828e:	e7e0      	b.n	8008252 <_dtoa_r+0x242>
 8008290:	2401      	movs	r4, #1
 8008292:	2300      	movs	r3, #0
 8008294:	9309      	str	r3, [sp, #36]	@ 0x24
 8008296:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008298:	f04f 33ff 	mov.w	r3, #4294967295
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	2200      	movs	r2, #0
 80082a2:	2312      	movs	r3, #18
 80082a4:	e7d0      	b.n	8008248 <_dtoa_r+0x238>
 80082a6:	2301      	movs	r3, #1
 80082a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082aa:	e7f5      	b.n	8008298 <_dtoa_r+0x288>
 80082ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	9307      	str	r3, [sp, #28]
 80082b2:	e7d7      	b.n	8008264 <_dtoa_r+0x254>
 80082b4:	3101      	adds	r1, #1
 80082b6:	0052      	lsls	r2, r2, #1
 80082b8:	e7d8      	b.n	800826c <_dtoa_r+0x25c>
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	0800b742 	.word	0x0800b742
 80082dc:	0800b759 	.word	0x0800b759
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	0800b70d 	.word	0x0800b70d
 80082e8:	3ff80000 	.word	0x3ff80000
 80082ec:	0800b850 	.word	0x0800b850
 80082f0:	0800b7b1 	.word	0x0800b7b1
 80082f4:	0800b73e 	.word	0x0800b73e
 80082f8:	0800b70c 	.word	0x0800b70c
 80082fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008300:	6018      	str	r0, [r3, #0]
 8008302:	9b07      	ldr	r3, [sp, #28]
 8008304:	2b0e      	cmp	r3, #14
 8008306:	f200 80a4 	bhi.w	8008452 <_dtoa_r+0x442>
 800830a:	2c00      	cmp	r4, #0
 800830c:	f000 80a1 	beq.w	8008452 <_dtoa_r+0x442>
 8008310:	2f00      	cmp	r7, #0
 8008312:	dd33      	ble.n	800837c <_dtoa_r+0x36c>
 8008314:	4bad      	ldr	r3, [pc, #692]	@ (80085cc <_dtoa_r+0x5bc>)
 8008316:	f007 020f 	and.w	r2, r7, #15
 800831a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800831e:	ed93 7b00 	vldr	d7, [r3]
 8008322:	05f8      	lsls	r0, r7, #23
 8008324:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800832c:	d516      	bpl.n	800835c <_dtoa_r+0x34c>
 800832e:	4ba8      	ldr	r3, [pc, #672]	@ (80085d0 <_dtoa_r+0x5c0>)
 8008330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008338:	f7f8 fa90 	bl	800085c <__aeabi_ddiv>
 800833c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008340:	f004 040f 	and.w	r4, r4, #15
 8008344:	2603      	movs	r6, #3
 8008346:	4da2      	ldr	r5, [pc, #648]	@ (80085d0 <_dtoa_r+0x5c0>)
 8008348:	b954      	cbnz	r4, 8008360 <_dtoa_r+0x350>
 800834a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008352:	f7f8 fa83 	bl	800085c <__aeabi_ddiv>
 8008356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800835a:	e028      	b.n	80083ae <_dtoa_r+0x39e>
 800835c:	2602      	movs	r6, #2
 800835e:	e7f2      	b.n	8008346 <_dtoa_r+0x336>
 8008360:	07e1      	lsls	r1, r4, #31
 8008362:	d508      	bpl.n	8008376 <_dtoa_r+0x366>
 8008364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008374:	3601      	adds	r6, #1
 8008376:	1064      	asrs	r4, r4, #1
 8008378:	3508      	adds	r5, #8
 800837a:	e7e5      	b.n	8008348 <_dtoa_r+0x338>
 800837c:	f000 80d2 	beq.w	8008524 <_dtoa_r+0x514>
 8008380:	427c      	negs	r4, r7
 8008382:	4b92      	ldr	r3, [pc, #584]	@ (80085cc <_dtoa_r+0x5bc>)
 8008384:	4d92      	ldr	r5, [pc, #584]	@ (80085d0 <_dtoa_r+0x5c0>)
 8008386:	f004 020f 	and.w	r2, r4, #15
 800838a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839e:	1124      	asrs	r4, r4, #4
 80083a0:	2300      	movs	r3, #0
 80083a2:	2602      	movs	r6, #2
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	f040 80b2 	bne.w	800850e <_dtoa_r+0x4fe>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1d3      	bne.n	8008356 <_dtoa_r+0x346>
 80083ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80b7 	beq.w	8008528 <_dtoa_r+0x518>
 80083ba:	4b86      	ldr	r3, [pc, #536]	@ (80085d4 <_dtoa_r+0x5c4>)
 80083bc:	2200      	movs	r2, #0
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 fb93 	bl	8000aec <__aeabi_dcmplt>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f000 80ae 	beq.w	8008528 <_dtoa_r+0x518>
 80083cc:	9b07      	ldr	r3, [sp, #28]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 80aa 	beq.w	8008528 <_dtoa_r+0x518>
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dd37      	ble.n	800844a <_dtoa_r+0x43a>
 80083da:	1e7b      	subs	r3, r7, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	4620      	mov	r0, r4
 80083e0:	4b7d      	ldr	r3, [pc, #500]	@ (80085d8 <_dtoa_r+0x5c8>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	4629      	mov	r1, r5
 80083e6:	f7f8 f90f 	bl	8000608 <__aeabi_dmul>
 80083ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ee:	9c00      	ldr	r4, [sp, #0]
 80083f0:	3601      	adds	r6, #1
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7f8 f89e 	bl	8000534 <__aeabi_i2d>
 80083f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	4b76      	ldr	r3, [pc, #472]	@ (80085dc <_dtoa_r+0x5cc>)
 8008402:	2200      	movs	r2, #0
 8008404:	f7f7 ff4a 	bl	800029c <__adddf3>
 8008408:	4605      	mov	r5, r0
 800840a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800840e:	2c00      	cmp	r4, #0
 8008410:	f040 808d 	bne.w	800852e <_dtoa_r+0x51e>
 8008414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008418:	4b71      	ldr	r3, [pc, #452]	@ (80085e0 <_dtoa_r+0x5d0>)
 800841a:	2200      	movs	r2, #0
 800841c:	f7f7 ff3c 	bl	8000298 <__aeabi_dsub>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008428:	462a      	mov	r2, r5
 800842a:	4633      	mov	r3, r6
 800842c:	f7f8 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 8008430:	2800      	cmp	r0, #0
 8008432:	f040 828b 	bne.w	800894c <_dtoa_r+0x93c>
 8008436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800843a:	462a      	mov	r2, r5
 800843c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008440:	f7f8 fb54 	bl	8000aec <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 8128 	bne.w	800869a <_dtoa_r+0x68a>
 800844a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800844e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008454:	2b00      	cmp	r3, #0
 8008456:	f2c0 815a 	blt.w	800870e <_dtoa_r+0x6fe>
 800845a:	2f0e      	cmp	r7, #14
 800845c:	f300 8157 	bgt.w	800870e <_dtoa_r+0x6fe>
 8008460:	4b5a      	ldr	r3, [pc, #360]	@ (80085cc <_dtoa_r+0x5bc>)
 8008462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008466:	ed93 7b00 	vldr	d7, [r3]
 800846a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	ed8d 7b00 	vstr	d7, [sp]
 8008472:	da03      	bge.n	800847c <_dtoa_r+0x46c>
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f340 8101 	ble.w	800867e <_dtoa_r+0x66e>
 800847c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008480:	4656      	mov	r6, sl
 8008482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f8 f9e7 	bl	800085c <__aeabi_ddiv>
 800848e:	f7f8 fb6b 	bl	8000b68 <__aeabi_d2iz>
 8008492:	4680      	mov	r8, r0
 8008494:	f7f8 f84e 	bl	8000534 <__aeabi_i2d>
 8008498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800849c:	f7f8 f8b4 	bl	8000608 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4620      	mov	r0, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	f806 4b01 	strb.w	r4, [r6], #1
 80084b4:	9d07      	ldr	r5, [sp, #28]
 80084b6:	eba6 040a 	sub.w	r4, r6, sl
 80084ba:	42a5      	cmp	r5, r4
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	f040 8117 	bne.w	80086f2 <_dtoa_r+0x6e2>
 80084c4:	f7f7 feea 	bl	800029c <__adddf3>
 80084c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	f7f8 fb2a 	bl	8000b28 <__aeabi_dcmpgt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f040 80f9 	bne.w	80086cc <_dtoa_r+0x6bc>
 80084da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084de:	4620      	mov	r0, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	f7f8 faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80084e6:	b118      	cbz	r0, 80084f0 <_dtoa_r+0x4e0>
 80084e8:	f018 0f01 	tst.w	r8, #1
 80084ec:	f040 80ee 	bne.w	80086cc <_dtoa_r+0x6bc>
 80084f0:	4649      	mov	r1, r9
 80084f2:	4658      	mov	r0, fp
 80084f4:	f000 fc90 	bl	8008e18 <_Bfree>
 80084f8:	2300      	movs	r3, #0
 80084fa:	7033      	strb	r3, [r6, #0]
 80084fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084fe:	3701      	adds	r7, #1
 8008500:	601f      	str	r7, [r3, #0]
 8008502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 831d 	beq.w	8008b44 <_dtoa_r+0xb34>
 800850a:	601e      	str	r6, [r3, #0]
 800850c:	e31a      	b.n	8008b44 <_dtoa_r+0xb34>
 800850e:	07e2      	lsls	r2, r4, #31
 8008510:	d505      	bpl.n	800851e <_dtoa_r+0x50e>
 8008512:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008516:	f7f8 f877 	bl	8000608 <__aeabi_dmul>
 800851a:	3601      	adds	r6, #1
 800851c:	2301      	movs	r3, #1
 800851e:	1064      	asrs	r4, r4, #1
 8008520:	3508      	adds	r5, #8
 8008522:	e73f      	b.n	80083a4 <_dtoa_r+0x394>
 8008524:	2602      	movs	r6, #2
 8008526:	e742      	b.n	80083ae <_dtoa_r+0x39e>
 8008528:	9c07      	ldr	r4, [sp, #28]
 800852a:	9704      	str	r7, [sp, #16]
 800852c:	e761      	b.n	80083f2 <_dtoa_r+0x3e2>
 800852e:	4b27      	ldr	r3, [pc, #156]	@ (80085cc <_dtoa_r+0x5bc>)
 8008530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800853a:	4454      	add	r4, sl
 800853c:	2900      	cmp	r1, #0
 800853e:	d053      	beq.n	80085e8 <_dtoa_r+0x5d8>
 8008540:	4928      	ldr	r1, [pc, #160]	@ (80085e4 <_dtoa_r+0x5d4>)
 8008542:	2000      	movs	r0, #0
 8008544:	f7f8 f98a 	bl	800085c <__aeabi_ddiv>
 8008548:	4633      	mov	r3, r6
 800854a:	462a      	mov	r2, r5
 800854c:	f7f7 fea4 	bl	8000298 <__aeabi_dsub>
 8008550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008554:	4656      	mov	r6, sl
 8008556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800855a:	f7f8 fb05 	bl	8000b68 <__aeabi_d2iz>
 800855e:	4605      	mov	r5, r0
 8008560:	f7f7 ffe8 	bl	8000534 <__aeabi_i2d>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856c:	f7f7 fe94 	bl	8000298 <__aeabi_dsub>
 8008570:	3530      	adds	r5, #48	@ 0x30
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800857a:	f806 5b01 	strb.w	r5, [r6], #1
 800857e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008582:	f7f8 fab3 	bl	8000aec <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	d171      	bne.n	800866e <_dtoa_r+0x65e>
 800858a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800858e:	4911      	ldr	r1, [pc, #68]	@ (80085d4 <_dtoa_r+0x5c4>)
 8008590:	2000      	movs	r0, #0
 8008592:	f7f7 fe81 	bl	8000298 <__aeabi_dsub>
 8008596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800859a:	f7f8 faa7 	bl	8000aec <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f040 8095 	bne.w	80086ce <_dtoa_r+0x6be>
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	f43f af50 	beq.w	800844a <_dtoa_r+0x43a>
 80085aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085ae:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <_dtoa_r+0x5c8>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	f7f8 f829 	bl	8000608 <__aeabi_dmul>
 80085b6:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <_dtoa_r+0x5c8>)
 80085b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085bc:	2200      	movs	r2, #0
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ca:	e7c4      	b.n	8008556 <_dtoa_r+0x546>
 80085cc:	0800b850 	.word	0x0800b850
 80085d0:	0800b828 	.word	0x0800b828
 80085d4:	3ff00000 	.word	0x3ff00000
 80085d8:	40240000 	.word	0x40240000
 80085dc:	401c0000 	.word	0x401c0000
 80085e0:	40140000 	.word	0x40140000
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	f7f8 f80c 	bl	8000608 <__aeabi_dmul>
 80085f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80085f6:	4656      	mov	r6, sl
 80085f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fc:	f7f8 fab4 	bl	8000b68 <__aeabi_d2iz>
 8008600:	4605      	mov	r5, r0
 8008602:	f7f7 ff97 	bl	8000534 <__aeabi_i2d>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860e:	f7f7 fe43 	bl	8000298 <__aeabi_dsub>
 8008612:	3530      	adds	r5, #48	@ 0x30
 8008614:	f806 5b01 	strb.w	r5, [r6], #1
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	42a6      	cmp	r6, r4
 800861e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	d124      	bne.n	8008672 <_dtoa_r+0x662>
 8008628:	4bac      	ldr	r3, [pc, #688]	@ (80088dc <_dtoa_r+0x8cc>)
 800862a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800862e:	f7f7 fe35 	bl	800029c <__adddf3>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863a:	f7f8 fa75 	bl	8000b28 <__aeabi_dcmpgt>
 800863e:	2800      	cmp	r0, #0
 8008640:	d145      	bne.n	80086ce <_dtoa_r+0x6be>
 8008642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008646:	49a5      	ldr	r1, [pc, #660]	@ (80088dc <_dtoa_r+0x8cc>)
 8008648:	2000      	movs	r0, #0
 800864a:	f7f7 fe25 	bl	8000298 <__aeabi_dsub>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008656:	f7f8 fa49 	bl	8000aec <__aeabi_dcmplt>
 800865a:	2800      	cmp	r0, #0
 800865c:	f43f aef5 	beq.w	800844a <_dtoa_r+0x43a>
 8008660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008662:	1e73      	subs	r3, r6, #1
 8008664:	9315      	str	r3, [sp, #84]	@ 0x54
 8008666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800866a:	2b30      	cmp	r3, #48	@ 0x30
 800866c:	d0f8      	beq.n	8008660 <_dtoa_r+0x650>
 800866e:	9f04      	ldr	r7, [sp, #16]
 8008670:	e73e      	b.n	80084f0 <_dtoa_r+0x4e0>
 8008672:	4b9b      	ldr	r3, [pc, #620]	@ (80088e0 <_dtoa_r+0x8d0>)
 8008674:	f7f7 ffc8 	bl	8000608 <__aeabi_dmul>
 8008678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867c:	e7bc      	b.n	80085f8 <_dtoa_r+0x5e8>
 800867e:	d10c      	bne.n	800869a <_dtoa_r+0x68a>
 8008680:	4b98      	ldr	r3, [pc, #608]	@ (80088e4 <_dtoa_r+0x8d4>)
 8008682:	2200      	movs	r2, #0
 8008684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008688:	f7f7 ffbe 	bl	8000608 <__aeabi_dmul>
 800868c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008690:	f7f8 fa40 	bl	8000b14 <__aeabi_dcmpge>
 8008694:	2800      	cmp	r0, #0
 8008696:	f000 8157 	beq.w	8008948 <_dtoa_r+0x938>
 800869a:	2400      	movs	r4, #0
 800869c:	4625      	mov	r5, r4
 800869e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086a0:	43db      	mvns	r3, r3
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	4656      	mov	r6, sl
 80086a6:	2700      	movs	r7, #0
 80086a8:	4621      	mov	r1, r4
 80086aa:	4658      	mov	r0, fp
 80086ac:	f000 fbb4 	bl	8008e18 <_Bfree>
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	d0dc      	beq.n	800866e <_dtoa_r+0x65e>
 80086b4:	b12f      	cbz	r7, 80086c2 <_dtoa_r+0x6b2>
 80086b6:	42af      	cmp	r7, r5
 80086b8:	d003      	beq.n	80086c2 <_dtoa_r+0x6b2>
 80086ba:	4639      	mov	r1, r7
 80086bc:	4658      	mov	r0, fp
 80086be:	f000 fbab 	bl	8008e18 <_Bfree>
 80086c2:	4629      	mov	r1, r5
 80086c4:	4658      	mov	r0, fp
 80086c6:	f000 fba7 	bl	8008e18 <_Bfree>
 80086ca:	e7d0      	b.n	800866e <_dtoa_r+0x65e>
 80086cc:	9704      	str	r7, [sp, #16]
 80086ce:	4633      	mov	r3, r6
 80086d0:	461e      	mov	r6, r3
 80086d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086d6:	2a39      	cmp	r2, #57	@ 0x39
 80086d8:	d107      	bne.n	80086ea <_dtoa_r+0x6da>
 80086da:	459a      	cmp	sl, r3
 80086dc:	d1f8      	bne.n	80086d0 <_dtoa_r+0x6c0>
 80086de:	9a04      	ldr	r2, [sp, #16]
 80086e0:	3201      	adds	r2, #1
 80086e2:	9204      	str	r2, [sp, #16]
 80086e4:	2230      	movs	r2, #48	@ 0x30
 80086e6:	f88a 2000 	strb.w	r2, [sl]
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	3201      	adds	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e7bd      	b.n	800866e <_dtoa_r+0x65e>
 80086f2:	4b7b      	ldr	r3, [pc, #492]	@ (80088e0 <_dtoa_r+0x8d0>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	f7f7 ff87 	bl	8000608 <__aeabi_dmul>
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	4604      	mov	r4, r0
 8008700:	460d      	mov	r5, r1
 8008702:	f7f8 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f aebb 	beq.w	8008482 <_dtoa_r+0x472>
 800870c:	e6f0      	b.n	80084f0 <_dtoa_r+0x4e0>
 800870e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008710:	2a00      	cmp	r2, #0
 8008712:	f000 80db 	beq.w	80088cc <_dtoa_r+0x8bc>
 8008716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008718:	2a01      	cmp	r2, #1
 800871a:	f300 80bf 	bgt.w	800889c <_dtoa_r+0x88c>
 800871e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008720:	2a00      	cmp	r2, #0
 8008722:	f000 80b7 	beq.w	8008894 <_dtoa_r+0x884>
 8008726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800872a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800872c:	4646      	mov	r6, r8
 800872e:	9a08      	ldr	r2, [sp, #32]
 8008730:	2101      	movs	r1, #1
 8008732:	441a      	add	r2, r3
 8008734:	4658      	mov	r0, fp
 8008736:	4498      	add	r8, r3
 8008738:	9208      	str	r2, [sp, #32]
 800873a:	f000 fc6b 	bl	8009014 <__i2b>
 800873e:	4605      	mov	r5, r0
 8008740:	b15e      	cbz	r6, 800875a <_dtoa_r+0x74a>
 8008742:	9b08      	ldr	r3, [sp, #32]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd08      	ble.n	800875a <_dtoa_r+0x74a>
 8008748:	42b3      	cmp	r3, r6
 800874a:	9a08      	ldr	r2, [sp, #32]
 800874c:	bfa8      	it	ge
 800874e:	4633      	movge	r3, r6
 8008750:	eba8 0803 	sub.w	r8, r8, r3
 8008754:	1af6      	subs	r6, r6, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800875c:	b1f3      	cbz	r3, 800879c <_dtoa_r+0x78c>
 800875e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80b7 	beq.w	80088d4 <_dtoa_r+0x8c4>
 8008766:	b18c      	cbz	r4, 800878c <_dtoa_r+0x77c>
 8008768:	4629      	mov	r1, r5
 800876a:	4622      	mov	r2, r4
 800876c:	4658      	mov	r0, fp
 800876e:	f000 fd11 	bl	8009194 <__pow5mult>
 8008772:	464a      	mov	r2, r9
 8008774:	4601      	mov	r1, r0
 8008776:	4605      	mov	r5, r0
 8008778:	4658      	mov	r0, fp
 800877a:	f000 fc61 	bl	8009040 <__multiply>
 800877e:	4649      	mov	r1, r9
 8008780:	9004      	str	r0, [sp, #16]
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fb48 	bl	8008e18 <_Bfree>
 8008788:	9b04      	ldr	r3, [sp, #16]
 800878a:	4699      	mov	r9, r3
 800878c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878e:	1b1a      	subs	r2, r3, r4
 8008790:	d004      	beq.n	800879c <_dtoa_r+0x78c>
 8008792:	4649      	mov	r1, r9
 8008794:	4658      	mov	r0, fp
 8008796:	f000 fcfd 	bl	8009194 <__pow5mult>
 800879a:	4681      	mov	r9, r0
 800879c:	2101      	movs	r1, #1
 800879e:	4658      	mov	r0, fp
 80087a0:	f000 fc38 	bl	8009014 <__i2b>
 80087a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a6:	4604      	mov	r4, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 81cf 	beq.w	8008b4c <_dtoa_r+0xb3c>
 80087ae:	461a      	mov	r2, r3
 80087b0:	4601      	mov	r1, r0
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 fcee 	bl	8009194 <__pow5mult>
 80087b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	4604      	mov	r4, r0
 80087be:	f300 8095 	bgt.w	80088ec <_dtoa_r+0x8dc>
 80087c2:	9b02      	ldr	r3, [sp, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 8087 	bne.w	80088d8 <_dtoa_r+0x8c8>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f040 8089 	bne.w	80088e8 <_dtoa_r+0x8d8>
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087dc:	0d1b      	lsrs	r3, r3, #20
 80087de:	051b      	lsls	r3, r3, #20
 80087e0:	b12b      	cbz	r3, 80087ee <_dtoa_r+0x7de>
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	3301      	adds	r3, #1
 80087e6:	9308      	str	r3, [sp, #32]
 80087e8:	f108 0801 	add.w	r8, r8, #1
 80087ec:	2301      	movs	r3, #1
 80087ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 81b0 	beq.w	8008b58 <_dtoa_r+0xb48>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087fe:	6918      	ldr	r0, [r3, #16]
 8008800:	f000 fbbc 	bl	8008f7c <__hi0bits>
 8008804:	f1c0 0020 	rsb	r0, r0, #32
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	4418      	add	r0, r3
 800880c:	f010 001f 	ands.w	r0, r0, #31
 8008810:	d077      	beq.n	8008902 <_dtoa_r+0x8f2>
 8008812:	f1c0 0320 	rsb	r3, r0, #32
 8008816:	2b04      	cmp	r3, #4
 8008818:	dd6b      	ble.n	80088f2 <_dtoa_r+0x8e2>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	f1c0 001c 	rsb	r0, r0, #28
 8008820:	4403      	add	r3, r0
 8008822:	4480      	add	r8, r0
 8008824:	4406      	add	r6, r0
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	f1b8 0f00 	cmp.w	r8, #0
 800882c:	dd05      	ble.n	800883a <_dtoa_r+0x82a>
 800882e:	4649      	mov	r1, r9
 8008830:	4642      	mov	r2, r8
 8008832:	4658      	mov	r0, fp
 8008834:	f000 fd08 	bl	8009248 <__lshift>
 8008838:	4681      	mov	r9, r0
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	dd05      	ble.n	800884c <_dtoa_r+0x83c>
 8008840:	4621      	mov	r1, r4
 8008842:	461a      	mov	r2, r3
 8008844:	4658      	mov	r0, fp
 8008846:	f000 fcff 	bl	8009248 <__lshift>
 800884a:	4604      	mov	r4, r0
 800884c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800884e:	2b00      	cmp	r3, #0
 8008850:	d059      	beq.n	8008906 <_dtoa_r+0x8f6>
 8008852:	4621      	mov	r1, r4
 8008854:	4648      	mov	r0, r9
 8008856:	f000 fd63 	bl	8009320 <__mcmp>
 800885a:	2800      	cmp	r0, #0
 800885c:	da53      	bge.n	8008906 <_dtoa_r+0x8f6>
 800885e:	1e7b      	subs	r3, r7, #1
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	4649      	mov	r1, r9
 8008864:	2300      	movs	r3, #0
 8008866:	220a      	movs	r2, #10
 8008868:	4658      	mov	r0, fp
 800886a:	f000 faf7 	bl	8008e5c <__multadd>
 800886e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008870:	4681      	mov	r9, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 8172 	beq.w	8008b5c <_dtoa_r+0xb4c>
 8008878:	2300      	movs	r3, #0
 800887a:	4629      	mov	r1, r5
 800887c:	220a      	movs	r2, #10
 800887e:	4658      	mov	r0, fp
 8008880:	f000 faec 	bl	8008e5c <__multadd>
 8008884:	9b00      	ldr	r3, [sp, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	4605      	mov	r5, r0
 800888a:	dc67      	bgt.n	800895c <_dtoa_r+0x94c>
 800888c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888e:	2b02      	cmp	r3, #2
 8008890:	dc41      	bgt.n	8008916 <_dtoa_r+0x906>
 8008892:	e063      	b.n	800895c <_dtoa_r+0x94c>
 8008894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800889a:	e746      	b.n	800872a <_dtoa_r+0x71a>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	1e5c      	subs	r4, r3, #1
 80088a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	bfbf      	itttt	lt
 80088a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80088aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088ac:	1ae3      	sublt	r3, r4, r3
 80088ae:	bfb4      	ite	lt
 80088b0:	18d2      	addlt	r2, r2, r3
 80088b2:	1b1c      	subge	r4, r3, r4
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	bfbc      	itt	lt
 80088b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80088ba:	2400      	movlt	r4, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	bfb5      	itete	lt
 80088c0:	eba8 0603 	sublt.w	r6, r8, r3
 80088c4:	9b07      	ldrge	r3, [sp, #28]
 80088c6:	2300      	movlt	r3, #0
 80088c8:	4646      	movge	r6, r8
 80088ca:	e730      	b.n	800872e <_dtoa_r+0x71e>
 80088cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80088d0:	4646      	mov	r6, r8
 80088d2:	e735      	b.n	8008740 <_dtoa_r+0x730>
 80088d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088d6:	e75c      	b.n	8008792 <_dtoa_r+0x782>
 80088d8:	2300      	movs	r3, #0
 80088da:	e788      	b.n	80087ee <_dtoa_r+0x7de>
 80088dc:	3fe00000 	.word	0x3fe00000
 80088e0:	40240000 	.word	0x40240000
 80088e4:	40140000 	.word	0x40140000
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	e780      	b.n	80087ee <_dtoa_r+0x7de>
 80088ec:	2300      	movs	r3, #0
 80088ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80088f0:	e782      	b.n	80087f8 <_dtoa_r+0x7e8>
 80088f2:	d099      	beq.n	8008828 <_dtoa_r+0x818>
 80088f4:	9a08      	ldr	r2, [sp, #32]
 80088f6:	331c      	adds	r3, #28
 80088f8:	441a      	add	r2, r3
 80088fa:	4498      	add	r8, r3
 80088fc:	441e      	add	r6, r3
 80088fe:	9208      	str	r2, [sp, #32]
 8008900:	e792      	b.n	8008828 <_dtoa_r+0x818>
 8008902:	4603      	mov	r3, r0
 8008904:	e7f6      	b.n	80088f4 <_dtoa_r+0x8e4>
 8008906:	9b07      	ldr	r3, [sp, #28]
 8008908:	9704      	str	r7, [sp, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc20      	bgt.n	8008950 <_dtoa_r+0x940>
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008912:	2b02      	cmp	r3, #2
 8008914:	dd1e      	ble.n	8008954 <_dtoa_r+0x944>
 8008916:	9b00      	ldr	r3, [sp, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f47f aec0 	bne.w	800869e <_dtoa_r+0x68e>
 800891e:	4621      	mov	r1, r4
 8008920:	2205      	movs	r2, #5
 8008922:	4658      	mov	r0, fp
 8008924:	f000 fa9a 	bl	8008e5c <__multadd>
 8008928:	4601      	mov	r1, r0
 800892a:	4604      	mov	r4, r0
 800892c:	4648      	mov	r0, r9
 800892e:	f000 fcf7 	bl	8009320 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	f77f aeb3 	ble.w	800869e <_dtoa_r+0x68e>
 8008938:	4656      	mov	r6, sl
 800893a:	2331      	movs	r3, #49	@ 0x31
 800893c:	f806 3b01 	strb.w	r3, [r6], #1
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	3301      	adds	r3, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	e6ae      	b.n	80086a6 <_dtoa_r+0x696>
 8008948:	9c07      	ldr	r4, [sp, #28]
 800894a:	9704      	str	r7, [sp, #16]
 800894c:	4625      	mov	r5, r4
 800894e:	e7f3      	b.n	8008938 <_dtoa_r+0x928>
 8008950:	9b07      	ldr	r3, [sp, #28]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8104 	beq.w	8008b64 <_dtoa_r+0xb54>
 800895c:	2e00      	cmp	r6, #0
 800895e:	dd05      	ble.n	800896c <_dtoa_r+0x95c>
 8008960:	4629      	mov	r1, r5
 8008962:	4632      	mov	r2, r6
 8008964:	4658      	mov	r0, fp
 8008966:	f000 fc6f 	bl	8009248 <__lshift>
 800896a:	4605      	mov	r5, r0
 800896c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d05a      	beq.n	8008a28 <_dtoa_r+0xa18>
 8008972:	6869      	ldr	r1, [r5, #4]
 8008974:	4658      	mov	r0, fp
 8008976:	f000 fa0f 	bl	8008d98 <_Balloc>
 800897a:	4606      	mov	r6, r0
 800897c:	b928      	cbnz	r0, 800898a <_dtoa_r+0x97a>
 800897e:	4b84      	ldr	r3, [pc, #528]	@ (8008b90 <_dtoa_r+0xb80>)
 8008980:	4602      	mov	r2, r0
 8008982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008986:	f7ff bb5a 	b.w	800803e <_dtoa_r+0x2e>
 800898a:	692a      	ldr	r2, [r5, #16]
 800898c:	3202      	adds	r2, #2
 800898e:	0092      	lsls	r2, r2, #2
 8008990:	f105 010c 	add.w	r1, r5, #12
 8008994:	300c      	adds	r0, #12
 8008996:	f001 ff75 	bl	800a884 <memcpy>
 800899a:	2201      	movs	r2, #1
 800899c:	4631      	mov	r1, r6
 800899e:	4658      	mov	r0, fp
 80089a0:	f000 fc52 	bl	8009248 <__lshift>
 80089a4:	f10a 0301 	add.w	r3, sl, #1
 80089a8:	9307      	str	r3, [sp, #28]
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	4453      	add	r3, sl
 80089ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089b0:	9b02      	ldr	r3, [sp, #8]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	462f      	mov	r7, r5
 80089b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ba:	4605      	mov	r5, r0
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	4621      	mov	r1, r4
 80089c0:	3b01      	subs	r3, #1
 80089c2:	4648      	mov	r0, r9
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	f7ff fa9b 	bl	8007f00 <quorem>
 80089ca:	4639      	mov	r1, r7
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089d2:	4648      	mov	r0, r9
 80089d4:	f000 fca4 	bl	8009320 <__mcmp>
 80089d8:	462a      	mov	r2, r5
 80089da:	9008      	str	r0, [sp, #32]
 80089dc:	4621      	mov	r1, r4
 80089de:	4658      	mov	r0, fp
 80089e0:	f000 fcba 	bl	8009358 <__mdiff>
 80089e4:	68c2      	ldr	r2, [r0, #12]
 80089e6:	4606      	mov	r6, r0
 80089e8:	bb02      	cbnz	r2, 8008a2c <_dtoa_r+0xa1c>
 80089ea:	4601      	mov	r1, r0
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fc97 	bl	8009320 <__mcmp>
 80089f2:	4602      	mov	r2, r0
 80089f4:	4631      	mov	r1, r6
 80089f6:	4658      	mov	r0, fp
 80089f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089fa:	f000 fa0d 	bl	8008e18 <_Bfree>
 80089fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a02:	9e07      	ldr	r6, [sp, #28]
 8008a04:	ea43 0102 	orr.w	r1, r3, r2
 8008a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a0a:	4319      	orrs	r1, r3
 8008a0c:	d110      	bne.n	8008a30 <_dtoa_r+0xa20>
 8008a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a12:	d029      	beq.n	8008a68 <_dtoa_r+0xa58>
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dd02      	ble.n	8008a20 <_dtoa_r+0xa10>
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a20:	9b00      	ldr	r3, [sp, #0]
 8008a22:	f883 8000 	strb.w	r8, [r3]
 8008a26:	e63f      	b.n	80086a8 <_dtoa_r+0x698>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	e7bb      	b.n	80089a4 <_dtoa_r+0x994>
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	e7e1      	b.n	80089f4 <_dtoa_r+0x9e4>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	db04      	blt.n	8008a40 <_dtoa_r+0xa30>
 8008a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	d120      	bne.n	8008a82 <_dtoa_r+0xa72>
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	dded      	ble.n	8008a20 <_dtoa_r+0xa10>
 8008a44:	4649      	mov	r1, r9
 8008a46:	2201      	movs	r2, #1
 8008a48:	4658      	mov	r0, fp
 8008a4a:	f000 fbfd 	bl	8009248 <__lshift>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4681      	mov	r9, r0
 8008a52:	f000 fc65 	bl	8009320 <__mcmp>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	dc03      	bgt.n	8008a62 <_dtoa_r+0xa52>
 8008a5a:	d1e1      	bne.n	8008a20 <_dtoa_r+0xa10>
 8008a5c:	f018 0f01 	tst.w	r8, #1
 8008a60:	d0de      	beq.n	8008a20 <_dtoa_r+0xa10>
 8008a62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a66:	d1d8      	bne.n	8008a1a <_dtoa_r+0xa0a>
 8008a68:	9a00      	ldr	r2, [sp, #0]
 8008a6a:	2339      	movs	r3, #57	@ 0x39
 8008a6c:	7013      	strb	r3, [r2, #0]
 8008a6e:	4633      	mov	r3, r6
 8008a70:	461e      	mov	r6, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a78:	2a39      	cmp	r2, #57	@ 0x39
 8008a7a:	d052      	beq.n	8008b22 <_dtoa_r+0xb12>
 8008a7c:	3201      	adds	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e612      	b.n	80086a8 <_dtoa_r+0x698>
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	dd07      	ble.n	8008a96 <_dtoa_r+0xa86>
 8008a86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a8a:	d0ed      	beq.n	8008a68 <_dtoa_r+0xa58>
 8008a8c:	9a00      	ldr	r2, [sp, #0]
 8008a8e:	f108 0301 	add.w	r3, r8, #1
 8008a92:	7013      	strb	r3, [r2, #0]
 8008a94:	e608      	b.n	80086a8 <_dtoa_r+0x698>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	9a07      	ldr	r2, [sp, #28]
 8008a9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d028      	beq.n	8008af6 <_dtoa_r+0xae6>
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	220a      	movs	r2, #10
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f000 f9d6 	bl	8008e5c <__multadd>
 8008ab0:	42af      	cmp	r7, r5
 8008ab2:	4681      	mov	r9, r0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	f04f 020a 	mov.w	r2, #10
 8008abc:	4639      	mov	r1, r7
 8008abe:	4658      	mov	r0, fp
 8008ac0:	d107      	bne.n	8008ad2 <_dtoa_r+0xac2>
 8008ac2:	f000 f9cb 	bl	8008e5c <__multadd>
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	4605      	mov	r5, r0
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	3301      	adds	r3, #1
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	e774      	b.n	80089bc <_dtoa_r+0x9ac>
 8008ad2:	f000 f9c3 	bl	8008e5c <__multadd>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4607      	mov	r7, r0
 8008ada:	2300      	movs	r3, #0
 8008adc:	220a      	movs	r2, #10
 8008ade:	4658      	mov	r0, fp
 8008ae0:	f000 f9bc 	bl	8008e5c <__multadd>
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	e7f0      	b.n	8008aca <_dtoa_r+0xaba>
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfcc      	ite	gt
 8008aee:	461e      	movgt	r6, r3
 8008af0:	2601      	movle	r6, #1
 8008af2:	4456      	add	r6, sl
 8008af4:	2700      	movs	r7, #0
 8008af6:	4649      	mov	r1, r9
 8008af8:	2201      	movs	r2, #1
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fba4 	bl	8009248 <__lshift>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4681      	mov	r9, r0
 8008b04:	f000 fc0c 	bl	8009320 <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dcb0      	bgt.n	8008a6e <_dtoa_r+0xa5e>
 8008b0c:	d102      	bne.n	8008b14 <_dtoa_r+0xb04>
 8008b0e:	f018 0f01 	tst.w	r8, #1
 8008b12:	d1ac      	bne.n	8008a6e <_dtoa_r+0xa5e>
 8008b14:	4633      	mov	r3, r6
 8008b16:	461e      	mov	r6, r3
 8008b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b1c:	2a30      	cmp	r2, #48	@ 0x30
 8008b1e:	d0fa      	beq.n	8008b16 <_dtoa_r+0xb06>
 8008b20:	e5c2      	b.n	80086a8 <_dtoa_r+0x698>
 8008b22:	459a      	cmp	sl, r3
 8008b24:	d1a4      	bne.n	8008a70 <_dtoa_r+0xa60>
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	2331      	movs	r3, #49	@ 0x31
 8008b2e:	f88a 3000 	strb.w	r3, [sl]
 8008b32:	e5b9      	b.n	80086a8 <_dtoa_r+0x698>
 8008b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b94 <_dtoa_r+0xb84>
 8008b3a:	b11b      	cbz	r3, 8008b44 <_dtoa_r+0xb34>
 8008b3c:	f10a 0308 	add.w	r3, sl, #8
 8008b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	4650      	mov	r0, sl
 8008b46:	b019      	add	sp, #100	@ 0x64
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	f77f ae37 	ble.w	80087c2 <_dtoa_r+0x7b2>
 8008b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e655      	b.n	8008808 <_dtoa_r+0x7f8>
 8008b5c:	9b00      	ldr	r3, [sp, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f77f aed6 	ble.w	8008910 <_dtoa_r+0x900>
 8008b64:	4656      	mov	r6, sl
 8008b66:	4621      	mov	r1, r4
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f7ff f9c9 	bl	8007f00 <quorem>
 8008b6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b72:	f806 8b01 	strb.w	r8, [r6], #1
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	eba6 020a 	sub.w	r2, r6, sl
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	ddb3      	ble.n	8008ae8 <_dtoa_r+0xad8>
 8008b80:	4649      	mov	r1, r9
 8008b82:	2300      	movs	r3, #0
 8008b84:	220a      	movs	r2, #10
 8008b86:	4658      	mov	r0, fp
 8008b88:	f000 f968 	bl	8008e5c <__multadd>
 8008b8c:	4681      	mov	r9, r0
 8008b8e:	e7ea      	b.n	8008b66 <_dtoa_r+0xb56>
 8008b90:	0800b7b1 	.word	0x0800b7b1
 8008b94:	0800b735 	.word	0x0800b735

08008b98 <_free_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d041      	beq.n	8008c24 <_free_r+0x8c>
 8008ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba4:	1f0c      	subs	r4, r1, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	18e4      	addlt	r4, r4, r3
 8008bac:	f000 f8e8 	bl	8008d80 <__malloc_lock>
 8008bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c28 <_free_r+0x90>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x2c>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc0:	f000 b8e4 	b.w	8008d8c <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x42>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	1821      	adds	r1, r4, r0
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1809      	addeq	r1, r1, r0
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x1e>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x4c>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x42>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1850      	adds	r0, r2, r1
 8008be8:	42a0      	cmp	r0, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x6c>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	4401      	add	r1, r0
 8008bf0:	1850      	adds	r0, r2, r1
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x22>
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	4408      	add	r0, r1
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x22>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x74>
 8008c06:	230c      	movs	r3, #12
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x22>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf04      	itt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	bf04      	itt	eq
 8008c1c:	1809      	addeq	r1, r1, r0
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7ca      	b.n	8008bba <_free_r+0x22>
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	20000820 	.word	0x20000820

08008c2c <malloc>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <malloc+0xc>)
 8008c2e:	4601      	mov	r1, r0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f000 b825 	b.w	8008c80 <_malloc_r>
 8008c36:	bf00      	nop
 8008c38:	2000005c 	.word	0x2000005c

08008c3c <sbrk_aligned>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c7c <sbrk_aligned+0x40>)
 8008c40:	460c      	mov	r4, r1
 8008c42:	6831      	ldr	r1, [r6, #0]
 8008c44:	4605      	mov	r5, r0
 8008c46:	b911      	cbnz	r1, 8008c4e <sbrk_aligned+0x12>
 8008c48:	f001 fe0c 	bl	800a864 <_sbrk_r>
 8008c4c:	6030      	str	r0, [r6, #0]
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f001 fe07 	bl	800a864 <_sbrk_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d103      	bne.n	8008c62 <sbrk_aligned+0x26>
 8008c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c5e:	4620      	mov	r0, r4
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	1cc4      	adds	r4, r0, #3
 8008c64:	f024 0403 	bic.w	r4, r4, #3
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d0f8      	beq.n	8008c5e <sbrk_aligned+0x22>
 8008c6c:	1a21      	subs	r1, r4, r0
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f001 fdf8 	bl	800a864 <_sbrk_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1f2      	bne.n	8008c5e <sbrk_aligned+0x22>
 8008c78:	e7ef      	b.n	8008c5a <sbrk_aligned+0x1e>
 8008c7a:	bf00      	nop
 8008c7c:	2000081c 	.word	0x2000081c

08008c80 <_malloc_r>:
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	1ccd      	adds	r5, r1, #3
 8008c86:	f025 0503 	bic.w	r5, r5, #3
 8008c8a:	3508      	adds	r5, #8
 8008c8c:	2d0c      	cmp	r5, #12
 8008c8e:	bf38      	it	cc
 8008c90:	250c      	movcc	r5, #12
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	4606      	mov	r6, r0
 8008c96:	db01      	blt.n	8008c9c <_malloc_r+0x1c>
 8008c98:	42a9      	cmp	r1, r5
 8008c9a:	d904      	bls.n	8008ca6 <_malloc_r+0x26>
 8008c9c:	230c      	movs	r3, #12
 8008c9e:	6033      	str	r3, [r6, #0]
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d7c <_malloc_r+0xfc>
 8008caa:	f000 f869 	bl	8008d80 <__malloc_lock>
 8008cae:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb2:	461c      	mov	r4, r3
 8008cb4:	bb44      	cbnz	r4, 8008d08 <_malloc_r+0x88>
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff ffbf 	bl	8008c3c <sbrk_aligned>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	d158      	bne.n	8008d76 <_malloc_r+0xf6>
 8008cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8008cc8:	4627      	mov	r7, r4
 8008cca:	2f00      	cmp	r7, #0
 8008ccc:	d143      	bne.n	8008d56 <_malloc_r+0xd6>
 8008cce:	2c00      	cmp	r4, #0
 8008cd0:	d04b      	beq.n	8008d6a <_malloc_r+0xea>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	eb04 0903 	add.w	r9, r4, r3
 8008cdc:	f001 fdc2 	bl	800a864 <_sbrk_r>
 8008ce0:	4581      	cmp	r9, r0
 8008ce2:	d142      	bne.n	8008d6a <_malloc_r+0xea>
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	1a6d      	subs	r5, r5, r1
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7ff ffa6 	bl	8008c3c <sbrk_aligned>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d03a      	beq.n	8008d6a <_malloc_r+0xea>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	442b      	add	r3, r5
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	bb62      	cbnz	r2, 8008d5c <_malloc_r+0xdc>
 8008d02:	f8c8 7000 	str.w	r7, [r8]
 8008d06:	e00f      	b.n	8008d28 <_malloc_r+0xa8>
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	1b52      	subs	r2, r2, r5
 8008d0c:	d420      	bmi.n	8008d50 <_malloc_r+0xd0>
 8008d0e:	2a0b      	cmp	r2, #11
 8008d10:	d917      	bls.n	8008d42 <_malloc_r+0xc2>
 8008d12:	1961      	adds	r1, r4, r5
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	6025      	str	r5, [r4, #0]
 8008d18:	bf18      	it	ne
 8008d1a:	6059      	strne	r1, [r3, #4]
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	bf08      	it	eq
 8008d20:	f8c8 1000 	streq.w	r1, [r8]
 8008d24:	5162      	str	r2, [r4, r5]
 8008d26:	604b      	str	r3, [r1, #4]
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f000 f82f 	bl	8008d8c <__malloc_unlock>
 8008d2e:	f104 000b 	add.w	r0, r4, #11
 8008d32:	1d23      	adds	r3, r4, #4
 8008d34:	f020 0007 	bic.w	r0, r0, #7
 8008d38:	1ac2      	subs	r2, r0, r3
 8008d3a:	bf1c      	itt	ne
 8008d3c:	1a1b      	subne	r3, r3, r0
 8008d3e:	50a3      	strne	r3, [r4, r2]
 8008d40:	e7af      	b.n	8008ca2 <_malloc_r+0x22>
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	bf0c      	ite	eq
 8008d48:	f8c8 2000 	streq.w	r2, [r8]
 8008d4c:	605a      	strne	r2, [r3, #4]
 8008d4e:	e7eb      	b.n	8008d28 <_malloc_r+0xa8>
 8008d50:	4623      	mov	r3, r4
 8008d52:	6864      	ldr	r4, [r4, #4]
 8008d54:	e7ae      	b.n	8008cb4 <_malloc_r+0x34>
 8008d56:	463c      	mov	r4, r7
 8008d58:	687f      	ldr	r7, [r7, #4]
 8008d5a:	e7b6      	b.n	8008cca <_malloc_r+0x4a>
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	d1fb      	bne.n	8008d5c <_malloc_r+0xdc>
 8008d64:	2300      	movs	r3, #0
 8008d66:	6053      	str	r3, [r2, #4]
 8008d68:	e7de      	b.n	8008d28 <_malloc_r+0xa8>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f80c 	bl	8008d8c <__malloc_unlock>
 8008d74:	e794      	b.n	8008ca0 <_malloc_r+0x20>
 8008d76:	6005      	str	r5, [r0, #0]
 8008d78:	e7d6      	b.n	8008d28 <_malloc_r+0xa8>
 8008d7a:	bf00      	nop
 8008d7c:	20000820 	.word	0x20000820

08008d80 <__malloc_lock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	@ (8008d88 <__malloc_lock+0x8>)
 8008d82:	f7ff b8b4 	b.w	8007eee <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20000818 	.word	0x20000818

08008d8c <__malloc_unlock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	@ (8008d94 <__malloc_unlock+0x8>)
 8008d8e:	f7ff b8af 	b.w	8007ef0 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000818 	.word	0x20000818

08008d98 <_Balloc>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	69c6      	ldr	r6, [r0, #28]
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	b976      	cbnz	r6, 8008dc0 <_Balloc+0x28>
 8008da2:	2010      	movs	r0, #16
 8008da4:	f7ff ff42 	bl	8008c2c <malloc>
 8008da8:	4602      	mov	r2, r0
 8008daa:	61e0      	str	r0, [r4, #28]
 8008dac:	b920      	cbnz	r0, 8008db8 <_Balloc+0x20>
 8008dae:	4b18      	ldr	r3, [pc, #96]	@ (8008e10 <_Balloc+0x78>)
 8008db0:	4818      	ldr	r0, [pc, #96]	@ (8008e14 <_Balloc+0x7c>)
 8008db2:	216b      	movs	r1, #107	@ 0x6b
 8008db4:	f001 fd7c 	bl	800a8b0 <__assert_func>
 8008db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dbc:	6006      	str	r6, [r0, #0]
 8008dbe:	60c6      	str	r6, [r0, #12]
 8008dc0:	69e6      	ldr	r6, [r4, #28]
 8008dc2:	68f3      	ldr	r3, [r6, #12]
 8008dc4:	b183      	cbz	r3, 8008de8 <_Balloc+0x50>
 8008dc6:	69e3      	ldr	r3, [r4, #28]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dce:	b9b8      	cbnz	r0, 8008e00 <_Balloc+0x68>
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8008dd6:	1d72      	adds	r2, r6, #5
 8008dd8:	0092      	lsls	r2, r2, #2
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f001 fd86 	bl	800a8ec <_calloc_r>
 8008de0:	b160      	cbz	r0, 8008dfc <_Balloc+0x64>
 8008de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008de6:	e00e      	b.n	8008e06 <_Balloc+0x6e>
 8008de8:	2221      	movs	r2, #33	@ 0x21
 8008dea:	2104      	movs	r1, #4
 8008dec:	4620      	mov	r0, r4
 8008dee:	f001 fd7d 	bl	800a8ec <_calloc_r>
 8008df2:	69e3      	ldr	r3, [r4, #28]
 8008df4:	60f0      	str	r0, [r6, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e4      	bne.n	8008dc6 <_Balloc+0x2e>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	6802      	ldr	r2, [r0, #0]
 8008e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e06:	2300      	movs	r3, #0
 8008e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e0c:	e7f7      	b.n	8008dfe <_Balloc+0x66>
 8008e0e:	bf00      	nop
 8008e10:	0800b742 	.word	0x0800b742
 8008e14:	0800b7c2 	.word	0x0800b7c2

08008e18 <_Bfree>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	69c6      	ldr	r6, [r0, #28]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b976      	cbnz	r6, 8008e40 <_Bfree+0x28>
 8008e22:	2010      	movs	r0, #16
 8008e24:	f7ff ff02 	bl	8008c2c <malloc>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	61e8      	str	r0, [r5, #28]
 8008e2c:	b920      	cbnz	r0, 8008e38 <_Bfree+0x20>
 8008e2e:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <_Bfree+0x3c>)
 8008e30:	4809      	ldr	r0, [pc, #36]	@ (8008e58 <_Bfree+0x40>)
 8008e32:	218f      	movs	r1, #143	@ 0x8f
 8008e34:	f001 fd3c 	bl	800a8b0 <__assert_func>
 8008e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e3c:	6006      	str	r6, [r0, #0]
 8008e3e:	60c6      	str	r6, [r0, #12]
 8008e40:	b13c      	cbz	r4, 8008e52 <_Bfree+0x3a>
 8008e42:	69eb      	ldr	r3, [r5, #28]
 8008e44:	6862      	ldr	r2, [r4, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e4c:	6021      	str	r1, [r4, #0]
 8008e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0800b742 	.word	0x0800b742
 8008e58:	0800b7c2 	.word	0x0800b7c2

08008e5c <__multadd>:
 8008e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e60:	690d      	ldr	r5, [r1, #16]
 8008e62:	4607      	mov	r7, r0
 8008e64:	460c      	mov	r4, r1
 8008e66:	461e      	mov	r6, r3
 8008e68:	f101 0c14 	add.w	ip, r1, #20
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e72:	b299      	uxth	r1, r3
 8008e74:	fb02 6101 	mla	r1, r2, r1, r6
 8008e78:	0c1e      	lsrs	r6, r3, #16
 8008e7a:	0c0b      	lsrs	r3, r1, #16
 8008e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e80:	b289      	uxth	r1, r1
 8008e82:	3001      	adds	r0, #1
 8008e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e88:	4285      	cmp	r5, r0
 8008e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e92:	dcec      	bgt.n	8008e6e <__multadd+0x12>
 8008e94:	b30e      	cbz	r6, 8008eda <__multadd+0x7e>
 8008e96:	68a3      	ldr	r3, [r4, #8]
 8008e98:	42ab      	cmp	r3, r5
 8008e9a:	dc19      	bgt.n	8008ed0 <__multadd+0x74>
 8008e9c:	6861      	ldr	r1, [r4, #4]
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	3101      	adds	r1, #1
 8008ea2:	f7ff ff79 	bl	8008d98 <_Balloc>
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	b928      	cbnz	r0, 8008eb6 <__multadd+0x5a>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee0 <__multadd+0x84>)
 8008eae:	480d      	ldr	r0, [pc, #52]	@ (8008ee4 <__multadd+0x88>)
 8008eb0:	21ba      	movs	r1, #186	@ 0xba
 8008eb2:	f001 fcfd 	bl	800a8b0 <__assert_func>
 8008eb6:	6922      	ldr	r2, [r4, #16]
 8008eb8:	3202      	adds	r2, #2
 8008eba:	f104 010c 	add.w	r1, r4, #12
 8008ebe:	0092      	lsls	r2, r2, #2
 8008ec0:	300c      	adds	r0, #12
 8008ec2:	f001 fcdf 	bl	800a884 <memcpy>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f7ff ffa5 	bl	8008e18 <_Bfree>
 8008ece:	4644      	mov	r4, r8
 8008ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	615e      	str	r6, [r3, #20]
 8008ed8:	6125      	str	r5, [r4, #16]
 8008eda:	4620      	mov	r0, r4
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	0800b7b1 	.word	0x0800b7b1
 8008ee4:	0800b7c2 	.word	0x0800b7c2

08008ee8 <__s2b>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	4615      	mov	r5, r2
 8008ef0:	461f      	mov	r7, r3
 8008ef2:	2209      	movs	r2, #9
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efc:	2100      	movs	r1, #0
 8008efe:	2201      	movs	r2, #1
 8008f00:	429a      	cmp	r2, r3
 8008f02:	db09      	blt.n	8008f18 <__s2b+0x30>
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ff47 	bl	8008d98 <_Balloc>
 8008f0a:	b940      	cbnz	r0, 8008f1e <__s2b+0x36>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	4b19      	ldr	r3, [pc, #100]	@ (8008f74 <__s2b+0x8c>)
 8008f10:	4819      	ldr	r0, [pc, #100]	@ (8008f78 <__s2b+0x90>)
 8008f12:	21d3      	movs	r1, #211	@ 0xd3
 8008f14:	f001 fccc 	bl	800a8b0 <__assert_func>
 8008f18:	0052      	lsls	r2, r2, #1
 8008f1a:	3101      	adds	r1, #1
 8008f1c:	e7f0      	b.n	8008f00 <__s2b+0x18>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	6143      	str	r3, [r0, #20]
 8008f22:	2d09      	cmp	r5, #9
 8008f24:	f04f 0301 	mov.w	r3, #1
 8008f28:	6103      	str	r3, [r0, #16]
 8008f2a:	dd16      	ble.n	8008f5a <__s2b+0x72>
 8008f2c:	f104 0909 	add.w	r9, r4, #9
 8008f30:	46c8      	mov	r8, r9
 8008f32:	442c      	add	r4, r5
 8008f34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f38:	4601      	mov	r1, r0
 8008f3a:	3b30      	subs	r3, #48	@ 0x30
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7ff ff8c 	bl	8008e5c <__multadd>
 8008f44:	45a0      	cmp	r8, r4
 8008f46:	d1f5      	bne.n	8008f34 <__s2b+0x4c>
 8008f48:	f1a5 0408 	sub.w	r4, r5, #8
 8008f4c:	444c      	add	r4, r9
 8008f4e:	1b2d      	subs	r5, r5, r4
 8008f50:	1963      	adds	r3, r4, r5
 8008f52:	42bb      	cmp	r3, r7
 8008f54:	db04      	blt.n	8008f60 <__s2b+0x78>
 8008f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5a:	340a      	adds	r4, #10
 8008f5c:	2509      	movs	r5, #9
 8008f5e:	e7f6      	b.n	8008f4e <__s2b+0x66>
 8008f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f64:	4601      	mov	r1, r0
 8008f66:	3b30      	subs	r3, #48	@ 0x30
 8008f68:	220a      	movs	r2, #10
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ff76 	bl	8008e5c <__multadd>
 8008f70:	e7ee      	b.n	8008f50 <__s2b+0x68>
 8008f72:	bf00      	nop
 8008f74:	0800b7b1 	.word	0x0800b7b1
 8008f78:	0800b7c2 	.word	0x0800b7c2

08008f7c <__hi0bits>:
 8008f7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f80:	4603      	mov	r3, r0
 8008f82:	bf36      	itet	cc
 8008f84:	0403      	lslcc	r3, r0, #16
 8008f86:	2000      	movcs	r0, #0
 8008f88:	2010      	movcc	r0, #16
 8008f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f8e:	bf3c      	itt	cc
 8008f90:	021b      	lslcc	r3, r3, #8
 8008f92:	3008      	addcc	r0, #8
 8008f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f98:	bf3c      	itt	cc
 8008f9a:	011b      	lslcc	r3, r3, #4
 8008f9c:	3004      	addcc	r0, #4
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa2:	bf3c      	itt	cc
 8008fa4:	009b      	lslcc	r3, r3, #2
 8008fa6:	3002      	addcc	r0, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db05      	blt.n	8008fb8 <__hi0bits+0x3c>
 8008fac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fb0:	f100 0001 	add.w	r0, r0, #1
 8008fb4:	bf08      	it	eq
 8008fb6:	2020      	moveq	r0, #32
 8008fb8:	4770      	bx	lr

08008fba <__lo0bits>:
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	f013 0007 	ands.w	r0, r3, #7
 8008fc2:	d00b      	beq.n	8008fdc <__lo0bits+0x22>
 8008fc4:	07d9      	lsls	r1, r3, #31
 8008fc6:	d421      	bmi.n	800900c <__lo0bits+0x52>
 8008fc8:	0798      	lsls	r0, r3, #30
 8008fca:	bf49      	itett	mi
 8008fcc:	085b      	lsrmi	r3, r3, #1
 8008fce:	089b      	lsrpl	r3, r3, #2
 8008fd0:	2001      	movmi	r0, #1
 8008fd2:	6013      	strmi	r3, [r2, #0]
 8008fd4:	bf5c      	itt	pl
 8008fd6:	6013      	strpl	r3, [r2, #0]
 8008fd8:	2002      	movpl	r0, #2
 8008fda:	4770      	bx	lr
 8008fdc:	b299      	uxth	r1, r3
 8008fde:	b909      	cbnz	r1, 8008fe4 <__lo0bits+0x2a>
 8008fe0:	0c1b      	lsrs	r3, r3, #16
 8008fe2:	2010      	movs	r0, #16
 8008fe4:	b2d9      	uxtb	r1, r3
 8008fe6:	b909      	cbnz	r1, 8008fec <__lo0bits+0x32>
 8008fe8:	3008      	adds	r0, #8
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	bf04      	itt	eq
 8008ff0:	091b      	lsreq	r3, r3, #4
 8008ff2:	3004      	addeq	r0, #4
 8008ff4:	0799      	lsls	r1, r3, #30
 8008ff6:	bf04      	itt	eq
 8008ff8:	089b      	lsreq	r3, r3, #2
 8008ffa:	3002      	addeq	r0, #2
 8008ffc:	07d9      	lsls	r1, r3, #31
 8008ffe:	d403      	bmi.n	8009008 <__lo0bits+0x4e>
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	f100 0001 	add.w	r0, r0, #1
 8009006:	d003      	beq.n	8009010 <__lo0bits+0x56>
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	4770      	bx	lr
 800900c:	2000      	movs	r0, #0
 800900e:	4770      	bx	lr
 8009010:	2020      	movs	r0, #32
 8009012:	4770      	bx	lr

08009014 <__i2b>:
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	2101      	movs	r1, #1
 800901a:	f7ff febd 	bl	8008d98 <_Balloc>
 800901e:	4602      	mov	r2, r0
 8009020:	b928      	cbnz	r0, 800902e <__i2b+0x1a>
 8009022:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <__i2b+0x24>)
 8009024:	4805      	ldr	r0, [pc, #20]	@ (800903c <__i2b+0x28>)
 8009026:	f240 1145 	movw	r1, #325	@ 0x145
 800902a:	f001 fc41 	bl	800a8b0 <__assert_func>
 800902e:	2301      	movs	r3, #1
 8009030:	6144      	str	r4, [r0, #20]
 8009032:	6103      	str	r3, [r0, #16]
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	0800b7b1 	.word	0x0800b7b1
 800903c:	0800b7c2 	.word	0x0800b7c2

08009040 <__multiply>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4614      	mov	r4, r2
 8009046:	690a      	ldr	r2, [r1, #16]
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	bfa8      	it	ge
 800904e:	4623      	movge	r3, r4
 8009050:	460f      	mov	r7, r1
 8009052:	bfa4      	itt	ge
 8009054:	460c      	movge	r4, r1
 8009056:	461f      	movge	r7, r3
 8009058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800905c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	6861      	ldr	r1, [r4, #4]
 8009064:	eb0a 0609 	add.w	r6, sl, r9
 8009068:	42b3      	cmp	r3, r6
 800906a:	b085      	sub	sp, #20
 800906c:	bfb8      	it	lt
 800906e:	3101      	addlt	r1, #1
 8009070:	f7ff fe92 	bl	8008d98 <_Balloc>
 8009074:	b930      	cbnz	r0, 8009084 <__multiply+0x44>
 8009076:	4602      	mov	r2, r0
 8009078:	4b44      	ldr	r3, [pc, #272]	@ (800918c <__multiply+0x14c>)
 800907a:	4845      	ldr	r0, [pc, #276]	@ (8009190 <__multiply+0x150>)
 800907c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009080:	f001 fc16 	bl	800a8b0 <__assert_func>
 8009084:	f100 0514 	add.w	r5, r0, #20
 8009088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800908c:	462b      	mov	r3, r5
 800908e:	2200      	movs	r2, #0
 8009090:	4543      	cmp	r3, r8
 8009092:	d321      	bcc.n	80090d8 <__multiply+0x98>
 8009094:	f107 0114 	add.w	r1, r7, #20
 8009098:	f104 0214 	add.w	r2, r4, #20
 800909c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	1b13      	subs	r3, r2, r4
 80090a8:	3b15      	subs	r3, #21
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	3304      	adds	r3, #4
 80090b0:	f104 0715 	add.w	r7, r4, #21
 80090b4:	42ba      	cmp	r2, r7
 80090b6:	bf38      	it	cc
 80090b8:	2304      	movcc	r3, #4
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	9103      	str	r1, [sp, #12]
 80090c0:	428b      	cmp	r3, r1
 80090c2:	d80c      	bhi.n	80090de <__multiply+0x9e>
 80090c4:	2e00      	cmp	r6, #0
 80090c6:	dd03      	ble.n	80090d0 <__multiply+0x90>
 80090c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d05b      	beq.n	8009188 <__multiply+0x148>
 80090d0:	6106      	str	r6, [r0, #16]
 80090d2:	b005      	add	sp, #20
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	f843 2b04 	str.w	r2, [r3], #4
 80090dc:	e7d8      	b.n	8009090 <__multiply+0x50>
 80090de:	f8b1 a000 	ldrh.w	sl, [r1]
 80090e2:	f1ba 0f00 	cmp.w	sl, #0
 80090e6:	d024      	beq.n	8009132 <__multiply+0xf2>
 80090e8:	f104 0e14 	add.w	lr, r4, #20
 80090ec:	46a9      	mov	r9, r5
 80090ee:	f04f 0c00 	mov.w	ip, #0
 80090f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090f6:	f8d9 3000 	ldr.w	r3, [r9]
 80090fa:	fa1f fb87 	uxth.w	fp, r7
 80090fe:	b29b      	uxth	r3, r3
 8009100:	fb0a 330b 	mla	r3, sl, fp, r3
 8009104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009108:	f8d9 7000 	ldr.w	r7, [r9]
 800910c:	4463      	add	r3, ip
 800910e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009112:	fb0a c70b 	mla	r7, sl, fp, ip
 8009116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800911a:	b29b      	uxth	r3, r3
 800911c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009120:	4572      	cmp	r2, lr
 8009122:	f849 3b04 	str.w	r3, [r9], #4
 8009126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800912a:	d8e2      	bhi.n	80090f2 <__multiply+0xb2>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	f845 c003 	str.w	ip, [r5, r3]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009138:	3104      	adds	r1, #4
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	d021      	beq.n	8009184 <__multiply+0x144>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	f104 0c14 	add.w	ip, r4, #20
 8009146:	46ae      	mov	lr, r5
 8009148:	f04f 0a00 	mov.w	sl, #0
 800914c:	f8bc b000 	ldrh.w	fp, [ip]
 8009150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009154:	fb09 770b 	mla	r7, r9, fp, r7
 8009158:	4457      	add	r7, sl
 800915a:	b29b      	uxth	r3, r3
 800915c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009160:	f84e 3b04 	str.w	r3, [lr], #4
 8009164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800916c:	f8be 3000 	ldrh.w	r3, [lr]
 8009170:	fb09 330a 	mla	r3, r9, sl, r3
 8009174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009178:	4562      	cmp	r2, ip
 800917a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800917e:	d8e5      	bhi.n	800914c <__multiply+0x10c>
 8009180:	9f01      	ldr	r7, [sp, #4]
 8009182:	51eb      	str	r3, [r5, r7]
 8009184:	3504      	adds	r5, #4
 8009186:	e799      	b.n	80090bc <__multiply+0x7c>
 8009188:	3e01      	subs	r6, #1
 800918a:	e79b      	b.n	80090c4 <__multiply+0x84>
 800918c:	0800b7b1 	.word	0x0800b7b1
 8009190:	0800b7c2 	.word	0x0800b7c2

08009194 <__pow5mult>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4615      	mov	r5, r2
 800919a:	f012 0203 	ands.w	r2, r2, #3
 800919e:	4607      	mov	r7, r0
 80091a0:	460e      	mov	r6, r1
 80091a2:	d007      	beq.n	80091b4 <__pow5mult+0x20>
 80091a4:	4c25      	ldr	r4, [pc, #148]	@ (800923c <__pow5mult+0xa8>)
 80091a6:	3a01      	subs	r2, #1
 80091a8:	2300      	movs	r3, #0
 80091aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ae:	f7ff fe55 	bl	8008e5c <__multadd>
 80091b2:	4606      	mov	r6, r0
 80091b4:	10ad      	asrs	r5, r5, #2
 80091b6:	d03d      	beq.n	8009234 <__pow5mult+0xa0>
 80091b8:	69fc      	ldr	r4, [r7, #28]
 80091ba:	b97c      	cbnz	r4, 80091dc <__pow5mult+0x48>
 80091bc:	2010      	movs	r0, #16
 80091be:	f7ff fd35 	bl	8008c2c <malloc>
 80091c2:	4602      	mov	r2, r0
 80091c4:	61f8      	str	r0, [r7, #28]
 80091c6:	b928      	cbnz	r0, 80091d4 <__pow5mult+0x40>
 80091c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009240 <__pow5mult+0xac>)
 80091ca:	481e      	ldr	r0, [pc, #120]	@ (8009244 <__pow5mult+0xb0>)
 80091cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091d0:	f001 fb6e 	bl	800a8b0 <__assert_func>
 80091d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091d8:	6004      	str	r4, [r0, #0]
 80091da:	60c4      	str	r4, [r0, #12]
 80091dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091e4:	b94c      	cbnz	r4, 80091fa <__pow5mult+0x66>
 80091e6:	f240 2171 	movw	r1, #625	@ 0x271
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ff12 	bl	8009014 <__i2b>
 80091f0:	2300      	movs	r3, #0
 80091f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091f6:	4604      	mov	r4, r0
 80091f8:	6003      	str	r3, [r0, #0]
 80091fa:	f04f 0900 	mov.w	r9, #0
 80091fe:	07eb      	lsls	r3, r5, #31
 8009200:	d50a      	bpl.n	8009218 <__pow5mult+0x84>
 8009202:	4631      	mov	r1, r6
 8009204:	4622      	mov	r2, r4
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ff1a 	bl	8009040 <__multiply>
 800920c:	4631      	mov	r1, r6
 800920e:	4680      	mov	r8, r0
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff fe01 	bl	8008e18 <_Bfree>
 8009216:	4646      	mov	r6, r8
 8009218:	106d      	asrs	r5, r5, #1
 800921a:	d00b      	beq.n	8009234 <__pow5mult+0xa0>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	b938      	cbnz	r0, 8009230 <__pow5mult+0x9c>
 8009220:	4622      	mov	r2, r4
 8009222:	4621      	mov	r1, r4
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ff0b 	bl	8009040 <__multiply>
 800922a:	6020      	str	r0, [r4, #0]
 800922c:	f8c0 9000 	str.w	r9, [r0]
 8009230:	4604      	mov	r4, r0
 8009232:	e7e4      	b.n	80091fe <__pow5mult+0x6a>
 8009234:	4630      	mov	r0, r6
 8009236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923a:	bf00      	nop
 800923c:	0800b81c 	.word	0x0800b81c
 8009240:	0800b742 	.word	0x0800b742
 8009244:	0800b7c2 	.word	0x0800b7c2

08009248 <__lshift>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	6849      	ldr	r1, [r1, #4]
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	4607      	mov	r7, r0
 800925a:	4691      	mov	r9, r2
 800925c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009260:	f108 0601 	add.w	r6, r8, #1
 8009264:	42b3      	cmp	r3, r6
 8009266:	db0b      	blt.n	8009280 <__lshift+0x38>
 8009268:	4638      	mov	r0, r7
 800926a:	f7ff fd95 	bl	8008d98 <_Balloc>
 800926e:	4605      	mov	r5, r0
 8009270:	b948      	cbnz	r0, 8009286 <__lshift+0x3e>
 8009272:	4602      	mov	r2, r0
 8009274:	4b28      	ldr	r3, [pc, #160]	@ (8009318 <__lshift+0xd0>)
 8009276:	4829      	ldr	r0, [pc, #164]	@ (800931c <__lshift+0xd4>)
 8009278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800927c:	f001 fb18 	bl	800a8b0 <__assert_func>
 8009280:	3101      	adds	r1, #1
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	e7ee      	b.n	8009264 <__lshift+0x1c>
 8009286:	2300      	movs	r3, #0
 8009288:	f100 0114 	add.w	r1, r0, #20
 800928c:	f100 0210 	add.w	r2, r0, #16
 8009290:	4618      	mov	r0, r3
 8009292:	4553      	cmp	r3, sl
 8009294:	db33      	blt.n	80092fe <__lshift+0xb6>
 8009296:	6920      	ldr	r0, [r4, #16]
 8009298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800929c:	f104 0314 	add.w	r3, r4, #20
 80092a0:	f019 091f 	ands.w	r9, r9, #31
 80092a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092ac:	d02b      	beq.n	8009306 <__lshift+0xbe>
 80092ae:	f1c9 0e20 	rsb	lr, r9, #32
 80092b2:	468a      	mov	sl, r1
 80092b4:	2200      	movs	r2, #0
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	fa00 f009 	lsl.w	r0, r0, r9
 80092bc:	4310      	orrs	r0, r2
 80092be:	f84a 0b04 	str.w	r0, [sl], #4
 80092c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c6:	459c      	cmp	ip, r3
 80092c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092cc:	d8f3      	bhi.n	80092b6 <__lshift+0x6e>
 80092ce:	ebac 0304 	sub.w	r3, ip, r4
 80092d2:	3b15      	subs	r3, #21
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	3304      	adds	r3, #4
 80092da:	f104 0015 	add.w	r0, r4, #21
 80092de:	4584      	cmp	ip, r0
 80092e0:	bf38      	it	cc
 80092e2:	2304      	movcc	r3, #4
 80092e4:	50ca      	str	r2, [r1, r3]
 80092e6:	b10a      	cbz	r2, 80092ec <__lshift+0xa4>
 80092e8:	f108 0602 	add.w	r6, r8, #2
 80092ec:	3e01      	subs	r6, #1
 80092ee:	4638      	mov	r0, r7
 80092f0:	612e      	str	r6, [r5, #16]
 80092f2:	4621      	mov	r1, r4
 80092f4:	f7ff fd90 	bl	8008e18 <_Bfree>
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009302:	3301      	adds	r3, #1
 8009304:	e7c5      	b.n	8009292 <__lshift+0x4a>
 8009306:	3904      	subs	r1, #4
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009310:	459c      	cmp	ip, r3
 8009312:	d8f9      	bhi.n	8009308 <__lshift+0xc0>
 8009314:	e7ea      	b.n	80092ec <__lshift+0xa4>
 8009316:	bf00      	nop
 8009318:	0800b7b1 	.word	0x0800b7b1
 800931c:	0800b7c2 	.word	0x0800b7c2

08009320 <__mcmp>:
 8009320:	690a      	ldr	r2, [r1, #16]
 8009322:	4603      	mov	r3, r0
 8009324:	6900      	ldr	r0, [r0, #16]
 8009326:	1a80      	subs	r0, r0, r2
 8009328:	b530      	push	{r4, r5, lr}
 800932a:	d10e      	bne.n	800934a <__mcmp+0x2a>
 800932c:	3314      	adds	r3, #20
 800932e:	3114      	adds	r1, #20
 8009330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800933c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009340:	4295      	cmp	r5, r2
 8009342:	d003      	beq.n	800934c <__mcmp+0x2c>
 8009344:	d205      	bcs.n	8009352 <__mcmp+0x32>
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	bd30      	pop	{r4, r5, pc}
 800934c:	42a3      	cmp	r3, r4
 800934e:	d3f3      	bcc.n	8009338 <__mcmp+0x18>
 8009350:	e7fb      	b.n	800934a <__mcmp+0x2a>
 8009352:	2001      	movs	r0, #1
 8009354:	e7f9      	b.n	800934a <__mcmp+0x2a>
	...

08009358 <__mdiff>:
 8009358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4689      	mov	r9, r1
 800935e:	4606      	mov	r6, r0
 8009360:	4611      	mov	r1, r2
 8009362:	4648      	mov	r0, r9
 8009364:	4614      	mov	r4, r2
 8009366:	f7ff ffdb 	bl	8009320 <__mcmp>
 800936a:	1e05      	subs	r5, r0, #0
 800936c:	d112      	bne.n	8009394 <__mdiff+0x3c>
 800936e:	4629      	mov	r1, r5
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fd11 	bl	8008d98 <_Balloc>
 8009376:	4602      	mov	r2, r0
 8009378:	b928      	cbnz	r0, 8009386 <__mdiff+0x2e>
 800937a:	4b3f      	ldr	r3, [pc, #252]	@ (8009478 <__mdiff+0x120>)
 800937c:	f240 2137 	movw	r1, #567	@ 0x237
 8009380:	483e      	ldr	r0, [pc, #248]	@ (800947c <__mdiff+0x124>)
 8009382:	f001 fa95 	bl	800a8b0 <__assert_func>
 8009386:	2301      	movs	r3, #1
 8009388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800938c:	4610      	mov	r0, r2
 800938e:	b003      	add	sp, #12
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	bfbc      	itt	lt
 8009396:	464b      	movlt	r3, r9
 8009398:	46a1      	movlt	r9, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093a0:	bfba      	itte	lt
 80093a2:	461c      	movlt	r4, r3
 80093a4:	2501      	movlt	r5, #1
 80093a6:	2500      	movge	r5, #0
 80093a8:	f7ff fcf6 	bl	8008d98 <_Balloc>
 80093ac:	4602      	mov	r2, r0
 80093ae:	b918      	cbnz	r0, 80093b8 <__mdiff+0x60>
 80093b0:	4b31      	ldr	r3, [pc, #196]	@ (8009478 <__mdiff+0x120>)
 80093b2:	f240 2145 	movw	r1, #581	@ 0x245
 80093b6:	e7e3      	b.n	8009380 <__mdiff+0x28>
 80093b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093bc:	6926      	ldr	r6, [r4, #16]
 80093be:	60c5      	str	r5, [r0, #12]
 80093c0:	f109 0310 	add.w	r3, r9, #16
 80093c4:	f109 0514 	add.w	r5, r9, #20
 80093c8:	f104 0e14 	add.w	lr, r4, #20
 80093cc:	f100 0b14 	add.w	fp, r0, #20
 80093d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	46d9      	mov	r9, fp
 80093dc:	f04f 0c00 	mov.w	ip, #0
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	fa1f f38a 	uxth.w	r3, sl
 80093f0:	4619      	mov	r1, r3
 80093f2:	b283      	uxth	r3, r0
 80093f4:	1acb      	subs	r3, r1, r3
 80093f6:	0c00      	lsrs	r0, r0, #16
 80093f8:	4463      	add	r3, ip
 80093fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009408:	4576      	cmp	r6, lr
 800940a:	f849 3b04 	str.w	r3, [r9], #4
 800940e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009412:	d8e5      	bhi.n	80093e0 <__mdiff+0x88>
 8009414:	1b33      	subs	r3, r6, r4
 8009416:	3b15      	subs	r3, #21
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	3415      	adds	r4, #21
 800941e:	3304      	adds	r3, #4
 8009420:	42a6      	cmp	r6, r4
 8009422:	bf38      	it	cc
 8009424:	2304      	movcc	r3, #4
 8009426:	441d      	add	r5, r3
 8009428:	445b      	add	r3, fp
 800942a:	461e      	mov	r6, r3
 800942c:	462c      	mov	r4, r5
 800942e:	4544      	cmp	r4, r8
 8009430:	d30e      	bcc.n	8009450 <__mdiff+0xf8>
 8009432:	f108 0103 	add.w	r1, r8, #3
 8009436:	1b49      	subs	r1, r1, r5
 8009438:	f021 0103 	bic.w	r1, r1, #3
 800943c:	3d03      	subs	r5, #3
 800943e:	45a8      	cmp	r8, r5
 8009440:	bf38      	it	cc
 8009442:	2100      	movcc	r1, #0
 8009444:	440b      	add	r3, r1
 8009446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800944a:	b191      	cbz	r1, 8009472 <__mdiff+0x11a>
 800944c:	6117      	str	r7, [r2, #16]
 800944e:	e79d      	b.n	800938c <__mdiff+0x34>
 8009450:	f854 1b04 	ldr.w	r1, [r4], #4
 8009454:	46e6      	mov	lr, ip
 8009456:	0c08      	lsrs	r0, r1, #16
 8009458:	fa1c fc81 	uxtah	ip, ip, r1
 800945c:	4471      	add	r1, lr
 800945e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009462:	b289      	uxth	r1, r1
 8009464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009468:	f846 1b04 	str.w	r1, [r6], #4
 800946c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009470:	e7dd      	b.n	800942e <__mdiff+0xd6>
 8009472:	3f01      	subs	r7, #1
 8009474:	e7e7      	b.n	8009446 <__mdiff+0xee>
 8009476:	bf00      	nop
 8009478:	0800b7b1 	.word	0x0800b7b1
 800947c:	0800b7c2 	.word	0x0800b7c2

08009480 <__ulp>:
 8009480:	b082      	sub	sp, #8
 8009482:	ed8d 0b00 	vstr	d0, [sp]
 8009486:	9a01      	ldr	r2, [sp, #4]
 8009488:	4b0f      	ldr	r3, [pc, #60]	@ (80094c8 <__ulp+0x48>)
 800948a:	4013      	ands	r3, r2
 800948c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009490:	2b00      	cmp	r3, #0
 8009492:	dc08      	bgt.n	80094a6 <__ulp+0x26>
 8009494:	425b      	negs	r3, r3
 8009496:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800949a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800949e:	da04      	bge.n	80094aa <__ulp+0x2a>
 80094a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094a4:	4113      	asrs	r3, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	e008      	b.n	80094bc <__ulp+0x3c>
 80094aa:	f1a2 0314 	sub.w	r3, r2, #20
 80094ae:	2b1e      	cmp	r3, #30
 80094b0:	bfda      	itte	le
 80094b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094b6:	40da      	lsrle	r2, r3
 80094b8:	2201      	movgt	r2, #1
 80094ba:	2300      	movs	r3, #0
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	ec41 0b10 	vmov	d0, r0, r1
 80094c4:	b002      	add	sp, #8
 80094c6:	4770      	bx	lr
 80094c8:	7ff00000 	.word	0x7ff00000

080094cc <__b2d>:
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	6906      	ldr	r6, [r0, #16]
 80094d2:	f100 0814 	add.w	r8, r0, #20
 80094d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80094da:	1f37      	subs	r7, r6, #4
 80094dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7ff fd4b 	bl	8008f7c <__hi0bits>
 80094e6:	f1c0 0320 	rsb	r3, r0, #32
 80094ea:	280a      	cmp	r0, #10
 80094ec:	600b      	str	r3, [r1, #0]
 80094ee:	491b      	ldr	r1, [pc, #108]	@ (800955c <__b2d+0x90>)
 80094f0:	dc15      	bgt.n	800951e <__b2d+0x52>
 80094f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80094f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80094fa:	45b8      	cmp	r8, r7
 80094fc:	ea43 0501 	orr.w	r5, r3, r1
 8009500:	bf34      	ite	cc
 8009502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009506:	2300      	movcs	r3, #0
 8009508:	3015      	adds	r0, #21
 800950a:	fa02 f000 	lsl.w	r0, r2, r0
 800950e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009512:	4303      	orrs	r3, r0
 8009514:	461c      	mov	r4, r3
 8009516:	ec45 4b10 	vmov	d0, r4, r5
 800951a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951e:	45b8      	cmp	r8, r7
 8009520:	bf3a      	itte	cc
 8009522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009526:	f1a6 0708 	subcc.w	r7, r6, #8
 800952a:	2300      	movcs	r3, #0
 800952c:	380b      	subs	r0, #11
 800952e:	d012      	beq.n	8009556 <__b2d+0x8a>
 8009530:	f1c0 0120 	rsb	r1, r0, #32
 8009534:	fa23 f401 	lsr.w	r4, r3, r1
 8009538:	4082      	lsls	r2, r0
 800953a:	4322      	orrs	r2, r4
 800953c:	4547      	cmp	r7, r8
 800953e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009542:	bf8c      	ite	hi
 8009544:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009548:	2200      	movls	r2, #0
 800954a:	4083      	lsls	r3, r0
 800954c:	40ca      	lsrs	r2, r1
 800954e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009552:	4313      	orrs	r3, r2
 8009554:	e7de      	b.n	8009514 <__b2d+0x48>
 8009556:	ea42 0501 	orr.w	r5, r2, r1
 800955a:	e7db      	b.n	8009514 <__b2d+0x48>
 800955c:	3ff00000 	.word	0x3ff00000

08009560 <__d2b>:
 8009560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009564:	460f      	mov	r7, r1
 8009566:	2101      	movs	r1, #1
 8009568:	ec59 8b10 	vmov	r8, r9, d0
 800956c:	4616      	mov	r6, r2
 800956e:	f7ff fc13 	bl	8008d98 <_Balloc>
 8009572:	4604      	mov	r4, r0
 8009574:	b930      	cbnz	r0, 8009584 <__d2b+0x24>
 8009576:	4602      	mov	r2, r0
 8009578:	4b23      	ldr	r3, [pc, #140]	@ (8009608 <__d2b+0xa8>)
 800957a:	4824      	ldr	r0, [pc, #144]	@ (800960c <__d2b+0xac>)
 800957c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009580:	f001 f996 	bl	800a8b0 <__assert_func>
 8009584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800958c:	b10d      	cbz	r5, 8009592 <__d2b+0x32>
 800958e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f1b8 0300 	subs.w	r3, r8, #0
 8009598:	d023      	beq.n	80095e2 <__d2b+0x82>
 800959a:	4668      	mov	r0, sp
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	f7ff fd0c 	bl	8008fba <__lo0bits>
 80095a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095a6:	b1d0      	cbz	r0, 80095de <__d2b+0x7e>
 80095a8:	f1c0 0320 	rsb	r3, r0, #32
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	430b      	orrs	r3, r1
 80095b2:	40c2      	lsrs	r2, r0
 80095b4:	6163      	str	r3, [r4, #20]
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	61a3      	str	r3, [r4, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bf0c      	ite	eq
 80095c0:	2201      	moveq	r2, #1
 80095c2:	2202      	movne	r2, #2
 80095c4:	6122      	str	r2, [r4, #16]
 80095c6:	b1a5      	cbz	r5, 80095f2 <__d2b+0x92>
 80095c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095cc:	4405      	add	r5, r0
 80095ce:	603d      	str	r5, [r7, #0]
 80095d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4620      	mov	r0, r4
 80095d8:	b003      	add	sp, #12
 80095da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095de:	6161      	str	r1, [r4, #20]
 80095e0:	e7ea      	b.n	80095b8 <__d2b+0x58>
 80095e2:	a801      	add	r0, sp, #4
 80095e4:	f7ff fce9 	bl	8008fba <__lo0bits>
 80095e8:	9b01      	ldr	r3, [sp, #4]
 80095ea:	6163      	str	r3, [r4, #20]
 80095ec:	3020      	adds	r0, #32
 80095ee:	2201      	movs	r2, #1
 80095f0:	e7e8      	b.n	80095c4 <__d2b+0x64>
 80095f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095fa:	6038      	str	r0, [r7, #0]
 80095fc:	6918      	ldr	r0, [r3, #16]
 80095fe:	f7ff fcbd 	bl	8008f7c <__hi0bits>
 8009602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009606:	e7e5      	b.n	80095d4 <__d2b+0x74>
 8009608:	0800b7b1 	.word	0x0800b7b1
 800960c:	0800b7c2 	.word	0x0800b7c2

08009610 <__ratio>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b085      	sub	sp, #20
 8009616:	e9cd 1000 	strd	r1, r0, [sp]
 800961a:	a902      	add	r1, sp, #8
 800961c:	f7ff ff56 	bl	80094cc <__b2d>
 8009620:	9800      	ldr	r0, [sp, #0]
 8009622:	a903      	add	r1, sp, #12
 8009624:	ec55 4b10 	vmov	r4, r5, d0
 8009628:	f7ff ff50 	bl	80094cc <__b2d>
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	6919      	ldr	r1, [r3, #16]
 8009630:	9b00      	ldr	r3, [sp, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	1ac9      	subs	r1, r1, r3
 8009636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800963a:	1a9b      	subs	r3, r3, r2
 800963c:	ec5b ab10 	vmov	sl, fp, d0
 8009640:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009644:	2b00      	cmp	r3, #0
 8009646:	bfce      	itee	gt
 8009648:	462a      	movgt	r2, r5
 800964a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800964e:	465a      	movle	r2, fp
 8009650:	462f      	mov	r7, r5
 8009652:	46d9      	mov	r9, fp
 8009654:	bfcc      	ite	gt
 8009656:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800965a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800965e:	464b      	mov	r3, r9
 8009660:	4652      	mov	r2, sl
 8009662:	4620      	mov	r0, r4
 8009664:	4639      	mov	r1, r7
 8009666:	f7f7 f8f9 	bl	800085c <__aeabi_ddiv>
 800966a:	ec41 0b10 	vmov	d0, r0, r1
 800966e:	b005      	add	sp, #20
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009674 <__copybits>:
 8009674:	3901      	subs	r1, #1
 8009676:	b570      	push	{r4, r5, r6, lr}
 8009678:	1149      	asrs	r1, r1, #5
 800967a:	6914      	ldr	r4, [r2, #16]
 800967c:	3101      	adds	r1, #1
 800967e:	f102 0314 	add.w	r3, r2, #20
 8009682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800968a:	1f05      	subs	r5, r0, #4
 800968c:	42a3      	cmp	r3, r4
 800968e:	d30c      	bcc.n	80096aa <__copybits+0x36>
 8009690:	1aa3      	subs	r3, r4, r2
 8009692:	3b11      	subs	r3, #17
 8009694:	f023 0303 	bic.w	r3, r3, #3
 8009698:	3211      	adds	r2, #17
 800969a:	42a2      	cmp	r2, r4
 800969c:	bf88      	it	hi
 800969e:	2300      	movhi	r3, #0
 80096a0:	4418      	add	r0, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	4288      	cmp	r0, r1
 80096a6:	d305      	bcc.n	80096b4 <__copybits+0x40>
 80096a8:	bd70      	pop	{r4, r5, r6, pc}
 80096aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80096ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80096b2:	e7eb      	b.n	800968c <__copybits+0x18>
 80096b4:	f840 3b04 	str.w	r3, [r0], #4
 80096b8:	e7f4      	b.n	80096a4 <__copybits+0x30>

080096ba <__any_on>:
 80096ba:	f100 0214 	add.w	r2, r0, #20
 80096be:	6900      	ldr	r0, [r0, #16]
 80096c0:	114b      	asrs	r3, r1, #5
 80096c2:	4298      	cmp	r0, r3
 80096c4:	b510      	push	{r4, lr}
 80096c6:	db11      	blt.n	80096ec <__any_on+0x32>
 80096c8:	dd0a      	ble.n	80096e0 <__any_on+0x26>
 80096ca:	f011 011f 	ands.w	r1, r1, #31
 80096ce:	d007      	beq.n	80096e0 <__any_on+0x26>
 80096d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096d4:	fa24 f001 	lsr.w	r0, r4, r1
 80096d8:	fa00 f101 	lsl.w	r1, r0, r1
 80096dc:	428c      	cmp	r4, r1
 80096de:	d10b      	bne.n	80096f8 <__any_on+0x3e>
 80096e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d803      	bhi.n	80096f0 <__any_on+0x36>
 80096e8:	2000      	movs	r0, #0
 80096ea:	bd10      	pop	{r4, pc}
 80096ec:	4603      	mov	r3, r0
 80096ee:	e7f7      	b.n	80096e0 <__any_on+0x26>
 80096f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d0f5      	beq.n	80096e4 <__any_on+0x2a>
 80096f8:	2001      	movs	r0, #1
 80096fa:	e7f6      	b.n	80096ea <__any_on+0x30>

080096fc <sulp>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	ec45 4b10 	vmov	d0, r4, r5
 8009706:	4616      	mov	r6, r2
 8009708:	f7ff feba 	bl	8009480 <__ulp>
 800970c:	ec51 0b10 	vmov	r0, r1, d0
 8009710:	b17e      	cbz	r6, 8009732 <sulp+0x36>
 8009712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800971a:	2b00      	cmp	r3, #0
 800971c:	dd09      	ble.n	8009732 <sulp+0x36>
 800971e:	051b      	lsls	r3, r3, #20
 8009720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009724:	2400      	movs	r4, #0
 8009726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800972a:	4622      	mov	r2, r4
 800972c:	462b      	mov	r3, r5
 800972e:	f7f6 ff6b 	bl	8000608 <__aeabi_dmul>
 8009732:	ec41 0b10 	vmov	d0, r0, r1
 8009736:	bd70      	pop	{r4, r5, r6, pc}

08009738 <_strtod_l>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	b09f      	sub	sp, #124	@ 0x7c
 800973e:	460c      	mov	r4, r1
 8009740:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009742:	2200      	movs	r2, #0
 8009744:	921a      	str	r2, [sp, #104]	@ 0x68
 8009746:	9005      	str	r0, [sp, #20]
 8009748:	f04f 0a00 	mov.w	sl, #0
 800974c:	f04f 0b00 	mov.w	fp, #0
 8009750:	460a      	mov	r2, r1
 8009752:	9219      	str	r2, [sp, #100]	@ 0x64
 8009754:	7811      	ldrb	r1, [r2, #0]
 8009756:	292b      	cmp	r1, #43	@ 0x2b
 8009758:	d04a      	beq.n	80097f0 <_strtod_l+0xb8>
 800975a:	d838      	bhi.n	80097ce <_strtod_l+0x96>
 800975c:	290d      	cmp	r1, #13
 800975e:	d832      	bhi.n	80097c6 <_strtod_l+0x8e>
 8009760:	2908      	cmp	r1, #8
 8009762:	d832      	bhi.n	80097ca <_strtod_l+0x92>
 8009764:	2900      	cmp	r1, #0
 8009766:	d03b      	beq.n	80097e0 <_strtod_l+0xa8>
 8009768:	2200      	movs	r2, #0
 800976a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800976c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800976e:	782a      	ldrb	r2, [r5, #0]
 8009770:	2a30      	cmp	r2, #48	@ 0x30
 8009772:	f040 80b3 	bne.w	80098dc <_strtod_l+0x1a4>
 8009776:	786a      	ldrb	r2, [r5, #1]
 8009778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800977c:	2a58      	cmp	r2, #88	@ 0x58
 800977e:	d16e      	bne.n	800985e <_strtod_l+0x126>
 8009780:	9302      	str	r3, [sp, #8]
 8009782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	ab1a      	add	r3, sp, #104	@ 0x68
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4a8e      	ldr	r2, [pc, #568]	@ (80099c4 <_strtod_l+0x28c>)
 800978c:	9805      	ldr	r0, [sp, #20]
 800978e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009790:	a919      	add	r1, sp, #100	@ 0x64
 8009792:	f001 f927 	bl	800a9e4 <__gethex>
 8009796:	f010 060f 	ands.w	r6, r0, #15
 800979a:	4604      	mov	r4, r0
 800979c:	d005      	beq.n	80097aa <_strtod_l+0x72>
 800979e:	2e06      	cmp	r6, #6
 80097a0:	d128      	bne.n	80097f4 <_strtod_l+0xbc>
 80097a2:	3501      	adds	r5, #1
 80097a4:	2300      	movs	r3, #0
 80097a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80097a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 858e 	bne.w	800a2ce <_strtod_l+0xb96>
 80097b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097b4:	b1cb      	cbz	r3, 80097ea <_strtod_l+0xb2>
 80097b6:	4652      	mov	r2, sl
 80097b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80097bc:	ec43 2b10 	vmov	d0, r2, r3
 80097c0:	b01f      	add	sp, #124	@ 0x7c
 80097c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c6:	2920      	cmp	r1, #32
 80097c8:	d1ce      	bne.n	8009768 <_strtod_l+0x30>
 80097ca:	3201      	adds	r2, #1
 80097cc:	e7c1      	b.n	8009752 <_strtod_l+0x1a>
 80097ce:	292d      	cmp	r1, #45	@ 0x2d
 80097d0:	d1ca      	bne.n	8009768 <_strtod_l+0x30>
 80097d2:	2101      	movs	r1, #1
 80097d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80097d6:	1c51      	adds	r1, r2, #1
 80097d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097da:	7852      	ldrb	r2, [r2, #1]
 80097dc:	2a00      	cmp	r2, #0
 80097de:	d1c5      	bne.n	800976c <_strtod_l+0x34>
 80097e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f040 8570 	bne.w	800a2ca <_strtod_l+0xb92>
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	e7e5      	b.n	80097bc <_strtod_l+0x84>
 80097f0:	2100      	movs	r1, #0
 80097f2:	e7ef      	b.n	80097d4 <_strtod_l+0x9c>
 80097f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097f6:	b13a      	cbz	r2, 8009808 <_strtod_l+0xd0>
 80097f8:	2135      	movs	r1, #53	@ 0x35
 80097fa:	a81c      	add	r0, sp, #112	@ 0x70
 80097fc:	f7ff ff3a 	bl	8009674 <__copybits>
 8009800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009802:	9805      	ldr	r0, [sp, #20]
 8009804:	f7ff fb08 	bl	8008e18 <_Bfree>
 8009808:	3e01      	subs	r6, #1
 800980a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800980c:	2e04      	cmp	r6, #4
 800980e:	d806      	bhi.n	800981e <_strtod_l+0xe6>
 8009810:	e8df f006 	tbb	[pc, r6]
 8009814:	201d0314 	.word	0x201d0314
 8009818:	14          	.byte	0x14
 8009819:	00          	.byte	0x00
 800981a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800981e:	05e1      	lsls	r1, r4, #23
 8009820:	bf48      	it	mi
 8009822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800982a:	0d1b      	lsrs	r3, r3, #20
 800982c:	051b      	lsls	r3, r3, #20
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1bb      	bne.n	80097aa <_strtod_l+0x72>
 8009832:	f7fe fb31 	bl	8007e98 <__errno>
 8009836:	2322      	movs	r3, #34	@ 0x22
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	e7b6      	b.n	80097aa <_strtod_l+0x72>
 800983c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800984c:	e7e7      	b.n	800981e <_strtod_l+0xe6>
 800984e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80099cc <_strtod_l+0x294>
 8009852:	e7e4      	b.n	800981e <_strtod_l+0xe6>
 8009854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009858:	f04f 3aff 	mov.w	sl, #4294967295
 800985c:	e7df      	b.n	800981e <_strtod_l+0xe6>
 800985e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	9219      	str	r2, [sp, #100]	@ 0x64
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b30      	cmp	r3, #48	@ 0x30
 8009868:	d0f9      	beq.n	800985e <_strtod_l+0x126>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d09d      	beq.n	80097aa <_strtod_l+0x72>
 800986e:	2301      	movs	r3, #1
 8009870:	9309      	str	r3, [sp, #36]	@ 0x24
 8009872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009874:	930c      	str	r3, [sp, #48]	@ 0x30
 8009876:	2300      	movs	r3, #0
 8009878:	9308      	str	r3, [sp, #32]
 800987a:	930a      	str	r3, [sp, #40]	@ 0x28
 800987c:	461f      	mov	r7, r3
 800987e:	220a      	movs	r2, #10
 8009880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009882:	7805      	ldrb	r5, [r0, #0]
 8009884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009888:	b2d9      	uxtb	r1, r3
 800988a:	2909      	cmp	r1, #9
 800988c:	d928      	bls.n	80098e0 <_strtod_l+0x1a8>
 800988e:	494e      	ldr	r1, [pc, #312]	@ (80099c8 <_strtod_l+0x290>)
 8009890:	2201      	movs	r2, #1
 8009892:	f000 ffd5 	bl	800a840 <strncmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	d032      	beq.n	8009900 <_strtod_l+0x1c8>
 800989a:	2000      	movs	r0, #0
 800989c:	462a      	mov	r2, r5
 800989e:	4681      	mov	r9, r0
 80098a0:	463d      	mov	r5, r7
 80098a2:	4603      	mov	r3, r0
 80098a4:	2a65      	cmp	r2, #101	@ 0x65
 80098a6:	d001      	beq.n	80098ac <_strtod_l+0x174>
 80098a8:	2a45      	cmp	r2, #69	@ 0x45
 80098aa:	d114      	bne.n	80098d6 <_strtod_l+0x19e>
 80098ac:	b91d      	cbnz	r5, 80098b6 <_strtod_l+0x17e>
 80098ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098b0:	4302      	orrs	r2, r0
 80098b2:	d095      	beq.n	80097e0 <_strtod_l+0xa8>
 80098b4:	2500      	movs	r5, #0
 80098b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80098b8:	1c62      	adds	r2, r4, #1
 80098ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80098bc:	7862      	ldrb	r2, [r4, #1]
 80098be:	2a2b      	cmp	r2, #43	@ 0x2b
 80098c0:	d077      	beq.n	80099b2 <_strtod_l+0x27a>
 80098c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80098c4:	d07b      	beq.n	80099be <_strtod_l+0x286>
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80098ce:	2909      	cmp	r1, #9
 80098d0:	f240 8082 	bls.w	80099d8 <_strtod_l+0x2a0>
 80098d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80098d6:	f04f 0800 	mov.w	r8, #0
 80098da:	e0a2      	b.n	8009a22 <_strtod_l+0x2ea>
 80098dc:	2300      	movs	r3, #0
 80098de:	e7c7      	b.n	8009870 <_strtod_l+0x138>
 80098e0:	2f08      	cmp	r7, #8
 80098e2:	bfd5      	itete	le
 80098e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80098e6:	9908      	ldrgt	r1, [sp, #32]
 80098e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80098ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80098f0:	f100 0001 	add.w	r0, r0, #1
 80098f4:	bfd4      	ite	le
 80098f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80098f8:	9308      	strgt	r3, [sp, #32]
 80098fa:	3701      	adds	r7, #1
 80098fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80098fe:	e7bf      	b.n	8009880 <_strtod_l+0x148>
 8009900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	9219      	str	r2, [sp, #100]	@ 0x64
 8009906:	785a      	ldrb	r2, [r3, #1]
 8009908:	b37f      	cbz	r7, 800996a <_strtod_l+0x232>
 800990a:	4681      	mov	r9, r0
 800990c:	463d      	mov	r5, r7
 800990e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009912:	2b09      	cmp	r3, #9
 8009914:	d912      	bls.n	800993c <_strtod_l+0x204>
 8009916:	2301      	movs	r3, #1
 8009918:	e7c4      	b.n	80098a4 <_strtod_l+0x16c>
 800991a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009920:	785a      	ldrb	r2, [r3, #1]
 8009922:	3001      	adds	r0, #1
 8009924:	2a30      	cmp	r2, #48	@ 0x30
 8009926:	d0f8      	beq.n	800991a <_strtod_l+0x1e2>
 8009928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800992c:	2b08      	cmp	r3, #8
 800992e:	f200 84d3 	bhi.w	800a2d8 <_strtod_l+0xba0>
 8009932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009934:	930c      	str	r3, [sp, #48]	@ 0x30
 8009936:	4681      	mov	r9, r0
 8009938:	2000      	movs	r0, #0
 800993a:	4605      	mov	r5, r0
 800993c:	3a30      	subs	r2, #48	@ 0x30
 800993e:	f100 0301 	add.w	r3, r0, #1
 8009942:	d02a      	beq.n	800999a <_strtod_l+0x262>
 8009944:	4499      	add	r9, r3
 8009946:	eb00 0c05 	add.w	ip, r0, r5
 800994a:	462b      	mov	r3, r5
 800994c:	210a      	movs	r1, #10
 800994e:	4563      	cmp	r3, ip
 8009950:	d10d      	bne.n	800996e <_strtod_l+0x236>
 8009952:	1c69      	adds	r1, r5, #1
 8009954:	4401      	add	r1, r0
 8009956:	4428      	add	r0, r5
 8009958:	2808      	cmp	r0, #8
 800995a:	dc16      	bgt.n	800998a <_strtod_l+0x252>
 800995c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800995e:	230a      	movs	r3, #10
 8009960:	fb03 2300 	mla	r3, r3, r0, r2
 8009964:	930a      	str	r3, [sp, #40]	@ 0x28
 8009966:	2300      	movs	r3, #0
 8009968:	e018      	b.n	800999c <_strtod_l+0x264>
 800996a:	4638      	mov	r0, r7
 800996c:	e7da      	b.n	8009924 <_strtod_l+0x1ec>
 800996e:	2b08      	cmp	r3, #8
 8009970:	f103 0301 	add.w	r3, r3, #1
 8009974:	dc03      	bgt.n	800997e <_strtod_l+0x246>
 8009976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009978:	434e      	muls	r6, r1
 800997a:	960a      	str	r6, [sp, #40]	@ 0x28
 800997c:	e7e7      	b.n	800994e <_strtod_l+0x216>
 800997e:	2b10      	cmp	r3, #16
 8009980:	bfde      	ittt	le
 8009982:	9e08      	ldrle	r6, [sp, #32]
 8009984:	434e      	mulle	r6, r1
 8009986:	9608      	strle	r6, [sp, #32]
 8009988:	e7e1      	b.n	800994e <_strtod_l+0x216>
 800998a:	280f      	cmp	r0, #15
 800998c:	dceb      	bgt.n	8009966 <_strtod_l+0x22e>
 800998e:	9808      	ldr	r0, [sp, #32]
 8009990:	230a      	movs	r3, #10
 8009992:	fb03 2300 	mla	r3, r3, r0, r2
 8009996:	9308      	str	r3, [sp, #32]
 8009998:	e7e5      	b.n	8009966 <_strtod_l+0x22e>
 800999a:	4629      	mov	r1, r5
 800999c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800999e:	1c50      	adds	r0, r2, #1
 80099a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80099a2:	7852      	ldrb	r2, [r2, #1]
 80099a4:	4618      	mov	r0, r3
 80099a6:	460d      	mov	r5, r1
 80099a8:	e7b1      	b.n	800990e <_strtod_l+0x1d6>
 80099aa:	f04f 0900 	mov.w	r9, #0
 80099ae:	2301      	movs	r3, #1
 80099b0:	e77d      	b.n	80098ae <_strtod_l+0x176>
 80099b2:	f04f 0c00 	mov.w	ip, #0
 80099b6:	1ca2      	adds	r2, r4, #2
 80099b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80099ba:	78a2      	ldrb	r2, [r4, #2]
 80099bc:	e785      	b.n	80098ca <_strtod_l+0x192>
 80099be:	f04f 0c01 	mov.w	ip, #1
 80099c2:	e7f8      	b.n	80099b6 <_strtod_l+0x27e>
 80099c4:	0800b930 	.word	0x0800b930
 80099c8:	0800b918 	.word	0x0800b918
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099d2:	1c51      	adds	r1, r2, #1
 80099d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80099d6:	7852      	ldrb	r2, [r2, #1]
 80099d8:	2a30      	cmp	r2, #48	@ 0x30
 80099da:	d0f9      	beq.n	80099d0 <_strtod_l+0x298>
 80099dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80099e0:	2908      	cmp	r1, #8
 80099e2:	f63f af78 	bhi.w	80098d6 <_strtod_l+0x19e>
 80099e6:	3a30      	subs	r2, #48	@ 0x30
 80099e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80099ee:	f04f 080a 	mov.w	r8, #10
 80099f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099f4:	1c56      	adds	r6, r2, #1
 80099f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80099f8:	7852      	ldrb	r2, [r2, #1]
 80099fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80099fe:	f1be 0f09 	cmp.w	lr, #9
 8009a02:	d939      	bls.n	8009a78 <_strtod_l+0x340>
 8009a04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a06:	1a76      	subs	r6, r6, r1
 8009a08:	2e08      	cmp	r6, #8
 8009a0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a0e:	dc03      	bgt.n	8009a18 <_strtod_l+0x2e0>
 8009a10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a12:	4588      	cmp	r8, r1
 8009a14:	bfa8      	it	ge
 8009a16:	4688      	movge	r8, r1
 8009a18:	f1bc 0f00 	cmp.w	ip, #0
 8009a1c:	d001      	beq.n	8009a22 <_strtod_l+0x2ea>
 8009a1e:	f1c8 0800 	rsb	r8, r8, #0
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	d14e      	bne.n	8009ac4 <_strtod_l+0x38c>
 8009a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a28:	4308      	orrs	r0, r1
 8009a2a:	f47f aebe 	bne.w	80097aa <_strtod_l+0x72>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f47f aed6 	bne.w	80097e0 <_strtod_l+0xa8>
 8009a34:	2a69      	cmp	r2, #105	@ 0x69
 8009a36:	d028      	beq.n	8009a8a <_strtod_l+0x352>
 8009a38:	dc25      	bgt.n	8009a86 <_strtod_l+0x34e>
 8009a3a:	2a49      	cmp	r2, #73	@ 0x49
 8009a3c:	d025      	beq.n	8009a8a <_strtod_l+0x352>
 8009a3e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a40:	f47f aece 	bne.w	80097e0 <_strtod_l+0xa8>
 8009a44:	499b      	ldr	r1, [pc, #620]	@ (8009cb4 <_strtod_l+0x57c>)
 8009a46:	a819      	add	r0, sp, #100	@ 0x64
 8009a48:	f001 f9ee 	bl	800ae28 <__match>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	f43f aec7 	beq.w	80097e0 <_strtod_l+0xa8>
 8009a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b28      	cmp	r3, #40	@ 0x28
 8009a58:	d12e      	bne.n	8009ab8 <_strtod_l+0x380>
 8009a5a:	4997      	ldr	r1, [pc, #604]	@ (8009cb8 <_strtod_l+0x580>)
 8009a5c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a5e:	a819      	add	r0, sp, #100	@ 0x64
 8009a60:	f001 f9f6 	bl	800ae50 <__hexnan>
 8009a64:	2805      	cmp	r0, #5
 8009a66:	d127      	bne.n	8009ab8 <_strtod_l+0x380>
 8009a68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009a6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009a72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009a76:	e698      	b.n	80097aa <_strtod_l+0x72>
 8009a78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a7a:	fb08 2101 	mla	r1, r8, r1, r2
 8009a7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009a82:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a84:	e7b5      	b.n	80099f2 <_strtod_l+0x2ba>
 8009a86:	2a6e      	cmp	r2, #110	@ 0x6e
 8009a88:	e7da      	b.n	8009a40 <_strtod_l+0x308>
 8009a8a:	498c      	ldr	r1, [pc, #560]	@ (8009cbc <_strtod_l+0x584>)
 8009a8c:	a819      	add	r0, sp, #100	@ 0x64
 8009a8e:	f001 f9cb 	bl	800ae28 <__match>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f43f aea4 	beq.w	80097e0 <_strtod_l+0xa8>
 8009a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9a:	4989      	ldr	r1, [pc, #548]	@ (8009cc0 <_strtod_l+0x588>)
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	a819      	add	r0, sp, #100	@ 0x64
 8009aa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009aa2:	f001 f9c1 	bl	800ae28 <__match>
 8009aa6:	b910      	cbnz	r0, 8009aae <_strtod_l+0x376>
 8009aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aaa:	3301      	adds	r3, #1
 8009aac:	9319      	str	r3, [sp, #100]	@ 0x64
 8009aae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009cd0 <_strtod_l+0x598>
 8009ab2:	f04f 0a00 	mov.w	sl, #0
 8009ab6:	e678      	b.n	80097aa <_strtod_l+0x72>
 8009ab8:	4882      	ldr	r0, [pc, #520]	@ (8009cc4 <_strtod_l+0x58c>)
 8009aba:	f000 fef1 	bl	800a8a0 <nan>
 8009abe:	ec5b ab10 	vmov	sl, fp, d0
 8009ac2:	e672      	b.n	80097aa <_strtod_l+0x72>
 8009ac4:	eba8 0309 	sub.w	r3, r8, r9
 8009ac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009acc:	2f00      	cmp	r7, #0
 8009ace:	bf08      	it	eq
 8009ad0:	462f      	moveq	r7, r5
 8009ad2:	2d10      	cmp	r5, #16
 8009ad4:	462c      	mov	r4, r5
 8009ad6:	bfa8      	it	ge
 8009ad8:	2410      	movge	r4, #16
 8009ada:	f7f6 fd1b 	bl	8000514 <__aeabi_ui2d>
 8009ade:	2d09      	cmp	r5, #9
 8009ae0:	4682      	mov	sl, r0
 8009ae2:	468b      	mov	fp, r1
 8009ae4:	dc13      	bgt.n	8009b0e <_strtod_l+0x3d6>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f43f ae5e 	beq.w	80097aa <_strtod_l+0x72>
 8009aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af0:	dd78      	ble.n	8009be4 <_strtod_l+0x4ac>
 8009af2:	2b16      	cmp	r3, #22
 8009af4:	dc5f      	bgt.n	8009bb6 <_strtod_l+0x47e>
 8009af6:	4974      	ldr	r1, [pc, #464]	@ (8009cc8 <_strtod_l+0x590>)
 8009af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b00:	4652      	mov	r2, sl
 8009b02:	465b      	mov	r3, fp
 8009b04:	f7f6 fd80 	bl	8000608 <__aeabi_dmul>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	468b      	mov	fp, r1
 8009b0c:	e64d      	b.n	80097aa <_strtod_l+0x72>
 8009b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8009cc8 <_strtod_l+0x590>)
 8009b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b18:	f7f6 fd76 	bl	8000608 <__aeabi_dmul>
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	9808      	ldr	r0, [sp, #32]
 8009b20:	468b      	mov	fp, r1
 8009b22:	f7f6 fcf7 	bl	8000514 <__aeabi_ui2d>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	f7f6 fbb5 	bl	800029c <__adddf3>
 8009b32:	2d0f      	cmp	r5, #15
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	ddd5      	ble.n	8009ae6 <_strtod_l+0x3ae>
 8009b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3c:	1b2c      	subs	r4, r5, r4
 8009b3e:	441c      	add	r4, r3
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	f340 8096 	ble.w	8009c72 <_strtod_l+0x53a>
 8009b46:	f014 030f 	ands.w	r3, r4, #15
 8009b4a:	d00a      	beq.n	8009b62 <_strtod_l+0x42a>
 8009b4c:	495e      	ldr	r1, [pc, #376]	@ (8009cc8 <_strtod_l+0x590>)
 8009b4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b52:	4652      	mov	r2, sl
 8009b54:	465b      	mov	r3, fp
 8009b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b5a:	f7f6 fd55 	bl	8000608 <__aeabi_dmul>
 8009b5e:	4682      	mov	sl, r0
 8009b60:	468b      	mov	fp, r1
 8009b62:	f034 040f 	bics.w	r4, r4, #15
 8009b66:	d073      	beq.n	8009c50 <_strtod_l+0x518>
 8009b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009b6c:	dd48      	ble.n	8009c00 <_strtod_l+0x4c8>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	46a0      	mov	r8, r4
 8009b72:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b74:	46a1      	mov	r9, r4
 8009b76:	9a05      	ldr	r2, [sp, #20]
 8009b78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009cd0 <_strtod_l+0x598>
 8009b7c:	2322      	movs	r3, #34	@ 0x22
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	f04f 0a00 	mov.w	sl, #0
 8009b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f43f ae0f 	beq.w	80097aa <_strtod_l+0x72>
 8009b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b8e:	9805      	ldr	r0, [sp, #20]
 8009b90:	f7ff f942 	bl	8008e18 <_Bfree>
 8009b94:	9805      	ldr	r0, [sp, #20]
 8009b96:	4649      	mov	r1, r9
 8009b98:	f7ff f93e 	bl	8008e18 <_Bfree>
 8009b9c:	9805      	ldr	r0, [sp, #20]
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	f7ff f93a 	bl	8008e18 <_Bfree>
 8009ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ba6:	9805      	ldr	r0, [sp, #20]
 8009ba8:	f7ff f936 	bl	8008e18 <_Bfree>
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	4621      	mov	r1, r4
 8009bb0:	f7ff f932 	bl	8008e18 <_Bfree>
 8009bb4:	e5f9      	b.n	80097aa <_strtod_l+0x72>
 8009bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	dbbc      	blt.n	8009b3a <_strtod_l+0x402>
 8009bc0:	4c41      	ldr	r4, [pc, #260]	@ (8009cc8 <_strtod_l+0x590>)
 8009bc2:	f1c5 050f 	rsb	r5, r5, #15
 8009bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009bca:	4652      	mov	r2, sl
 8009bcc:	465b      	mov	r3, fp
 8009bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd2:	f7f6 fd19 	bl	8000608 <__aeabi_dmul>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd8:	1b5d      	subs	r5, r3, r5
 8009bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009be2:	e78f      	b.n	8009b04 <_strtod_l+0x3cc>
 8009be4:	3316      	adds	r3, #22
 8009be6:	dba8      	blt.n	8009b3a <_strtod_l+0x402>
 8009be8:	4b37      	ldr	r3, [pc, #220]	@ (8009cc8 <_strtod_l+0x590>)
 8009bea:	eba9 0808 	sub.w	r8, r9, r8
 8009bee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009bf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	f7f6 fe2f 	bl	800085c <__aeabi_ddiv>
 8009bfe:	e783      	b.n	8009b08 <_strtod_l+0x3d0>
 8009c00:	4b32      	ldr	r3, [pc, #200]	@ (8009ccc <_strtod_l+0x594>)
 8009c02:	9308      	str	r3, [sp, #32]
 8009c04:	2300      	movs	r3, #0
 8009c06:	1124      	asrs	r4, r4, #4
 8009c08:	4650      	mov	r0, sl
 8009c0a:	4659      	mov	r1, fp
 8009c0c:	461e      	mov	r6, r3
 8009c0e:	2c01      	cmp	r4, #1
 8009c10:	dc21      	bgt.n	8009c56 <_strtod_l+0x51e>
 8009c12:	b10b      	cbz	r3, 8009c18 <_strtod_l+0x4e0>
 8009c14:	4682      	mov	sl, r0
 8009c16:	468b      	mov	fp, r1
 8009c18:	492c      	ldr	r1, [pc, #176]	@ (8009ccc <_strtod_l+0x594>)
 8009c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c22:	4652      	mov	r2, sl
 8009c24:	465b      	mov	r3, fp
 8009c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2a:	f7f6 fced 	bl	8000608 <__aeabi_dmul>
 8009c2e:	4b28      	ldr	r3, [pc, #160]	@ (8009cd0 <_strtod_l+0x598>)
 8009c30:	460a      	mov	r2, r1
 8009c32:	400b      	ands	r3, r1
 8009c34:	4927      	ldr	r1, [pc, #156]	@ (8009cd4 <_strtod_l+0x59c>)
 8009c36:	428b      	cmp	r3, r1
 8009c38:	4682      	mov	sl, r0
 8009c3a:	d898      	bhi.n	8009b6e <_strtod_l+0x436>
 8009c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf86      	itte	hi
 8009c44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009cd8 <_strtod_l+0x5a0>
 8009c48:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c50:	2300      	movs	r3, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	e07a      	b.n	8009d4c <_strtod_l+0x614>
 8009c56:	07e2      	lsls	r2, r4, #31
 8009c58:	d505      	bpl.n	8009c66 <_strtod_l+0x52e>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fcd2 	bl	8000608 <__aeabi_dmul>
 8009c64:	2301      	movs	r3, #1
 8009c66:	9a08      	ldr	r2, [sp, #32]
 8009c68:	3208      	adds	r2, #8
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	1064      	asrs	r4, r4, #1
 8009c6e:	9208      	str	r2, [sp, #32]
 8009c70:	e7cd      	b.n	8009c0e <_strtod_l+0x4d6>
 8009c72:	d0ed      	beq.n	8009c50 <_strtod_l+0x518>
 8009c74:	4264      	negs	r4, r4
 8009c76:	f014 020f 	ands.w	r2, r4, #15
 8009c7a:	d00a      	beq.n	8009c92 <_strtod_l+0x55a>
 8009c7c:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <_strtod_l+0x590>)
 8009c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c82:	4650      	mov	r0, sl
 8009c84:	4659      	mov	r1, fp
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fde7 	bl	800085c <__aeabi_ddiv>
 8009c8e:	4682      	mov	sl, r0
 8009c90:	468b      	mov	fp, r1
 8009c92:	1124      	asrs	r4, r4, #4
 8009c94:	d0dc      	beq.n	8009c50 <_strtod_l+0x518>
 8009c96:	2c1f      	cmp	r4, #31
 8009c98:	dd20      	ble.n	8009cdc <_strtod_l+0x5a4>
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	46a0      	mov	r8, r4
 8009c9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ca0:	46a1      	mov	r9, r4
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	2322      	movs	r3, #34	@ 0x22
 8009ca6:	f04f 0a00 	mov.w	sl, #0
 8009caa:	f04f 0b00 	mov.w	fp, #0
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	e768      	b.n	8009b84 <_strtod_l+0x44c>
 8009cb2:	bf00      	nop
 8009cb4:	0800b709 	.word	0x0800b709
 8009cb8:	0800b91c 	.word	0x0800b91c
 8009cbc:	0800b701 	.word	0x0800b701
 8009cc0:	0800b738 	.word	0x0800b738
 8009cc4:	0800bac5 	.word	0x0800bac5
 8009cc8:	0800b850 	.word	0x0800b850
 8009ccc:	0800b828 	.word	0x0800b828
 8009cd0:	7ff00000 	.word	0x7ff00000
 8009cd4:	7ca00000 	.word	0x7ca00000
 8009cd8:	7fefffff 	.word	0x7fefffff
 8009cdc:	f014 0310 	ands.w	r3, r4, #16
 8009ce0:	bf18      	it	ne
 8009ce2:	236a      	movne	r3, #106	@ 0x6a
 8009ce4:	4ea9      	ldr	r6, [pc, #676]	@ (8009f8c <_strtod_l+0x854>)
 8009ce6:	9308      	str	r3, [sp, #32]
 8009ce8:	4650      	mov	r0, sl
 8009cea:	4659      	mov	r1, fp
 8009cec:	2300      	movs	r3, #0
 8009cee:	07e2      	lsls	r2, r4, #31
 8009cf0:	d504      	bpl.n	8009cfc <_strtod_l+0x5c4>
 8009cf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cf6:	f7f6 fc87 	bl	8000608 <__aeabi_dmul>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	1064      	asrs	r4, r4, #1
 8009cfe:	f106 0608 	add.w	r6, r6, #8
 8009d02:	d1f4      	bne.n	8009cee <_strtod_l+0x5b6>
 8009d04:	b10b      	cbz	r3, 8009d0a <_strtod_l+0x5d2>
 8009d06:	4682      	mov	sl, r0
 8009d08:	468b      	mov	fp, r1
 8009d0a:	9b08      	ldr	r3, [sp, #32]
 8009d0c:	b1b3      	cbz	r3, 8009d3c <_strtod_l+0x604>
 8009d0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	4659      	mov	r1, fp
 8009d1a:	dd0f      	ble.n	8009d3c <_strtod_l+0x604>
 8009d1c:	2b1f      	cmp	r3, #31
 8009d1e:	dd55      	ble.n	8009dcc <_strtod_l+0x694>
 8009d20:	2b34      	cmp	r3, #52	@ 0x34
 8009d22:	bfde      	ittt	le
 8009d24:	f04f 33ff 	movle.w	r3, #4294967295
 8009d28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d2c:	4093      	lslle	r3, r2
 8009d2e:	f04f 0a00 	mov.w	sl, #0
 8009d32:	bfcc      	ite	gt
 8009d34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d38:	ea03 0b01 	andle.w	fp, r3, r1
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4650      	mov	r0, sl
 8009d42:	4659      	mov	r1, fp
 8009d44:	f7f6 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1a6      	bne.n	8009c9a <_strtod_l+0x562>
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d52:	9805      	ldr	r0, [sp, #20]
 8009d54:	462b      	mov	r3, r5
 8009d56:	463a      	mov	r2, r7
 8009d58:	f7ff f8c6 	bl	8008ee8 <__s2b>
 8009d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f af05 	beq.w	8009b6e <_strtod_l+0x436>
 8009d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	eba9 0308 	sub.w	r3, r9, r8
 8009d6c:	bfa8      	it	ge
 8009d6e:	2300      	movge	r3, #0
 8009d70:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d72:	2400      	movs	r4, #0
 8009d74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d78:	9316      	str	r3, [sp, #88]	@ 0x58
 8009d7a:	46a0      	mov	r8, r4
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d7e:	9805      	ldr	r0, [sp, #20]
 8009d80:	6859      	ldr	r1, [r3, #4]
 8009d82:	f7ff f809 	bl	8008d98 <_Balloc>
 8009d86:	4681      	mov	r9, r0
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f43f aef4 	beq.w	8009b76 <_strtod_l+0x43e>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	3202      	adds	r2, #2
 8009d94:	f103 010c 	add.w	r1, r3, #12
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	300c      	adds	r0, #12
 8009d9c:	f000 fd72 	bl	800a884 <memcpy>
 8009da0:	ec4b ab10 	vmov	d0, sl, fp
 8009da4:	9805      	ldr	r0, [sp, #20]
 8009da6:	aa1c      	add	r2, sp, #112	@ 0x70
 8009da8:	a91b      	add	r1, sp, #108	@ 0x6c
 8009daa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009dae:	f7ff fbd7 	bl	8009560 <__d2b>
 8009db2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f43f aede 	beq.w	8009b76 <_strtod_l+0x43e>
 8009dba:	9805      	ldr	r0, [sp, #20]
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	f7ff f929 	bl	8009014 <__i2b>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	b948      	cbnz	r0, 8009dda <_strtod_l+0x6a2>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	e6d4      	b.n	8009b76 <_strtod_l+0x43e>
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd4:	ea03 0a0a 	and.w	sl, r3, sl
 8009dd8:	e7b0      	b.n	8009d3c <_strtod_l+0x604>
 8009dda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	bfab      	itete	ge
 8009de2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009de4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009de6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009de8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009dea:	bfac      	ite	ge
 8009dec:	18ef      	addge	r7, r5, r3
 8009dee:	1b5e      	sublt	r6, r3, r5
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	1aed      	subs	r5, r5, r3
 8009df4:	4415      	add	r5, r2
 8009df6:	4b66      	ldr	r3, [pc, #408]	@ (8009f90 <_strtod_l+0x858>)
 8009df8:	3d01      	subs	r5, #1
 8009dfa:	429d      	cmp	r5, r3
 8009dfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e00:	da50      	bge.n	8009ea4 <_strtod_l+0x76c>
 8009e02:	1b5b      	subs	r3, r3, r5
 8009e04:	2b1f      	cmp	r3, #31
 8009e06:	eba2 0203 	sub.w	r2, r2, r3
 8009e0a:	f04f 0101 	mov.w	r1, #1
 8009e0e:	dc3d      	bgt.n	8009e8c <_strtod_l+0x754>
 8009e10:	fa01 f303 	lsl.w	r3, r1, r3
 8009e14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e16:	2300      	movs	r3, #0
 8009e18:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e1a:	18bd      	adds	r5, r7, r2
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	42af      	cmp	r7, r5
 8009e20:	4416      	add	r6, r2
 8009e22:	441e      	add	r6, r3
 8009e24:	463b      	mov	r3, r7
 8009e26:	bfa8      	it	ge
 8009e28:	462b      	movge	r3, r5
 8009e2a:	42b3      	cmp	r3, r6
 8009e2c:	bfa8      	it	ge
 8009e2e:	4633      	movge	r3, r6
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfc2      	ittt	gt
 8009e34:	1aed      	subgt	r5, r5, r3
 8009e36:	1af6      	subgt	r6, r6, r3
 8009e38:	1aff      	subgt	r7, r7, r3
 8009e3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd16      	ble.n	8009e6e <_strtod_l+0x736>
 8009e40:	4641      	mov	r1, r8
 8009e42:	9805      	ldr	r0, [sp, #20]
 8009e44:	461a      	mov	r2, r3
 8009e46:	f7ff f9a5 	bl	8009194 <__pow5mult>
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d0ba      	beq.n	8009dc6 <_strtod_l+0x68e>
 8009e50:	4601      	mov	r1, r0
 8009e52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e54:	9805      	ldr	r0, [sp, #20]
 8009e56:	f7ff f8f3 	bl	8009040 <__multiply>
 8009e5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f43f ae8a 	beq.w	8009b76 <_strtod_l+0x43e>
 8009e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e64:	9805      	ldr	r0, [sp, #20]
 8009e66:	f7fe ffd7 	bl	8008e18 <_Bfree>
 8009e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	dc1d      	bgt.n	8009eae <_strtod_l+0x776>
 8009e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dd23      	ble.n	8009ec0 <_strtod_l+0x788>
 8009e78:	4649      	mov	r1, r9
 8009e7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e7c:	9805      	ldr	r0, [sp, #20]
 8009e7e:	f7ff f989 	bl	8009194 <__pow5mult>
 8009e82:	4681      	mov	r9, r0
 8009e84:	b9e0      	cbnz	r0, 8009ec0 <_strtod_l+0x788>
 8009e86:	f04f 0900 	mov.w	r9, #0
 8009e8a:	e674      	b.n	8009b76 <_strtod_l+0x43e>
 8009e8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009e98:	35e2      	adds	r5, #226	@ 0xe2
 8009e9a:	fa01 f305 	lsl.w	r3, r1, r5
 8009e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009ea2:	e7ba      	b.n	8009e1a <_strtod_l+0x6e2>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eac:	e7b5      	b.n	8009e1a <_strtod_l+0x6e2>
 8009eae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eb0:	9805      	ldr	r0, [sp, #20]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	f7ff f9c8 	bl	8009248 <__lshift>
 8009eb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1d9      	bne.n	8009e72 <_strtod_l+0x73a>
 8009ebe:	e65a      	b.n	8009b76 <_strtod_l+0x43e>
 8009ec0:	2e00      	cmp	r6, #0
 8009ec2:	dd07      	ble.n	8009ed4 <_strtod_l+0x79c>
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	9805      	ldr	r0, [sp, #20]
 8009ec8:	4632      	mov	r2, r6
 8009eca:	f7ff f9bd 	bl	8009248 <__lshift>
 8009ece:	4681      	mov	r9, r0
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d0d8      	beq.n	8009e86 <_strtod_l+0x74e>
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	dd08      	ble.n	8009eea <_strtod_l+0x7b2>
 8009ed8:	4641      	mov	r1, r8
 8009eda:	9805      	ldr	r0, [sp, #20]
 8009edc:	463a      	mov	r2, r7
 8009ede:	f7ff f9b3 	bl	8009248 <__lshift>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	f43f ae46 	beq.w	8009b76 <_strtod_l+0x43e>
 8009eea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eec:	9805      	ldr	r0, [sp, #20]
 8009eee:	464a      	mov	r2, r9
 8009ef0:	f7ff fa32 	bl	8009358 <__mdiff>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	f43f ae3d 	beq.w	8009b76 <_strtod_l+0x43e>
 8009efc:	68c3      	ldr	r3, [r0, #12]
 8009efe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f00:	2300      	movs	r3, #0
 8009f02:	60c3      	str	r3, [r0, #12]
 8009f04:	4641      	mov	r1, r8
 8009f06:	f7ff fa0b 	bl	8009320 <__mcmp>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	da46      	bge.n	8009f9c <_strtod_l+0x864>
 8009f0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f10:	ea53 030a 	orrs.w	r3, r3, sl
 8009f14:	d16c      	bne.n	8009ff0 <_strtod_l+0x8b8>
 8009f16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d168      	bne.n	8009ff0 <_strtod_l+0x8b8>
 8009f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f22:	0d1b      	lsrs	r3, r3, #20
 8009f24:	051b      	lsls	r3, r3, #20
 8009f26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f2a:	d961      	bls.n	8009ff0 <_strtod_l+0x8b8>
 8009f2c:	6963      	ldr	r3, [r4, #20]
 8009f2e:	b913      	cbnz	r3, 8009f36 <_strtod_l+0x7fe>
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	dd5c      	ble.n	8009ff0 <_strtod_l+0x8b8>
 8009f36:	4621      	mov	r1, r4
 8009f38:	2201      	movs	r2, #1
 8009f3a:	9805      	ldr	r0, [sp, #20]
 8009f3c:	f7ff f984 	bl	8009248 <__lshift>
 8009f40:	4641      	mov	r1, r8
 8009f42:	4604      	mov	r4, r0
 8009f44:	f7ff f9ec 	bl	8009320 <__mcmp>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dd51      	ble.n	8009ff0 <_strtod_l+0x8b8>
 8009f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f50:	9a08      	ldr	r2, [sp, #32]
 8009f52:	0d1b      	lsrs	r3, r3, #20
 8009f54:	051b      	lsls	r3, r3, #20
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	d06b      	beq.n	800a032 <_strtod_l+0x8fa>
 8009f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f5e:	d868      	bhi.n	800a032 <_strtod_l+0x8fa>
 8009f60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f64:	f67f ae9d 	bls.w	8009ca2 <_strtod_l+0x56a>
 8009f68:	4b0a      	ldr	r3, [pc, #40]	@ (8009f94 <_strtod_l+0x85c>)
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f7f6 fb4a 	bl	8000608 <__aeabi_dmul>
 8009f74:	4b08      	ldr	r3, [pc, #32]	@ (8009f98 <_strtod_l+0x860>)
 8009f76:	400b      	ands	r3, r1
 8009f78:	4682      	mov	sl, r0
 8009f7a:	468b      	mov	fp, r1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f47f ae05 	bne.w	8009b8c <_strtod_l+0x454>
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	2322      	movs	r3, #34	@ 0x22
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	e600      	b.n	8009b8c <_strtod_l+0x454>
 8009f8a:	bf00      	nop
 8009f8c:	0800b948 	.word	0x0800b948
 8009f90:	fffffc02 	.word	0xfffffc02
 8009f94:	39500000 	.word	0x39500000
 8009f98:	7ff00000 	.word	0x7ff00000
 8009f9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fa0:	d165      	bne.n	800a06e <_strtod_l+0x936>
 8009fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009fa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fa8:	b35a      	cbz	r2, 800a002 <_strtod_l+0x8ca>
 8009faa:	4a9f      	ldr	r2, [pc, #636]	@ (800a228 <_strtod_l+0xaf0>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d12b      	bne.n	800a008 <_strtod_l+0x8d0>
 8009fb0:	9b08      	ldr	r3, [sp, #32]
 8009fb2:	4651      	mov	r1, sl
 8009fb4:	b303      	cbz	r3, 8009ff8 <_strtod_l+0x8c0>
 8009fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800a22c <_strtod_l+0xaf4>)
 8009fb8:	465a      	mov	r2, fp
 8009fba:	4013      	ands	r3, r2
 8009fbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc4:	d81b      	bhi.n	8009ffe <_strtod_l+0x8c6>
 8009fc6:	0d1b      	lsrs	r3, r3, #20
 8009fc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	d119      	bne.n	800a008 <_strtod_l+0x8d0>
 8009fd4:	4b96      	ldr	r3, [pc, #600]	@ (800a230 <_strtod_l+0xaf8>)
 8009fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d102      	bne.n	8009fe2 <_strtod_l+0x8aa>
 8009fdc:	3101      	adds	r1, #1
 8009fde:	f43f adca 	beq.w	8009b76 <_strtod_l+0x43e>
 8009fe2:	4b92      	ldr	r3, [pc, #584]	@ (800a22c <_strtod_l+0xaf4>)
 8009fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009fec:	f04f 0a00 	mov.w	sl, #0
 8009ff0:	9b08      	ldr	r3, [sp, #32]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1b8      	bne.n	8009f68 <_strtod_l+0x830>
 8009ff6:	e5c9      	b.n	8009b8c <_strtod_l+0x454>
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	e7e8      	b.n	8009fd0 <_strtod_l+0x898>
 8009ffe:	4613      	mov	r3, r2
 800a000:	e7e6      	b.n	8009fd0 <_strtod_l+0x898>
 800a002:	ea53 030a 	orrs.w	r3, r3, sl
 800a006:	d0a1      	beq.n	8009f4c <_strtod_l+0x814>
 800a008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a00a:	b1db      	cbz	r3, 800a044 <_strtod_l+0x90c>
 800a00c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a00e:	4213      	tst	r3, r2
 800a010:	d0ee      	beq.n	8009ff0 <_strtod_l+0x8b8>
 800a012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a014:	9a08      	ldr	r2, [sp, #32]
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	b1bb      	cbz	r3, 800a04c <_strtod_l+0x914>
 800a01c:	f7ff fb6e 	bl	80096fc <sulp>
 800a020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a024:	ec53 2b10 	vmov	r2, r3, d0
 800a028:	f7f6 f938 	bl	800029c <__adddf3>
 800a02c:	4682      	mov	sl, r0
 800a02e:	468b      	mov	fp, r1
 800a030:	e7de      	b.n	8009ff0 <_strtod_l+0x8b8>
 800a032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a03a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a03e:	f04f 3aff 	mov.w	sl, #4294967295
 800a042:	e7d5      	b.n	8009ff0 <_strtod_l+0x8b8>
 800a044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a046:	ea13 0f0a 	tst.w	r3, sl
 800a04a:	e7e1      	b.n	800a010 <_strtod_l+0x8d8>
 800a04c:	f7ff fb56 	bl	80096fc <sulp>
 800a050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a054:	ec53 2b10 	vmov	r2, r3, d0
 800a058:	f7f6 f91e 	bl	8000298 <__aeabi_dsub>
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	f7f6 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d0c1      	beq.n	8009ff0 <_strtod_l+0x8b8>
 800a06c:	e619      	b.n	8009ca2 <_strtod_l+0x56a>
 800a06e:	4641      	mov	r1, r8
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff facd 	bl	8009610 <__ratio>
 800a076:	ec57 6b10 	vmov	r6, r7, d0
 800a07a:	2200      	movs	r2, #0
 800a07c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	f7f6 fd3c 	bl	8000b00 <__aeabi_dcmple>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d06f      	beq.n	800a16c <_strtod_l+0xa34>
 800a08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d17a      	bne.n	800a188 <_strtod_l+0xa50>
 800a092:	f1ba 0f00 	cmp.w	sl, #0
 800a096:	d158      	bne.n	800a14a <_strtod_l+0xa12>
 800a098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d15a      	bne.n	800a158 <_strtod_l+0xa20>
 800a0a2:	4b64      	ldr	r3, [pc, #400]	@ (800a234 <_strtod_l+0xafc>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	f7f6 fd1f 	bl	8000aec <__aeabi_dcmplt>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d159      	bne.n	800a166 <_strtod_l+0xa2e>
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	4b60      	ldr	r3, [pc, #384]	@ (800a238 <_strtod_l+0xb00>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f7f6 faa5 	bl	8000608 <__aeabi_dmul>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a0c6:	9606      	str	r6, [sp, #24]
 800a0c8:	9307      	str	r3, [sp, #28]
 800a0ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ce:	4d57      	ldr	r5, [pc, #348]	@ (800a22c <_strtod_l+0xaf4>)
 800a0d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d6:	401d      	ands	r5, r3
 800a0d8:	4b58      	ldr	r3, [pc, #352]	@ (800a23c <_strtod_l+0xb04>)
 800a0da:	429d      	cmp	r5, r3
 800a0dc:	f040 80b2 	bne.w	800a244 <_strtod_l+0xb0c>
 800a0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a0e6:	ec4b ab10 	vmov	d0, sl, fp
 800a0ea:	f7ff f9c9 	bl	8009480 <__ulp>
 800a0ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0f2:	ec51 0b10 	vmov	r0, r1, d0
 800a0f6:	f7f6 fa87 	bl	8000608 <__aeabi_dmul>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	f7f6 f8cd 	bl	800029c <__adddf3>
 800a102:	460b      	mov	r3, r1
 800a104:	4949      	ldr	r1, [pc, #292]	@ (800a22c <_strtod_l+0xaf4>)
 800a106:	4a4e      	ldr	r2, [pc, #312]	@ (800a240 <_strtod_l+0xb08>)
 800a108:	4019      	ands	r1, r3
 800a10a:	4291      	cmp	r1, r2
 800a10c:	4682      	mov	sl, r0
 800a10e:	d942      	bls.n	800a196 <_strtod_l+0xa5e>
 800a110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a112:	4b47      	ldr	r3, [pc, #284]	@ (800a230 <_strtod_l+0xaf8>)
 800a114:	429a      	cmp	r2, r3
 800a116:	d103      	bne.n	800a120 <_strtod_l+0x9e8>
 800a118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a11a:	3301      	adds	r3, #1
 800a11c:	f43f ad2b 	beq.w	8009b76 <_strtod_l+0x43e>
 800a120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a230 <_strtod_l+0xaf8>
 800a124:	f04f 3aff 	mov.w	sl, #4294967295
 800a128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a12a:	9805      	ldr	r0, [sp, #20]
 800a12c:	f7fe fe74 	bl	8008e18 <_Bfree>
 800a130:	9805      	ldr	r0, [sp, #20]
 800a132:	4649      	mov	r1, r9
 800a134:	f7fe fe70 	bl	8008e18 <_Bfree>
 800a138:	9805      	ldr	r0, [sp, #20]
 800a13a:	4641      	mov	r1, r8
 800a13c:	f7fe fe6c 	bl	8008e18 <_Bfree>
 800a140:	9805      	ldr	r0, [sp, #20]
 800a142:	4621      	mov	r1, r4
 800a144:	f7fe fe68 	bl	8008e18 <_Bfree>
 800a148:	e618      	b.n	8009d7c <_strtod_l+0x644>
 800a14a:	f1ba 0f01 	cmp.w	sl, #1
 800a14e:	d103      	bne.n	800a158 <_strtod_l+0xa20>
 800a150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a152:	2b00      	cmp	r3, #0
 800a154:	f43f ada5 	beq.w	8009ca2 <_strtod_l+0x56a>
 800a158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a208 <_strtod_l+0xad0>
 800a15c:	4f35      	ldr	r7, [pc, #212]	@ (800a234 <_strtod_l+0xafc>)
 800a15e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a162:	2600      	movs	r6, #0
 800a164:	e7b1      	b.n	800a0ca <_strtod_l+0x992>
 800a166:	4f34      	ldr	r7, [pc, #208]	@ (800a238 <_strtod_l+0xb00>)
 800a168:	2600      	movs	r6, #0
 800a16a:	e7aa      	b.n	800a0c2 <_strtod_l+0x98a>
 800a16c:	4b32      	ldr	r3, [pc, #200]	@ (800a238 <_strtod_l+0xb00>)
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	2200      	movs	r2, #0
 800a174:	f7f6 fa48 	bl	8000608 <__aeabi_dmul>
 800a178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d09f      	beq.n	800a0c2 <_strtod_l+0x98a>
 800a182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a186:	e7a0      	b.n	800a0ca <_strtod_l+0x992>
 800a188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a210 <_strtod_l+0xad8>
 800a18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a190:	ec57 6b17 	vmov	r6, r7, d7
 800a194:	e799      	b.n	800a0ca <_strtod_l+0x992>
 800a196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1c1      	bne.n	800a128 <_strtod_l+0x9f0>
 800a1a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1a8:	0d1b      	lsrs	r3, r3, #20
 800a1aa:	051b      	lsls	r3, r3, #20
 800a1ac:	429d      	cmp	r5, r3
 800a1ae:	d1bb      	bne.n	800a128 <_strtod_l+0x9f0>
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fd88 	bl	8000cc8 <__aeabi_d2lz>
 800a1b8:	f7f6 f9f8 	bl	80005ac <__aeabi_l2d>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 f868 	bl	8000298 <__aeabi_dsub>
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a1d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1d6:	ea46 060a 	orr.w	r6, r6, sl
 800a1da:	431e      	orrs	r6, r3
 800a1dc:	d06f      	beq.n	800a2be <_strtod_l+0xb86>
 800a1de:	a30e      	add	r3, pc, #56	@ (adr r3, 800a218 <_strtod_l+0xae0>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 fc82 	bl	8000aec <__aeabi_dcmplt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f47f accf 	bne.w	8009b8c <_strtod_l+0x454>
 800a1ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800a220 <_strtod_l+0xae8>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1f8:	f7f6 fc96 	bl	8000b28 <__aeabi_dcmpgt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d093      	beq.n	800a128 <_strtod_l+0x9f0>
 800a200:	e4c4      	b.n	8009b8c <_strtod_l+0x454>
 800a202:	bf00      	nop
 800a204:	f3af 8000 	nop.w
 800a208:	00000000 	.word	0x00000000
 800a20c:	bff00000 	.word	0xbff00000
 800a210:	00000000 	.word	0x00000000
 800a214:	3ff00000 	.word	0x3ff00000
 800a218:	94a03595 	.word	0x94a03595
 800a21c:	3fdfffff 	.word	0x3fdfffff
 800a220:	35afe535 	.word	0x35afe535
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	000fffff 	.word	0x000fffff
 800a22c:	7ff00000 	.word	0x7ff00000
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	3ff00000 	.word	0x3ff00000
 800a238:	3fe00000 	.word	0x3fe00000
 800a23c:	7fe00000 	.word	0x7fe00000
 800a240:	7c9fffff 	.word	0x7c9fffff
 800a244:	9b08      	ldr	r3, [sp, #32]
 800a246:	b323      	cbz	r3, 800a292 <_strtod_l+0xb5a>
 800a248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a24c:	d821      	bhi.n	800a292 <_strtod_l+0xb5a>
 800a24e:	a328      	add	r3, pc, #160	@ (adr r3, 800a2f0 <_strtod_l+0xbb8>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 fc52 	bl	8000b00 <__aeabi_dcmple>
 800a25c:	b1a0      	cbz	r0, 800a288 <_strtod_l+0xb50>
 800a25e:	4639      	mov	r1, r7
 800a260:	4630      	mov	r0, r6
 800a262:	f7f6 fca9 	bl	8000bb8 <__aeabi_d2uiz>
 800a266:	2801      	cmp	r0, #1
 800a268:	bf38      	it	cc
 800a26a:	2001      	movcc	r0, #1
 800a26c:	f7f6 f952 	bl	8000514 <__aeabi_ui2d>
 800a270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	b9fb      	cbnz	r3, 800a2b8 <_strtod_l+0xb80>
 800a278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a27c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a27e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a28a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a28e:	1b5b      	subs	r3, r3, r5
 800a290:	9311      	str	r3, [sp, #68]	@ 0x44
 800a292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a29a:	f7ff f8f1 	bl	8009480 <__ulp>
 800a29e:	4650      	mov	r0, sl
 800a2a0:	ec53 2b10 	vmov	r2, r3, d0
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2ae:	f7f5 fff5 	bl	800029c <__adddf3>
 800a2b2:	4682      	mov	sl, r0
 800a2b4:	468b      	mov	fp, r1
 800a2b6:	e770      	b.n	800a19a <_strtod_l+0xa62>
 800a2b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a2bc:	e7e0      	b.n	800a280 <_strtod_l+0xb48>
 800a2be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2f8 <_strtod_l+0xbc0>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f7f6 fc12 	bl	8000aec <__aeabi_dcmplt>
 800a2c8:	e798      	b.n	800a1fc <_strtod_l+0xac4>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	f7ff ba6d 	b.w	80097b2 <_strtod_l+0x7a>
 800a2d8:	2a65      	cmp	r2, #101	@ 0x65
 800a2da:	f43f ab66 	beq.w	80099aa <_strtod_l+0x272>
 800a2de:	2a45      	cmp	r2, #69	@ 0x45
 800a2e0:	f43f ab63 	beq.w	80099aa <_strtod_l+0x272>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f7ff bb9e 	b.w	8009a26 <_strtod_l+0x2ee>
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	ffc00000 	.word	0xffc00000
 800a2f4:	41dfffff 	.word	0x41dfffff
 800a2f8:	94a03595 	.word	0x94a03595
 800a2fc:	3fcfffff 	.word	0x3fcfffff

0800a300 <_strtod_r>:
 800a300:	4b01      	ldr	r3, [pc, #4]	@ (800a308 <_strtod_r+0x8>)
 800a302:	f7ff ba19 	b.w	8009738 <_strtod_l>
 800a306:	bf00      	nop
 800a308:	200000ac 	.word	0x200000ac

0800a30c <_strtol_l.constprop.0>:
 800a30c:	2b24      	cmp	r3, #36	@ 0x24
 800a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a312:	4686      	mov	lr, r0
 800a314:	4690      	mov	r8, r2
 800a316:	d801      	bhi.n	800a31c <_strtol_l.constprop.0+0x10>
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d106      	bne.n	800a32a <_strtol_l.constprop.0+0x1e>
 800a31c:	f7fd fdbc 	bl	8007e98 <__errno>
 800a320:	2316      	movs	r3, #22
 800a322:	6003      	str	r3, [r0, #0]
 800a324:	2000      	movs	r0, #0
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	4834      	ldr	r0, [pc, #208]	@ (800a3fc <_strtol_l.constprop.0+0xf0>)
 800a32c:	460d      	mov	r5, r1
 800a32e:	462a      	mov	r2, r5
 800a330:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a334:	5d06      	ldrb	r6, [r0, r4]
 800a336:	f016 0608 	ands.w	r6, r6, #8
 800a33a:	d1f8      	bne.n	800a32e <_strtol_l.constprop.0+0x22>
 800a33c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a33e:	d12d      	bne.n	800a39c <_strtol_l.constprop.0+0x90>
 800a340:	782c      	ldrb	r4, [r5, #0]
 800a342:	2601      	movs	r6, #1
 800a344:	1c95      	adds	r5, r2, #2
 800a346:	f033 0210 	bics.w	r2, r3, #16
 800a34a:	d109      	bne.n	800a360 <_strtol_l.constprop.0+0x54>
 800a34c:	2c30      	cmp	r4, #48	@ 0x30
 800a34e:	d12a      	bne.n	800a3a6 <_strtol_l.constprop.0+0x9a>
 800a350:	782a      	ldrb	r2, [r5, #0]
 800a352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a356:	2a58      	cmp	r2, #88	@ 0x58
 800a358:	d125      	bne.n	800a3a6 <_strtol_l.constprop.0+0x9a>
 800a35a:	786c      	ldrb	r4, [r5, #1]
 800a35c:	2310      	movs	r3, #16
 800a35e:	3502      	adds	r5, #2
 800a360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a364:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a368:	2200      	movs	r2, #0
 800a36a:	fbbc f9f3 	udiv	r9, ip, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	fb03 ca19 	mls	sl, r3, r9, ip
 800a374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a378:	2f09      	cmp	r7, #9
 800a37a:	d81b      	bhi.n	800a3b4 <_strtol_l.constprop.0+0xa8>
 800a37c:	463c      	mov	r4, r7
 800a37e:	42a3      	cmp	r3, r4
 800a380:	dd27      	ble.n	800a3d2 <_strtol_l.constprop.0+0xc6>
 800a382:	1c57      	adds	r7, r2, #1
 800a384:	d007      	beq.n	800a396 <_strtol_l.constprop.0+0x8a>
 800a386:	4581      	cmp	r9, r0
 800a388:	d320      	bcc.n	800a3cc <_strtol_l.constprop.0+0xc0>
 800a38a:	d101      	bne.n	800a390 <_strtol_l.constprop.0+0x84>
 800a38c:	45a2      	cmp	sl, r4
 800a38e:	db1d      	blt.n	800a3cc <_strtol_l.constprop.0+0xc0>
 800a390:	fb00 4003 	mla	r0, r0, r3, r4
 800a394:	2201      	movs	r2, #1
 800a396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a39a:	e7eb      	b.n	800a374 <_strtol_l.constprop.0+0x68>
 800a39c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a39e:	bf04      	itt	eq
 800a3a0:	782c      	ldrbeq	r4, [r5, #0]
 800a3a2:	1c95      	addeq	r5, r2, #2
 800a3a4:	e7cf      	b.n	800a346 <_strtol_l.constprop.0+0x3a>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1da      	bne.n	800a360 <_strtol_l.constprop.0+0x54>
 800a3aa:	2c30      	cmp	r4, #48	@ 0x30
 800a3ac:	bf0c      	ite	eq
 800a3ae:	2308      	moveq	r3, #8
 800a3b0:	230a      	movne	r3, #10
 800a3b2:	e7d5      	b.n	800a360 <_strtol_l.constprop.0+0x54>
 800a3b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3b8:	2f19      	cmp	r7, #25
 800a3ba:	d801      	bhi.n	800a3c0 <_strtol_l.constprop.0+0xb4>
 800a3bc:	3c37      	subs	r4, #55	@ 0x37
 800a3be:	e7de      	b.n	800a37e <_strtol_l.constprop.0+0x72>
 800a3c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3c4:	2f19      	cmp	r7, #25
 800a3c6:	d804      	bhi.n	800a3d2 <_strtol_l.constprop.0+0xc6>
 800a3c8:	3c57      	subs	r4, #87	@ 0x57
 800a3ca:	e7d8      	b.n	800a37e <_strtol_l.constprop.0+0x72>
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	e7e1      	b.n	800a396 <_strtol_l.constprop.0+0x8a>
 800a3d2:	1c53      	adds	r3, r2, #1
 800a3d4:	d108      	bne.n	800a3e8 <_strtol_l.constprop.0+0xdc>
 800a3d6:	2322      	movs	r3, #34	@ 0x22
 800a3d8:	f8ce 3000 	str.w	r3, [lr]
 800a3dc:	4660      	mov	r0, ip
 800a3de:	f1b8 0f00 	cmp.w	r8, #0
 800a3e2:	d0a0      	beq.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3e4:	1e69      	subs	r1, r5, #1
 800a3e6:	e006      	b.n	800a3f6 <_strtol_l.constprop.0+0xea>
 800a3e8:	b106      	cbz	r6, 800a3ec <_strtol_l.constprop.0+0xe0>
 800a3ea:	4240      	negs	r0, r0
 800a3ec:	f1b8 0f00 	cmp.w	r8, #0
 800a3f0:	d099      	beq.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d1f6      	bne.n	800a3e4 <_strtol_l.constprop.0+0xd8>
 800a3f6:	f8c8 1000 	str.w	r1, [r8]
 800a3fa:	e794      	b.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3fc:	0800b971 	.word	0x0800b971

0800a400 <_strtol_r>:
 800a400:	f7ff bf84 	b.w	800a30c <_strtol_l.constprop.0>

0800a404 <__ssputs_r>:
 800a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	688e      	ldr	r6, [r1, #8]
 800a40a:	461f      	mov	r7, r3
 800a40c:	42be      	cmp	r6, r7
 800a40e:	680b      	ldr	r3, [r1, #0]
 800a410:	4682      	mov	sl, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4690      	mov	r8, r2
 800a416:	d82d      	bhi.n	800a474 <__ssputs_r+0x70>
 800a418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a41c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a420:	d026      	beq.n	800a470 <__ssputs_r+0x6c>
 800a422:	6965      	ldr	r5, [r4, #20]
 800a424:	6909      	ldr	r1, [r1, #16]
 800a426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a42a:	eba3 0901 	sub.w	r9, r3, r1
 800a42e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a432:	1c7b      	adds	r3, r7, #1
 800a434:	444b      	add	r3, r9
 800a436:	106d      	asrs	r5, r5, #1
 800a438:	429d      	cmp	r5, r3
 800a43a:	bf38      	it	cc
 800a43c:	461d      	movcc	r5, r3
 800a43e:	0553      	lsls	r3, r2, #21
 800a440:	d527      	bpl.n	800a492 <__ssputs_r+0x8e>
 800a442:	4629      	mov	r1, r5
 800a444:	f7fe fc1c 	bl	8008c80 <_malloc_r>
 800a448:	4606      	mov	r6, r0
 800a44a:	b360      	cbz	r0, 800a4a6 <__ssputs_r+0xa2>
 800a44c:	6921      	ldr	r1, [r4, #16]
 800a44e:	464a      	mov	r2, r9
 800a450:	f000 fa18 	bl	800a884 <memcpy>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	6126      	str	r6, [r4, #16]
 800a462:	6165      	str	r5, [r4, #20]
 800a464:	444e      	add	r6, r9
 800a466:	eba5 0509 	sub.w	r5, r5, r9
 800a46a:	6026      	str	r6, [r4, #0]
 800a46c:	60a5      	str	r5, [r4, #8]
 800a46e:	463e      	mov	r6, r7
 800a470:	42be      	cmp	r6, r7
 800a472:	d900      	bls.n	800a476 <__ssputs_r+0x72>
 800a474:	463e      	mov	r6, r7
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	4632      	mov	r2, r6
 800a47a:	4641      	mov	r1, r8
 800a47c:	f000 f9c6 	bl	800a80c <memmove>
 800a480:	68a3      	ldr	r3, [r4, #8]
 800a482:	1b9b      	subs	r3, r3, r6
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	4433      	add	r3, r6
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	2000      	movs	r0, #0
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	462a      	mov	r2, r5
 800a494:	f000 fd89 	bl	800afaa <_realloc_r>
 800a498:	4606      	mov	r6, r0
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1e0      	bne.n	800a460 <__ssputs_r+0x5c>
 800a49e:	6921      	ldr	r1, [r4, #16]
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	f7fe fb79 	bl	8008b98 <_free_r>
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	f8ca 3000 	str.w	r3, [sl]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	e7e9      	b.n	800a48e <__ssputs_r+0x8a>
	...

0800a4bc <_svfiprintf_r>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	4698      	mov	r8, r3
 800a4c2:	898b      	ldrh	r3, [r1, #12]
 800a4c4:	061b      	lsls	r3, r3, #24
 800a4c6:	b09d      	sub	sp, #116	@ 0x74
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	d510      	bpl.n	800a4f2 <_svfiprintf_r+0x36>
 800a4d0:	690b      	ldr	r3, [r1, #16]
 800a4d2:	b973      	cbnz	r3, 800a4f2 <_svfiprintf_r+0x36>
 800a4d4:	2140      	movs	r1, #64	@ 0x40
 800a4d6:	f7fe fbd3 	bl	8008c80 <_malloc_r>
 800a4da:	6028      	str	r0, [r5, #0]
 800a4dc:	6128      	str	r0, [r5, #16]
 800a4de:	b930      	cbnz	r0, 800a4ee <_svfiprintf_r+0x32>
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	b01d      	add	sp, #116	@ 0x74
 800a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ee:	2340      	movs	r3, #64	@ 0x40
 800a4f0:	616b      	str	r3, [r5, #20]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4f6:	2320      	movs	r3, #32
 800a4f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a500:	2330      	movs	r3, #48	@ 0x30
 800a502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6a0 <_svfiprintf_r+0x1e4>
 800a506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a50a:	f04f 0901 	mov.w	r9, #1
 800a50e:	4623      	mov	r3, r4
 800a510:	469a      	mov	sl, r3
 800a512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a516:	b10a      	cbz	r2, 800a51c <_svfiprintf_r+0x60>
 800a518:	2a25      	cmp	r2, #37	@ 0x25
 800a51a:	d1f9      	bne.n	800a510 <_svfiprintf_r+0x54>
 800a51c:	ebba 0b04 	subs.w	fp, sl, r4
 800a520:	d00b      	beq.n	800a53a <_svfiprintf_r+0x7e>
 800a522:	465b      	mov	r3, fp
 800a524:	4622      	mov	r2, r4
 800a526:	4629      	mov	r1, r5
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ff6b 	bl	800a404 <__ssputs_r>
 800a52e:	3001      	adds	r0, #1
 800a530:	f000 80a7 	beq.w	800a682 <_svfiprintf_r+0x1c6>
 800a534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a536:	445a      	add	r2, fp
 800a538:	9209      	str	r2, [sp, #36]	@ 0x24
 800a53a:	f89a 3000 	ldrb.w	r3, [sl]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 809f 	beq.w	800a682 <_svfiprintf_r+0x1c6>
 800a544:	2300      	movs	r3, #0
 800a546:	f04f 32ff 	mov.w	r2, #4294967295
 800a54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a54e:	f10a 0a01 	add.w	sl, sl, #1
 800a552:	9304      	str	r3, [sp, #16]
 800a554:	9307      	str	r3, [sp, #28]
 800a556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a55a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a55c:	4654      	mov	r4, sl
 800a55e:	2205      	movs	r2, #5
 800a560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a564:	484e      	ldr	r0, [pc, #312]	@ (800a6a0 <_svfiprintf_r+0x1e4>)
 800a566:	f7f5 fe3b 	bl	80001e0 <memchr>
 800a56a:	9a04      	ldr	r2, [sp, #16]
 800a56c:	b9d8      	cbnz	r0, 800a5a6 <_svfiprintf_r+0xea>
 800a56e:	06d0      	lsls	r0, r2, #27
 800a570:	bf44      	itt	mi
 800a572:	2320      	movmi	r3, #32
 800a574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a578:	0711      	lsls	r1, r2, #28
 800a57a:	bf44      	itt	mi
 800a57c:	232b      	movmi	r3, #43	@ 0x2b
 800a57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a582:	f89a 3000 	ldrb.w	r3, [sl]
 800a586:	2b2a      	cmp	r3, #42	@ 0x2a
 800a588:	d015      	beq.n	800a5b6 <_svfiprintf_r+0xfa>
 800a58a:	9a07      	ldr	r2, [sp, #28]
 800a58c:	4654      	mov	r4, sl
 800a58e:	2000      	movs	r0, #0
 800a590:	f04f 0c0a 	mov.w	ip, #10
 800a594:	4621      	mov	r1, r4
 800a596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a59a:	3b30      	subs	r3, #48	@ 0x30
 800a59c:	2b09      	cmp	r3, #9
 800a59e:	d94b      	bls.n	800a638 <_svfiprintf_r+0x17c>
 800a5a0:	b1b0      	cbz	r0, 800a5d0 <_svfiprintf_r+0x114>
 800a5a2:	9207      	str	r2, [sp, #28]
 800a5a4:	e014      	b.n	800a5d0 <_svfiprintf_r+0x114>
 800a5a6:	eba0 0308 	sub.w	r3, r0, r8
 800a5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	46a2      	mov	sl, r4
 800a5b4:	e7d2      	b.n	800a55c <_svfiprintf_r+0xa0>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	1d19      	adds	r1, r3, #4
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	9103      	str	r1, [sp, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfbb      	ittet	lt
 800a5c2:	425b      	neglt	r3, r3
 800a5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c8:	9307      	strge	r3, [sp, #28]
 800a5ca:	9307      	strlt	r3, [sp, #28]
 800a5cc:	bfb8      	it	lt
 800a5ce:	9204      	strlt	r2, [sp, #16]
 800a5d0:	7823      	ldrb	r3, [r4, #0]
 800a5d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5d4:	d10a      	bne.n	800a5ec <_svfiprintf_r+0x130>
 800a5d6:	7863      	ldrb	r3, [r4, #1]
 800a5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5da:	d132      	bne.n	800a642 <_svfiprintf_r+0x186>
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	1d1a      	adds	r2, r3, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	9203      	str	r2, [sp, #12]
 800a5e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5e8:	3402      	adds	r4, #2
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6b0 <_svfiprintf_r+0x1f4>
 800a5f0:	7821      	ldrb	r1, [r4, #0]
 800a5f2:	2203      	movs	r2, #3
 800a5f4:	4650      	mov	r0, sl
 800a5f6:	f7f5 fdf3 	bl	80001e0 <memchr>
 800a5fa:	b138      	cbz	r0, 800a60c <_svfiprintf_r+0x150>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	eba0 000a 	sub.w	r0, r0, sl
 800a602:	2240      	movs	r2, #64	@ 0x40
 800a604:	4082      	lsls	r2, r0
 800a606:	4313      	orrs	r3, r2
 800a608:	3401      	adds	r4, #1
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a610:	4824      	ldr	r0, [pc, #144]	@ (800a6a4 <_svfiprintf_r+0x1e8>)
 800a612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a616:	2206      	movs	r2, #6
 800a618:	f7f5 fde2 	bl	80001e0 <memchr>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d036      	beq.n	800a68e <_svfiprintf_r+0x1d2>
 800a620:	4b21      	ldr	r3, [pc, #132]	@ (800a6a8 <_svfiprintf_r+0x1ec>)
 800a622:	bb1b      	cbnz	r3, 800a66c <_svfiprintf_r+0x1b0>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	3307      	adds	r3, #7
 800a628:	f023 0307 	bic.w	r3, r3, #7
 800a62c:	3308      	adds	r3, #8
 800a62e:	9303      	str	r3, [sp, #12]
 800a630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a632:	4433      	add	r3, r6
 800a634:	9309      	str	r3, [sp, #36]	@ 0x24
 800a636:	e76a      	b.n	800a50e <_svfiprintf_r+0x52>
 800a638:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63c:	460c      	mov	r4, r1
 800a63e:	2001      	movs	r0, #1
 800a640:	e7a8      	b.n	800a594 <_svfiprintf_r+0xd8>
 800a642:	2300      	movs	r3, #0
 800a644:	3401      	adds	r4, #1
 800a646:	9305      	str	r3, [sp, #20]
 800a648:	4619      	mov	r1, r3
 800a64a:	f04f 0c0a 	mov.w	ip, #10
 800a64e:	4620      	mov	r0, r4
 800a650:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a654:	3a30      	subs	r2, #48	@ 0x30
 800a656:	2a09      	cmp	r2, #9
 800a658:	d903      	bls.n	800a662 <_svfiprintf_r+0x1a6>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0c6      	beq.n	800a5ec <_svfiprintf_r+0x130>
 800a65e:	9105      	str	r1, [sp, #20]
 800a660:	e7c4      	b.n	800a5ec <_svfiprintf_r+0x130>
 800a662:	fb0c 2101 	mla	r1, ip, r1, r2
 800a666:	4604      	mov	r4, r0
 800a668:	2301      	movs	r3, #1
 800a66a:	e7f0      	b.n	800a64e <_svfiprintf_r+0x192>
 800a66c:	ab03      	add	r3, sp, #12
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	462a      	mov	r2, r5
 800a672:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ac <_svfiprintf_r+0x1f0>)
 800a674:	a904      	add	r1, sp, #16
 800a676:	4638      	mov	r0, r7
 800a678:	f7fc fcca 	bl	8007010 <_printf_float>
 800a67c:	1c42      	adds	r2, r0, #1
 800a67e:	4606      	mov	r6, r0
 800a680:	d1d6      	bne.n	800a630 <_svfiprintf_r+0x174>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	065b      	lsls	r3, r3, #25
 800a686:	f53f af2d 	bmi.w	800a4e4 <_svfiprintf_r+0x28>
 800a68a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a68c:	e72c      	b.n	800a4e8 <_svfiprintf_r+0x2c>
 800a68e:	ab03      	add	r3, sp, #12
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	462a      	mov	r2, r5
 800a694:	4b05      	ldr	r3, [pc, #20]	@ (800a6ac <_svfiprintf_r+0x1f0>)
 800a696:	a904      	add	r1, sp, #16
 800a698:	4638      	mov	r0, r7
 800a69a:	f7fc ff51 	bl	8007540 <_printf_i>
 800a69e:	e7ed      	b.n	800a67c <_svfiprintf_r+0x1c0>
 800a6a0:	0800ba71 	.word	0x0800ba71
 800a6a4:	0800ba7b 	.word	0x0800ba7b
 800a6a8:	08007011 	.word	0x08007011
 800a6ac:	0800a405 	.word	0x0800a405
 800a6b0:	0800ba77 	.word	0x0800ba77

0800a6b4 <__sflush_r>:
 800a6b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	0716      	lsls	r6, r2, #28
 800a6be:	4605      	mov	r5, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	d454      	bmi.n	800a76e <__sflush_r+0xba>
 800a6c4:	684b      	ldr	r3, [r1, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dc02      	bgt.n	800a6d0 <__sflush_r+0x1c>
 800a6ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dd48      	ble.n	800a762 <__sflush_r+0xae>
 800a6d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6d2:	2e00      	cmp	r6, #0
 800a6d4:	d045      	beq.n	800a762 <__sflush_r+0xae>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6dc:	682f      	ldr	r7, [r5, #0]
 800a6de:	6a21      	ldr	r1, [r4, #32]
 800a6e0:	602b      	str	r3, [r5, #0]
 800a6e2:	d030      	beq.n	800a746 <__sflush_r+0x92>
 800a6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	0759      	lsls	r1, r3, #29
 800a6ea:	d505      	bpl.n	800a6f8 <__sflush_r+0x44>
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6f2:	b10b      	cbz	r3, 800a6f8 <__sflush_r+0x44>
 800a6f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6fc:	6a21      	ldr	r1, [r4, #32]
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b0      	blx	r6
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	d106      	bne.n	800a716 <__sflush_r+0x62>
 800a708:	6829      	ldr	r1, [r5, #0]
 800a70a:	291d      	cmp	r1, #29
 800a70c:	d82b      	bhi.n	800a766 <__sflush_r+0xb2>
 800a70e:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b8 <__sflush_r+0x104>)
 800a710:	410a      	asrs	r2, r1
 800a712:	07d6      	lsls	r6, r2, #31
 800a714:	d427      	bmi.n	800a766 <__sflush_r+0xb2>
 800a716:	2200      	movs	r2, #0
 800a718:	6062      	str	r2, [r4, #4]
 800a71a:	04d9      	lsls	r1, r3, #19
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	6022      	str	r2, [r4, #0]
 800a720:	d504      	bpl.n	800a72c <__sflush_r+0x78>
 800a722:	1c42      	adds	r2, r0, #1
 800a724:	d101      	bne.n	800a72a <__sflush_r+0x76>
 800a726:	682b      	ldr	r3, [r5, #0]
 800a728:	b903      	cbnz	r3, 800a72c <__sflush_r+0x78>
 800a72a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a72e:	602f      	str	r7, [r5, #0]
 800a730:	b1b9      	cbz	r1, 800a762 <__sflush_r+0xae>
 800a732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a736:	4299      	cmp	r1, r3
 800a738:	d002      	beq.n	800a740 <__sflush_r+0x8c>
 800a73a:	4628      	mov	r0, r5
 800a73c:	f7fe fa2c 	bl	8008b98 <_free_r>
 800a740:	2300      	movs	r3, #0
 800a742:	6363      	str	r3, [r4, #52]	@ 0x34
 800a744:	e00d      	b.n	800a762 <__sflush_r+0xae>
 800a746:	2301      	movs	r3, #1
 800a748:	4628      	mov	r0, r5
 800a74a:	47b0      	blx	r6
 800a74c:	4602      	mov	r2, r0
 800a74e:	1c50      	adds	r0, r2, #1
 800a750:	d1c9      	bne.n	800a6e6 <__sflush_r+0x32>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0c6      	beq.n	800a6e6 <__sflush_r+0x32>
 800a758:	2b1d      	cmp	r3, #29
 800a75a:	d001      	beq.n	800a760 <__sflush_r+0xac>
 800a75c:	2b16      	cmp	r3, #22
 800a75e:	d11e      	bne.n	800a79e <__sflush_r+0xea>
 800a760:	602f      	str	r7, [r5, #0]
 800a762:	2000      	movs	r0, #0
 800a764:	e022      	b.n	800a7ac <__sflush_r+0xf8>
 800a766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76a:	b21b      	sxth	r3, r3
 800a76c:	e01b      	b.n	800a7a6 <__sflush_r+0xf2>
 800a76e:	690f      	ldr	r7, [r1, #16]
 800a770:	2f00      	cmp	r7, #0
 800a772:	d0f6      	beq.n	800a762 <__sflush_r+0xae>
 800a774:	0793      	lsls	r3, r2, #30
 800a776:	680e      	ldr	r6, [r1, #0]
 800a778:	bf08      	it	eq
 800a77a:	694b      	ldreq	r3, [r1, #20]
 800a77c:	600f      	str	r7, [r1, #0]
 800a77e:	bf18      	it	ne
 800a780:	2300      	movne	r3, #0
 800a782:	eba6 0807 	sub.w	r8, r6, r7
 800a786:	608b      	str	r3, [r1, #8]
 800a788:	f1b8 0f00 	cmp.w	r8, #0
 800a78c:	dde9      	ble.n	800a762 <__sflush_r+0xae>
 800a78e:	6a21      	ldr	r1, [r4, #32]
 800a790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a792:	4643      	mov	r3, r8
 800a794:	463a      	mov	r2, r7
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	2800      	cmp	r0, #0
 800a79c:	dc08      	bgt.n	800a7b0 <__sflush_r+0xfc>
 800a79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b0:	4407      	add	r7, r0
 800a7b2:	eba8 0800 	sub.w	r8, r8, r0
 800a7b6:	e7e7      	b.n	800a788 <__sflush_r+0xd4>
 800a7b8:	dfbffffe 	.word	0xdfbffffe

0800a7bc <_fflush_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	690b      	ldr	r3, [r1, #16]
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b913      	cbnz	r3, 800a7cc <_fflush_r+0x10>
 800a7c6:	2500      	movs	r5, #0
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	b118      	cbz	r0, 800a7d6 <_fflush_r+0x1a>
 800a7ce:	6a03      	ldr	r3, [r0, #32]
 800a7d0:	b90b      	cbnz	r3, 800a7d6 <_fflush_r+0x1a>
 800a7d2:	f7fd fa75 	bl	8007cc0 <__sinit>
 800a7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f3      	beq.n	800a7c6 <_fflush_r+0xa>
 800a7de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7e0:	07d0      	lsls	r0, r2, #31
 800a7e2:	d404      	bmi.n	800a7ee <_fflush_r+0x32>
 800a7e4:	0599      	lsls	r1, r3, #22
 800a7e6:	d402      	bmi.n	800a7ee <_fflush_r+0x32>
 800a7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7ea:	f7fd fb80 	bl	8007eee <__retarget_lock_acquire_recursive>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f7ff ff5f 	bl	800a6b4 <__sflush_r>
 800a7f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7f8:	07da      	lsls	r2, r3, #31
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	d4e4      	bmi.n	800a7c8 <_fflush_r+0xc>
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	059b      	lsls	r3, r3, #22
 800a802:	d4e1      	bmi.n	800a7c8 <_fflush_r+0xc>
 800a804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a806:	f7fd fb73 	bl	8007ef0 <__retarget_lock_release_recursive>
 800a80a:	e7dd      	b.n	800a7c8 <_fflush_r+0xc>

0800a80c <memmove>:
 800a80c:	4288      	cmp	r0, r1
 800a80e:	b510      	push	{r4, lr}
 800a810:	eb01 0402 	add.w	r4, r1, r2
 800a814:	d902      	bls.n	800a81c <memmove+0x10>
 800a816:	4284      	cmp	r4, r0
 800a818:	4623      	mov	r3, r4
 800a81a:	d807      	bhi.n	800a82c <memmove+0x20>
 800a81c:	1e43      	subs	r3, r0, #1
 800a81e:	42a1      	cmp	r1, r4
 800a820:	d008      	beq.n	800a834 <memmove+0x28>
 800a822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a82a:	e7f8      	b.n	800a81e <memmove+0x12>
 800a82c:	4402      	add	r2, r0
 800a82e:	4601      	mov	r1, r0
 800a830:	428a      	cmp	r2, r1
 800a832:	d100      	bne.n	800a836 <memmove+0x2a>
 800a834:	bd10      	pop	{r4, pc}
 800a836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a83e:	e7f7      	b.n	800a830 <memmove+0x24>

0800a840 <strncmp>:
 800a840:	b510      	push	{r4, lr}
 800a842:	b16a      	cbz	r2, 800a860 <strncmp+0x20>
 800a844:	3901      	subs	r1, #1
 800a846:	1884      	adds	r4, r0, r2
 800a848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a850:	429a      	cmp	r2, r3
 800a852:	d103      	bne.n	800a85c <strncmp+0x1c>
 800a854:	42a0      	cmp	r0, r4
 800a856:	d001      	beq.n	800a85c <strncmp+0x1c>
 800a858:	2a00      	cmp	r2, #0
 800a85a:	d1f5      	bne.n	800a848 <strncmp+0x8>
 800a85c:	1ad0      	subs	r0, r2, r3
 800a85e:	bd10      	pop	{r4, pc}
 800a860:	4610      	mov	r0, r2
 800a862:	e7fc      	b.n	800a85e <strncmp+0x1e>

0800a864 <_sbrk_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d06      	ldr	r5, [pc, #24]	@ (800a880 <_sbrk_r+0x1c>)
 800a868:	2300      	movs	r3, #0
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	f7f7 fb8a 	bl	8001f88 <_sbrk>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_sbrk_r+0x1a>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_sbrk_r+0x1a>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20000814 	.word	0x20000814

0800a884 <memcpy>:
 800a884:	440a      	add	r2, r1
 800a886:	4291      	cmp	r1, r2
 800a888:	f100 33ff 	add.w	r3, r0, #4294967295
 800a88c:	d100      	bne.n	800a890 <memcpy+0xc>
 800a88e:	4770      	bx	lr
 800a890:	b510      	push	{r4, lr}
 800a892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a89a:	4291      	cmp	r1, r2
 800a89c:	d1f9      	bne.n	800a892 <memcpy+0xe>
 800a89e:	bd10      	pop	{r4, pc}

0800a8a0 <nan>:
 800a8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a8a8 <nan+0x8>
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	7ff80000 	.word	0x7ff80000

0800a8b0 <__assert_func>:
 800a8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8b2:	4614      	mov	r4, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	4b09      	ldr	r3, [pc, #36]	@ (800a8dc <__assert_func+0x2c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	68d8      	ldr	r0, [r3, #12]
 800a8be:	b954      	cbnz	r4, 800a8d6 <__assert_func+0x26>
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <__assert_func+0x30>)
 800a8c2:	461c      	mov	r4, r3
 800a8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8c8:	9100      	str	r1, [sp, #0]
 800a8ca:	462b      	mov	r3, r5
 800a8cc:	4905      	ldr	r1, [pc, #20]	@ (800a8e4 <__assert_func+0x34>)
 800a8ce:	f000 fba7 	bl	800b020 <fiprintf>
 800a8d2:	f000 fbb7 	bl	800b044 <abort>
 800a8d6:	4b04      	ldr	r3, [pc, #16]	@ (800a8e8 <__assert_func+0x38>)
 800a8d8:	e7f4      	b.n	800a8c4 <__assert_func+0x14>
 800a8da:	bf00      	nop
 800a8dc:	2000005c 	.word	0x2000005c
 800a8e0:	0800bac5 	.word	0x0800bac5
 800a8e4:	0800ba97 	.word	0x0800ba97
 800a8e8:	0800ba8a 	.word	0x0800ba8a

0800a8ec <_calloc_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	fba1 5402 	umull	r5, r4, r1, r2
 800a8f2:	b93c      	cbnz	r4, 800a904 <_calloc_r+0x18>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7fe f9c3 	bl	8008c80 <_malloc_r>
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b928      	cbnz	r0, 800a90a <_calloc_r+0x1e>
 800a8fe:	2600      	movs	r6, #0
 800a900:	4630      	mov	r0, r6
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	220c      	movs	r2, #12
 800a906:	6002      	str	r2, [r0, #0]
 800a908:	e7f9      	b.n	800a8fe <_calloc_r+0x12>
 800a90a:	462a      	mov	r2, r5
 800a90c:	4621      	mov	r1, r4
 800a90e:	f7fd fa70 	bl	8007df2 <memset>
 800a912:	e7f5      	b.n	800a900 <_calloc_r+0x14>

0800a914 <rshift>:
 800a914:	6903      	ldr	r3, [r0, #16]
 800a916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a91a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a91e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a922:	f100 0414 	add.w	r4, r0, #20
 800a926:	dd45      	ble.n	800a9b4 <rshift+0xa0>
 800a928:	f011 011f 	ands.w	r1, r1, #31
 800a92c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a934:	d10c      	bne.n	800a950 <rshift+0x3c>
 800a936:	f100 0710 	add.w	r7, r0, #16
 800a93a:	4629      	mov	r1, r5
 800a93c:	42b1      	cmp	r1, r6
 800a93e:	d334      	bcc.n	800a9aa <rshift+0x96>
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	1eea      	subs	r2, r5, #3
 800a946:	4296      	cmp	r6, r2
 800a948:	bf38      	it	cc
 800a94a:	2300      	movcc	r3, #0
 800a94c:	4423      	add	r3, r4
 800a94e:	e015      	b.n	800a97c <rshift+0x68>
 800a950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a954:	f1c1 0820 	rsb	r8, r1, #32
 800a958:	40cf      	lsrs	r7, r1
 800a95a:	f105 0e04 	add.w	lr, r5, #4
 800a95e:	46a1      	mov	r9, r4
 800a960:	4576      	cmp	r6, lr
 800a962:	46f4      	mov	ip, lr
 800a964:	d815      	bhi.n	800a992 <rshift+0x7e>
 800a966:	1a9a      	subs	r2, r3, r2
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	3a04      	subs	r2, #4
 800a96c:	3501      	adds	r5, #1
 800a96e:	42ae      	cmp	r6, r5
 800a970:	bf38      	it	cc
 800a972:	2200      	movcc	r2, #0
 800a974:	18a3      	adds	r3, r4, r2
 800a976:	50a7      	str	r7, [r4, r2]
 800a978:	b107      	cbz	r7, 800a97c <rshift+0x68>
 800a97a:	3304      	adds	r3, #4
 800a97c:	1b1a      	subs	r2, r3, r4
 800a97e:	42a3      	cmp	r3, r4
 800a980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a984:	bf08      	it	eq
 800a986:	2300      	moveq	r3, #0
 800a988:	6102      	str	r2, [r0, #16]
 800a98a:	bf08      	it	eq
 800a98c:	6143      	streq	r3, [r0, #20]
 800a98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a992:	f8dc c000 	ldr.w	ip, [ip]
 800a996:	fa0c fc08 	lsl.w	ip, ip, r8
 800a99a:	ea4c 0707 	orr.w	r7, ip, r7
 800a99e:	f849 7b04 	str.w	r7, [r9], #4
 800a9a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9a6:	40cf      	lsrs	r7, r1
 800a9a8:	e7da      	b.n	800a960 <rshift+0x4c>
 800a9aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9b2:	e7c3      	b.n	800a93c <rshift+0x28>
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	e7e1      	b.n	800a97c <rshift+0x68>

0800a9b8 <__hexdig_fun>:
 800a9b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d802      	bhi.n	800a9c6 <__hexdig_fun+0xe>
 800a9c0:	3820      	subs	r0, #32
 800a9c2:	b2c0      	uxtb	r0, r0
 800a9c4:	4770      	bx	lr
 800a9c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9ca:	2b05      	cmp	r3, #5
 800a9cc:	d801      	bhi.n	800a9d2 <__hexdig_fun+0x1a>
 800a9ce:	3847      	subs	r0, #71	@ 0x47
 800a9d0:	e7f7      	b.n	800a9c2 <__hexdig_fun+0xa>
 800a9d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d801      	bhi.n	800a9de <__hexdig_fun+0x26>
 800a9da:	3827      	subs	r0, #39	@ 0x27
 800a9dc:	e7f1      	b.n	800a9c2 <__hexdig_fun+0xa>
 800a9de:	2000      	movs	r0, #0
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <__gethex>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	468a      	mov	sl, r1
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	680b      	ldr	r3, [r1, #0]
 800a9f0:	9001      	str	r0, [sp, #4]
 800a9f2:	4690      	mov	r8, r2
 800a9f4:	1c9c      	adds	r4, r3, #2
 800a9f6:	46a1      	mov	r9, r4
 800a9f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9fc:	2830      	cmp	r0, #48	@ 0x30
 800a9fe:	d0fa      	beq.n	800a9f6 <__gethex+0x12>
 800aa00:	eba9 0303 	sub.w	r3, r9, r3
 800aa04:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa08:	f7ff ffd6 	bl	800a9b8 <__hexdig_fun>
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d168      	bne.n	800aae4 <__gethex+0x100>
 800aa12:	49a0      	ldr	r1, [pc, #640]	@ (800ac94 <__gethex+0x2b0>)
 800aa14:	2201      	movs	r2, #1
 800aa16:	4648      	mov	r0, r9
 800aa18:	f7ff ff12 	bl	800a840 <strncmp>
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d167      	bne.n	800aaf2 <__gethex+0x10e>
 800aa22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa26:	4626      	mov	r6, r4
 800aa28:	f7ff ffc6 	bl	800a9b8 <__hexdig_fun>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d062      	beq.n	800aaf6 <__gethex+0x112>
 800aa30:	4623      	mov	r3, r4
 800aa32:	7818      	ldrb	r0, [r3, #0]
 800aa34:	2830      	cmp	r0, #48	@ 0x30
 800aa36:	4699      	mov	r9, r3
 800aa38:	f103 0301 	add.w	r3, r3, #1
 800aa3c:	d0f9      	beq.n	800aa32 <__gethex+0x4e>
 800aa3e:	f7ff ffbb 	bl	800a9b8 <__hexdig_fun>
 800aa42:	fab0 f580 	clz	r5, r0
 800aa46:	096d      	lsrs	r5, r5, #5
 800aa48:	f04f 0b01 	mov.w	fp, #1
 800aa4c:	464a      	mov	r2, r9
 800aa4e:	4616      	mov	r6, r2
 800aa50:	3201      	adds	r2, #1
 800aa52:	7830      	ldrb	r0, [r6, #0]
 800aa54:	f7ff ffb0 	bl	800a9b8 <__hexdig_fun>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d1f8      	bne.n	800aa4e <__gethex+0x6a>
 800aa5c:	498d      	ldr	r1, [pc, #564]	@ (800ac94 <__gethex+0x2b0>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff feed 	bl	800a840 <strncmp>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d13f      	bne.n	800aaea <__gethex+0x106>
 800aa6a:	b944      	cbnz	r4, 800aa7e <__gethex+0x9a>
 800aa6c:	1c74      	adds	r4, r6, #1
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4616      	mov	r6, r2
 800aa72:	3201      	adds	r2, #1
 800aa74:	7830      	ldrb	r0, [r6, #0]
 800aa76:	f7ff ff9f 	bl	800a9b8 <__hexdig_fun>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1f8      	bne.n	800aa70 <__gethex+0x8c>
 800aa7e:	1ba4      	subs	r4, r4, r6
 800aa80:	00a7      	lsls	r7, r4, #2
 800aa82:	7833      	ldrb	r3, [r6, #0]
 800aa84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa88:	2b50      	cmp	r3, #80	@ 0x50
 800aa8a:	d13e      	bne.n	800ab0a <__gethex+0x126>
 800aa8c:	7873      	ldrb	r3, [r6, #1]
 800aa8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa90:	d033      	beq.n	800aafa <__gethex+0x116>
 800aa92:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa94:	d034      	beq.n	800ab00 <__gethex+0x11c>
 800aa96:	1c71      	adds	r1, r6, #1
 800aa98:	2400      	movs	r4, #0
 800aa9a:	7808      	ldrb	r0, [r1, #0]
 800aa9c:	f7ff ff8c 	bl	800a9b8 <__hexdig_fun>
 800aaa0:	1e43      	subs	r3, r0, #1
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b18      	cmp	r3, #24
 800aaa6:	d830      	bhi.n	800ab0a <__gethex+0x126>
 800aaa8:	f1a0 0210 	sub.w	r2, r0, #16
 800aaac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aab0:	f7ff ff82 	bl	800a9b8 <__hexdig_fun>
 800aab4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aab8:	fa5f fc8c 	uxtb.w	ip, ip
 800aabc:	f1bc 0f18 	cmp.w	ip, #24
 800aac0:	f04f 030a 	mov.w	r3, #10
 800aac4:	d91e      	bls.n	800ab04 <__gethex+0x120>
 800aac6:	b104      	cbz	r4, 800aaca <__gethex+0xe6>
 800aac8:	4252      	negs	r2, r2
 800aaca:	4417      	add	r7, r2
 800aacc:	f8ca 1000 	str.w	r1, [sl]
 800aad0:	b1ed      	cbz	r5, 800ab0e <__gethex+0x12a>
 800aad2:	f1bb 0f00 	cmp.w	fp, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2506      	moveq	r5, #6
 800aada:	2500      	movne	r5, #0
 800aadc:	4628      	mov	r0, r5
 800aade:	b005      	add	sp, #20
 800aae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae4:	2500      	movs	r5, #0
 800aae6:	462c      	mov	r4, r5
 800aae8:	e7b0      	b.n	800aa4c <__gethex+0x68>
 800aaea:	2c00      	cmp	r4, #0
 800aaec:	d1c7      	bne.n	800aa7e <__gethex+0x9a>
 800aaee:	4627      	mov	r7, r4
 800aaf0:	e7c7      	b.n	800aa82 <__gethex+0x9e>
 800aaf2:	464e      	mov	r6, r9
 800aaf4:	462f      	mov	r7, r5
 800aaf6:	2501      	movs	r5, #1
 800aaf8:	e7c3      	b.n	800aa82 <__gethex+0x9e>
 800aafa:	2400      	movs	r4, #0
 800aafc:	1cb1      	adds	r1, r6, #2
 800aafe:	e7cc      	b.n	800aa9a <__gethex+0xb6>
 800ab00:	2401      	movs	r4, #1
 800ab02:	e7fb      	b.n	800aafc <__gethex+0x118>
 800ab04:	fb03 0002 	mla	r0, r3, r2, r0
 800ab08:	e7ce      	b.n	800aaa8 <__gethex+0xc4>
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	e7de      	b.n	800aacc <__gethex+0xe8>
 800ab0e:	eba6 0309 	sub.w	r3, r6, r9
 800ab12:	3b01      	subs	r3, #1
 800ab14:	4629      	mov	r1, r5
 800ab16:	2b07      	cmp	r3, #7
 800ab18:	dc0a      	bgt.n	800ab30 <__gethex+0x14c>
 800ab1a:	9801      	ldr	r0, [sp, #4]
 800ab1c:	f7fe f93c 	bl	8008d98 <_Balloc>
 800ab20:	4604      	mov	r4, r0
 800ab22:	b940      	cbnz	r0, 800ab36 <__gethex+0x152>
 800ab24:	4b5c      	ldr	r3, [pc, #368]	@ (800ac98 <__gethex+0x2b4>)
 800ab26:	4602      	mov	r2, r0
 800ab28:	21e4      	movs	r1, #228	@ 0xe4
 800ab2a:	485c      	ldr	r0, [pc, #368]	@ (800ac9c <__gethex+0x2b8>)
 800ab2c:	f7ff fec0 	bl	800a8b0 <__assert_func>
 800ab30:	3101      	adds	r1, #1
 800ab32:	105b      	asrs	r3, r3, #1
 800ab34:	e7ef      	b.n	800ab16 <__gethex+0x132>
 800ab36:	f100 0a14 	add.w	sl, r0, #20
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4655      	mov	r5, sl
 800ab3e:	469b      	mov	fp, r3
 800ab40:	45b1      	cmp	r9, r6
 800ab42:	d337      	bcc.n	800abb4 <__gethex+0x1d0>
 800ab44:	f845 bb04 	str.w	fp, [r5], #4
 800ab48:	eba5 050a 	sub.w	r5, r5, sl
 800ab4c:	10ad      	asrs	r5, r5, #2
 800ab4e:	6125      	str	r5, [r4, #16]
 800ab50:	4658      	mov	r0, fp
 800ab52:	f7fe fa13 	bl	8008f7c <__hi0bits>
 800ab56:	016d      	lsls	r5, r5, #5
 800ab58:	f8d8 6000 	ldr.w	r6, [r8]
 800ab5c:	1a2d      	subs	r5, r5, r0
 800ab5e:	42b5      	cmp	r5, r6
 800ab60:	dd54      	ble.n	800ac0c <__gethex+0x228>
 800ab62:	1bad      	subs	r5, r5, r6
 800ab64:	4629      	mov	r1, r5
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7fe fda7 	bl	80096ba <__any_on>
 800ab6c:	4681      	mov	r9, r0
 800ab6e:	b178      	cbz	r0, 800ab90 <__gethex+0x1ac>
 800ab70:	1e6b      	subs	r3, r5, #1
 800ab72:	1159      	asrs	r1, r3, #5
 800ab74:	f003 021f 	and.w	r2, r3, #31
 800ab78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab7c:	f04f 0901 	mov.w	r9, #1
 800ab80:	fa09 f202 	lsl.w	r2, r9, r2
 800ab84:	420a      	tst	r2, r1
 800ab86:	d003      	beq.n	800ab90 <__gethex+0x1ac>
 800ab88:	454b      	cmp	r3, r9
 800ab8a:	dc36      	bgt.n	800abfa <__gethex+0x216>
 800ab8c:	f04f 0902 	mov.w	r9, #2
 800ab90:	4629      	mov	r1, r5
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff febe 	bl	800a914 <rshift>
 800ab98:	442f      	add	r7, r5
 800ab9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab9e:	42bb      	cmp	r3, r7
 800aba0:	da42      	bge.n	800ac28 <__gethex+0x244>
 800aba2:	9801      	ldr	r0, [sp, #4]
 800aba4:	4621      	mov	r1, r4
 800aba6:	f7fe f937 	bl	8008e18 <_Bfree>
 800abaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abac:	2300      	movs	r3, #0
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	25a3      	movs	r5, #163	@ 0xa3
 800abb2:	e793      	b.n	800aadc <__gethex+0xf8>
 800abb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800abba:	d012      	beq.n	800abe2 <__gethex+0x1fe>
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d104      	bne.n	800abca <__gethex+0x1e6>
 800abc0:	f845 bb04 	str.w	fp, [r5], #4
 800abc4:	f04f 0b00 	mov.w	fp, #0
 800abc8:	465b      	mov	r3, fp
 800abca:	7830      	ldrb	r0, [r6, #0]
 800abcc:	9303      	str	r3, [sp, #12]
 800abce:	f7ff fef3 	bl	800a9b8 <__hexdig_fun>
 800abd2:	9b03      	ldr	r3, [sp, #12]
 800abd4:	f000 000f 	and.w	r0, r0, #15
 800abd8:	4098      	lsls	r0, r3
 800abda:	ea4b 0b00 	orr.w	fp, fp, r0
 800abde:	3304      	adds	r3, #4
 800abe0:	e7ae      	b.n	800ab40 <__gethex+0x15c>
 800abe2:	45b1      	cmp	r9, r6
 800abe4:	d8ea      	bhi.n	800abbc <__gethex+0x1d8>
 800abe6:	492b      	ldr	r1, [pc, #172]	@ (800ac94 <__gethex+0x2b0>)
 800abe8:	9303      	str	r3, [sp, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff fe27 	bl	800a840 <strncmp>
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1e1      	bne.n	800abbc <__gethex+0x1d8>
 800abf8:	e7a2      	b.n	800ab40 <__gethex+0x15c>
 800abfa:	1ea9      	subs	r1, r5, #2
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7fe fd5c 	bl	80096ba <__any_on>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0c2      	beq.n	800ab8c <__gethex+0x1a8>
 800ac06:	f04f 0903 	mov.w	r9, #3
 800ac0a:	e7c1      	b.n	800ab90 <__gethex+0x1ac>
 800ac0c:	da09      	bge.n	800ac22 <__gethex+0x23e>
 800ac0e:	1b75      	subs	r5, r6, r5
 800ac10:	4621      	mov	r1, r4
 800ac12:	9801      	ldr	r0, [sp, #4]
 800ac14:	462a      	mov	r2, r5
 800ac16:	f7fe fb17 	bl	8009248 <__lshift>
 800ac1a:	1b7f      	subs	r7, r7, r5
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	f100 0a14 	add.w	sl, r0, #20
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	e7b8      	b.n	800ab9a <__gethex+0x1b6>
 800ac28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac2c:	42bd      	cmp	r5, r7
 800ac2e:	dd6f      	ble.n	800ad10 <__gethex+0x32c>
 800ac30:	1bed      	subs	r5, r5, r7
 800ac32:	42ae      	cmp	r6, r5
 800ac34:	dc34      	bgt.n	800aca0 <__gethex+0x2bc>
 800ac36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d022      	beq.n	800ac84 <__gethex+0x2a0>
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d024      	beq.n	800ac8c <__gethex+0x2a8>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d115      	bne.n	800ac72 <__gethex+0x28e>
 800ac46:	42ae      	cmp	r6, r5
 800ac48:	d113      	bne.n	800ac72 <__gethex+0x28e>
 800ac4a:	2e01      	cmp	r6, #1
 800ac4c:	d10b      	bne.n	800ac66 <__gethex+0x282>
 800ac4e:	9a02      	ldr	r2, [sp, #8]
 800ac50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	2301      	movs	r3, #1
 800ac58:	6123      	str	r3, [r4, #16]
 800ac5a:	f8ca 3000 	str.w	r3, [sl]
 800ac5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac60:	2562      	movs	r5, #98	@ 0x62
 800ac62:	601c      	str	r4, [r3, #0]
 800ac64:	e73a      	b.n	800aadc <__gethex+0xf8>
 800ac66:	1e71      	subs	r1, r6, #1
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f7fe fd26 	bl	80096ba <__any_on>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d1ed      	bne.n	800ac4e <__gethex+0x26a>
 800ac72:	9801      	ldr	r0, [sp, #4]
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7fe f8cf 	bl	8008e18 <_Bfree>
 800ac7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	2550      	movs	r5, #80	@ 0x50
 800ac82:	e72b      	b.n	800aadc <__gethex+0xf8>
 800ac84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1f3      	bne.n	800ac72 <__gethex+0x28e>
 800ac8a:	e7e0      	b.n	800ac4e <__gethex+0x26a>
 800ac8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1dd      	bne.n	800ac4e <__gethex+0x26a>
 800ac92:	e7ee      	b.n	800ac72 <__gethex+0x28e>
 800ac94:	0800b918 	.word	0x0800b918
 800ac98:	0800b7b1 	.word	0x0800b7b1
 800ac9c:	0800bac6 	.word	0x0800bac6
 800aca0:	1e6f      	subs	r7, r5, #1
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	d130      	bne.n	800ad0a <__gethex+0x326>
 800aca8:	b127      	cbz	r7, 800acb4 <__gethex+0x2d0>
 800acaa:	4639      	mov	r1, r7
 800acac:	4620      	mov	r0, r4
 800acae:	f7fe fd04 	bl	80096ba <__any_on>
 800acb2:	4681      	mov	r9, r0
 800acb4:	117a      	asrs	r2, r7, #5
 800acb6:	2301      	movs	r3, #1
 800acb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acbc:	f007 071f 	and.w	r7, r7, #31
 800acc0:	40bb      	lsls	r3, r7
 800acc2:	4213      	tst	r3, r2
 800acc4:	4629      	mov	r1, r5
 800acc6:	4620      	mov	r0, r4
 800acc8:	bf18      	it	ne
 800acca:	f049 0902 	orrne.w	r9, r9, #2
 800acce:	f7ff fe21 	bl	800a914 <rshift>
 800acd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800acd6:	1b76      	subs	r6, r6, r5
 800acd8:	2502      	movs	r5, #2
 800acda:	f1b9 0f00 	cmp.w	r9, #0
 800acde:	d047      	beq.n	800ad70 <__gethex+0x38c>
 800ace0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d015      	beq.n	800ad14 <__gethex+0x330>
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d017      	beq.n	800ad1c <__gethex+0x338>
 800acec:	2b01      	cmp	r3, #1
 800acee:	d109      	bne.n	800ad04 <__gethex+0x320>
 800acf0:	f019 0f02 	tst.w	r9, #2
 800acf4:	d006      	beq.n	800ad04 <__gethex+0x320>
 800acf6:	f8da 3000 	ldr.w	r3, [sl]
 800acfa:	ea49 0903 	orr.w	r9, r9, r3
 800acfe:	f019 0f01 	tst.w	r9, #1
 800ad02:	d10e      	bne.n	800ad22 <__gethex+0x33e>
 800ad04:	f045 0510 	orr.w	r5, r5, #16
 800ad08:	e032      	b.n	800ad70 <__gethex+0x38c>
 800ad0a:	f04f 0901 	mov.w	r9, #1
 800ad0e:	e7d1      	b.n	800acb4 <__gethex+0x2d0>
 800ad10:	2501      	movs	r5, #1
 800ad12:	e7e2      	b.n	800acda <__gethex+0x2f6>
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	f1c3 0301 	rsb	r3, r3, #1
 800ad1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f0      	beq.n	800ad04 <__gethex+0x320>
 800ad22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad26:	f104 0314 	add.w	r3, r4, #20
 800ad2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad32:	f04f 0c00 	mov.w	ip, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad40:	d01b      	beq.n	800ad7a <__gethex+0x396>
 800ad42:	3201      	adds	r2, #1
 800ad44:	6002      	str	r2, [r0, #0]
 800ad46:	2d02      	cmp	r5, #2
 800ad48:	f104 0314 	add.w	r3, r4, #20
 800ad4c:	d13c      	bne.n	800adc8 <__gethex+0x3e4>
 800ad4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad52:	3a01      	subs	r2, #1
 800ad54:	42b2      	cmp	r2, r6
 800ad56:	d109      	bne.n	800ad6c <__gethex+0x388>
 800ad58:	1171      	asrs	r1, r6, #5
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad60:	f006 061f 	and.w	r6, r6, #31
 800ad64:	fa02 f606 	lsl.w	r6, r2, r6
 800ad68:	421e      	tst	r6, r3
 800ad6a:	d13a      	bne.n	800ade2 <__gethex+0x3fe>
 800ad6c:	f045 0520 	orr.w	r5, r5, #32
 800ad70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad72:	601c      	str	r4, [r3, #0]
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	601f      	str	r7, [r3, #0]
 800ad78:	e6b0      	b.n	800aadc <__gethex+0xf8>
 800ad7a:	4299      	cmp	r1, r3
 800ad7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad80:	d8d9      	bhi.n	800ad36 <__gethex+0x352>
 800ad82:	68a3      	ldr	r3, [r4, #8]
 800ad84:	459b      	cmp	fp, r3
 800ad86:	db17      	blt.n	800adb8 <__gethex+0x3d4>
 800ad88:	6861      	ldr	r1, [r4, #4]
 800ad8a:	9801      	ldr	r0, [sp, #4]
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	f7fe f803 	bl	8008d98 <_Balloc>
 800ad92:	4681      	mov	r9, r0
 800ad94:	b918      	cbnz	r0, 800ad9e <__gethex+0x3ba>
 800ad96:	4b1a      	ldr	r3, [pc, #104]	@ (800ae00 <__gethex+0x41c>)
 800ad98:	4602      	mov	r2, r0
 800ad9a:	2184      	movs	r1, #132	@ 0x84
 800ad9c:	e6c5      	b.n	800ab2a <__gethex+0x146>
 800ad9e:	6922      	ldr	r2, [r4, #16]
 800ada0:	3202      	adds	r2, #2
 800ada2:	f104 010c 	add.w	r1, r4, #12
 800ada6:	0092      	lsls	r2, r2, #2
 800ada8:	300c      	adds	r0, #12
 800adaa:	f7ff fd6b 	bl	800a884 <memcpy>
 800adae:	4621      	mov	r1, r4
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	f7fe f831 	bl	8008e18 <_Bfree>
 800adb6:	464c      	mov	r4, r9
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adc0:	6122      	str	r2, [r4, #16]
 800adc2:	2201      	movs	r2, #1
 800adc4:	615a      	str	r2, [r3, #20]
 800adc6:	e7be      	b.n	800ad46 <__gethex+0x362>
 800adc8:	6922      	ldr	r2, [r4, #16]
 800adca:	455a      	cmp	r2, fp
 800adcc:	dd0b      	ble.n	800ade6 <__gethex+0x402>
 800adce:	2101      	movs	r1, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f7ff fd9f 	bl	800a914 <rshift>
 800add6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adda:	3701      	adds	r7, #1
 800addc:	42bb      	cmp	r3, r7
 800adde:	f6ff aee0 	blt.w	800aba2 <__gethex+0x1be>
 800ade2:	2501      	movs	r5, #1
 800ade4:	e7c2      	b.n	800ad6c <__gethex+0x388>
 800ade6:	f016 061f 	ands.w	r6, r6, #31
 800adea:	d0fa      	beq.n	800ade2 <__gethex+0x3fe>
 800adec:	4453      	add	r3, sl
 800adee:	f1c6 0620 	rsb	r6, r6, #32
 800adf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800adf6:	f7fe f8c1 	bl	8008f7c <__hi0bits>
 800adfa:	42b0      	cmp	r0, r6
 800adfc:	dbe7      	blt.n	800adce <__gethex+0x3ea>
 800adfe:	e7f0      	b.n	800ade2 <__gethex+0x3fe>
 800ae00:	0800b7b1 	.word	0x0800b7b1

0800ae04 <L_shift>:
 800ae04:	f1c2 0208 	rsb	r2, r2, #8
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	b570      	push	{r4, r5, r6, lr}
 800ae0c:	f1c2 0620 	rsb	r6, r2, #32
 800ae10:	6843      	ldr	r3, [r0, #4]
 800ae12:	6804      	ldr	r4, [r0, #0]
 800ae14:	fa03 f506 	lsl.w	r5, r3, r6
 800ae18:	432c      	orrs	r4, r5
 800ae1a:	40d3      	lsrs	r3, r2
 800ae1c:	6004      	str	r4, [r0, #0]
 800ae1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae22:	4288      	cmp	r0, r1
 800ae24:	d3f4      	bcc.n	800ae10 <L_shift+0xc>
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__match>:
 800ae28:	b530      	push	{r4, r5, lr}
 800ae2a:	6803      	ldr	r3, [r0, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae32:	b914      	cbnz	r4, 800ae3a <__match+0x12>
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	2001      	movs	r0, #1
 800ae38:	bd30      	pop	{r4, r5, pc}
 800ae3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae42:	2d19      	cmp	r5, #25
 800ae44:	bf98      	it	ls
 800ae46:	3220      	addls	r2, #32
 800ae48:	42a2      	cmp	r2, r4
 800ae4a:	d0f0      	beq.n	800ae2e <__match+0x6>
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	e7f3      	b.n	800ae38 <__match+0x10>

0800ae50 <__hexnan>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	680b      	ldr	r3, [r1, #0]
 800ae56:	6801      	ldr	r1, [r0, #0]
 800ae58:	115e      	asrs	r6, r3, #5
 800ae5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae5e:	f013 031f 	ands.w	r3, r3, #31
 800ae62:	b087      	sub	sp, #28
 800ae64:	bf18      	it	ne
 800ae66:	3604      	addne	r6, #4
 800ae68:	2500      	movs	r5, #0
 800ae6a:	1f37      	subs	r7, r6, #4
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	4690      	mov	r8, r2
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae76:	46b9      	mov	r9, r7
 800ae78:	463c      	mov	r4, r7
 800ae7a:	9502      	str	r5, [sp, #8]
 800ae7c:	46ab      	mov	fp, r5
 800ae7e:	784a      	ldrb	r2, [r1, #1]
 800ae80:	1c4b      	adds	r3, r1, #1
 800ae82:	9303      	str	r3, [sp, #12]
 800ae84:	b342      	cbz	r2, 800aed8 <__hexnan+0x88>
 800ae86:	4610      	mov	r0, r2
 800ae88:	9105      	str	r1, [sp, #20]
 800ae8a:	9204      	str	r2, [sp, #16]
 800ae8c:	f7ff fd94 	bl	800a9b8 <__hexdig_fun>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d151      	bne.n	800af38 <__hexnan+0xe8>
 800ae94:	9a04      	ldr	r2, [sp, #16]
 800ae96:	9905      	ldr	r1, [sp, #20]
 800ae98:	2a20      	cmp	r2, #32
 800ae9a:	d818      	bhi.n	800aece <__hexnan+0x7e>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	459b      	cmp	fp, r3
 800aea0:	dd13      	ble.n	800aeca <__hexnan+0x7a>
 800aea2:	454c      	cmp	r4, r9
 800aea4:	d206      	bcs.n	800aeb4 <__hexnan+0x64>
 800aea6:	2d07      	cmp	r5, #7
 800aea8:	dc04      	bgt.n	800aeb4 <__hexnan+0x64>
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4649      	mov	r1, r9
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7ff ffa8 	bl	800ae04 <L_shift>
 800aeb4:	4544      	cmp	r4, r8
 800aeb6:	d952      	bls.n	800af5e <__hexnan+0x10e>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f1a4 0904 	sub.w	r9, r4, #4
 800aebe:	f844 3c04 	str.w	r3, [r4, #-4]
 800aec2:	f8cd b008 	str.w	fp, [sp, #8]
 800aec6:	464c      	mov	r4, r9
 800aec8:	461d      	mov	r5, r3
 800aeca:	9903      	ldr	r1, [sp, #12]
 800aecc:	e7d7      	b.n	800ae7e <__hexnan+0x2e>
 800aece:	2a29      	cmp	r2, #41	@ 0x29
 800aed0:	d157      	bne.n	800af82 <__hexnan+0x132>
 800aed2:	3102      	adds	r1, #2
 800aed4:	f8ca 1000 	str.w	r1, [sl]
 800aed8:	f1bb 0f00 	cmp.w	fp, #0
 800aedc:	d051      	beq.n	800af82 <__hexnan+0x132>
 800aede:	454c      	cmp	r4, r9
 800aee0:	d206      	bcs.n	800aef0 <__hexnan+0xa0>
 800aee2:	2d07      	cmp	r5, #7
 800aee4:	dc04      	bgt.n	800aef0 <__hexnan+0xa0>
 800aee6:	462a      	mov	r2, r5
 800aee8:	4649      	mov	r1, r9
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff ff8a 	bl	800ae04 <L_shift>
 800aef0:	4544      	cmp	r4, r8
 800aef2:	d936      	bls.n	800af62 <__hexnan+0x112>
 800aef4:	f1a8 0204 	sub.w	r2, r8, #4
 800aef8:	4623      	mov	r3, r4
 800aefa:	f853 1b04 	ldr.w	r1, [r3], #4
 800aefe:	f842 1f04 	str.w	r1, [r2, #4]!
 800af02:	429f      	cmp	r7, r3
 800af04:	d2f9      	bcs.n	800aefa <__hexnan+0xaa>
 800af06:	1b3b      	subs	r3, r7, r4
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	3304      	adds	r3, #4
 800af0e:	3401      	adds	r4, #1
 800af10:	3e03      	subs	r6, #3
 800af12:	42b4      	cmp	r4, r6
 800af14:	bf88      	it	hi
 800af16:	2304      	movhi	r3, #4
 800af18:	4443      	add	r3, r8
 800af1a:	2200      	movs	r2, #0
 800af1c:	f843 2b04 	str.w	r2, [r3], #4
 800af20:	429f      	cmp	r7, r3
 800af22:	d2fb      	bcs.n	800af1c <__hexnan+0xcc>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	b91b      	cbnz	r3, 800af30 <__hexnan+0xe0>
 800af28:	4547      	cmp	r7, r8
 800af2a:	d128      	bne.n	800af7e <__hexnan+0x12e>
 800af2c:	2301      	movs	r3, #1
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	2005      	movs	r0, #5
 800af32:	b007      	add	sp, #28
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	3501      	adds	r5, #1
 800af3a:	2d08      	cmp	r5, #8
 800af3c:	f10b 0b01 	add.w	fp, fp, #1
 800af40:	dd06      	ble.n	800af50 <__hexnan+0x100>
 800af42:	4544      	cmp	r4, r8
 800af44:	d9c1      	bls.n	800aeca <__hexnan+0x7a>
 800af46:	2300      	movs	r3, #0
 800af48:	f844 3c04 	str.w	r3, [r4, #-4]
 800af4c:	2501      	movs	r5, #1
 800af4e:	3c04      	subs	r4, #4
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	f000 000f 	and.w	r0, r0, #15
 800af56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af5a:	6020      	str	r0, [r4, #0]
 800af5c:	e7b5      	b.n	800aeca <__hexnan+0x7a>
 800af5e:	2508      	movs	r5, #8
 800af60:	e7b3      	b.n	800aeca <__hexnan+0x7a>
 800af62:	9b01      	ldr	r3, [sp, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0dd      	beq.n	800af24 <__hexnan+0xd4>
 800af68:	f1c3 0320 	rsb	r3, r3, #32
 800af6c:	f04f 32ff 	mov.w	r2, #4294967295
 800af70:	40da      	lsrs	r2, r3
 800af72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af76:	4013      	ands	r3, r2
 800af78:	f846 3c04 	str.w	r3, [r6, #-4]
 800af7c:	e7d2      	b.n	800af24 <__hexnan+0xd4>
 800af7e:	3f04      	subs	r7, #4
 800af80:	e7d0      	b.n	800af24 <__hexnan+0xd4>
 800af82:	2004      	movs	r0, #4
 800af84:	e7d5      	b.n	800af32 <__hexnan+0xe2>

0800af86 <__ascii_mbtowc>:
 800af86:	b082      	sub	sp, #8
 800af88:	b901      	cbnz	r1, 800af8c <__ascii_mbtowc+0x6>
 800af8a:	a901      	add	r1, sp, #4
 800af8c:	b142      	cbz	r2, 800afa0 <__ascii_mbtowc+0x1a>
 800af8e:	b14b      	cbz	r3, 800afa4 <__ascii_mbtowc+0x1e>
 800af90:	7813      	ldrb	r3, [r2, #0]
 800af92:	600b      	str	r3, [r1, #0]
 800af94:	7812      	ldrb	r2, [r2, #0]
 800af96:	1e10      	subs	r0, r2, #0
 800af98:	bf18      	it	ne
 800af9a:	2001      	movne	r0, #1
 800af9c:	b002      	add	sp, #8
 800af9e:	4770      	bx	lr
 800afa0:	4610      	mov	r0, r2
 800afa2:	e7fb      	b.n	800af9c <__ascii_mbtowc+0x16>
 800afa4:	f06f 0001 	mvn.w	r0, #1
 800afa8:	e7f8      	b.n	800af9c <__ascii_mbtowc+0x16>

0800afaa <_realloc_r>:
 800afaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	4680      	mov	r8, r0
 800afb0:	4615      	mov	r5, r2
 800afb2:	460c      	mov	r4, r1
 800afb4:	b921      	cbnz	r1, 800afc0 <_realloc_r+0x16>
 800afb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afba:	4611      	mov	r1, r2
 800afbc:	f7fd be60 	b.w	8008c80 <_malloc_r>
 800afc0:	b92a      	cbnz	r2, 800afce <_realloc_r+0x24>
 800afc2:	f7fd fde9 	bl	8008b98 <_free_r>
 800afc6:	2400      	movs	r4, #0
 800afc8:	4620      	mov	r0, r4
 800afca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afce:	f000 f840 	bl	800b052 <_malloc_usable_size_r>
 800afd2:	4285      	cmp	r5, r0
 800afd4:	4606      	mov	r6, r0
 800afd6:	d802      	bhi.n	800afde <_realloc_r+0x34>
 800afd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800afdc:	d8f4      	bhi.n	800afc8 <_realloc_r+0x1e>
 800afde:	4629      	mov	r1, r5
 800afe0:	4640      	mov	r0, r8
 800afe2:	f7fd fe4d 	bl	8008c80 <_malloc_r>
 800afe6:	4607      	mov	r7, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	d0ec      	beq.n	800afc6 <_realloc_r+0x1c>
 800afec:	42b5      	cmp	r5, r6
 800afee:	462a      	mov	r2, r5
 800aff0:	4621      	mov	r1, r4
 800aff2:	bf28      	it	cs
 800aff4:	4632      	movcs	r2, r6
 800aff6:	f7ff fc45 	bl	800a884 <memcpy>
 800affa:	4621      	mov	r1, r4
 800affc:	4640      	mov	r0, r8
 800affe:	f7fd fdcb 	bl	8008b98 <_free_r>
 800b002:	463c      	mov	r4, r7
 800b004:	e7e0      	b.n	800afc8 <_realloc_r+0x1e>

0800b006 <__ascii_wctomb>:
 800b006:	4603      	mov	r3, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	b141      	cbz	r1, 800b01e <__ascii_wctomb+0x18>
 800b00c:	2aff      	cmp	r2, #255	@ 0xff
 800b00e:	d904      	bls.n	800b01a <__ascii_wctomb+0x14>
 800b010:	228a      	movs	r2, #138	@ 0x8a
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	f04f 30ff 	mov.w	r0, #4294967295
 800b018:	4770      	bx	lr
 800b01a:	700a      	strb	r2, [r1, #0]
 800b01c:	2001      	movs	r0, #1
 800b01e:	4770      	bx	lr

0800b020 <fiprintf>:
 800b020:	b40e      	push	{r1, r2, r3}
 800b022:	b503      	push	{r0, r1, lr}
 800b024:	4601      	mov	r1, r0
 800b026:	ab03      	add	r3, sp, #12
 800b028:	4805      	ldr	r0, [pc, #20]	@ (800b040 <fiprintf+0x20>)
 800b02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b02e:	6800      	ldr	r0, [r0, #0]
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	f000 f83f 	bl	800b0b4 <_vfiprintf_r>
 800b036:	b002      	add	sp, #8
 800b038:	f85d eb04 	ldr.w	lr, [sp], #4
 800b03c:	b003      	add	sp, #12
 800b03e:	4770      	bx	lr
 800b040:	2000005c 	.word	0x2000005c

0800b044 <abort>:
 800b044:	b508      	push	{r3, lr}
 800b046:	2006      	movs	r0, #6
 800b048:	f000 fa08 	bl	800b45c <raise>
 800b04c:	2001      	movs	r0, #1
 800b04e:	f7f6 ff23 	bl	8001e98 <_exit>

0800b052 <_malloc_usable_size_r>:
 800b052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b056:	1f18      	subs	r0, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfbc      	itt	lt
 800b05c:	580b      	ldrlt	r3, [r1, r0]
 800b05e:	18c0      	addlt	r0, r0, r3
 800b060:	4770      	bx	lr

0800b062 <__sfputc_r>:
 800b062:	6893      	ldr	r3, [r2, #8]
 800b064:	3b01      	subs	r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	b410      	push	{r4}
 800b06a:	6093      	str	r3, [r2, #8]
 800b06c:	da08      	bge.n	800b080 <__sfputc_r+0x1e>
 800b06e:	6994      	ldr	r4, [r2, #24]
 800b070:	42a3      	cmp	r3, r4
 800b072:	db01      	blt.n	800b078 <__sfputc_r+0x16>
 800b074:	290a      	cmp	r1, #10
 800b076:	d103      	bne.n	800b080 <__sfputc_r+0x1e>
 800b078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07c:	f000 b932 	b.w	800b2e4 <__swbuf_r>
 800b080:	6813      	ldr	r3, [r2, #0]
 800b082:	1c58      	adds	r0, r3, #1
 800b084:	6010      	str	r0, [r2, #0]
 800b086:	7019      	strb	r1, [r3, #0]
 800b088:	4608      	mov	r0, r1
 800b08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <__sfputs_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	4614      	mov	r4, r2
 800b098:	18d5      	adds	r5, r2, r3
 800b09a:	42ac      	cmp	r4, r5
 800b09c:	d101      	bne.n	800b0a2 <__sfputs_r+0x12>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	e007      	b.n	800b0b2 <__sfputs_r+0x22>
 800b0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a6:	463a      	mov	r2, r7
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffda 	bl	800b062 <__sfputc_r>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d1f3      	bne.n	800b09a <__sfputs_r+0xa>
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0b4 <_vfiprintf_r>:
 800b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	b09d      	sub	sp, #116	@ 0x74
 800b0bc:	4614      	mov	r4, r2
 800b0be:	4698      	mov	r8, r3
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	b118      	cbz	r0, 800b0cc <_vfiprintf_r+0x18>
 800b0c4:	6a03      	ldr	r3, [r0, #32]
 800b0c6:	b90b      	cbnz	r3, 800b0cc <_vfiprintf_r+0x18>
 800b0c8:	f7fc fdfa 	bl	8007cc0 <__sinit>
 800b0cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ce:	07d9      	lsls	r1, r3, #31
 800b0d0:	d405      	bmi.n	800b0de <_vfiprintf_r+0x2a>
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	059a      	lsls	r2, r3, #22
 800b0d6:	d402      	bmi.n	800b0de <_vfiprintf_r+0x2a>
 800b0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0da:	f7fc ff08 	bl	8007eee <__retarget_lock_acquire_recursive>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	071b      	lsls	r3, r3, #28
 800b0e2:	d501      	bpl.n	800b0e8 <_vfiprintf_r+0x34>
 800b0e4:	692b      	ldr	r3, [r5, #16]
 800b0e6:	b99b      	cbnz	r3, 800b110 <_vfiprintf_r+0x5c>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f000 f938 	bl	800b360 <__swsetup_r>
 800b0f0:	b170      	cbz	r0, 800b110 <_vfiprintf_r+0x5c>
 800b0f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0f4:	07dc      	lsls	r4, r3, #31
 800b0f6:	d504      	bpl.n	800b102 <_vfiprintf_r+0x4e>
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	b01d      	add	sp, #116	@ 0x74
 800b0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	0598      	lsls	r0, r3, #22
 800b106:	d4f7      	bmi.n	800b0f8 <_vfiprintf_r+0x44>
 800b108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b10a:	f7fc fef1 	bl	8007ef0 <__retarget_lock_release_recursive>
 800b10e:	e7f3      	b.n	800b0f8 <_vfiprintf_r+0x44>
 800b110:	2300      	movs	r3, #0
 800b112:	9309      	str	r3, [sp, #36]	@ 0x24
 800b114:	2320      	movs	r3, #32
 800b116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b11e:	2330      	movs	r3, #48	@ 0x30
 800b120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2d0 <_vfiprintf_r+0x21c>
 800b124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b128:	f04f 0901 	mov.w	r9, #1
 800b12c:	4623      	mov	r3, r4
 800b12e:	469a      	mov	sl, r3
 800b130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b134:	b10a      	cbz	r2, 800b13a <_vfiprintf_r+0x86>
 800b136:	2a25      	cmp	r2, #37	@ 0x25
 800b138:	d1f9      	bne.n	800b12e <_vfiprintf_r+0x7a>
 800b13a:	ebba 0b04 	subs.w	fp, sl, r4
 800b13e:	d00b      	beq.n	800b158 <_vfiprintf_r+0xa4>
 800b140:	465b      	mov	r3, fp
 800b142:	4622      	mov	r2, r4
 800b144:	4629      	mov	r1, r5
 800b146:	4630      	mov	r0, r6
 800b148:	f7ff ffa2 	bl	800b090 <__sfputs_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	f000 80a7 	beq.w	800b2a0 <_vfiprintf_r+0x1ec>
 800b152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b154:	445a      	add	r2, fp
 800b156:	9209      	str	r2, [sp, #36]	@ 0x24
 800b158:	f89a 3000 	ldrb.w	r3, [sl]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 809f 	beq.w	800b2a0 <_vfiprintf_r+0x1ec>
 800b162:	2300      	movs	r3, #0
 800b164:	f04f 32ff 	mov.w	r2, #4294967295
 800b168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b16c:	f10a 0a01 	add.w	sl, sl, #1
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	9307      	str	r3, [sp, #28]
 800b174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b178:	931a      	str	r3, [sp, #104]	@ 0x68
 800b17a:	4654      	mov	r4, sl
 800b17c:	2205      	movs	r2, #5
 800b17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b182:	4853      	ldr	r0, [pc, #332]	@ (800b2d0 <_vfiprintf_r+0x21c>)
 800b184:	f7f5 f82c 	bl	80001e0 <memchr>
 800b188:	9a04      	ldr	r2, [sp, #16]
 800b18a:	b9d8      	cbnz	r0, 800b1c4 <_vfiprintf_r+0x110>
 800b18c:	06d1      	lsls	r1, r2, #27
 800b18e:	bf44      	itt	mi
 800b190:	2320      	movmi	r3, #32
 800b192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b196:	0713      	lsls	r3, r2, #28
 800b198:	bf44      	itt	mi
 800b19a:	232b      	movmi	r3, #43	@ 0x2b
 800b19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1a6:	d015      	beq.n	800b1d4 <_vfiprintf_r+0x120>
 800b1a8:	9a07      	ldr	r2, [sp, #28]
 800b1aa:	4654      	mov	r4, sl
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	f04f 0c0a 	mov.w	ip, #10
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1b8:	3b30      	subs	r3, #48	@ 0x30
 800b1ba:	2b09      	cmp	r3, #9
 800b1bc:	d94b      	bls.n	800b256 <_vfiprintf_r+0x1a2>
 800b1be:	b1b0      	cbz	r0, 800b1ee <_vfiprintf_r+0x13a>
 800b1c0:	9207      	str	r2, [sp, #28]
 800b1c2:	e014      	b.n	800b1ee <_vfiprintf_r+0x13a>
 800b1c4:	eba0 0308 	sub.w	r3, r0, r8
 800b1c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	9304      	str	r3, [sp, #16]
 800b1d0:	46a2      	mov	sl, r4
 800b1d2:	e7d2      	b.n	800b17a <_vfiprintf_r+0xc6>
 800b1d4:	9b03      	ldr	r3, [sp, #12]
 800b1d6:	1d19      	adds	r1, r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	9103      	str	r1, [sp, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfbb      	ittet	lt
 800b1e0:	425b      	neglt	r3, r3
 800b1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1e6:	9307      	strge	r3, [sp, #28]
 800b1e8:	9307      	strlt	r3, [sp, #28]
 800b1ea:	bfb8      	it	lt
 800b1ec:	9204      	strlt	r2, [sp, #16]
 800b1ee:	7823      	ldrb	r3, [r4, #0]
 800b1f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1f2:	d10a      	bne.n	800b20a <_vfiprintf_r+0x156>
 800b1f4:	7863      	ldrb	r3, [r4, #1]
 800b1f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1f8:	d132      	bne.n	800b260 <_vfiprintf_r+0x1ac>
 800b1fa:	9b03      	ldr	r3, [sp, #12]
 800b1fc:	1d1a      	adds	r2, r3, #4
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	9203      	str	r2, [sp, #12]
 800b202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b206:	3402      	adds	r4, #2
 800b208:	9305      	str	r3, [sp, #20]
 800b20a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2e0 <_vfiprintf_r+0x22c>
 800b20e:	7821      	ldrb	r1, [r4, #0]
 800b210:	2203      	movs	r2, #3
 800b212:	4650      	mov	r0, sl
 800b214:	f7f4 ffe4 	bl	80001e0 <memchr>
 800b218:	b138      	cbz	r0, 800b22a <_vfiprintf_r+0x176>
 800b21a:	9b04      	ldr	r3, [sp, #16]
 800b21c:	eba0 000a 	sub.w	r0, r0, sl
 800b220:	2240      	movs	r2, #64	@ 0x40
 800b222:	4082      	lsls	r2, r0
 800b224:	4313      	orrs	r3, r2
 800b226:	3401      	adds	r4, #1
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22e:	4829      	ldr	r0, [pc, #164]	@ (800b2d4 <_vfiprintf_r+0x220>)
 800b230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b234:	2206      	movs	r2, #6
 800b236:	f7f4 ffd3 	bl	80001e0 <memchr>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d03f      	beq.n	800b2be <_vfiprintf_r+0x20a>
 800b23e:	4b26      	ldr	r3, [pc, #152]	@ (800b2d8 <_vfiprintf_r+0x224>)
 800b240:	bb1b      	cbnz	r3, 800b28a <_vfiprintf_r+0x1d6>
 800b242:	9b03      	ldr	r3, [sp, #12]
 800b244:	3307      	adds	r3, #7
 800b246:	f023 0307 	bic.w	r3, r3, #7
 800b24a:	3308      	adds	r3, #8
 800b24c:	9303      	str	r3, [sp, #12]
 800b24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b250:	443b      	add	r3, r7
 800b252:	9309      	str	r3, [sp, #36]	@ 0x24
 800b254:	e76a      	b.n	800b12c <_vfiprintf_r+0x78>
 800b256:	fb0c 3202 	mla	r2, ip, r2, r3
 800b25a:	460c      	mov	r4, r1
 800b25c:	2001      	movs	r0, #1
 800b25e:	e7a8      	b.n	800b1b2 <_vfiprintf_r+0xfe>
 800b260:	2300      	movs	r3, #0
 800b262:	3401      	adds	r4, #1
 800b264:	9305      	str	r3, [sp, #20]
 800b266:	4619      	mov	r1, r3
 800b268:	f04f 0c0a 	mov.w	ip, #10
 800b26c:	4620      	mov	r0, r4
 800b26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b272:	3a30      	subs	r2, #48	@ 0x30
 800b274:	2a09      	cmp	r2, #9
 800b276:	d903      	bls.n	800b280 <_vfiprintf_r+0x1cc>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0c6      	beq.n	800b20a <_vfiprintf_r+0x156>
 800b27c:	9105      	str	r1, [sp, #20]
 800b27e:	e7c4      	b.n	800b20a <_vfiprintf_r+0x156>
 800b280:	fb0c 2101 	mla	r1, ip, r1, r2
 800b284:	4604      	mov	r4, r0
 800b286:	2301      	movs	r3, #1
 800b288:	e7f0      	b.n	800b26c <_vfiprintf_r+0x1b8>
 800b28a:	ab03      	add	r3, sp, #12
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	462a      	mov	r2, r5
 800b290:	4b12      	ldr	r3, [pc, #72]	@ (800b2dc <_vfiprintf_r+0x228>)
 800b292:	a904      	add	r1, sp, #16
 800b294:	4630      	mov	r0, r6
 800b296:	f7fb febb 	bl	8007010 <_printf_float>
 800b29a:	4607      	mov	r7, r0
 800b29c:	1c78      	adds	r0, r7, #1
 800b29e:	d1d6      	bne.n	800b24e <_vfiprintf_r+0x19a>
 800b2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2a2:	07d9      	lsls	r1, r3, #31
 800b2a4:	d405      	bmi.n	800b2b2 <_vfiprintf_r+0x1fe>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	059a      	lsls	r2, r3, #22
 800b2aa:	d402      	bmi.n	800b2b2 <_vfiprintf_r+0x1fe>
 800b2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ae:	f7fc fe1f 	bl	8007ef0 <__retarget_lock_release_recursive>
 800b2b2:	89ab      	ldrh	r3, [r5, #12]
 800b2b4:	065b      	lsls	r3, r3, #25
 800b2b6:	f53f af1f 	bmi.w	800b0f8 <_vfiprintf_r+0x44>
 800b2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2bc:	e71e      	b.n	800b0fc <_vfiprintf_r+0x48>
 800b2be:	ab03      	add	r3, sp, #12
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	4b05      	ldr	r3, [pc, #20]	@ (800b2dc <_vfiprintf_r+0x228>)
 800b2c6:	a904      	add	r1, sp, #16
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7fc f939 	bl	8007540 <_printf_i>
 800b2ce:	e7e4      	b.n	800b29a <_vfiprintf_r+0x1e6>
 800b2d0:	0800ba71 	.word	0x0800ba71
 800b2d4:	0800ba7b 	.word	0x0800ba7b
 800b2d8:	08007011 	.word	0x08007011
 800b2dc:	0800b091 	.word	0x0800b091
 800b2e0:	0800ba77 	.word	0x0800ba77

0800b2e4 <__swbuf_r>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	b118      	cbz	r0, 800b2f6 <__swbuf_r+0x12>
 800b2ee:	6a03      	ldr	r3, [r0, #32]
 800b2f0:	b90b      	cbnz	r3, 800b2f6 <__swbuf_r+0x12>
 800b2f2:	f7fc fce5 	bl	8007cc0 <__sinit>
 800b2f6:	69a3      	ldr	r3, [r4, #24]
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	071a      	lsls	r2, r3, #28
 800b2fe:	d501      	bpl.n	800b304 <__swbuf_r+0x20>
 800b300:	6923      	ldr	r3, [r4, #16]
 800b302:	b943      	cbnz	r3, 800b316 <__swbuf_r+0x32>
 800b304:	4621      	mov	r1, r4
 800b306:	4628      	mov	r0, r5
 800b308:	f000 f82a 	bl	800b360 <__swsetup_r>
 800b30c:	b118      	cbz	r0, 800b316 <__swbuf_r+0x32>
 800b30e:	f04f 37ff 	mov.w	r7, #4294967295
 800b312:	4638      	mov	r0, r7
 800b314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	1a98      	subs	r0, r3, r2
 800b31c:	6963      	ldr	r3, [r4, #20]
 800b31e:	b2f6      	uxtb	r6, r6
 800b320:	4283      	cmp	r3, r0
 800b322:	4637      	mov	r7, r6
 800b324:	dc05      	bgt.n	800b332 <__swbuf_r+0x4e>
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f7ff fa47 	bl	800a7bc <_fflush_r>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d1ed      	bne.n	800b30e <__swbuf_r+0x2a>
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	3b01      	subs	r3, #1
 800b336:	60a3      	str	r3, [r4, #8]
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	6022      	str	r2, [r4, #0]
 800b33e:	701e      	strb	r6, [r3, #0]
 800b340:	6962      	ldr	r2, [r4, #20]
 800b342:	1c43      	adds	r3, r0, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	d004      	beq.n	800b352 <__swbuf_r+0x6e>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	07db      	lsls	r3, r3, #31
 800b34c:	d5e1      	bpl.n	800b312 <__swbuf_r+0x2e>
 800b34e:	2e0a      	cmp	r6, #10
 800b350:	d1df      	bne.n	800b312 <__swbuf_r+0x2e>
 800b352:	4621      	mov	r1, r4
 800b354:	4628      	mov	r0, r5
 800b356:	f7ff fa31 	bl	800a7bc <_fflush_r>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d0d9      	beq.n	800b312 <__swbuf_r+0x2e>
 800b35e:	e7d6      	b.n	800b30e <__swbuf_r+0x2a>

0800b360 <__swsetup_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4b29      	ldr	r3, [pc, #164]	@ (800b408 <__swsetup_r+0xa8>)
 800b364:	4605      	mov	r5, r0
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	460c      	mov	r4, r1
 800b36a:	b118      	cbz	r0, 800b374 <__swsetup_r+0x14>
 800b36c:	6a03      	ldr	r3, [r0, #32]
 800b36e:	b90b      	cbnz	r3, 800b374 <__swsetup_r+0x14>
 800b370:	f7fc fca6 	bl	8007cc0 <__sinit>
 800b374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b378:	0719      	lsls	r1, r3, #28
 800b37a:	d422      	bmi.n	800b3c2 <__swsetup_r+0x62>
 800b37c:	06da      	lsls	r2, r3, #27
 800b37e:	d407      	bmi.n	800b390 <__swsetup_r+0x30>
 800b380:	2209      	movs	r2, #9
 800b382:	602a      	str	r2, [r5, #0]
 800b384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b388:	81a3      	strh	r3, [r4, #12]
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	e033      	b.n	800b3f8 <__swsetup_r+0x98>
 800b390:	0758      	lsls	r0, r3, #29
 800b392:	d512      	bpl.n	800b3ba <__swsetup_r+0x5a>
 800b394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b396:	b141      	cbz	r1, 800b3aa <__swsetup_r+0x4a>
 800b398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b39c:	4299      	cmp	r1, r3
 800b39e:	d002      	beq.n	800b3a6 <__swsetup_r+0x46>
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f7fd fbf9 	bl	8008b98 <_free_r>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6063      	str	r3, [r4, #4]
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f043 0308 	orr.w	r3, r3, #8
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	b94b      	cbnz	r3, 800b3da <__swsetup_r+0x7a>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3d0:	d003      	beq.n	800b3da <__swsetup_r+0x7a>
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f000 f883 	bl	800b4e0 <__smakebuf_r>
 800b3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3de:	f013 0201 	ands.w	r2, r3, #1
 800b3e2:	d00a      	beq.n	800b3fa <__swsetup_r+0x9a>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	60a2      	str	r2, [r4, #8]
 800b3e8:	6962      	ldr	r2, [r4, #20]
 800b3ea:	4252      	negs	r2, r2
 800b3ec:	61a2      	str	r2, [r4, #24]
 800b3ee:	6922      	ldr	r2, [r4, #16]
 800b3f0:	b942      	cbnz	r2, 800b404 <__swsetup_r+0xa4>
 800b3f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b3f6:	d1c5      	bne.n	800b384 <__swsetup_r+0x24>
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	0799      	lsls	r1, r3, #30
 800b3fc:	bf58      	it	pl
 800b3fe:	6962      	ldrpl	r2, [r4, #20]
 800b400:	60a2      	str	r2, [r4, #8]
 800b402:	e7f4      	b.n	800b3ee <__swsetup_r+0x8e>
 800b404:	2000      	movs	r0, #0
 800b406:	e7f7      	b.n	800b3f8 <__swsetup_r+0x98>
 800b408:	2000005c 	.word	0x2000005c

0800b40c <_raise_r>:
 800b40c:	291f      	cmp	r1, #31
 800b40e:	b538      	push	{r3, r4, r5, lr}
 800b410:	4605      	mov	r5, r0
 800b412:	460c      	mov	r4, r1
 800b414:	d904      	bls.n	800b420 <_raise_r+0x14>
 800b416:	2316      	movs	r3, #22
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	bd38      	pop	{r3, r4, r5, pc}
 800b420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b422:	b112      	cbz	r2, 800b42a <_raise_r+0x1e>
 800b424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b428:	b94b      	cbnz	r3, 800b43e <_raise_r+0x32>
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 f830 	bl	800b490 <_getpid_r>
 800b430:	4622      	mov	r2, r4
 800b432:	4601      	mov	r1, r0
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b43a:	f000 b817 	b.w	800b46c <_kill_r>
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d00a      	beq.n	800b458 <_raise_r+0x4c>
 800b442:	1c59      	adds	r1, r3, #1
 800b444:	d103      	bne.n	800b44e <_raise_r+0x42>
 800b446:	2316      	movs	r3, #22
 800b448:	6003      	str	r3, [r0, #0]
 800b44a:	2001      	movs	r0, #1
 800b44c:	e7e7      	b.n	800b41e <_raise_r+0x12>
 800b44e:	2100      	movs	r1, #0
 800b450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b454:	4620      	mov	r0, r4
 800b456:	4798      	blx	r3
 800b458:	2000      	movs	r0, #0
 800b45a:	e7e0      	b.n	800b41e <_raise_r+0x12>

0800b45c <raise>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <raise+0xc>)
 800b45e:	4601      	mov	r1, r0
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	f7ff bfd3 	b.w	800b40c <_raise_r>
 800b466:	bf00      	nop
 800b468:	2000005c 	.word	0x2000005c

0800b46c <_kill_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	@ (800b48c <_kill_r+0x20>)
 800b470:	2300      	movs	r3, #0
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	f7f6 fcfd 	bl	8001e78 <_kill>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	d102      	bne.n	800b488 <_kill_r+0x1c>
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	b103      	cbz	r3, 800b488 <_kill_r+0x1c>
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	bf00      	nop
 800b48c:	20000814 	.word	0x20000814

0800b490 <_getpid_r>:
 800b490:	f7f6 bcea 	b.w	8001e68 <_getpid>

0800b494 <__swhatbuf_r>:
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	460c      	mov	r4, r1
 800b498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49c:	2900      	cmp	r1, #0
 800b49e:	b096      	sub	sp, #88	@ 0x58
 800b4a0:	4615      	mov	r5, r2
 800b4a2:	461e      	mov	r6, r3
 800b4a4:	da0d      	bge.n	800b4c2 <__swhatbuf_r+0x2e>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4ac:	f04f 0100 	mov.w	r1, #0
 800b4b0:	bf14      	ite	ne
 800b4b2:	2340      	movne	r3, #64	@ 0x40
 800b4b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	6031      	str	r1, [r6, #0]
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	b016      	add	sp, #88	@ 0x58
 800b4c0:	bd70      	pop	{r4, r5, r6, pc}
 800b4c2:	466a      	mov	r2, sp
 800b4c4:	f000 f848 	bl	800b558 <_fstat_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	dbec      	blt.n	800b4a6 <__swhatbuf_r+0x12>
 800b4cc:	9901      	ldr	r1, [sp, #4]
 800b4ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4d6:	4259      	negs	r1, r3
 800b4d8:	4159      	adcs	r1, r3
 800b4da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4de:	e7eb      	b.n	800b4b8 <__swhatbuf_r+0x24>

0800b4e0 <__smakebuf_r>:
 800b4e0:	898b      	ldrh	r3, [r1, #12]
 800b4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4e4:	079d      	lsls	r5, r3, #30
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	d507      	bpl.n	800b4fc <__smakebuf_r+0x1c>
 800b4ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	6163      	str	r3, [r4, #20]
 800b4f8:	b003      	add	sp, #12
 800b4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4fc:	ab01      	add	r3, sp, #4
 800b4fe:	466a      	mov	r2, sp
 800b500:	f7ff ffc8 	bl	800b494 <__swhatbuf_r>
 800b504:	9f00      	ldr	r7, [sp, #0]
 800b506:	4605      	mov	r5, r0
 800b508:	4639      	mov	r1, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7fd fbb8 	bl	8008c80 <_malloc_r>
 800b510:	b948      	cbnz	r0, 800b526 <__smakebuf_r+0x46>
 800b512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b516:	059a      	lsls	r2, r3, #22
 800b518:	d4ee      	bmi.n	800b4f8 <__smakebuf_r+0x18>
 800b51a:	f023 0303 	bic.w	r3, r3, #3
 800b51e:	f043 0302 	orr.w	r3, r3, #2
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	e7e2      	b.n	800b4ec <__smakebuf_r+0xc>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	6020      	str	r0, [r4, #0]
 800b52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	9b01      	ldr	r3, [sp, #4]
 800b532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b536:	b15b      	cbz	r3, 800b550 <__smakebuf_r+0x70>
 800b538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b53c:	4630      	mov	r0, r6
 800b53e:	f000 f81d 	bl	800b57c <_isatty_r>
 800b542:	b128      	cbz	r0, 800b550 <__smakebuf_r+0x70>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	f043 0301 	orr.w	r3, r3, #1
 800b54e:	81a3      	strh	r3, [r4, #12]
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	431d      	orrs	r5, r3
 800b554:	81a5      	strh	r5, [r4, #12]
 800b556:	e7cf      	b.n	800b4f8 <__smakebuf_r+0x18>

0800b558 <_fstat_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	@ (800b578 <_fstat_r+0x20>)
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	4611      	mov	r1, r2
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	f7f6 fce7 	bl	8001f38 <_fstat>
 800b56a:	1c43      	adds	r3, r0, #1
 800b56c:	d102      	bne.n	800b574 <_fstat_r+0x1c>
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	b103      	cbz	r3, 800b574 <_fstat_r+0x1c>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	bf00      	nop
 800b578:	20000814 	.word	0x20000814

0800b57c <_isatty_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d06      	ldr	r5, [pc, #24]	@ (800b598 <_isatty_r+0x1c>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	f7f6 fce6 	bl	8001f58 <_isatty>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_isatty_r+0x1a>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_isatty_r+0x1a>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20000814 	.word	0x20000814

0800b59c <_init>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	bf00      	nop
 800b5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a2:	bc08      	pop	{r3}
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_fini>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	bf00      	nop
 800b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ae:	bc08      	pop	{r3}
 800b5b0:	469e      	mov	lr, r3
 800b5b2:	4770      	bx	lr
