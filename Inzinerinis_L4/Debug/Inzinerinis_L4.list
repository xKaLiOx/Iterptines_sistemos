
Inzinerinis_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800c448  0800c448  0000d448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c8  0800c9c8  0000e218  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c8  0800c9c8  0000d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d0  0800c9d0  0000e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d0  0800c9d0  0000d9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9d4  0800c9d4  0000d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800c9d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000218  0800cbf0  0000e218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800cbf0  0000e844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d1d  00000000  00000000  0000e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003418  00000000  00000000  00025f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001001  00000000  00000000  0002a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263f5  00000000  00000000  0002b841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194bd  00000000  00000000  00051c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb1bf  00000000  00000000  0006b0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001562b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bec  00000000  00000000  001562f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0015cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c42c 	.word	0x0800c42c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800c42c 	.word	0x0800c42c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <SEND_4_BIT>:
#include "main.h"
#include "stm32l4xx_hal.h"
#include "LCD_16x2_PARALLEL.h"

void SEND_4_BIT(char data, int rsPin)//rs=0 yra instruction register o HIGH(1) data register
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rsPin);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	2110      	movs	r1, #16
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f003 fc06 	bl	800481c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data>>0)&0x1);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f003 fbfb 	bl	800481c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data>>1)&0x1);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	085b      	lsrs	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	2108      	movs	r1, #8
 8001036:	4817      	ldr	r0, [pc, #92]	@ (8001094 <SEND_4_BIT+0xa0>)
 8001038:	f003 fbf0 	bl	800481c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data>>2)&0x1);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	2120      	movs	r1, #32
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <SEND_4_BIT+0xa0>)
 800104e:	f003 fbe5 	bl	800481c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data>>3)&0x1);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f003 fbd8 	bl	800481c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2140      	movs	r1, #64	@ 0x40
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f003 fbd2 	bl	800481c <HAL_GPIO_WritePin>
	  DELAY_US(500);
 8001078:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800107c:	f000 fd98 	bl	8001bb0 <DELAY_US>
	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	@ 0x40
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f003 fbc8 	bl	800481c <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	48000400 	.word	0x48000400

08001098 <LCD_SEND_COMMAND>:

void LCD_SEND_COMMAND(char komanda)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010aa:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff9e 	bl	8000ff4 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010c2:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_INSTRUCTION);
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <LCD_SEND_COMMAND+0x40>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff92 	bl	8000ff4 <SEND_4_BIT>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000234 	.word	0x20000234

080010dc <LCD_SEND_DATA>:
void LCD_SEND_DATA(char komanda)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	  //upper
	  static char siuntimas;
	  siuntimas=(komanda>>4)&0x0f;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <LCD_SEND_DATA+0x40>)
 80010ee:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <LCD_SEND_DATA+0x40>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff7c 	bl	8000ff4 <SEND_4_BIT>

	  //lower
	  siuntimas=(komanda)&0x0f;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <LCD_SEND_DATA+0x40>)
 8001106:	701a      	strb	r2, [r3, #0]
	  SEND_4_BIT(siuntimas, LCD_RS_DATA);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <LCD_SEND_DATA+0x40>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff70 	bl	8000ff4 <SEND_4_BIT>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000235 	.word	0x20000235

08001120 <LCD_CLEAR>:

void LCD_CLEAR()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_DISPLAY_CLEAR);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff ffb7 	bl	8001098 <LCD_SEND_COMMAND>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <LCD_CLEAR_DRAM>:

void LCD_CLEAR_DRAM()
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 8001134:	2002      	movs	r0, #2
 8001136:	f7ff ffaf 	bl	8001098 <LCD_SEND_COMMAND>
	for(uint8_t x = 0;x<0x28;x++)
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e005      	b.n	800114c <LCD_CLEAR_DRAM+0x1e>
	{
		LCD_SEND_DATA(' ');
 8001140:	2020      	movs	r0, #32
 8001142:	f7ff ffcb 	bl	80010dc <LCD_SEND_DATA>
	for(uint8_t x = 0;x<0x28;x++)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b27      	cmp	r3, #39	@ 0x27
 8001150:	d9f6      	bls.n	8001140 <LCD_CLEAR_DRAM+0x12>
	}
	for(uint8_t x = 0x40;x<0x68;x++)
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	71bb      	strb	r3, [r7, #6]
 8001156:	e005      	b.n	8001164 <LCD_CLEAR_DRAM+0x36>
	{
		LCD_SEND_DATA(' ');
 8001158:	2020      	movs	r0, #32
 800115a:	f7ff ffbf 	bl	80010dc <LCD_SEND_DATA>
	for(uint8_t x = 0x40;x<0x68;x++)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	3301      	adds	r3, #1
 8001162:	71bb      	strb	r3, [r7, #6]
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b67      	cmp	r3, #103	@ 0x67
 8001168:	d9f6      	bls.n	8001158 <LCD_CLEAR_DRAM+0x2a>
	}
	LCD_SEND_COMMAND(LCD_RETURN_HOME);
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ff94 	bl	8001098 <LCD_SEND_COMMAND>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LCD_Init>:

void LCD_Init()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	  HAL_Delay(70);
 800117c:	2046      	movs	r0, #70	@ 0x46
 800117e:	f001 fa39 	bl	80025f4 <HAL_Delay>
	  LCD_SEND_COMMAND(LCD_FUNCTION_SET);//x28 kad 2 line
 8001182:	2020      	movs	r0, #32
 8001184:	f7ff ff88 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 8001188:	2002      	movs	r0, #2
 800118a:	f001 fa33 	bl	80025f4 <HAL_Delay>
	  LCD_SEND_COMMAND(0x28);
 800118e:	2028      	movs	r0, #40	@ 0x28
 8001190:	f7ff ff82 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 8001194:	2002      	movs	r0, #2
 8001196:	f001 fa2d 	bl	80025f4 <HAL_Delay>
////////////////////////
	  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);//display
 800119a:	200c      	movs	r0, #12
 800119c:	f7ff ff7c 	bl	8001098 <LCD_SEND_COMMAND>
	  HAL_Delay(2);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f001 fa27 	bl	80025f4 <HAL_Delay>
	  LCD_CLEAR();
 80011a6:	f7ff ffbb 	bl	8001120 <LCD_CLEAR>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <LCD_SEND_STR>:

void LCD_SEND_STR(const char data[], unsigned int place, unsigned int level)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	if(level==1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <LCD_SEND_STR+0x22>
		{
		LCD_SEND_COMMAND(0xC0+place);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3b40      	subs	r3, #64	@ 0x40
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff64 	bl	8001098 <LCD_SEND_COMMAND>
 80011d0:	e006      	b.n	80011e0 <LCD_SEND_STR+0x30>
		}
	else LCD_SEND_COMMAND(0x80+place);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3b80      	subs	r3, #128	@ 0x80
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff5c 	bl	8001098 <LCD_SEND_COMMAND>
//kai N=high 2 line tai 1 line 0-4F o 2 0-27h   40-67h
// KAI level 0 tai pirmas kai 1 tai antras levelis
	static uint8_t x;
	x = 0;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 80011e6:	e00e      	b.n	8001206 <LCD_SEND_STR+0x56>
	{
		LCD_SEND_DATA(data[x]);
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff71 	bl	80010dc <LCD_SEND_DATA>
		x++;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <LCD_SEND_STR+0x70>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <LCD_SEND_STR+0x70>)
 8001204:	701a      	strb	r2, [r3, #0]
	while(data[x]!='\0')
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <LCD_SEND_STR+0x70>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e8      	bne.n	80011e8 <LCD_SEND_STR+0x38>
	}
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000236 	.word	0x20000236

08001224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <MX_ADC1_Init+0xf8>)
 800123c:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <MX_ADC1_Init+0xfc>)
 800123e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001240:	4b36      	ldr	r3, [pc, #216]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001246:	4b35      	ldr	r3, [pc, #212]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124c:	4b33      	ldr	r3, [pc, #204]	@ (800131c <MX_ADC1_Init+0xf8>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001252:	4b32      	ldr	r3, [pc, #200]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001254:	2201      	movs	r2, #1
 8001256:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001258:	4b30      	ldr	r3, [pc, #192]	@ (800131c <MX_ADC1_Init+0xf8>)
 800125a:	2208      	movs	r2, #8
 800125c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001264:	4b2d      	ldr	r3, [pc, #180]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001266:	2200      	movs	r2, #0
 8001268:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <MX_ADC1_Init+0xf8>)
 800126c:	2203      	movs	r2, #3
 800126e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <MX_ADC1_Init+0xf8>)
 800127a:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001280:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <MX_ADC1_Init+0xf8>)
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001292:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b20      	ldr	r3, [pc, #128]	@ (800131c <MX_ADC1_Init+0xf8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	481e      	ldr	r0, [pc, #120]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012a2:	f001 fbdf 	bl	8002a64 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 fda0 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <MX_ADC1_Init+0x100>)
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2306      	movs	r3, #6
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012bc:	237f      	movs	r3, #127	@ 0x7f
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c0:	2304      	movs	r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012ce:	f001 ff6f 	bl	80031b0 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80012d8:	f000 fd8a 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_ADC1_Init+0x104>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012e0:	230c      	movs	r3, #12
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_ADC1_Init+0xf8>)
 80012ea:	f001 ff61 	bl	80031b0 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80012f4:	f000 fd7c 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_ADC1_Init+0x108>)
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012fc:	2312      	movs	r3, #18
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_ADC1_Init+0xf8>)
 8001306:	f001 ff53 	bl	80031b0 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001310:	f000 fd6e 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000238 	.word	0x20000238
 8001320:	50040000 	.word	0x50040000
 8001324:	04300002 	.word	0x04300002
 8001328:	08600004 	.word	0x08600004
 800132c:	0c900008 	.word	0x0c900008

08001330 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0a4      	sub	sp, #144	@ 0x90
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2268      	movs	r2, #104	@ 0x68
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f007 fc92 	bl	8008c7a <memset>
  if(adcHandle->Instance==ADC1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <HAL_ADC_MspInit+0x128>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d177      	bne.n	8001450 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001360:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001364:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001366:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800136a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001378:	2307      	movs	r3, #7
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4618      	mov	r0, r3
 8001390:	f004 f92a 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800139a:	f000 fd29 	bl	8001df0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a28      	ldr	r2, [pc, #160]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_ADC_MspInit+0x12c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d2:	230b      	movs	r3, #11
 80013d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013e2:	4619      	mov	r1, r3
 80013e4:	481e      	ldr	r0, [pc, #120]	@ (8001460 <HAL_ADC_MspInit+0x130>)
 80013e6:	f003 f89f 	bl	8004528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001468 <HAL_ADC_MspInit+0x138>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800140a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001416:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800141a:	2220      	movs	r2, #32
 800141c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001426:	f002 fe09 	bl	800403c <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001430:	f000 fcde 	bl	8001df0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 8001438:	651a      	str	r2, [r3, #80]	@ 0x50
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <HAL_ADC_MspInit+0x134>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2102      	movs	r1, #2
 8001444:	2012      	movs	r0, #18
 8001446:	f002 fdc2 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800144a:	2012      	movs	r0, #18
 800144c:	f002 fddb 	bl	8004006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001450:	bf00      	nop
 8001452:	3790      	adds	r7, #144	@ 0x90
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	50040000 	.word	0x50040000
 800145c:	40021000 	.word	0x40021000
 8001460:	48000800 	.word	0x48000800
 8001464:	200002a0 	.word	0x200002a0
 8001468:	40020008 	.word	0x40020008

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_DMA_Init+0x38>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200b      	movs	r0, #11
 8001490:	f002 fd9d 	bl	8003fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001494:	200b      	movs	r0, #11
 8001496:	f002 fdb6 	bl	8004006 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b53      	ldr	r3, [pc, #332]	@ (800160c <MX_GPIO_Init+0x164>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a52      	ldr	r2, [pc, #328]	@ (800160c <MX_GPIO_Init+0x164>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b50      	ldr	r3, [pc, #320]	@ (800160c <MX_GPIO_Init+0x164>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	4b4d      	ldr	r3, [pc, #308]	@ (800160c <MX_GPIO_Init+0x164>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a4c      	ldr	r2, [pc, #304]	@ (800160c <MX_GPIO_Init+0x164>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <MX_GPIO_Init+0x164>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <MX_GPIO_Init+0x164>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a46      	ldr	r2, [pc, #280]	@ (800160c <MX_GPIO_Init+0x164>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b44      	ldr	r3, [pc, #272]	@ (800160c <MX_GPIO_Init+0x164>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <MX_GPIO_Init+0x164>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	4a40      	ldr	r2, [pc, #256]	@ (800160c <MX_GPIO_Init+0x164>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001512:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <MX_GPIO_Init+0x164>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LUX_VCC_GPIO_Port, LUX_VCC_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2108      	movs	r1, #8
 8001522:	483b      	ldr	r0, [pc, #236]	@ (8001610 <MX_GPIO_Init+0x168>)
 8001524:	f003 f97a 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D4_Pin
 8001528:	2200      	movs	r2, #0
 800152a:	f249 0170 	movw	r1, #36976	@ 0x9070
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f003 f973 	bl	800481c <HAL_GPIO_WritePin>
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|D5_Pin|D6_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f242 0128 	movw	r1, #8232	@ 0x2028
 800153c:	4835      	ldr	r0, [pc, #212]	@ (8001614 <MX_GPIO_Init+0x16c>)
 800153e:	f003 f96d 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001548:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	482d      	ldr	r0, [pc, #180]	@ (8001610 <MX_GPIO_Init+0x168>)
 800155a:	f002 ffe5 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LUX_VCC_Pin;
 800155e:	2308      	movs	r3, #8
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LUX_VCC_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4826      	ldr	r0, [pc, #152]	@ (8001610 <MX_GPIO_Init+0x168>)
 8001576:	f002 ffd7 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 800157a:	2370      	movs	r3, #112	@ 0x70
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001594:	f002 ffc8 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4818      	ldr	r0, [pc, #96]	@ (8001614 <MX_GPIO_Init+0x16c>)
 80015b2:	f002 ffb9 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D4_Pin|D7_Pin;
 80015b6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f002 ffa9 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 80015d6:	2328      	movs	r3, #40	@ 0x28
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4809      	ldr	r0, [pc, #36]	@ (8001614 <MX_GPIO_Init+0x16c>)
 80015ee:	f002 ff9b 	bl	8004528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	2028      	movs	r0, #40	@ 0x28
 80015f8:	f002 fce9 	bl	8003fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015fc:	2028      	movs	r0, #40	@ 0x28
 80015fe:	f002 fd02 	bl	8004006 <HAL_NVIC_EnableIRQ>

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	48000800 	.word	0x48000800
 8001614:	48000400 	.word	0x48000400

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f000 ff6d 	bl	80024fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fa35 	bl	8001a90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(300);
 8001626:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800162a:	f000 ffe3 	bl	80025f4 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f7ff ff3b 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001632:	f7ff ff1b 	bl	800146c <MX_DMA_Init>
  MX_TIM6_Init();
 8001636:	f000 fd63 	bl	8002100 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800163a:	f000 fe53 	bl	80022e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800163e:	f7ff fdf1 	bl	8001224 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001642:	f000 fe1f 	bl	8002284 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8001646:	f000 fd91 	bl	800216c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK)
 800164a:	217f      	movs	r1, #127	@ 0x7f
 800164c:	489b      	ldr	r0, [pc, #620]	@ (80018bc <main+0x2a4>)
 800164e:	f002 fb51 	bl	8003cf4 <HAL_ADCEx_Calibration_Start>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <main+0x56>
  {
  	sprintf(LCD_top_text,"ERR CALIBRATION");
 8001658:	4999      	ldr	r1, [pc, #612]	@ (80018c0 <main+0x2a8>)
 800165a:	489a      	ldr	r0, [pc, #616]	@ (80018c4 <main+0x2ac>)
 800165c:	f007 faaa 	bl	8008bb4 <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 8001660:	4999      	ldr	r1, [pc, #612]	@ (80018c8 <main+0x2b0>)
 8001662:	489a      	ldr	r0, [pc, #616]	@ (80018cc <main+0x2b4>)
 8001664:	f007 faa6 	bl	8008bb4 <siprintf>
  	ERROR_FLAG = 1;
 8001668:	4b99      	ldr	r3, [pc, #612]	@ (80018d0 <main+0x2b8>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_Samples,ADC_BUFFER_SIZE) != HAL_OK)
 800166e:	22f0      	movs	r2, #240	@ 0xf0
 8001670:	4998      	ldr	r1, [pc, #608]	@ (80018d4 <main+0x2bc>)
 8001672:	4892      	ldr	r0, [pc, #584]	@ (80018bc <main+0x2a4>)
 8001674:	f001 fb3c 	bl	8002cf0 <HAL_ADC_Start_DMA>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <main+0x7c>
  {
  	sprintf(LCD_top_text,"ERROR ADC");
 800167e:	4996      	ldr	r1, [pc, #600]	@ (80018d8 <main+0x2c0>)
 8001680:	4890      	ldr	r0, [pc, #576]	@ (80018c4 <main+0x2ac>)
 8001682:	f007 fa97 	bl	8008bb4 <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 8001686:	4990      	ldr	r1, [pc, #576]	@ (80018c8 <main+0x2b0>)
 8001688:	4890      	ldr	r0, [pc, #576]	@ (80018cc <main+0x2b4>)
 800168a:	f007 fa93 	bl	8008bb4 <siprintf>
  	ERROR_FLAG = 1;
 800168e:	4b90      	ldr	r3, [pc, #576]	@ (80018d0 <main+0x2b8>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8001694:	4891      	ldr	r0, [pc, #580]	@ (80018dc <main+0x2c4>)
 8001696:	f004 fbb1 	bl	8005dfc <HAL_TIM_Base_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00a      	beq.n	80016b6 <main+0x9e>
  {
  	sprintf(LCD_top_text,"DISPLAY TIM ERR");
 80016a0:	498f      	ldr	r1, [pc, #572]	@ (80018e0 <main+0x2c8>)
 80016a2:	4888      	ldr	r0, [pc, #544]	@ (80018c4 <main+0x2ac>)
 80016a4:	f007 fa86 	bl	8008bb4 <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016a8:	4987      	ldr	r1, [pc, #540]	@ (80018c8 <main+0x2b0>)
 80016aa:	4888      	ldr	r0, [pc, #544]	@ (80018cc <main+0x2b4>)
 80016ac:	f007 fa82 	bl	8008bb4 <siprintf>
  	ERROR_FLAG = 1;
 80016b0:	4b87      	ldr	r3, [pc, #540]	@ (80018d0 <main+0x2b8>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  if(HAL_TIM_Base_Start(&htim6) != HAL_OK)
 80016b6:	488b      	ldr	r0, [pc, #556]	@ (80018e4 <main+0x2cc>)
 80016b8:	f004 fb4c 	bl	8005d54 <HAL_TIM_Base_Start>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <main+0xc0>
  {
  	sprintf(LCD_top_text,"ERROR MAIN TIM");
 80016c2:	4989      	ldr	r1, [pc, #548]	@ (80018e8 <main+0x2d0>)
 80016c4:	487f      	ldr	r0, [pc, #508]	@ (80018c4 <main+0x2ac>)
 80016c6:	f007 fa75 	bl	8008bb4 <siprintf>
  	sprintf(LCD_bottom_text,"RESET MCU");
 80016ca:	497f      	ldr	r1, [pc, #508]	@ (80018c8 <main+0x2b0>)
 80016cc:	487f      	ldr	r0, [pc, #508]	@ (80018cc <main+0x2b4>)
 80016ce:	f007 fa71 	bl	8008bb4 <siprintf>
  	ERROR_FLAG = 1;
 80016d2:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <main+0x2b8>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
  }
  //NEVEIKIA VCC is PIN, kodel??
  //HAL_GPIO_WritePin(LUX_VCC_GPIO_Port, LUX_VCC_Pin, GPIO_PIN_SET);// turn on LCD DATA transmission power
  LCD_Init();
 80016d8:	f7ff fd4e 	bl	8001178 <LCD_Init>
  HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 ff89 	bl	80025f4 <HAL_Delay>
  LCD_SEND_COMMAND(LCD_DISPLAY_OFF);
 80016e2:	2008      	movs	r0, #8
 80016e4:	f7ff fcd8 	bl	8001098 <LCD_SEND_COMMAND>
  HAL_Delay(10);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f000 ff83 	bl	80025f4 <HAL_Delay>
  LCD_CLEAR();
 80016ee:	f7ff fd17 	bl	8001120 <LCD_CLEAR>
  HAL_Delay(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 ff7e 	bl	80025f4 <HAL_Delay>
  LCD_CLEAR_DRAM();
 80016f8:	f7ff fd19 	bl	800112e <LCD_CLEAR_DRAM>
  HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f000 ff79 	bl	80025f4 <HAL_Delay>
  LCD_SEND_STR(LCD_top_text,0x3,0);
 8001702:	2200      	movs	r2, #0
 8001704:	2103      	movs	r1, #3
 8001706:	486f      	ldr	r0, [pc, #444]	@ (80018c4 <main+0x2ac>)
 8001708:	f7ff fd52 	bl	80011b0 <LCD_SEND_STR>
  LCD_SEND_STR(LCD_bottom_text,0,1);
 800170c:	2201      	movs	r2, #1
 800170e:	2100      	movs	r1, #0
 8001710:	486e      	ldr	r0, [pc, #440]	@ (80018cc <main+0x2b4>)
 8001712:	f7ff fd4d 	bl	80011b0 <LCD_SEND_STR>
  LCD_SEND_COMMAND(LCD_SET_DISPLAY_DEFAULT);
 8001716:	200c      	movs	r0, #12
 8001718:	f7ff fcbe 	bl	8001098 <LCD_SEND_COMMAND>
  HAL_Delay(2000);
 800171c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001720:	f000 ff68 	bl	80025f4 <HAL_Delay>
  LCD_CLEAR();
 8001724:	f7ff fcfc 	bl	8001120 <LCD_CLEAR>

	if(ERROR_FLAG) Error_Handler();//REIKIA PALEISTI TAIMERI TIM6 PRIES ATVAIZDAVIMA, us delay
 8001728:	4b69      	ldr	r3, [pc, #420]	@ (80018d0 <main+0x2b8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <main+0x11c>
 8001730:	f000 fb5e 	bl	8001df0 <Error_Handler>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, pData_RX, UART_RX_SIZE);
 8001734:	2210      	movs	r2, #16
 8001736:	496d      	ldr	r1, [pc, #436]	@ (80018ec <main+0x2d4>)
 8001738:	486d      	ldr	r0, [pc, #436]	@ (80018f0 <main+0x2d8>)
 800173a:	f006 fabd 	bl	8007cb8 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(ADC_CALC_AVG_FLAG)
 800173e:	4b6d      	ldr	r3, [pc, #436]	@ (80018f4 <main+0x2dc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d070      	beq.n	800182a <main+0x212>
	  {
		  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	e01a      	b.n	8001784 <main+0x16c>
		  {
			  SUM[x%3] += ADC_Samples[x];
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4a60      	ldr	r2, [pc, #384]	@ (80018d4 <main+0x2bc>)
 8001752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001756:	b298      	uxth	r0, r3
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	4b67      	ldr	r3, [pc, #412]	@ (80018f8 <main+0x2e0>)
 800175c:	fba3 1302 	umull	r1, r3, r3, r2
 8001760:	0859      	lsrs	r1, r3, #1
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4611      	mov	r1, r2
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <main+0x2e4>)
 8001770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001774:	4611      	mov	r1, r2
 8001776:	4403      	add	r3, r0
 8001778:	4a60      	ldr	r2, [pc, #384]	@ (80018fc <main+0x2e4>)
 800177a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(uint8_t x = 0;x<ADC_BUFFER_SIZE;x++)
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	3301      	adds	r3, #1
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2bef      	cmp	r3, #239	@ 0xef
 8001788:	d9e1      	bls.n	800174e <main+0x136>
		  }

		  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 800178a:	2300      	movs	r3, #0
 800178c:	71bb      	strb	r3, [r7, #6]
 800178e:	e034      	b.n	80017fa <main+0x1e2>
		  {
			  SUM[x] /= (ADC_BUFFER_SIZE/NUM_OF_CHANNELS);
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	4a5a      	ldr	r2, [pc, #360]	@ (80018fc <main+0x2e4>)
 8001794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	4959      	ldr	r1, [pc, #356]	@ (8001900 <main+0x2e8>)
 800179c:	fba1 1202 	umull	r1, r2, r1, r2
 80017a0:	0992      	lsrs	r2, r2, #6
 80017a2:	4956      	ldr	r1, [pc, #344]	@ (80018fc <main+0x2e4>)
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  ADC_Voltages[x] = SUM[x]*ADC_V_Step;
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	4a54      	ldr	r2, [pc, #336]	@ (80018fc <main+0x2e4>)
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001904 <main+0x2ec>
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <main+0x2f0>)
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	edc3 7a00 	vstr	s15, [r3]
			  LUX_Values[x] = Voltage_to_lux(ADC_Voltages[x]);
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001908 <main+0x2f0>)
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	79bc      	ldrb	r4, [r7, #6]
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	f000 f9ab 	bl	8001b38 <Voltage_to_lux>
 80017e2:	eeb0 7a40 	vmov.f32	s14, s0
 80017e6:	eef0 7a60 	vmov.f32	s15, s1
 80017ea:	4a48      	ldr	r2, [pc, #288]	@ (800190c <main+0x2f4>)
 80017ec:	00e3      	lsls	r3, r4, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	ed83 7b00 	vstr	d7, [r3]
		  for(uint8_t x = 0;x<NUM_OF_CHANNELS;x++)
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	3301      	adds	r3, #1
 80017f8:	71bb      	strb	r3, [r7, #6]
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d9c7      	bls.n	8001790 <main+0x178>
		  }
		  ADC_CALC_AVG_FLAG=0;
 8001800:	4b3c      	ldr	r3, [pc, #240]	@ (80018f4 <main+0x2dc>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
		  if(!LCD_SHOW_TYPE)
 8001806:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <main+0x2f8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10c      	bne.n	800182a <main+0x212>
		  {
			  LUX_Difference = LUX_Values[0]-LUX_Values[1];
 8001810:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <main+0x2f4>)
 8001812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001816:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <main+0x2f4>)
 8001818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800181c:	f7fe fd3c 	bl	8000298 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	493b      	ldr	r1, [pc, #236]	@ (8001914 <main+0x2fc>)
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
		  }
	  }
	  if(UART_UPDATE_FLAG && !ADC_CALC_AVG_FLAG && UART_SEND_FLAG)
 800182a:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <main+0x300>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8095 	beq.w	8001960 <main+0x348>
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <main+0x2dc>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 808f 	bne.w	8001960 <main+0x348>
 8001842:	4b36      	ldr	r3, [pc, #216]	@ (800191c <main+0x304>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8089 	beq.w	8001960 <main+0x348>
	  {
		  if(LCD_SHOW_TYPE)
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <main+0x2f8>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d069      	beq.n	800192c <main+0x314>
		  {
			  sprintf(UART_data, "CH1 value = %1.2f at %d ms\r\n",LUX_Values[0],(int)HAL_GetTick());
 8001858:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <main+0x2f4>)
 800185a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800185e:	f000 febd 	bl	80025dc <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	492d      	ldr	r1, [pc, #180]	@ (8001920 <main+0x308>)
 800186c:	482d      	ldr	r0, [pc, #180]	@ (8001924 <main+0x30c>)
 800186e:	f007 f9a1 	bl	8008bb4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 8001872:	482c      	ldr	r0, [pc, #176]	@ (8001924 <main+0x30c>)
 8001874:	f7fe fd04 	bl	8000280 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	2364      	movs	r3, #100	@ 0x64
 800187e:	4929      	ldr	r1, [pc, #164]	@ (8001924 <main+0x30c>)
 8001880:	481b      	ldr	r0, [pc, #108]	@ (80018f0 <main+0x2d8>)
 8001882:	f004 fefd 	bl	8006680 <HAL_UART_Transmit>
			  sprintf(UART_data, "CH2 value = %1.2f at %d ms\r\n",LUX_Values[1],(int)HAL_GetTick());
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <main+0x2f4>)
 8001888:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800188c:	f000 fea6 	bl	80025dc <HAL_GetTick>
 8001890:	4603      	mov	r3, r0
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4622      	mov	r2, r4
 8001896:	462b      	mov	r3, r5
 8001898:	4923      	ldr	r1, [pc, #140]	@ (8001928 <main+0x310>)
 800189a:	4822      	ldr	r0, [pc, #136]	@ (8001924 <main+0x30c>)
 800189c:	f007 f98a 	bl	8008bb4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 80018a0:	4820      	ldr	r0, [pc, #128]	@ (8001924 <main+0x30c>)
 80018a2:	f7fe fced 	bl	8000280 <strlen>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	2364      	movs	r3, #100	@ 0x64
 80018ac:	491d      	ldr	r1, [pc, #116]	@ (8001924 <main+0x30c>)
 80018ae:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <main+0x2d8>)
 80018b0:	f004 fee6 	bl	8006680 <HAL_UART_Transmit>
			  UART_UPDATE_FLAG = 0;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <main+0x300>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e051      	b.n	8001960 <main+0x348>
 80018bc:	20000238 	.word	0x20000238
 80018c0:	0800c448 	.word	0x0800c448
 80018c4:	20000004 	.word	0x20000004
 80018c8:	0800c458 	.word	0x0800c458
 80018cc:	20000024 	.word	0x20000024
 80018d0:	20000534 	.word	0x20000534
 80018d4:	200002e8 	.word	0x200002e8
 80018d8:	0800c464 	.word	0x0800c464
 80018dc:	20000598 	.word	0x20000598
 80018e0:	0800c470 	.word	0x0800c470
 80018e4:	2000054c 	.word	0x2000054c
 80018e8:	0800c480 	.word	0x0800c480
 80018ec:	200004fc 	.word	0x200004fc
 80018f0:	2000066c 	.word	0x2000066c
 80018f4:	20000537 	.word	0x20000537
 80018f8:	aaaaaaab 	.word	0xaaaaaaab
 80018fc:	200004f0 	.word	0x200004f0
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	3a53406b 	.word	0x3a53406b
 8001908:	200004c8 	.word	0x200004c8
 800190c:	200004d8 	.word	0x200004d8
 8001910:	20000000 	.word	0x20000000
 8001914:	200004e8 	.word	0x200004e8
 8001918:	20000536 	.word	0x20000536
 800191c:	20000539 	.word	0x20000539
 8001920:	0800c490 	.word	0x0800c490
 8001924:	2000050c 	.word	0x2000050c
 8001928:	0800c4b0 	.word	0x0800c4b0
		  }
		  else
		  {
			  sprintf(UART_data, "CH1-CH2 value = %1.2f at %d ms\r\n",LUX_Difference,(int)HAL_GetTick());
 800192c:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <main+0x434>)
 800192e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001932:	f000 fe53 	bl	80025dc <HAL_GetTick>
 8001936:	4603      	mov	r3, r0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4622      	mov	r2, r4
 800193c:	462b      	mov	r3, r5
 800193e:	4944      	ldr	r1, [pc, #272]	@ (8001a50 <main+0x438>)
 8001940:	4844      	ldr	r0, [pc, #272]	@ (8001a54 <main+0x43c>)
 8001942:	f007 f937 	bl	8008bb4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UART_data, strlen(UART_data), 100);
 8001946:	4843      	ldr	r0, [pc, #268]	@ (8001a54 <main+0x43c>)
 8001948:	f7fe fc9a 	bl	8000280 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	4940      	ldr	r1, [pc, #256]	@ (8001a54 <main+0x43c>)
 8001954:	4840      	ldr	r0, [pc, #256]	@ (8001a58 <main+0x440>)
 8001956:	f004 fe93 	bl	8006680 <HAL_UART_Transmit>
			  UART_UPDATE_FLAG = 0;
 800195a:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <main+0x444>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(LCD_SHOW_FLAG && !ADC_CALC_AVG_FLAG)
 8001960:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <main+0x448>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f43f aee9 	beq.w	800173e <main+0x126>
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <main+0x44c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f aee3 	bne.w	800173e <main+0x126>
	  {
		  if(LCD_SHOW_TYPE)
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <main+0x450>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01e      	beq.n	80019c0 <main+0x3a8>
		  {
			  sprintf((char*)LCD_top_text,"CH1=%1.1f lx    ",LUX_Values[0]);
 8001982:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <main+0x454>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	4939      	ldr	r1, [pc, #228]	@ (8001a70 <main+0x458>)
 800198a:	483a      	ldr	r0, [pc, #232]	@ (8001a74 <main+0x45c>)
 800198c:	f007 f912 	bl	8008bb4 <siprintf>
			  LCD_SEND_COMMAND(LCD_RETURN_HOME);
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff fb81 	bl	8001098 <LCD_SEND_COMMAND>
			  LCD_SEND_STR((char*)LCD_top_text, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	4836      	ldr	r0, [pc, #216]	@ (8001a74 <main+0x45c>)
 800199c:	f7ff fc08 	bl	80011b0 <LCD_SEND_STR>
			  sprintf((char*)LCD_bottom_text,"CH2=%1.1f lx    ",LUX_Values[1]);
 80019a0:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <main+0x454>)
 80019a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019a6:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <main+0x460>)
 80019a8:	4834      	ldr	r0, [pc, #208]	@ (8001a7c <main+0x464>)
 80019aa:	f007 f903 	bl	8008bb4 <siprintf>
			  LCD_SEND_STR((char*)LCD_bottom_text, 0, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2100      	movs	r1, #0
 80019b2:	4832      	ldr	r0, [pc, #200]	@ (8001a7c <main+0x464>)
 80019b4:	f7ff fbfc 	bl	80011b0 <LCD_SEND_STR>
			  LCD_SHOW_FLAG = 0;
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <main+0x448>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e6be      	b.n	800173e <main+0x126>
		  }
		  else
		  {
			  if(LCD_CLEAR_ONCE)
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <main+0x468>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d026      	beq.n	8001a18 <main+0x400>
			  {
				  LCD_CLEAR_DRAM();
 80019ca:	f7ff fbb0 	bl	800112e <LCD_CLEAR_DRAM>
				  LCD_CLEAR_ONCE = 0;
 80019ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <main+0x468>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
				  sprintf((char*)LCD_top_text,"DIFFERENCE");
 80019d4:	492b      	ldr	r1, [pc, #172]	@ (8001a84 <main+0x46c>)
 80019d6:	4827      	ldr	r0, [pc, #156]	@ (8001a74 <main+0x45c>)
 80019d8:	f007 f8ec 	bl	8008bb4 <siprintf>
				  LCD_SEND_STR((char*)LCD_top_text, 3, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2103      	movs	r1, #3
 80019e0:	4824      	ldr	r0, [pc, #144]	@ (8001a74 <main+0x45c>)
 80019e2:	f7ff fbe5 	bl	80011b0 <LCD_SEND_STR>
				  sprintf((char*)LCD_bottom_text,"%1.1f lx",LUX_Difference);
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <main+0x434>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	4926      	ldr	r1, [pc, #152]	@ (8001a88 <main+0x470>)
 80019ee:	4823      	ldr	r0, [pc, #140]	@ (8001a7c <main+0x464>)
 80019f0:	f007 f8e0 	bl	8008bb4 <siprintf>
				  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 80019f4:	4821      	ldr	r0, [pc, #132]	@ (8001a7c <main+0x464>)
 80019f6:	f7fe fc43 	bl	8000280 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f1c3 0310 	rsb	r3, r3, #16
 8001a00:	0fda      	lsrs	r2, r3, #31
 8001a02:	4413      	add	r3, r2
 8001a04:	105b      	asrs	r3, r3, #1
 8001a06:	2201      	movs	r2, #1
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481c      	ldr	r0, [pc, #112]	@ (8001a7c <main+0x464>)
 8001a0c:	f7ff fbd0 	bl	80011b0 <LCD_SEND_STR>
				  LCD_SHOW_FLAG = 0;
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <main+0x448>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e692      	b.n	800173e <main+0x126>
			  }
			  else
			  {
				  sprintf((char*)LCD_bottom_text,"   %1.1f lx   ",LUX_Difference);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <main+0x434>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	491b      	ldr	r1, [pc, #108]	@ (8001a8c <main+0x474>)
 8001a20:	4816      	ldr	r0, [pc, #88]	@ (8001a7c <main+0x464>)
 8001a22:	f007 f8c7 	bl	8008bb4 <siprintf>
				  LCD_SEND_STR((char*)LCD_bottom_text, ((16-(int)strlen(LCD_bottom_text))/2), 1);
 8001a26:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <main+0x464>)
 8001a28:	f7fe fc2a 	bl	8000280 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f1c3 0310 	rsb	r3, r3, #16
 8001a32:	0fda      	lsrs	r2, r3, #31
 8001a34:	4413      	add	r3, r2
 8001a36:	105b      	asrs	r3, r3, #1
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480f      	ldr	r0, [pc, #60]	@ (8001a7c <main+0x464>)
 8001a3e:	f7ff fbb7 	bl	80011b0 <LCD_SEND_STR>
				  LCD_SHOW_FLAG = 0;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <main+0x448>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	  if(ADC_CALC_AVG_FLAG)
 8001a48:	e679      	b.n	800173e <main+0x126>
 8001a4a:	bf00      	nop
 8001a4c:	200004e8 	.word	0x200004e8
 8001a50:	0800c4d0 	.word	0x0800c4d0
 8001a54:	2000050c 	.word	0x2000050c
 8001a58:	2000066c 	.word	0x2000066c
 8001a5c:	20000536 	.word	0x20000536
 8001a60:	20000535 	.word	0x20000535
 8001a64:	20000537 	.word	0x20000537
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	200004d8 	.word	0x200004d8
 8001a70:	0800c4f4 	.word	0x0800c4f4
 8001a74:	20000004 	.word	0x20000004
 8001a78:	0800c508 	.word	0x0800c508
 8001a7c:	20000024 	.word	0x20000024
 8001a80:	20000538 	.word	0x20000538
 8001a84:	0800c51c 	.word	0x0800c51c
 8001a88:	0800c528 	.word	0x0800c528
 8001a8c:	0800c534 	.word	0x0800c534

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	@ 0x58
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2244      	movs	r2, #68	@ 0x44
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 f8eb 	bl	8008c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ab2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ab6:	f002 ff09 	bl	80048cc <HAL_PWREx_ControlVoltageScaling>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ac0:	f000 f996 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001acc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001aea:	2308      	movs	r3, #8
 8001aec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 ff40 	bl	8004978 <HAL_RCC_OscConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001afe:	f000 f977 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b02:	230f      	movs	r3, #15
 8001b04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b06:	2303      	movs	r3, #3
 8001b08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fb40 	bl	80051a0 <HAL_RCC_ClockConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b26:	f000 f963 	bl	8001df0 <Error_Handler>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3758      	adds	r7, #88	@ 0x58
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	0000      	movs	r0, r0
 8001b34:	0000      	movs	r0, r0
	...

08001b38 <Voltage_to_lux>:
//	{
//
//	}

	double Voltage_to_lux(float Vadc)
	{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
		// Vdda maitinimas operacinio Vadc nuskaityta isejimo reiksme
		volatile  double Current=0;
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		static double LUX=0;

		//GAIN RES 820 k DIODE_COEF 2.5 e9, galima rodiklius suprastinti per 3
		Current = Vadc/GAIN_RESISTANCE;
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001ba8 <Voltage_to_lux+0x70>
 8001b56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b5a:	ee16 0a90 	vmov	r0, s13
 8001b5e:	f7fe fcfb 	bl	8000558 <__aeabi_f2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c7 2302 	strd	r2, r3, [r7, #8]
		LUX = (double)(DIODE_coefficient*Current);
 8001b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ba0 <Voltage_to_lux+0x68>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fd48 	bl	8000608 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	490b      	ldr	r1, [pc, #44]	@ (8001bac <Voltage_to_lux+0x74>)
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]
		return LUX;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <Voltage_to_lux+0x74>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	ec43 2b17 	vmov	d7, r2, r3
	}
 8001b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b90:	eef0 0a67 	vmov.f32	s1, s15
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	414312d0 	.word	0x414312d0
 8001ba8:	444d0000 	.word	0x444d0000
 8001bac:	20000540 	.word	0x20000540

08001bb0 <DELAY_US>:

	void DELAY_US(uint16_t TIME_US)
	{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	    uint32_t old_timer_value = TIM6->CNT;
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <DELAY_US+0x58>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	60fb      	str	r3, [r7, #12]
	    uint32_t target_time = (old_timer_value + TIME_US) % (TIM6->ARR + 1);
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a10      	ldr	r2, [pc, #64]	@ (8001c08 <DELAY_US+0x58>)
 8001bc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bca:	3201      	adds	r2, #1
 8001bcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bd0:	fb01 f202 	mul.w	r2, r1, r2
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]

	    if (target_time < old_timer_value)  // Handle timer overflow
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d205      	bcs.n	8001bec <DELAY_US+0x3c>
	    {
	        while (TIM6->CNT >= old_timer_value);  // Wait for overflow
 8001be0:	bf00      	nop
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <DELAY_US+0x58>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d9fa      	bls.n	8001be2 <DELAY_US+0x32>
	    }

	    while (TIM6->CNT < target_time);  // Wait until target time is reached
 8001bec:	bf00      	nop
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <DELAY_US+0x58>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8fa      	bhi.n	8001bee <DELAY_US+0x3e>
	}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40001000 	.word	0x40001000

08001c0c <HAL_TIM_PeriodElapsedCallback>:
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if(htim == &htim15)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d124      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		UART_UPDATE_FLAG = 1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
		ADC_CALC_AVG_FLAG = 1;
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
		if(LCD_Delay_cnt<LCD_UPDATE_CNT) LCD_Delay_cnt++;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d807      	bhi.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c3e:	701a      	strb	r2, [r3, #0]
		{
			LCD_Delay_cnt %=LCD_UPDATE_CNT;
			LCD_SHOW_FLAG = 1;
		}
	}
	}
 8001c40:	e011      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x5a>
			LCD_Delay_cnt %=LCD_UPDATE_CNT;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c4e:	08d9      	lsrs	r1, r3, #3
 8001c50:	460b      	mov	r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c5e:	701a      	strb	r2, [r3, #0]
			LCD_SHOW_FLAG = 1;
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
	}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000598 	.word	0x20000598
 8001c78:	20000536 	.word	0x20000536
 8001c7c:	20000537 	.word	0x20000537
 8001c80:	2000053a 	.word	0x2000053a
 8001c84:	cccccccd 	.word	0xcccccccd
 8001c88:	20000535 	.word	0x20000535

08001c8c <HAL_GPIO_EXTI_Callback>:
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == B1_Pin)
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c9c:	d117      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x42>
		{
			LCD_SHOW_FLAG = 1;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
			ADC_CALC_AVG_FLAG = 1;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_GPIO_EXTI_Callback+0x90>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
			UART_UPDATE_FLAG = 1;
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_GPIO_EXTI_Callback+0x94>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
			LCD_CLEAR_ONCE = 1;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_GPIO_EXTI_Callback+0x98>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
			if(LCD_SHOW_TYPE) LCD_SHOW_TYPE = SHOW_DIFFERENCE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_EXTI_Callback+0x42>
			else LCD_SHOW_TYPE = SHOW_ABSOLUTE;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		}
		for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x56>
		{
			UART_data[x] = '\0';
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	54d1      	strb	r1, [r2, r3]
		for(uint8_t x = 0;x<UART_BUFFER_SIZE;x++)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b27      	cmp	r3, #39	@ 0x27
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x48>
		}
		for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73bb      	strb	r3, [r7, #14]
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x78>
		{
			LCD_top_text[x] = ' ';
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d30 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	54d1      	strb	r1, [r2, r3]
			LCD_bottom_text[x] = ' ';
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	54d1      	strb	r1, [r2, r3]
		for(uint8_t x = 0;x<LCD_BUFFER_SIZE;x++)
 8001cfe:	7bbb      	ldrb	r3, [r7, #14]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73bb      	strb	r3, [r7, #14]
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	2b1f      	cmp	r3, #31
 8001d08:	d9f1      	bls.n	8001cee <HAL_GPIO_EXTI_Callback+0x62>
		}
	}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20000535 	.word	0x20000535
 8001d1c:	20000537 	.word	0x20000537
 8001d20:	20000536 	.word	0x20000536
 8001d24:	20000538 	.word	0x20000538
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	2000050c 	.word	0x2000050c
 8001d30:	20000004 	.word	0x20000004
 8001d34:	20000024 	.word	0x20000024

08001d38 <HAL_UARTEx_RxEventCallback>:
	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
	{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
		char Start_string[] = "Start\r\n";
 8001d44:	4a25      	ldr	r2, [pc, #148]	@ (8001ddc <HAL_UARTEx_RxEventCallback+0xa4>)
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4e:	e883 0003 	stmia.w	r3, {r0, r1}
		char Stop_string[] = "Stop\r\n";
 8001d52:	4a23      	ldr	r2, [pc, #140]	@ (8001de0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d5c:	6018      	str	r0, [r3, #0]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	8019      	strh	r1, [r3, #0]
 8001d62:	3302      	adds	r3, #2
 8001d64:	0c0a      	lsrs	r2, r1, #16
 8001d66:	701a      	strb	r2, [r3, #0]
		if(huart == &huart2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <HAL_UARTEx_RxEventCallback+0xac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d12c      	bne.n	8001dca <HAL_UARTEx_RxEventCallback+0x92>
		{
			if(Size == strlen(Start_string) && strncmp(Start_string,(char*)pData_RX,Size)==0)
 8001d70:	887c      	ldrh	r4, [r7, #2]
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fa82 	bl	8000280 <strlen>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	d10d      	bne.n	8001d9e <HAL_UARTEx_RxEventCallback+0x66>
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4917      	ldr	r1, [pc, #92]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 ff7d 	bl	8008c8a <strncmp>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_UARTEx_RxEventCallback+0x66>
			{
				UART_SEND_FLAG = 1;
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_UARTEx_RxEventCallback+0xb4>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e015      	b.n	8001dca <HAL_UARTEx_RxEventCallback+0x92>
			}
			else if(Size == strlen(Stop_string) && strncmp(Stop_string,(char*)pData_RX,Size)==0)
 8001d9e:	887c      	ldrh	r4, [r7, #2]
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fa6b 	bl	8000280 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	429c      	cmp	r4, r3
 8001dae:	d10c      	bne.n	8001dca <HAL_UARTEx_RxEventCallback+0x92>
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 ff66 	bl	8008c8a <strncmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <HAL_UARTEx_RxEventCallback+0x92>
			{
				UART_SEND_FLAG = 0;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_UARTEx_RxEventCallback+0xb4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, pData_RX, UART_RX_SIZE);// See more Start and stop flags
 8001dca:	2210      	movs	r2, #16
 8001dcc:	4906      	ldr	r1, [pc, #24]	@ (8001de8 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <HAL_UARTEx_RxEventCallback+0xac>)
 8001dd0:	f005 ff72 	bl	8007cb8 <HAL_UARTEx_ReceiveToIdle_IT>
	}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	0800c544 	.word	0x0800c544
 8001de0:	0800c54c 	.word	0x0800c54c
 8001de4:	2000066c 	.word	0x2000066c
 8001de8:	200004fc 	.word	0x200004fc
 8001dec:	20000539 	.word	0x20000539

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LCD_Init();
 8001df4:	f7ff f9c0 	bl	8001178 <LCD_Init>
	HAL_Delay(2);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f000 fbfb 	bl	80025f4 <HAL_Delay>
	LCD_SEND_STR(LCD_top_text,0,0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <Error_Handler+0x38>)
 8001e04:	f7ff f9d4 	bl	80011b0 <LCD_SEND_STR>
	LCD_SEND_STR(LCD_bottom_text,0,1);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <Error_Handler+0x3c>)
 8001e0e:	f7ff f9cf 	bl	80011b0 <LCD_SEND_STR>
	while (1)
	{
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e16:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <Error_Handler+0x40>)
 8001e18:	f002 fd18 	bl	800484c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001e1c:	20c8      	movs	r0, #200	@ 0xc8
 8001e1e:	f000 fbe9 	bl	80025f4 <HAL_Delay>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e22:	bf00      	nop
 8001e24:	e7f5      	b.n	8001e12 <Error_Handler+0x22>
 8001e26:	bf00      	nop
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	20000024 	.word	0x20000024
 8001e30:	48000400 	.word	0x48000400

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a08      	ldr	r2, [pc, #32]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_MspInit+0x44>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 fb6f 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA1_Channel1_IRQHandler+0x10>)
 8001ee2:	f002 fa42 	bl	800436a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002a0 	.word	0x200002a0

08001ef0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <ADC1_IRQHandler+0x10>)
 8001ef6:	f000 ff7f 	bl	8002df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000238 	.word	0x20000238

08001f04 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001f0a:	f003 ffd3 	bl	8005eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000598 	.word	0x20000598

08001f18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <USART1_IRQHandler+0x10>)
 8001f1e:	f004 fc39 	bl	8006794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200005e4 	.word	0x200005e4

08001f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <USART2_IRQHandler+0x10>)
 8001f32:	f004 fc2f 	bl	8006794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000066c 	.word	0x2000066c

08001f40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f48:	f002 fc9a 	bl	8004880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_kill>:

int _kill(int pid, int sig)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f6a:	f006 feeb 	bl	8008d44 <__errno>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2216      	movs	r2, #22
 8001f72:	601a      	str	r2, [r3, #0]
  return -1;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_exit>:

void _exit (int status)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffe7 	bl	8001f60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f92:	bf00      	nop
 8001f94:	e7fd      	b.n	8001f92 <_exit+0x12>

08001f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e00a      	b.n	8001fbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa8:	f3af 8000 	nop.w
 8001fac:	4601      	mov	r1, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	60ba      	str	r2, [r7, #8]
 8001fb4:	b2ca      	uxtb	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbf0      	blt.n	8001fa8 <_read+0x12>
  }

  return len;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e009      	b.n	8001ff6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	60ba      	str	r2, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbf1      	blt.n	8001fe2 <_write+0x12>
  }
  return len;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_close>:

int _close(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002030:	605a      	str	r2, [r3, #4]
  return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_isatty>:

int _isatty(int file)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a14      	ldr	r2, [pc, #80]	@ (80020cc <_sbrk+0x5c>)
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <_sbrk+0x60>)
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002084:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <_sbrk+0x64>)
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <_sbrk+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a0:	f006 fe50 	bl	8008d44 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20028000 	.word	0x20028000
 80020d0:	00000400 	.word	0x00000400
 80020d4:	20000548 	.word	0x20000548
 80020d8:	20000848 	.word	0x20000848

080020dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_TIM6_Init+0x64>)
 8002112:	4a15      	ldr	r2, [pc, #84]	@ (8002168 <MX_TIM6_Init+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20-1;
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <MX_TIM6_Init+0x64>)
 8002118:	2213      	movs	r2, #19
 800211a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_TIM6_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2500-1;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_TIM6_Init+0x64>)
 8002124:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002128:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_TIM6_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_TIM6_Init+0x64>)
 8002132:	f003 fdb7 	bl	8005ca4 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800213c:	f7ff fe58 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002140:	2320      	movs	r3, #32
 8002142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM6_Init+0x64>)
 800214e:	f004 f9bd 	bl	80064cc <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002158:	f7ff fe4a 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000054c 	.word	0x2000054c
 8002168:	40001000 	.word	0x40001000

0800216c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <MX_TIM15_Init+0x9c>)
 800218c:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <MX_TIM15_Init+0xa0>)
 800218e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2000-1;
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <MX_TIM15_Init+0x9c>)
 8002192:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002196:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <MX_TIM15_Init+0x9c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2000-1;
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021a0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80021a4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80021ac:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80021b8:	4813      	ldr	r0, [pc, #76]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021ba:	f003 fd73 	bl	8005ca4 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80021c4:	f7ff fe14 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021d6:	f003 ff74 	bl	80060c2 <HAL_TIM_ConfigClockSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80021e0:	f7ff fe06 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_TIM15_Init+0x9c>)
 80021f2:	f004 f96b 	bl	80064cc <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80021fc:	f7ff fdf8 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000598 	.word	0x20000598
 800220c:	40014000 	.word	0x40014000

08002210 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <HAL_TIM_Base_MspInit+0x68>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10c      	bne.n	800223c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	4a15      	ldr	r2, [pc, #84]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6593      	str	r3, [r2, #88]	@ 0x58
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800223a:	e018      	b.n	800226e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM15)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0f      	ldr	r2, [pc, #60]	@ (8002280 <HAL_TIM_Base_MspInit+0x70>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224a:	4a0c      	ldr	r2, [pc, #48]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6613      	str	r3, [r2, #96]	@ 0x60
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_TIM_Base_MspInit+0x6c>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2102      	movs	r1, #2
 8002262:	2018      	movs	r0, #24
 8002264:	f001 feb3 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002268:	2018      	movs	r0, #24
 800226a:	f001 fecc 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40001000 	.word	0x40001000
 800227c:	40021000 	.word	0x40021000
 8002280:	40014000 	.word	0x40014000

08002284 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 800228a:	4a15      	ldr	r2, [pc, #84]	@ (80022e0 <MX_USART1_UART_Init+0x5c>)
 800228c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	@ (80022dc <MX_USART1_UART_Init+0x58>)
 80022c8:	f004 f98c 	bl	80065e4 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022d2:	f7ff fd8d 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200005e4 	.word	0x200005e4
 80022e0:	40013800 	.word	0x40013800

080022e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_USART2_UART_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <MX_USART2_UART_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <MX_USART2_UART_Init+0x58>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <MX_USART2_UART_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <MX_USART2_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <MX_USART2_UART_Init+0x58>)
 8002328:	f004 f95c 	bl	80065e4 <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002332:	f7ff fd5d 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000066c 	.word	0x2000066c
 8002340:	40004400 	.word	0x40004400

08002344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0a6      	sub	sp, #152	@ 0x98
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2268      	movs	r2, #104	@ 0x68
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f006 fc88 	bl	8008c7a <memset>
  if(uartHandle->Instance==USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4b      	ldr	r2, [pc, #300]	@ (800249c <HAL_UART_MspInit+0x158>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d145      	bne.n	8002400 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f931 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800238c:	f7ff fd30 	bl	8001df0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002390:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	4a42      	ldr	r2, [pc, #264]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239a:	6613      	str	r3, [r2, #96]	@ 0x60
 800239c:	4b40      	ldr	r3, [pc, #256]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 800239e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	4a3c      	ldr	r2, [pc, #240]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b4:	4b3a      	ldr	r3, [pc, #232]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ea:	f002 f89d 	bl	8004528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2025      	movs	r0, #37	@ 0x25
 80023f4:	f001 fdeb 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f8:	2025      	movs	r0, #37	@ 0x25
 80023fa:	f001 fe04 	bl	8004006 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023fe:	e048      	b.n	8002492 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <HAL_UART_MspInit+0x160>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d143      	bne.n	8002492 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800240a:	2302      	movs	r3, #2
 800240c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800240e:	2300      	movs	r3, #0
 8002410:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4618      	mov	r0, r3
 8002418:	f003 f8e6 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002422:	f7ff fce5 	bl	8001df0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242a:	4a1d      	ldr	r2, [pc, #116]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_UART_MspInit+0x15c>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002456:	230c      	movs	r3, #12
 8002458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246e:	2307      	movs	r3, #7
 8002470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247e:	f002 f853 	bl	8004528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	2026      	movs	r0, #38	@ 0x26
 8002488:	f001 fda1 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800248c:	2026      	movs	r0, #38	@ 0x26
 800248e:	f001 fdba 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3798      	adds	r7, #152	@ 0x98
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40013800 	.word	0x40013800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40004400 	.word	0x40004400

080024a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ac:	f7ff fe16 	bl	80020dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480c      	ldr	r0, [pc, #48]	@ (80024e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490d      	ldr	r1, [pc, #52]	@ (80024e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0a      	ldr	r4, [pc, #40]	@ (80024f4 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d6:	f006 fc3b 	bl	8008d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024da:	f7ff f89d 	bl	8001618 <main>

080024de <LoopForever>:

LoopForever:
    b LoopForever
 80024de:	e7fe      	b.n	80024de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024e0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80024ec:	0800c9d8 	.word	0x0800c9d8
  ldr r2, =_sbss
 80024f0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80024f4:	20000844 	.word	0x20000844

080024f8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <CAN1_RX0_IRQHandler>
	...

080024fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_Init+0x3c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_Init+0x3c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002512:	2003      	movs	r0, #3
 8002514:	f001 fd50 	bl	8003fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002518:	2000      	movs	r0, #0
 800251a:	f000 f80f 	bl	800253c <HAL_InitTick>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	e001      	b.n	800252e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800252a:	f7ff fc83 	bl	8001e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800252e:	79fb      	ldrb	r3, [r7, #7]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_InitTick+0x6c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d023      	beq.n	8002598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_InitTick+0x70>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_InitTick+0x6c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fd5b 	bl	8004022 <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d809      	bhi.n	800258c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f001 fd25 	bl	8003fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002584:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <HAL_InitTick+0x74>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e007      	b.n	800259c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e004      	b.n	800259c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e001      	b.n	800259c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000004c 	.word	0x2000004c
 80025ac:	20000044 	.word	0x20000044
 80025b0:	20000048 	.word	0x20000048

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2000004c 	.word	0x2000004c
 80025d8:	200006f4 	.word	0x200006f4

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200006f4 	.word	0x200006f4

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000004c 	.word	0x2000004c

0800263c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3360      	adds	r3, #96	@ 0x60
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <LL_ADC_SetOffset+0x44>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	03fff000 	.word	0x03fff000

080026ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3360      	adds	r3, #96	@ 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3360      	adds	r3, #96	@ 0x60
 8002728:	461a      	mov	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	615a      	str	r2, [r3, #20]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800279a:	b480      	push	{r7}
 800279c:	b087      	sub	sp, #28
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3330      	adds	r3, #48	@ 0x30
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	211f      	movs	r1, #31
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	f003 011f 	and.w	r1, r3, #31
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3314      	adds	r3, #20
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0e5b      	lsrs	r3, r3, #25
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0d1b      	lsrs	r3, r3, #20
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	2107      	movs	r1, #7
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	0d1b      	lsrs	r3, r3, #20
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0318 	and.w	r3, r3, #24
 8002892:	4908      	ldr	r1, [pc, #32]	@ (80028b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002894:	40d9      	lsrs	r1, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	400b      	ands	r3, r1
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	431a      	orrs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	0007ffff 	.word	0x0007ffff

080028b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6093      	str	r3, [r2, #8]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002914:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002918:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002940:	d101      	bne.n	8002946 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800298c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002990:	f043 0202 	orr.w	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsEnabled+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsEnabled+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d101      	bne.n	80029e2 <LL_ADC_IsDisableOngoing+0x18>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_ADC_IsDisableOngoing+0x1a>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d101      	bne.n	8002a56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e129      	b.n	8002cd2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fe fc4f 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff19 	bl	80028dc <LL_ADC_IsDeepPowerDownEnabled>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff feff 	bl	80028b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff34 	bl	800292c <LL_ADC_IsInternalRegulatorEnabled>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff18 	bl	8002904 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad4:	4b81      	ldr	r3, [pc, #516]	@ (8002cdc <HAL_ADC_Init+0x278>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	4a81      	ldr	r2, [pc, #516]	@ (8002ce0 <HAL_ADC_Init+0x27c>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ae8:	e002      	b.n	8002af0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f9      	bne.n	8002aea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff16 	bl	800292c <LL_ADC_IsInternalRegulatorEnabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff76 	bl	8002a18 <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80c2 	bne.w	8002cc0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 80be 	bne.w	8002cc0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff23 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b64:	485f      	ldr	r0, [pc, #380]	@ (8002ce4 <HAL_ADC_Init+0x280>)
 8002b66:	f7ff ff1d 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4619      	mov	r1, r3
 8002b76:	485c      	ldr	r0, [pc, #368]	@ (8002ce8 <HAL_ADC_Init+0x284>)
 8002b78:	f7ff fd60 	bl	800263c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e5b      	ldrb	r3, [r3, #25]
 8002b80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d106      	bne.n	8002bb8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	045b      	lsls	r3, r3, #17
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_ADC_Init+0x288>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff26 	bl	8002a3e <LL_ADC_INJ_IsConversionOngoing>
 8002bf2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d140      	bne.n	8002c7c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d13d      	bne.n	8002c7c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e1b      	ldrb	r3, [r3, #24]
 8002c08:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c0a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c22:	f023 0306 	bic.w	r3, r3, #6
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d118      	bne.n	8002c6c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c50:	4311      	orrs	r1, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	e007      	b.n	8002c7c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	f023 010f 	bic.w	r1, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9c:	e007      	b.n	8002cae <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 020f 	bic.w	r2, r2, #15
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cbe:	e007      	b.n	8002cd0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000044 	.word	0x20000044
 8002ce0:	053e2d63 	.word	0x053e2d63
 8002ce4:	50040000 	.word	0x50040000
 8002ce8:	50040300 	.word	0x50040300
 8002cec:	fff0c007 	.word	0xfff0c007

08002cf0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fe89 	bl	8002a18 <LL_ADC_REG_IsConversionOngoing>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d167      	bne.n	8002ddc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Start_DMA+0x2a>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e063      	b.n	8002de2 <HAL_ADC_Start_DMA+0xf2>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fe40 	bl	80039a8 <ADC_Enable>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d14f      	bne.n	8002dd2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	f023 0206 	bic.w	r2, r3, #6
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d5e:	e002      	b.n	8002d66 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6a:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <HAL_ADC_Start_DMA+0xfc>)
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_ADC_Start_DMA+0x100>)
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_ADC_Start_DMA+0x104>)
 8002d7c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	221c      	movs	r2, #28
 8002d84:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0210 	orr.w	r2, r2, #16
 8002d9c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3340      	adds	r3, #64	@ 0x40
 8002db8:	4619      	mov	r1, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f001 f9f5 	bl	80041ac <HAL_DMA_Start_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe10 	bl	80029f0 <LL_ADC_REG_StartConversion>
 8002dd0:	e006      	b.n	8002de0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002dda:	e001      	b.n	8002de0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08003b73 	.word	0x08003b73
 8002df0:	08003c4b 	.word	0x08003c4b
 8002df4:	08003c67 	.word	0x08003c67

08002df8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x56>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 ffdf 	bl	8003e04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_IRQHandler+0x6a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05e      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d059      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fc6e 	bl	8002774 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03e      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d135      	bne.n	8002f1c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d12e      	bne.n	8002f1c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fda8 	bl	8002a18 <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11a      	bne.n	8002f04 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 020c 	bic.w	r2, r2, #12
 8002edc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d112      	bne.n	8002f1c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f02:	e00b      	b.n	8002f1c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f08:	f043 0210 	orr.w	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f91f 	bl	8003160 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	220c      	movs	r2, #12
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_IRQHandler+0x146>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d072      	beq.n	800302e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06d      	beq.n	800302e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fc3f 	bl	80027f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f74:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fbfa 	bl	8002774 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f80:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d047      	beq.n	8003020 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_ADC_IRQHandler+0x1b2>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03f      	beq.n	8003020 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d13a      	bne.n	8003020 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b40      	cmp	r3, #64	@ 0x40
 8002fb6:	d133      	bne.n	8003020 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d12e      	bne.n	8003020 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fd39 	bl	8002a3e <LL_ADC_INJ_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11a      	bne.n	8003008 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fe0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d112      	bne.n	8003020 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	@ 0x58
 8003006:	e00b      	b.n	8003020 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fec7 	bl	8003db4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2260      	movs	r2, #96	@ 0x60
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d011      	beq.n	800305c <HAL_ADC_IRQHandler+0x264>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003046:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f89a 	bl	8003188 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <HAL_ADC_IRQHandler+0x294>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fead 	bl	8003ddc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_ADC_IRQHandler+0x2c4>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fe9f 	bl	8003df0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02a      	beq.n	800311c <HAL_ADC_IRQHandler+0x324>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d025      	beq.n	800311c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80030d8:	2301      	movs	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e008      	b.n	80030f0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10e      	bne.n	8003114 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f844 	bl	800319c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2210      	movs	r2, #16
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <HAL_ADC_IRQHandler+0x360>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f043 0208 	orr.w	r2, r3, #8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fe38 	bl	8003dc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0b6      	sub	sp, #216	@ 0xd8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x22>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e3d5      	b.n	800397e <HAL_ADC_ConfigChannel+0x7ce>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fc1a 	bl	8002a18 <LL_ADC_REG_IsConversionOngoing>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 83ba 	bne.w	8003960 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d824      	bhi.n	8003246 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	3b02      	subs	r3, #2
 8003202:	2b03      	cmp	r3, #3
 8003204:	d81b      	bhi.n	800323e <HAL_ADC_ConfigChannel+0x8e>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <HAL_ADC_ConfigChannel+0x5c>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800321d 	.word	0x0800321d
 8003210:	08003225 	.word	0x08003225
 8003214:	0800322d 	.word	0x0800322d
 8003218:	08003235 	.word	0x08003235
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800321c:	230c      	movs	r3, #12
 800321e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003222:	e010      	b.n	8003246 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003224:	2312      	movs	r3, #18
 8003226:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800322a:	e00c      	b.n	8003246 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800322c:	2318      	movs	r3, #24
 800322e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003232:	e008      	b.n	8003246 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800323e:	2306      	movs	r3, #6
 8003240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003244:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003254:	f7ff faa1 	bl	800279a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fbdb 	bl	8002a18 <LL_ADC_REG_IsConversionOngoing>
 8003262:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fbe7 	bl	8002a3e <LL_ADC_INJ_IsConversionOngoing>
 8003270:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 81bf 	bne.w	80035fc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800327e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 81ba 	bne.w	80035fc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003290:	d10f      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	4619      	mov	r1, r3
 800329e:	f7ff fabb 	bl	8002818 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fa4f 	bl	800274e <LL_ADC_SetSamplingTimeCommonConfig>
 80032b0:	e00e      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	461a      	mov	r2, r3
 80032c0:	f7ff faaa 	bl	8002818 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fa3f 	bl	800274e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d00a      	beq.n	8003308 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003302:	f7ff f9cf 	bl	80026a4 <LL_ADC_SetOffset>
 8003306:	e179      	b.n	80035fc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f9ec 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x184>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9e1 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	0e9b      	lsrs	r3, r3, #26
 800332e:	f003 021f 	and.w	r2, r3, #31
 8003332:	e01e      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1c2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f9d6 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800335a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003362:	2320      	movs	r3, #32
 8003364:	e004      	b.n	8003370 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003366:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_ADC_ConfigChannel+0x1da>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	e018      	b.n	80033bc <HAL_ADC_ConfigChannel+0x20c>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800339e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80033b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f9a5 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f989 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x24a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f97e 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80033f0:	4603      	mov	r3, r0
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	e01e      	b.n	8003438 <HAL_ADC_ConfigChannel+0x288>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f973 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800341c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003420:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e004      	b.n	8003436 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800342c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x2a0>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	e018      	b.n	8003482 <HAL_ADC_ConfigChannel+0x2d2>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800346c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e004      	b.n	8003482 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003482:	429a      	cmp	r2, r3
 8003484:	d106      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f942 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f926 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x310>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2102      	movs	r1, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f91b 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	f003 021f 	and.w	r2, r3, #31
 80034be:	e01e      	b.n	80034fe <HAL_ADC_ConfigChannel+0x34e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f910 	bl	80026ec <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80034de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e004      	b.n	80034fc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x366>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	e014      	b.n	8003540 <HAL_ADC_ConfigChannel+0x390>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800352a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e004      	b.n	8003540 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003540:	429a      	cmp	r2, r3
 8003542:	d106      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2200      	movs	r2, #0
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff f8e3 	bl	8002718 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2103      	movs	r1, #3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f8c7 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <HAL_ADC_ConfigChannel+0x3ce>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2103      	movs	r1, #3
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f8bc 	bl	80026ec <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	0e9b      	lsrs	r3, r3, #26
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	e017      	b.n	80035ae <HAL_ADC_ConfigChannel+0x3fe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2103      	movs	r1, #3
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f8b1 	bl	80026ec <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003598:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800359a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e003      	b.n	80035ac <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80035a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x416>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	e011      	b.n	80035ea <HAL_ADC_ConfigChannel+0x43a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80035d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80035d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80035e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d106      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2103      	movs	r1, #3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f88e 	bl	8002718 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f9cf 	bl	80029a4 <LL_ADC_IsEnabled>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 813f 	bne.w	800388c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	f7ff f928 	bl	8002870 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a8e      	ldr	r2, [pc, #568]	@ (8003860 <HAL_ADC_ConfigChannel+0x6b0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	f040 8130 	bne.w	800388c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x4a4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	3301      	adds	r3, #1
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b09      	cmp	r3, #9
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e019      	b.n	8003688 <HAL_ADC_ConfigChannel+0x4d8>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2b09      	cmp	r3, #9
 8003680:	bf94      	ite	ls
 8003682:	2301      	movls	r3, #1
 8003684:	2300      	movhi	r3, #0
 8003686:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003688:	2b00      	cmp	r3, #0
 800368a:	d079      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x4f8>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0e9b      	lsrs	r3, r3, #26
 800369e:	3301      	adds	r3, #1
 80036a0:	069b      	lsls	r3, r3, #26
 80036a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036a6:	e015      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x524>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e003      	b.n	80036cc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80036c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	069b      	lsls	r3, r3, #26
 80036d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x544>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	e017      	b.n	8003724 <HAL_ADC_ConfigChannel+0x574>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003704:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	ea42 0103 	orr.w	r1, r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <HAL_ADC_ConfigChannel+0x59a>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	3301      	adds	r3, #1
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	051b      	lsls	r3, r3, #20
 8003748:	e018      	b.n	800377c <HAL_ADC_ConfigChannel+0x5cc>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377c:	430b      	orrs	r3, r1
 800377e:	e080      	b.n	8003882 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_ADC_ConfigChannel+0x5ec>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	069b      	lsls	r3, r3, #26
 8003796:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800379a:	e015      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x618>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e003      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	069b      	lsls	r3, r3, #26
 80037c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x638>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	e017      	b.n	8003818 <HAL_ADC_ConfigChannel+0x668>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	61bb      	str	r3, [r7, #24]
  return result;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	e003      	b.n	800380c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	ea42 0103 	orr.w	r1, r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x694>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	3301      	adds	r3, #1
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	3b1e      	subs	r3, #30
 800383c:	051b      	lsls	r3, r3, #20
 800383e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003842:	e01d      	b.n	8003880 <HAL_ADC_ConfigChannel+0x6d0>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	60fb      	str	r3, [r7, #12]
  return result;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d103      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e005      	b.n	800386c <HAL_ADC_ConfigChannel+0x6bc>
 8003860:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	3b1e      	subs	r3, #30
 800387a:	051b      	lsls	r3, r3, #20
 800387c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003880:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003886:	4619      	mov	r1, r3
 8003888:	f7fe ffc6 	bl	8002818 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <HAL_ADC_ConfigChannel+0x7d8>)
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d06c      	beq.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003898:	483c      	ldr	r0, [pc, #240]	@ (800398c <HAL_ADC_ConfigChannel+0x7dc>)
 800389a:	f7fe fef5 	bl	8002688 <LL_ADC_GetCommonPathInternalCh>
 800389e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003990 <HAL_ADC_ConfigChannel+0x7e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d127      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d121      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a35      	ldr	r2, [pc, #212]	@ (8003994 <HAL_ADC_ConfigChannel+0x7e4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d157      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038ca:	4619      	mov	r1, r3
 80038cc:	482f      	ldr	r0, [pc, #188]	@ (800398c <HAL_ADC_ConfigChannel+0x7dc>)
 80038ce:	f7fe fec8 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d2:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <HAL_ADC_ConfigChannel+0x7e8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_ADC_ConfigChannel+0x7ec>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038ec:	e002      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f9      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038fa:	e03a      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a27      	ldr	r2, [pc, #156]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800390a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_ADC_ConfigChannel+0x7e4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d12a      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800391c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003920:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003924:	4619      	mov	r1, r3
 8003926:	4819      	ldr	r0, [pc, #100]	@ (800398c <HAL_ADC_ConfigChannel+0x7dc>)
 8003928:	f7fe fe9b 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392c:	e021      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d11c      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800393c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <HAL_ADC_ConfigChannel+0x7e4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003956:	4619      	mov	r1, r3
 8003958:	480c      	ldr	r0, [pc, #48]	@ (800398c <HAL_ADC_ConfigChannel+0x7dc>)
 800395a:	f7fe fe82 	bl	8002662 <LL_ADC_SetCommonPathInternalCh>
 800395e:	e008      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800397a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800397e:	4618      	mov	r0, r3
 8003980:	37d8      	adds	r7, #216	@ 0xd8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	80080000 	.word	0x80080000
 800398c:	50040300 	.word	0x50040300
 8003990:	c7520000 	.word	0xc7520000
 8003994:	50040000 	.word	0x50040000
 8003998:	20000044 	.word	0x20000044
 800399c:	053e2d63 	.word	0x053e2d63
 80039a0:	cb840000 	.word	0xcb840000
 80039a4:	80000001 	.word	0x80000001

080039a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fff3 	bl	80029a4 <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d169      	bne.n	8003a98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <ADC_Enable+0xfc>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e055      	b.n	8003a9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe ffae 	bl	8002954 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039f8:	482b      	ldr	r0, [pc, #172]	@ (8003aa8 <ADC_Enable+0x100>)
 80039fa:	f7fe fe45 	bl	8002688 <LL_ADC_GetCommonPathInternalCh>
 80039fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a08:	4b28      	ldr	r3, [pc, #160]	@ (8003aac <ADC_Enable+0x104>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	4a28      	ldr	r2, [pc, #160]	@ (8003ab0 <ADC_Enable+0x108>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a22:	e002      	b.n	8003a2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f9      	bne.n	8003a24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a30:	f7fe fdd4 	bl	80025dc <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a36:	e028      	b.n	8003a8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe ffb1 	bl	80029a4 <LL_ADC_IsEnabled>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe ff81 	bl	8002954 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a52:	f7fe fdc3 	bl	80025dc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d914      	bls.n	8003a8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00d      	beq.n	8003a8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	f043 0210 	orr.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e007      	b.n	8003a9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d1cf      	bne.n	8003a38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	8000003f 	.word	0x8000003f
 8003aa8:	50040300 	.word	0x50040300
 8003aac:	20000044 	.word	0x20000044
 8003ab0:	053e2d63 	.word	0x053e2d63

08003ab4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff82 	bl	80029ca <LL_ADC_IsDisableOngoing>
 8003ac6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe ff69 	bl	80029a4 <LL_ADC_IsEnabled>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d047      	beq.n	8003b68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d144      	bne.n	8003b68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030d 	and.w	r3, r3, #13
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10c      	bne.n	8003b06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe ff43 	bl	800297c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2203      	movs	r2, #3
 8003afc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afe:	f7fe fd6d 	bl	80025dc <HAL_GetTick>
 8003b02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b04:	e029      	b.n	8003b5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f043 0210 	orr.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e023      	b.n	8003b6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b22:	f7fe fd5b 	bl	80025dc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d914      	bls.n	8003b5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f043 0210 	orr.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e007      	b.n	8003b6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1dc      	bne.n	8003b22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d14b      	bne.n	8003c24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d021      	beq.n	8003bea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fde2 	bl	8002774 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d032      	beq.n	8003c1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d12b      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11f      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003be8:	e018      	b.n	8003c1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d111      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fa9f 	bl	8003160 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c22:	e00e      	b.n	8003c42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff fab3 	bl	800319c <HAL_ADC_ErrorCallback>
}
 8003c36:	e004      	b.n	8003c42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fa8b 	bl	8003174 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fa85 	bl	800319c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <LL_ADC_StartCalibration>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_IsCalibrationOnGoing>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ce0:	d101      	bne.n	8003ce6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e04d      	b.n	8003dac <HAL_ADCEx_Calibration_Start+0xb8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fecb 	bl	8003ab4 <ADC_Disable>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d136      	bne.n	8003d96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	f043 0202 	orr.w	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ffa9 	bl	8003c9a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d48:	e014      	b.n	8003d74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003d56:	d30d      	bcc.n	8003d74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f023 0312 	bic.w	r3, r3, #18
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e01b      	b.n	8003dac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ffa7 	bl	8003ccc <LL_ADC_IsCalibrationOnGoing>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e2      	bne.n	8003d4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	f023 0303 	bic.w	r3, r3, #3
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d94:	e005      	b.n	8003da2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	f043 0210 	orr.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <__NVIC_SetPriorityGrouping+0x44>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e34:	4013      	ands	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4a:	4a04      	ldr	r2, [pc, #16]	@ (8003e5c <__NVIC_SetPriorityGrouping+0x44>)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	60d3      	str	r3, [r2, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <__NVIC_GetPriorityGrouping+0x18>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	f003 0307 	and.w	r3, r3, #7
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	db0b      	blt.n	8003ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	4907      	ldr	r1, [pc, #28]	@ (8003eb4 <__NVIC_EnableIRQ+0x38>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db0a      	blt.n	8003ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	490c      	ldr	r1, [pc, #48]	@ (8003f04 <__NVIC_SetPriority+0x4c>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	440b      	add	r3, r1
 8003edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee0:	e00a      	b.n	8003ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4908      	ldr	r1, [pc, #32]	@ (8003f08 <__NVIC_SetPriority+0x50>)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3b04      	subs	r3, #4
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	761a      	strb	r2, [r3, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000e100 	.word	0xe000e100
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	@ 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	bf28      	it	cs
 8003f2a:	2304      	movcs	r3, #4
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b03      	subs	r3, #3
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f54:	f04f 31ff 	mov.w	r1, #4294967295
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	4313      	orrs	r3, r2
         );
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	@ 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f84:	d301      	bcc.n	8003f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00f      	b.n	8003faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb4 <SysTick_Config+0x40>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f92:	210f      	movs	r1, #15
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	f7ff ff8e 	bl	8003eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <SysTick_Config+0x40>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa2:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <SysTick_Config+0x40>)
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	e000e010 	.word	0xe000e010

08003fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff29 	bl	8003e18 <__NVIC_SetPriorityGrouping>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe0:	f7ff ff3e 	bl	8003e60 <__NVIC_GetPriorityGrouping>
 8003fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f7ff ff8e 	bl	8003f0c <NVIC_EncodePriority>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff5d 	bl	8003eb8 <__NVIC_SetPriority>
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff31 	bl	8003e7c <__NVIC_EnableIRQ>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ffa2 	bl	8003f74 <SysTick_Config>
 8004030:	4603      	mov	r3, r0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e098      	b.n	8004180 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	4b4d      	ldr	r3, [pc, #308]	@ (800418c <HAL_DMA_Init+0x150>)
 8004056:	429a      	cmp	r2, r3
 8004058:	d80f      	bhi.n	800407a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_DMA_Init+0x154>)
 8004062:	4413      	add	r3, r2
 8004064:	4a4b      	ldr	r2, [pc, #300]	@ (8004194 <HAL_DMA_Init+0x158>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a48      	ldr	r2, [pc, #288]	@ (8004198 <HAL_DMA_Init+0x15c>)
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40
 8004078:	e00e      	b.n	8004098 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	4b46      	ldr	r3, [pc, #280]	@ (800419c <HAL_DMA_Init+0x160>)
 8004082:	4413      	add	r3, r2
 8004084:	4a43      	ldr	r2, [pc, #268]	@ (8004194 <HAL_DMA_Init+0x158>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a42      	ldr	r2, [pc, #264]	@ (80041a0 <HAL_DMA_Init+0x164>)
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f2:	d039      	beq.n	8004168 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	4a27      	ldr	r2, [pc, #156]	@ (8004198 <HAL_DMA_Init+0x15c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d11a      	bne.n	8004134 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <HAL_DMA_Init+0x168>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	f003 031c 	and.w	r3, r3, #28
 800410a:	210f      	movs	r1, #15
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	4924      	ldr	r1, [pc, #144]	@ (80041a4 <HAL_DMA_Init+0x168>)
 8004114:	4013      	ands	r3, r2
 8004116:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004118:	4b22      	ldr	r3, [pc, #136]	@ (80041a4 <HAL_DMA_Init+0x168>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	f003 031c 	and.w	r3, r3, #28
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	491d      	ldr	r1, [pc, #116]	@ (80041a4 <HAL_DMA_Init+0x168>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
 8004132:	e019      	b.n	8004168 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <HAL_DMA_Init+0x16c>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413c:	f003 031c 	and.w	r3, r3, #28
 8004140:	210f      	movs	r1, #15
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	4917      	ldr	r1, [pc, #92]	@ (80041a8 <HAL_DMA_Init+0x16c>)
 800414a:	4013      	ands	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800414e:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <HAL_DMA_Init+0x16c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f003 031c 	and.w	r3, r3, #28
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	4911      	ldr	r1, [pc, #68]	@ (80041a8 <HAL_DMA_Init+0x16c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40020407 	.word	0x40020407
 8004190:	bffdfff8 	.word	0xbffdfff8
 8004194:	cccccccd 	.word	0xcccccccd
 8004198:	40020000 	.word	0x40020000
 800419c:	bffdfbf8 	.word	0xbffdfbf8
 80041a0:	40020400 	.word	0x40020400
 80041a4:	400200a8 	.word	0x400200a8
 80041a8:	400204a8 	.word	0x400204a8

080041ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_DMA_Start_IT+0x20>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e04b      	b.n	8004264 <HAL_DMA_Start_IT+0xb8>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d13a      	bne.n	8004256 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f95f 	bl	80044c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 020e 	orr.w	r2, r2, #14
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e00f      	b.n	8004244 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0204 	bic.w	r2, r2, #4
 8004232:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 020a 	orr.w	r2, r2, #10
 8004242:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e005      	b.n	8004262 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800425e:	2302      	movs	r3, #2
 8004260:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d008      	beq.n	8004296 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2204      	movs	r2, #4
 8004288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 020e 	bic.w	r2, r2, #14
 80042a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 021c 	and.w	r2, r3, #28
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f202 	lsl.w	r2, r1, r2
 80042c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d005      	beq.n	800430c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2204      	movs	r2, #4
 8004304:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e029      	b.n	8004360 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020e 	bic.w	r2, r2, #14
 800431a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f003 021c 	and.w	r2, r3, #28
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
    }
  }
  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f003 031c 	and.w	r3, r3, #28
 800438a:	2204      	movs	r2, #4
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d026      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x7a>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d021      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0204 	bic.w	r2, r2, #4
 80043bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f003 021c 	and.w	r2, r3, #28
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	2104      	movs	r1, #4
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d071      	beq.n	80044be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043e2:	e06c      	b.n	80044be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e8:	f003 031c 	and.w	r3, r3, #28
 80043ec:	2202      	movs	r2, #2
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02e      	beq.n	8004456 <HAL_DMA_IRQHandler+0xec>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d029      	beq.n	8004456 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 020a 	bic.w	r2, r2, #10
 800441e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	f003 021c 	and.w	r2, r3, #28
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	2102      	movs	r1, #2
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d038      	beq.n	80044be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004454:	e033      	b.n	80044be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f003 031c 	and.w	r3, r3, #28
 800445e:	2208      	movs	r2, #8
 8004460:	409a      	lsls	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02a      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d025      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 020e 	bic.w	r2, r2, #14
 8004482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004488:	f003 021c 	and.w	r2, r3, #28
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f202 	lsl.w	r2, r1, r2
 8004496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
}
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f003 021c 	and.w	r2, r3, #28
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f202 	lsl.w	r2, r1, r2
 80044e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d108      	bne.n	800450c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800450a:	e007      	b.n	800451c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004536:	e154      	b.n	80047e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8146 	beq.w	80047dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d005      	beq.n	8004568 <HAL_GPIO_Init+0x40>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d130      	bne.n	80045ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459e:	2201      	movs	r2, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0201 	and.w	r2, r3, #1
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d017      	beq.n	8004606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d123      	bne.n	800465a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	220f      	movs	r2, #15
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	6939      	ldr	r1, [r7, #16]
 8004656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a0 	beq.w	80047dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469c:	4b58      	ldr	r3, [pc, #352]	@ (8004800 <HAL_GPIO_Init+0x2d8>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a0:	4a57      	ldr	r2, [pc, #348]	@ (8004800 <HAL_GPIO_Init+0x2d8>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a8:	4b55      	ldr	r3, [pc, #340]	@ (8004800 <HAL_GPIO_Init+0x2d8>)
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046b4:	4a53      	ldr	r2, [pc, #332]	@ (8004804 <HAL_GPIO_Init+0x2dc>)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	3302      	adds	r3, #2
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	220f      	movs	r2, #15
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046de:	d019      	beq.n	8004714 <HAL_GPIO_Init+0x1ec>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a49      	ldr	r2, [pc, #292]	@ (8004808 <HAL_GPIO_Init+0x2e0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_GPIO_Init+0x1e8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a48      	ldr	r2, [pc, #288]	@ (800480c <HAL_GPIO_Init+0x2e4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00d      	beq.n	800470c <HAL_GPIO_Init+0x1e4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a47      	ldr	r2, [pc, #284]	@ (8004810 <HAL_GPIO_Init+0x2e8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <HAL_GPIO_Init+0x1e0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a46      	ldr	r2, [pc, #280]	@ (8004814 <HAL_GPIO_Init+0x2ec>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_GPIO_Init+0x1dc>
 8004700:	2304      	movs	r3, #4
 8004702:	e008      	b.n	8004716 <HAL_GPIO_Init+0x1ee>
 8004704:	2307      	movs	r3, #7
 8004706:	e006      	b.n	8004716 <HAL_GPIO_Init+0x1ee>
 8004708:	2303      	movs	r3, #3
 800470a:	e004      	b.n	8004716 <HAL_GPIO_Init+0x1ee>
 800470c:	2302      	movs	r3, #2
 800470e:	e002      	b.n	8004716 <HAL_GPIO_Init+0x1ee>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_GPIO_Init+0x1ee>
 8004714:	2300      	movs	r3, #0
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	f002 0203 	and.w	r2, r2, #3
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	4093      	lsls	r3, r2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004726:	4937      	ldr	r1, [pc, #220]	@ (8004804 <HAL_GPIO_Init+0x2dc>)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004734:	4b38      	ldr	r3, [pc, #224]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004758:	4a2f      	ldr	r2, [pc, #188]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800475e:	4b2e      	ldr	r3, [pc, #184]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004782:	4a25      	ldr	r2, [pc, #148]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004788:	4b23      	ldr	r3, [pc, #140]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43db      	mvns	r3, r3
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047b2:	4b19      	ldr	r3, [pc, #100]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d6:	4a10      	ldr	r2, [pc, #64]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	3301      	adds	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f aea3 	bne.w	8004538 <HAL_GPIO_Init+0x10>
  }
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40021000 	.word	0x40021000
 8004804:	40010000 	.word	0x40010000
 8004808:	48000400 	.word	0x48000400
 800480c:	48000800 	.word	0x48000800
 8004810:	48000c00 	.word	0x48000c00
 8004814:	48001000 	.word	0x48001000
 8004818:	40010400 	.word	0x40010400

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004838:	e002      	b.n	8004840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800485e:	887a      	ldrh	r2, [r7, #2]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4013      	ands	r3, r2
 8004864:	041a      	lsls	r2, r3, #16
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	43d9      	mvns	r1, r3
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	400b      	ands	r3, r1
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800488a:	4b08      	ldr	r3, [pc, #32]	@ (80048ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004896:	4a05      	ldr	r2, [pc, #20]	@ (80048ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd f9f4 	bl	8001c8c <HAL_GPIO_EXTI_Callback>
  }
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40010400 	.word	0x40010400

080048b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40007000 	.word	0x40007000

080048cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048da:	d130      	bne.n	800493e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048dc:	4b23      	ldr	r3, [pc, #140]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e8:	d038      	beq.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ea:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048f2:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2232      	movs	r2, #50	@ 0x32
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	0c9b      	lsrs	r3, r3, #18
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004910:	e002      	b.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b01      	subs	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004918:	4b14      	ldr	r3, [pc, #80]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004924:	d102      	bne.n	800492c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f2      	bne.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492c:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004938:	d110      	bne.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494a:	d007      	beq.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800494c:	4b07      	ldr	r3, [pc, #28]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004954:	4a05      	ldr	r2, [pc, #20]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800495a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40007000 	.word	0x40007000
 8004970:	20000044 	.word	0x20000044
 8004974:	431bde83 	.word	0x431bde83

08004978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f000 bc02 	b.w	8005190 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498c:	4b96      	ldr	r3, [pc, #600]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004996:	4b94      	ldr	r3, [pc, #592]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80e4 	beq.w	8004b76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4c>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	f040 808b 	bne.w	8004ad2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	f040 8087 	bne.w	8004ad2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c4:	4b88      	ldr	r3, [pc, #544]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_OscConfig+0x64>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e3d9      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	4b81      	ldr	r3, [pc, #516]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_RCC_OscConfig+0x7e>
 80049ec:	4b7e      	ldr	r3, [pc, #504]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049f4:	e005      	b.n	8004a02 <HAL_RCC_OscConfig+0x8a>
 80049f6:	4b7c      	ldr	r3, [pc, #496]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d223      	bcs.n	8004a4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fd8c 	bl	8005528 <RCC_SetFlashLatencyFromMSIRange>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e3ba      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1a:	4b73      	ldr	r3, [pc, #460]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a72      	ldr	r2, [pc, #456]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b70      	ldr	r3, [pc, #448]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	496d      	ldr	r1, [pc, #436]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a38:	4b6b      	ldr	r3, [pc, #428]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4968      	ldr	r1, [pc, #416]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	e025      	b.n	8004a9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4e:	4b66      	ldr	r3, [pc, #408]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a65      	ldr	r2, [pc, #404]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b63      	ldr	r3, [pc, #396]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4960      	ldr	r1, [pc, #384]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	495b      	ldr	r1, [pc, #364]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fd4c 	bl	8005528 <RCC_SetFlashLatencyFromMSIRange>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e37a      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a9a:	f000 fc81 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b51      	ldr	r3, [pc, #324]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4950      	ldr	r1, [pc, #320]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf0 <HAL_RCC_OscConfig+0x278>)
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004aba:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf4 <HAL_RCC_OscConfig+0x27c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd fd3c 	bl	800253c <HAL_InitTick>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d052      	beq.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	e35e      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d032      	beq.n	8004b40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ada:	4b43      	ldr	r3, [pc, #268]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a42      	ldr	r2, [pc, #264]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae6:	f7fd fd79 	bl	80025dc <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aee:	f7fd fd75 	bl	80025dc <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e347      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b00:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0c:	4b36      	ldr	r3, [pc, #216]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a35      	ldr	r2, [pc, #212]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b12:	f043 0308 	orr.w	r3, r3, #8
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b33      	ldr	r3, [pc, #204]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	4930      	ldr	r1, [pc, #192]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	492b      	ldr	r1, [pc, #172]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
 8004b3e:	e01a      	b.n	8004b76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b40:	4b29      	ldr	r3, [pc, #164]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a28      	ldr	r2, [pc, #160]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fd46 	bl	80025dc <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b54:	f7fd fd42 	bl	80025dc <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e314      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b66:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x1dc>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d073      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_OscConfig+0x21c>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d10e      	bne.n	8004bac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d063      	beq.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d15f      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e2f1      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x24c>
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a0b      	ldr	r2, [pc, #44]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e025      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bcc:	d114      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x280>
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a05      	ldr	r2, [pc, #20]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a02      	ldr	r2, [pc, #8]	@ (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e013      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800c554 	.word	0x0800c554
 8004bf0:	20000044 	.word	0x20000044
 8004bf4:	20000048 	.word	0x20000048
 8004bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a9f      	ldr	r2, [pc, #636]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b9d      	ldr	r3, [pc, #628]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a9c      	ldr	r2, [pc, #624]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fce0 	bl	80025dc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fcdc 	bl	80025dc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e2ae      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4b92      	ldr	r3, [pc, #584]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2a8>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fccc 	bl	80025dc <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd fcc8 	bl	80025dc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	@ 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e29a      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5a:	4b88      	ldr	r3, [pc, #544]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d060      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x310>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d116      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	4b7c      	ldr	r3, [pc, #496]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x328>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e277      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b76      	ldr	r3, [pc, #472]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	4973      	ldr	r1, [pc, #460]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	e040      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d023      	beq.n	8004d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fd fc87 	bl	80025dc <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fd fc83 	bl	80025dc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e255      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce4:	4b65      	ldr	r3, [pc, #404]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b62      	ldr	r3, [pc, #392]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	495f      	ldr	r1, [pc, #380]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b5d      	ldr	r3, [pc, #372]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fd fc63 	bl	80025dc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fc5f 	bl	80025dc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e231      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d2c:	4b53      	ldr	r3, [pc, #332]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d52:	4a4a      	ldr	r2, [pc, #296]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fc3e 	bl	80025dc <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd fc3a 	bl	80025dc <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e20c      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d76:	4b41      	ldr	r3, [pc, #260]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3ec>
 8004d84:	e01b      	b.n	8004dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fd fc21 	bl	80025dc <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fd fc1d 	bl	80025dc <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1ef      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db0:	4b32      	ldr	r3, [pc, #200]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de8:	4b24      	ldr	r3, [pc, #144]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b21      	ldr	r3, [pc, #132]	@ (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d118      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e10:	f7fd fbe4 	bl	80025dc <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fd fbe0 	bl	80025dc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e1b2      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2a:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4d8>
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4e:	e029      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d115      	bne.n	8004e84 <HAL_RCC_OscConfig+0x50c>
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	4a03      	ldr	r2, [pc, #12]	@ (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	4b9a      	ldr	r3, [pc, #616]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	4a99      	ldr	r2, [pc, #612]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e94:	4b96      	ldr	r3, [pc, #600]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	4a95      	ldr	r2, [pc, #596]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd fb96 	bl	80025dc <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fd fb92 	bl	80025dc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e162      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eca:	4b89      	ldr	r3, [pc, #548]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ed      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x53c>
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd fb7f 	bl	80025dc <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd fb7b 	bl	80025dc <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e14b      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ed      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b78      	ldr	r3, [pc, #480]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f10:	4a77      	ldr	r2, [pc, #476]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d03c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01c      	beq.n	8004f66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f2c:	4b70      	ldr	r3, [pc, #448]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f32:	4a6f      	ldr	r2, [pc, #444]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fd fb4e 	bl	80025dc <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f44:	f7fd fb4a 	bl	80025dc <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e11c      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f56:	4b66      	ldr	r3, [pc, #408]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <HAL_RCC_OscConfig+0x5cc>
 8004f64:	e01b      	b.n	8004f9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f66:	4b62      	ldr	r3, [pc, #392]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f6c:	4a60      	ldr	r2, [pc, #384]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fd fb31 	bl	80025dc <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7e:	f7fd fb2d 	bl	80025dc <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0ff      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f90:	4b57      	ldr	r3, [pc, #348]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ef      	bne.n	8004f7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80f3 	beq.w	800518e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	f040 80c9 	bne.w	8005144 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 0203 	and.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d12c      	bne.n	8005020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d123      	bne.n	8005020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d11b      	bne.n	8005020 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d113      	bne.n	8005020 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	3b01      	subs	r3, #1
 8005006:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d109      	bne.n	8005020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	3b01      	subs	r3, #1
 800501a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d06b      	beq.n	80050f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d062      	beq.n	80050ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005026:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0ac      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005036:	4b2e      	ldr	r3, [pc, #184]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2d      	ldr	r2, [pc, #180]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 800503c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005040:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005042:	f7fd facb 	bl	80025dc <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504a:	f7fd fac7 	bl	80025dc <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e099      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505c:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <HAL_RCC_OscConfig+0x77c>)
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005078:	3a01      	subs	r2, #1
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005082:	0212      	lsls	r2, r2, #8
 8005084:	4311      	orrs	r1, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800508a:	0852      	lsrs	r2, r2, #1
 800508c:	3a01      	subs	r2, #1
 800508e:	0552      	lsls	r2, r2, #21
 8005090:	4311      	orrs	r1, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005096:	0852      	lsrs	r2, r2, #1
 8005098:	3a01      	subs	r2, #1
 800509a:	0652      	lsls	r2, r2, #25
 800509c:	4311      	orrs	r1, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050a2:	06d2      	lsls	r2, r2, #27
 80050a4:	430a      	orrs	r2, r1
 80050a6:	4912      	ldr	r1, [pc, #72]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050ac:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0f      	ldr	r2, [pc, #60]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b8:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a0c      	ldr	r2, [pc, #48]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050c4:	f7fd fa8a 	bl	80025dc <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fd fa86 	bl	80025dc <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e058      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <HAL_RCC_OscConfig+0x778>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ea:	e050      	b.n	800518e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e04f      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f8:	4b27      	ldr	r3, [pc, #156]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d144      	bne.n	800518e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005104:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a23      	ldr	r2, [pc, #140]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 800510a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a20      	ldr	r2, [pc, #128]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800511a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800511c:	f7fd fa5e 	bl	80025dc <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd fa5a 	bl	80025dc <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e02c      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005136:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x7ac>
 8005142:	e024      	b.n	800518e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d01f      	beq.n	800518a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005150:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fd fa41 	bl	80025dc <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515e:	f7fd fa3d 	bl	80025dc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e00f      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005170:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f0      	bne.n	800515e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	4905      	ldr	r1, [pc, #20]	@ (8005198 <HAL_RCC_OscConfig+0x820>)
 8005182:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_RCC_OscConfig+0x824>)
 8005184:	4013      	ands	r3, r2
 8005186:	60cb      	str	r3, [r1, #12]
 8005188:	e001      	b.n	800518e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	feeefffc 	.word	0xfeeefffc

080051a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0e7      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051b4:	4b75      	ldr	r3, [pc, #468]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d910      	bls.n	80051e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c2:	4b72      	ldr	r3, [pc, #456]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 0207 	bic.w	r2, r3, #7
 80051ca:	4970      	ldr	r1, [pc, #448]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b6e      	ldr	r3, [pc, #440]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cf      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	4b66      	ldr	r3, [pc, #408]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d908      	bls.n	8005212 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005200:	4b63      	ldr	r3, [pc, #396]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4960      	ldr	r1, [pc, #384]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04c      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005226:	4b5a      	ldr	r3, [pc, #360]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d121      	bne.n	8005276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0a6      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d107      	bne.n	800524e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800523e:	4b54      	ldr	r3, [pc, #336]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d115      	bne.n	8005276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e09a      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005256:	4b4e      	ldr	r3, [pc, #312]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e08e      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005266:	4b4a      	ldr	r3, [pc, #296]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e086      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005276:	4b46      	ldr	r3, [pc, #280]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 0203 	bic.w	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4943      	ldr	r1, [pc, #268]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005284:	4313      	orrs	r3, r2
 8005286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fd f9a8 	bl	80025dc <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005290:	f7fd f9a4 	bl	80025dc <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e06e      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 020c 	and.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1eb      	bne.n	8005290 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4b31      	ldr	r3, [pc, #196]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d208      	bcs.n	80052e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	492b      	ldr	r1, [pc, #172]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e6:	4b29      	ldr	r3, [pc, #164]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d210      	bcs.n	8005316 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f4:	4b25      	ldr	r3, [pc, #148]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 0207 	bic.w	r2, r3, #7
 80052fc:	4923      	ldr	r1, [pc, #140]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005304:	4b21      	ldr	r3, [pc, #132]	@ (800538c <HAL_RCC_ClockConfig+0x1ec>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d001      	beq.n	8005316 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e036      	b.n	8005384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005322:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4918      	ldr	r1, [pc, #96]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005340:	4b13      	ldr	r3, [pc, #76]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4910      	ldr	r1, [pc, #64]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005354:	f000 f824 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <HAL_RCC_ClockConfig+0x1f0>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	490b      	ldr	r1, [pc, #44]	@ (8005394 <HAL_RCC_ClockConfig+0x1f4>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	4a09      	ldr	r2, [pc, #36]	@ (8005398 <HAL_RCC_ClockConfig+0x1f8>)
 8005372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <HAL_RCC_ClockConfig+0x1fc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fd f8df 	bl	800253c <HAL_InitTick>
 800537e:	4603      	mov	r3, r0
 8005380:	72fb      	strb	r3, [r7, #11]

  return status;
 8005382:	7afb      	ldrb	r3, [r7, #11]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40022000 	.word	0x40022000
 8005390:	40021000 	.word	0x40021000
 8005394:	0800c554 	.word	0x0800c554
 8005398:	20000044 	.word	0x20000044
 800539c:	20000048 	.word	0x20000048

080053a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ae:	4b3e      	ldr	r3, [pc, #248]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	4b3b      	ldr	r3, [pc, #236]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x34>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d121      	bne.n	8005412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d11e      	bne.n	8005412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053d4:	4b34      	ldr	r3, [pc, #208]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053e0:	4b31      	ldr	r3, [pc, #196]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	e005      	b.n	80053fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053f0:	4b2d      	ldr	r3, [pc, #180]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053fc:	4a2b      	ldr	r2, [pc, #172]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10d      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005410:	e00a      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b04      	cmp	r3, #4
 8005416:	d102      	bne.n	800541e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005418:	4b25      	ldr	r3, [pc, #148]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	e004      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d101      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005424:	4b23      	ldr	r3, [pc, #140]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b0c      	cmp	r3, #12
 800542c:	d134      	bne.n	8005498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800542e:	4b1e      	ldr	r3, [pc, #120]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d003      	beq.n	8005446 <HAL_RCC_GetSysClockFreq+0xa6>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d003      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0xac>
 8005444:	e005      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005448:	617b      	str	r3, [r7, #20]
      break;
 800544a:	e005      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800544c:	4b19      	ldr	r3, [pc, #100]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800544e:	617b      	str	r3, [r7, #20]
      break;
 8005450:	e002      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	617b      	str	r3, [r7, #20]
      break;
 8005456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005458:	4b13      	ldr	r3, [pc, #76]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	3301      	adds	r3, #1
 8005464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005466:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	fb03 f202 	mul.w	r2, r3, r2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	0e5b      	lsrs	r3, r3, #25
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	3301      	adds	r3, #1
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005498:	69bb      	ldr	r3, [r7, #24]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3724      	adds	r7, #36	@ 0x24
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	0800c56c 	.word	0x0800c56c
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	007a1200 	.word	0x007a1200

080054b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	@ (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000044 	.word	0x20000044

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054d4:	f7ff fff0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4904      	ldr	r1, [pc, #16]	@ (80054f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	0800c564 	.word	0x0800c564

080054fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005500:	f7ff ffda 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0adb      	lsrs	r3, r3, #11
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4904      	ldr	r1, [pc, #16]	@ (8005524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	0800c564 	.word	0x0800c564

08005528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005534:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005540:	f7ff f9b6 	bl	80048b0 <HAL_PWREx_GetVoltageRange>
 8005544:	6178      	str	r0, [r7, #20]
 8005546:	e014      	b.n	8005572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005548:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	4a24      	ldr	r2, [pc, #144]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	6593      	str	r3, [r2, #88]	@ 0x58
 8005554:	4b22      	ldr	r3, [pc, #136]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005560:	f7ff f9a6 	bl	80048b0 <HAL_PWREx_GetVoltageRange>
 8005564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005566:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556a:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800556c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005570:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005578:	d10b      	bne.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b80      	cmp	r3, #128	@ 0x80
 800557e:	d919      	bls.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2ba0      	cmp	r3, #160	@ 0xa0
 8005584:	d902      	bls.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005586:	2302      	movs	r3, #2
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e013      	b.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800558c:	2301      	movs	r3, #1
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	e010      	b.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b80      	cmp	r3, #128	@ 0x80
 8005596:	d902      	bls.n	800559e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005598:	2303      	movs	r3, #3
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	e00a      	b.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b80      	cmp	r3, #128	@ 0x80
 80055a2:	d102      	bne.n	80055aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055a4:	2302      	movs	r3, #2
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e004      	b.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b70      	cmp	r3, #112	@ 0x70
 80055ae:	d101      	bne.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055b0:	2301      	movs	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 0207 	bic.w	r2, r3, #7
 80055bc:	4909      	ldr	r1, [pc, #36]	@ (80055e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d001      	beq.n	80055d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40022000 	.word	0x40022000

080055e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055f0:	2300      	movs	r3, #0
 80055f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f4:	2300      	movs	r3, #0
 80055f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005600:	2b00      	cmp	r3, #0
 8005602:	d031      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005608:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800560c:	d01a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800560e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005612:	d814      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005618:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800561c:	d10f      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800561e:	4b5d      	ldr	r3, [pc, #372]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4a5c      	ldr	r2, [pc, #368]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800562a:	e00c      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa44 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	74fb      	strb	r3, [r7, #19]
      break;
 8005642:	e000      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564c:	4b51      	ldr	r3, [pc, #324]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	494e      	ldr	r1, [pc, #312]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005662:	e001      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 809e 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800567a:	4b46      	ldr	r3, [pc, #280]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005690:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005694:	4a3f      	ldr	r2, [pc, #252]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569a:	6593      	str	r3, [r2, #88]	@ 0x58
 800569c:	4b3d      	ldr	r3, [pc, #244]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a8:	2301      	movs	r3, #1
 80056aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a39      	ldr	r2, [pc, #228]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b8:	f7fc ff90 	bl	80025dc <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056be:	e009      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c0:	f7fc ff8c 	bl	80025dc <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d902      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	74fb      	strb	r3, [r7, #19]
        break;
 80056d2:	e005      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d4:	4b30      	ldr	r3, [pc, #192]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0ef      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d15a      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01e      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d019      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005702:	4b24      	ldr	r3, [pc, #144]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800570e:	4b21      	ldr	r3, [pc, #132]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005714:	4a1f      	ldr	r2, [pc, #124]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800571e:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005724:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800572e:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fc ff4c 	bl	80025dc <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005746:	e00b      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fc ff48 	bl	80025dc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d902      	bls.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	74fb      	strb	r3, [r7, #19]
            break;
 800575e:	e006      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005760:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ec      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005774:	4b07      	ldr	r3, [pc, #28]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005782:	4904      	ldr	r1, [pc, #16]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800578a:	e009      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	74bb      	strb	r3, [r7, #18]
 8005790:	e006      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a0:	7c7b      	ldrb	r3, [r7, #17]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	4a9d      	ldr	r2, [pc, #628]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057be:	4b98      	ldr	r3, [pc, #608]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f023 0203 	bic.w	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	4994      	ldr	r1, [pc, #592]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	f023 020c 	bic.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	498c      	ldr	r1, [pc, #560]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005802:	4b87      	ldr	r3, [pc, #540]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005808:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	4983      	ldr	r1, [pc, #524]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005824:	4b7e      	ldr	r3, [pc, #504]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	497b      	ldr	r1, [pc, #492]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005846:	4b76      	ldr	r3, [pc, #472]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	4972      	ldr	r1, [pc, #456]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005868:	4b6d      	ldr	r3, [pc, #436]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	496a      	ldr	r1, [pc, #424]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800588a:	4b65      	ldr	r3, [pc, #404]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005890:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005898:	4961      	ldr	r1, [pc, #388]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	4959      	ldr	r1, [pc, #356]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058ce:	4b54      	ldr	r3, [pc, #336]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	4950      	ldr	r1, [pc, #320]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	4948      	ldr	r1, [pc, #288]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005912:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005918:	f023 0203 	bic.w	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	493f      	ldr	r1, [pc, #252]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d028      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005934:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005942:	4937      	ldr	r1, [pc, #220]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005952:	d106      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b32      	ldr	r3, [pc, #200]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a31      	ldr	r2, [pc, #196]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
 8005960:	e011      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005966:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800596a:	d10c      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f8a4 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d028      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005992:	4b23      	ldr	r3, [pc, #140]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005998:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	491f      	ldr	r1, [pc, #124]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b0:	d106      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059bc:	60d3      	str	r3, [r2, #12]
 80059be:	e011      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f875 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059da:	7cfb      	ldrb	r3, [r7, #19]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80059e0:	7cfb      	ldrb	r3, [r7, #19]
 80059e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02b      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fe:	4908      	ldr	r1, [pc, #32]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a10:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a02      	ldr	r2, [pc, #8]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1a:	60d3      	str	r3, [r2, #12]
 8005a1c:	e014      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2101      	movs	r1, #1
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f843 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01c      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a54:	4b19      	ldr	r3, [pc, #100]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a62:	4916      	ldr	r1, [pc, #88]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a72:	d10c      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f820 	bl	8005ac0 <RCCEx_PLLSAI1_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a9a:	4b08      	ldr	r3, [pc, #32]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa8:	4904      	ldr	r1, [pc, #16]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ab0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000

08005ac0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ace:	4b74      	ldr	r3, [pc, #464]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d018      	beq.n	8005b0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ada:	4b71      	ldr	r3, [pc, #452]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0203 	and.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10d      	bne.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
       ||
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005af2:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
       ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d047      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	e044      	b.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d018      	beq.n	8005b46 <RCCEx_PLLSAI1_Config+0x86>
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d825      	bhi.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d002      	beq.n	8005b22 <RCCEx_PLLSAI1_Config+0x62>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <RCCEx_PLLSAI1_Config+0x74>
 8005b20:	e020      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b32:	e01a      	b.n	8005b6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d116      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b44:	e013      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b46:	4b56      	ldr	r3, [pc, #344]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b52:	4b53      	ldr	r3, [pc, #332]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b62:	e006      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      break;
 8005b68:	e004      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b7a:	4b49      	ldr	r3, [pc, #292]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	4943      	ldr	r1, [pc, #268]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d17c      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b9c:	4b40      	ldr	r3, [pc, #256]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba8:	f7fc fd18 	bl	80025dc <HAL_GetTick>
 8005bac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bae:	e009      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb0:	f7fc fd14 	bl	80025dc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d902      	bls.n	8005bc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc2:	e005      	b.n	8005bd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ef      	bne.n	8005bb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d15f      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d110      	bne.n	8005bfe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bdc:	4b30      	ldr	r3, [pc, #192]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005be4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	06d2      	lsls	r2, r2, #27
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	492a      	ldr	r1, [pc, #168]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	610b      	str	r3, [r1, #16]
 8005bfc:	e027      	b.n	8005c4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d112      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c04:	4b26      	ldr	r3, [pc, #152]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6892      	ldr	r2, [r2, #8]
 8005c14:	0211      	lsls	r1, r2, #8
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6912      	ldr	r2, [r2, #16]
 8005c1a:	0852      	lsrs	r2, r2, #1
 8005c1c:	3a01      	subs	r2, #1
 8005c1e:	0552      	lsls	r2, r2, #21
 8005c20:	430a      	orrs	r2, r1
 8005c22:	491f      	ldr	r1, [pc, #124]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	610b      	str	r3, [r1, #16]
 8005c28:	e011      	b.n	8005c4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6892      	ldr	r2, [r2, #8]
 8005c3a:	0211      	lsls	r1, r2, #8
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6952      	ldr	r2, [r2, #20]
 8005c40:	0852      	lsrs	r2, r2, #1
 8005c42:	3a01      	subs	r2, #1
 8005c44:	0652      	lsls	r2, r2, #25
 8005c46:	430a      	orrs	r2, r1
 8005c48:	4915      	ldr	r1, [pc, #84]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c4e:	4b14      	ldr	r3, [pc, #80]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fc fcbf 	bl	80025dc <HAL_GetTick>
 8005c5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c60:	e009      	b.n	8005c76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c62:	f7fc fcbb 	bl	80025dc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d902      	bls.n	8005c76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	73fb      	strb	r3, [r7, #15]
          break;
 8005c74:	e005      	b.n	8005c82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ef      	beq.n	8005c62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	4903      	ldr	r1, [pc, #12]	@ (8005ca0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000

08005ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e049      	b.n	8005d4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc faa0 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 fade 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e038      	b.n	8005dde <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1c      	ldr	r2, [pc, #112]	@ (8005dec <HAL_TIM_Base_Start+0x98>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00e      	beq.n	8005d9c <HAL_TIM_Base_Start+0x48>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d86:	d009      	beq.n	8005d9c <HAL_TIM_Base_Start+0x48>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	@ (8005df0 <HAL_TIM_Base_Start+0x9c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_TIM_Base_Start+0x48>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a17      	ldr	r2, [pc, #92]	@ (8005df4 <HAL_TIM_Base_Start+0xa0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d115      	bne.n	8005dc8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	4b15      	ldr	r3, [pc, #84]	@ (8005df8 <HAL_TIM_Base_Start+0xa4>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b06      	cmp	r3, #6
 8005dac:	d015      	beq.n	8005dda <HAL_TIM_Base_Start+0x86>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d011      	beq.n	8005dda <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	e008      	b.n	8005dda <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e000      	b.n	8005ddc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	00010007 	.word	0x00010007

08005dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d001      	beq.n	8005e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e040      	b.n	8005e96 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x58>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x58>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a18      	ldr	r2, [pc, #96]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xac>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x58>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_TIM_Base_Start_IT+0xb0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d115      	bne.n	8005e80 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d015      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x96>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e6c:	d011      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7e:	e008      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e000      	b.n	8005e94 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	00010007 	.word	0x00010007

08005eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d020      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01b      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0202 	mvn.w	r2, #2
 8005ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f9b2 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f9a4 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9b5 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d020      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01b      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0204 	mvn.w	r2, #4
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f98c 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f97e 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f98f 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d020      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01b      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0208 	mvn.w	r2, #8
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f966 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f958 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f969 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d020      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0210 	mvn.w	r2, #16
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f940 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f932 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f943 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0201 	mvn.w	r2, #1
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fb fdf6 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00c      	beq.n	800604e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fab7 	bl	80065bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00c      	beq.n	8006072 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 faaf 	bl	80065d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f8fd 	bl	8006290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0220 	mvn.w	r2, #32
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa77 	bl	80065a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_TIM_ConfigClockSource+0x1c>
 80060da:	2302      	movs	r3, #2
 80060dc:	e0b6      	b.n	800624c <HAL_TIM_ConfigClockSource+0x18a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060fc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006100:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006108:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611a:	d03e      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xd8>
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006120:	f200 8087 	bhi.w	8006232 <HAL_TIM_ConfigClockSource+0x170>
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006128:	f000 8086 	beq.w	8006238 <HAL_TIM_ConfigClockSource+0x176>
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006130:	d87f      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 8006132:	2b70      	cmp	r3, #112	@ 0x70
 8006134:	d01a      	beq.n	800616c <HAL_TIM_ConfigClockSource+0xaa>
 8006136:	2b70      	cmp	r3, #112	@ 0x70
 8006138:	d87b      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 800613a:	2b60      	cmp	r3, #96	@ 0x60
 800613c:	d050      	beq.n	80061e0 <HAL_TIM_ConfigClockSource+0x11e>
 800613e:	2b60      	cmp	r3, #96	@ 0x60
 8006140:	d877      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 8006142:	2b50      	cmp	r3, #80	@ 0x50
 8006144:	d03c      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0xfe>
 8006146:	2b50      	cmp	r3, #80	@ 0x50
 8006148:	d873      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 800614a:	2b40      	cmp	r3, #64	@ 0x40
 800614c:	d058      	beq.n	8006200 <HAL_TIM_ConfigClockSource+0x13e>
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d86f      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 8006152:	2b30      	cmp	r3, #48	@ 0x30
 8006154:	d064      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0x15e>
 8006156:	2b30      	cmp	r3, #48	@ 0x30
 8006158:	d86b      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 800615a:	2b20      	cmp	r3, #32
 800615c:	d060      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0x15e>
 800615e:	2b20      	cmp	r3, #32
 8006160:	d867      	bhi.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d05c      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0x15e>
 8006166:	2b10      	cmp	r3, #16
 8006168:	d05a      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0x15e>
 800616a:	e062      	b.n	8006232 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800617c:	f000 f986 	bl	800648c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800618e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	609a      	str	r2, [r3, #8]
      break;
 8006198:	e04f      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	f000 f96f 	bl	800648c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061bc:	609a      	str	r2, [r3, #8]
      break;
 80061be:	e03c      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061cc:	461a      	mov	r2, r3
 80061ce:	f000 f8e3 	bl	8006398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2150      	movs	r1, #80	@ 0x50
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f93c 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 80061de:	e02c      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ec:	461a      	mov	r2, r3
 80061ee:	f000 f902 	bl	80063f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2160      	movs	r1, #96	@ 0x60
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 f92c 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 80061fe:	e01c      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800620c:	461a      	mov	r2, r3
 800620e:	f000 f8c3 	bl	8006398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2140      	movs	r1, #64	@ 0x40
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f91c 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 800621e:	e00c      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f000 f913 	bl	8006456 <TIM_ITRx_SetConfig>
      break;
 8006230:	e003      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
      break;
 8006236:	e000      	b.n	800623a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006238:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a34      	ldr	r2, [pc, #208]	@ (8006388 <TIM_Base_SetConfig+0xe4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d007      	beq.n	80062cc <TIM_Base_SetConfig+0x28>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c2:	d003      	beq.n	80062cc <TIM_Base_SetConfig+0x28>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a31      	ldr	r2, [pc, #196]	@ (800638c <TIM_Base_SetConfig+0xe8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d108      	bne.n	80062de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a29      	ldr	r2, [pc, #164]	@ (8006388 <TIM_Base_SetConfig+0xe4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0x62>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0x62>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a26      	ldr	r2, [pc, #152]	@ (800638c <TIM_Base_SetConfig+0xe8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0x62>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a25      	ldr	r2, [pc, #148]	@ (8006390 <TIM_Base_SetConfig+0xec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0x62>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a24      	ldr	r2, [pc, #144]	@ (8006394 <TIM_Base_SetConfig+0xf0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <TIM_Base_SetConfig+0xe4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xb0>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <TIM_Base_SetConfig+0xec>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xb0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a11      	ldr	r2, [pc, #68]	@ (8006394 <TIM_Base_SetConfig+0xf0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f023 0201 	bic.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	611a      	str	r2, [r3, #16]
  }
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40000400 	.word	0x40000400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400

08006398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 030a 	bic.w	r3, r3, #10
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f023 0210 	bic.w	r2, r3, #16
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006432:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 0307 	orr.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e054      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a24      	ldr	r2, [pc, #144]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006514:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a17      	ldr	r2, [pc, #92]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40014000 	.word	0x40014000

080065a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e040      	b.n	8006678 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fb fe9c 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	@ 0x24
 8006610:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fe5c 	bl	80072e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fbd3 	bl	8006ddc <UART_SetConfig>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e01b      	b.n	8006678 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800664e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800665e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fedb 	bl	800742c <UART_CheckIdleState>
 8006676:	4603      	mov	r3, r0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	@ 0x28
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006694:	2b20      	cmp	r3, #32
 8006696:	d177      	bne.n	8006788 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_UART_Transmit+0x24>
 800669e:	88fb      	ldrh	r3, [r7, #6]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e070      	b.n	800678a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2221      	movs	r2, #33	@ 0x21
 80066b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b6:	f7fb ff91 	bl	80025dc <HAL_GetTick>
 80066ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	d108      	bne.n	80066e8 <HAL_UART_Transmit+0x68>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e003      	b.n	80066f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066f0:	e02f      	b.n	8006752 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 ff3d 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e03b      	b.n	800678a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006724:	b292      	uxth	r2, r2
 8006726:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	3302      	adds	r3, #2
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	e007      	b.n	8006740 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1c9      	bne.n	80066f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	2140      	movs	r1, #64	@ 0x40
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 ff07 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e005      	b.n	800678a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	e000      	b.n	800678a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006788:	2302      	movs	r3, #2
  }
}
 800678a:	4618      	mov	r0, r3
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b0ba      	sub	sp, #232	@ 0xe8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067c2:	4013      	ands	r3, r2
 80067c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d115      	bne.n	80067fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 82ca 	beq.w	8006d86 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
      }
      return;
 80067fa:	e2c4      	b.n	8006d86 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80067fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8117 	beq.w	8006a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006816:	4b85      	ldr	r3, [pc, #532]	@ (8006a2c <HAL_UART_IRQHandler+0x298>)
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 810a 	beq.w	8006a34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_UART_IRQHandler+0xbc>
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d011      	beq.n	8006880 <HAL_UART_IRQHandler+0xec>
 800685c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2202      	movs	r2, #2
 800686e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006876:	f043 0204 	orr.w	r2, r3, #4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d011      	beq.n	80068b0 <HAL_UART_IRQHandler+0x11c>
 800688c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2204      	movs	r2, #4
 800689e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2208      	movs	r2, #8
 80068da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e2:	f043 0208 	orr.w	r2, r3, #8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <HAL_UART_IRQHandler+0x18a>
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00c      	beq.n	800691e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800690c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006914:	f043 0220 	orr.w	r2, r3, #32
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8230 	beq.w	8006d8a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006966:	2b40      	cmp	r3, #64	@ 0x40
 8006968:	d005      	beq.n	8006976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800696a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800696e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04f      	beq.n	8006a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 ff34 	bl	80077e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b40      	cmp	r3, #64	@ 0x40
 8006988:	d141      	bne.n	8006a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1d9      	bne.n	800698a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e2:	4a13      	ldr	r2, [pc, #76]	@ (8006a30 <HAL_UART_IRQHandler+0x29c>)
 80069e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fd fc7c 	bl	80042e8 <HAL_DMA_Abort_IT>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00f      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9de 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00b      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9da 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e007      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9d6 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a24:	e1b1      	b.n	8006d8a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a26:	bf00      	nop
    return;
 8006a28:	e1af      	b.n	8006d8a <HAL_UART_IRQHandler+0x5f6>
 8006a2a:	bf00      	nop
 8006a2c:	04000120 	.word	0x04000120
 8006a30:	080078ad 	.word	0x080078ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	f040 816a 	bne.w	8006d12 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8163 	beq.w	8006d12 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 815c 	beq.w	8006d12 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	f040 80d4 	bne.w	8006c1a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80ad 	beq.w	8006be2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f080 80a5 	bcs.w	8006be2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 8086 	bne.w	8006bc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1da      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b90:	f023 0310 	bic.w	r3, r3, #16
 8006b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e4      	bne.n	8006b80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fd fb56 	bl	800426c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fb f8ac 	bl	8001d38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006be0:	e0d5      	b.n	8006d8e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006be8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bec:	429a      	cmp	r2, r3
 8006bee:	f040 80ce 	bne.w	8006d8e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	f040 80c5 	bne.w	8006d8e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb f890 	bl	8001d38 <HAL_UARTEx_RxEventCallback>
      return;
 8006c18:	e0b9      	b.n	8006d8e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80ab 	beq.w	8006d92 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80a6 	beq.w	8006d92 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e4      	bne.n	8006c46 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ca0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e3      	bne.n	8006c7c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69b9      	ldr	r1, [r7, #24]
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e4      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fb f814 	bl	8001d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d10:	e03f      	b.n	8006d92 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <HAL_UART_IRQHandler+0x5a8>
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 ffb5 	bl	8007ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d3a:	e02d      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01c      	beq.n	8006d96 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
    }
    return;
 8006d64:	e017      	b.n	8006d96 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <HAL_UART_IRQHandler+0x604>
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fdaa 	bl	80078d8 <UART_EndTransmit_IT>
    return;
 8006d84:	e008      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
      return;
 8006d86:	bf00      	nop
 8006d88:	e006      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
    return;
 8006d8a:	bf00      	nop
 8006d8c:	e004      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
      return;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
      return;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_UART_IRQHandler+0x604>
    return;
 8006d96:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d98:	37e8      	adds	r7, #232	@ 0xe8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de0:	b08a      	sub	sp, #40	@ 0x28
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4ba5      	ldr	r3, [pc, #660]	@ (80070a0 <UART_SetConfig+0x2c4>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a9a      	ldr	r2, [pc, #616]	@ (80070a4 <UART_SetConfig+0x2c8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	4313      	orrs	r3, r2
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a91      	ldr	r2, [pc, #580]	@ (80070a8 <UART_SetConfig+0x2cc>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d126      	bne.n	8006eb4 <UART_SetConfig+0xd8>
 8006e66:	4b91      	ldr	r3, [pc, #580]	@ (80070ac <UART_SetConfig+0x2d0>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d81b      	bhi.n	8006eac <UART_SetConfig+0xd0>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0xa0>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e9d 	.word	0x08006e9d
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e92:	e0d6      	b.n	8007042 <UART_SetConfig+0x266>
 8006e94:	2302      	movs	r3, #2
 8006e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9a:	e0d2      	b.n	8007042 <UART_SetConfig+0x266>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea2:	e0ce      	b.n	8007042 <UART_SetConfig+0x266>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e0ca      	b.n	8007042 <UART_SetConfig+0x266>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb2:	e0c6      	b.n	8007042 <UART_SetConfig+0x266>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7d      	ldr	r2, [pc, #500]	@ (80070b0 <UART_SetConfig+0x2d4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d138      	bne.n	8006f30 <UART_SetConfig+0x154>
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80070ac <UART_SetConfig+0x2d0>)
 8006ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d82d      	bhi.n	8006f28 <UART_SetConfig+0x14c>
 8006ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <UART_SetConfig+0xf8>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006f09 	.word	0x08006f09
 8006ed8:	08006f29 	.word	0x08006f29
 8006edc:	08006f29 	.word	0x08006f29
 8006ee0:	08006f29 	.word	0x08006f29
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f29 	.word	0x08006f29
 8006eec:	08006f29 	.word	0x08006f29
 8006ef0:	08006f29 	.word	0x08006f29
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f29 	.word	0x08006f29
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f21 	.word	0x08006f21
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0e:	e098      	b.n	8007042 <UART_SetConfig+0x266>
 8006f10:	2302      	movs	r3, #2
 8006f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f16:	e094      	b.n	8007042 <UART_SetConfig+0x266>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1e:	e090      	b.n	8007042 <UART_SetConfig+0x266>
 8006f20:	2308      	movs	r3, #8
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f26:	e08c      	b.n	8007042 <UART_SetConfig+0x266>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2e:	e088      	b.n	8007042 <UART_SetConfig+0x266>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a5f      	ldr	r2, [pc, #380]	@ (80070b4 <UART_SetConfig+0x2d8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d125      	bne.n	8006f86 <UART_SetConfig+0x1aa>
 8006f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80070ac <UART_SetConfig+0x2d0>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f44:	2b30      	cmp	r3, #48	@ 0x30
 8006f46:	d016      	beq.n	8006f76 <UART_SetConfig+0x19a>
 8006f48:	2b30      	cmp	r3, #48	@ 0x30
 8006f4a:	d818      	bhi.n	8006f7e <UART_SetConfig+0x1a2>
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d00a      	beq.n	8006f66 <UART_SetConfig+0x18a>
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d814      	bhi.n	8006f7e <UART_SetConfig+0x1a2>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <UART_SetConfig+0x182>
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d008      	beq.n	8006f6e <UART_SetConfig+0x192>
 8006f5c:	e00f      	b.n	8006f7e <UART_SetConfig+0x1a2>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f64:	e06d      	b.n	8007042 <UART_SetConfig+0x266>
 8006f66:	2302      	movs	r3, #2
 8006f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6c:	e069      	b.n	8007042 <UART_SetConfig+0x266>
 8006f6e:	2304      	movs	r3, #4
 8006f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f74:	e065      	b.n	8007042 <UART_SetConfig+0x266>
 8006f76:	2308      	movs	r3, #8
 8006f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7c:	e061      	b.n	8007042 <UART_SetConfig+0x266>
 8006f7e:	2310      	movs	r3, #16
 8006f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f84:	e05d      	b.n	8007042 <UART_SetConfig+0x266>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4b      	ldr	r2, [pc, #300]	@ (80070b8 <UART_SetConfig+0x2dc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d125      	bne.n	8006fdc <UART_SetConfig+0x200>
 8006f90:	4b46      	ldr	r3, [pc, #280]	@ (80070ac <UART_SetConfig+0x2d0>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f9c:	d016      	beq.n	8006fcc <UART_SetConfig+0x1f0>
 8006f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fa0:	d818      	bhi.n	8006fd4 <UART_SetConfig+0x1f8>
 8006fa2:	2b80      	cmp	r3, #128	@ 0x80
 8006fa4:	d00a      	beq.n	8006fbc <UART_SetConfig+0x1e0>
 8006fa6:	2b80      	cmp	r3, #128	@ 0x80
 8006fa8:	d814      	bhi.n	8006fd4 <UART_SetConfig+0x1f8>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <UART_SetConfig+0x1d8>
 8006fae:	2b40      	cmp	r3, #64	@ 0x40
 8006fb0:	d008      	beq.n	8006fc4 <UART_SetConfig+0x1e8>
 8006fb2:	e00f      	b.n	8006fd4 <UART_SetConfig+0x1f8>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fba:	e042      	b.n	8007042 <UART_SetConfig+0x266>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc2:	e03e      	b.n	8007042 <UART_SetConfig+0x266>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e03a      	b.n	8007042 <UART_SetConfig+0x266>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e036      	b.n	8007042 <UART_SetConfig+0x266>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fda:	e032      	b.n	8007042 <UART_SetConfig+0x266>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a30      	ldr	r2, [pc, #192]	@ (80070a4 <UART_SetConfig+0x2c8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d12a      	bne.n	800703c <UART_SetConfig+0x260>
 8006fe6:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <UART_SetConfig+0x2d0>)
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ff4:	d01a      	beq.n	800702c <UART_SetConfig+0x250>
 8006ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ffa:	d81b      	bhi.n	8007034 <UART_SetConfig+0x258>
 8006ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007000:	d00c      	beq.n	800701c <UART_SetConfig+0x240>
 8007002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007006:	d815      	bhi.n	8007034 <UART_SetConfig+0x258>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <UART_SetConfig+0x238>
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007010:	d008      	beq.n	8007024 <UART_SetConfig+0x248>
 8007012:	e00f      	b.n	8007034 <UART_SetConfig+0x258>
 8007014:	2300      	movs	r3, #0
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e012      	b.n	8007042 <UART_SetConfig+0x266>
 800701c:	2302      	movs	r3, #2
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e00e      	b.n	8007042 <UART_SetConfig+0x266>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e00a      	b.n	8007042 <UART_SetConfig+0x266>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007032:	e006      	b.n	8007042 <UART_SetConfig+0x266>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703a:	e002      	b.n	8007042 <UART_SetConfig+0x266>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <UART_SetConfig+0x2c8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	f040 808b 	bne.w	8007164 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800704e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007052:	2b08      	cmp	r3, #8
 8007054:	d834      	bhi.n	80070c0 <UART_SetConfig+0x2e4>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <UART_SetConfig+0x280>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007081 	.word	0x08007081
 8007060:	080070c1 	.word	0x080070c1
 8007064:	08007089 	.word	0x08007089
 8007068:	080070c1 	.word	0x080070c1
 800706c:	0800708f 	.word	0x0800708f
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007080:	f7fe fa26 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8007084:	61f8      	str	r0, [r7, #28]
        break;
 8007086:	e021      	b.n	80070cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b0c      	ldr	r3, [pc, #48]	@ (80070bc <UART_SetConfig+0x2e0>)
 800708a:	61fb      	str	r3, [r7, #28]
        break;
 800708c:	e01e      	b.n	80070cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fe f987 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8007092:	61f8      	str	r0, [r7, #28]
        break;
 8007094:	e01a      	b.n	80070cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709a:	61fb      	str	r3, [r7, #28]
        break;
 800709c:	e016      	b.n	80070cc <UART_SetConfig+0x2f0>
 800709e:	bf00      	nop
 80070a0:	efff69f3 	.word	0xefff69f3
 80070a4:	40008000 	.word	0x40008000
 80070a8:	40013800 	.word	0x40013800
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40004400 	.word	0x40004400
 80070b4:	40004800 	.word	0x40004800
 80070b8:	40004c00 	.word	0x40004c00
 80070bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 80fa 	beq.w	80072c8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d305      	bcc.n	80070f0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070f6:	e0e7      	b.n	80072c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2200      	movs	r2, #0
 80070fc:	461c      	mov	r4, r3
 80070fe:	4615      	mov	r5, r2
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	022b      	lsls	r3, r5, #8
 800710a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800710e:	0222      	lsls	r2, r4, #8
 8007110:	68f9      	ldr	r1, [r7, #12]
 8007112:	6849      	ldr	r1, [r1, #4]
 8007114:	0849      	lsrs	r1, r1, #1
 8007116:	2000      	movs	r0, #0
 8007118:	4688      	mov	r8, r1
 800711a:	4681      	mov	r9, r0
 800711c:	eb12 0a08 	adds.w	sl, r2, r8
 8007120:	eb43 0b09 	adc.w	fp, r3, r9
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007132:	4650      	mov	r0, sl
 8007134:	4659      	mov	r1, fp
 8007136:	f7f9 fdaf 	bl	8000c98 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4613      	mov	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007148:	d308      	bcc.n	800715c <UART_SetConfig+0x380>
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007150:	d204      	bcs.n	800715c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e0b5      	b.n	80072c8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007162:	e0b1      	b.n	80072c8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716c:	d15d      	bne.n	800722a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800716e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007172:	2b08      	cmp	r3, #8
 8007174:	d827      	bhi.n	80071c6 <UART_SetConfig+0x3ea>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <UART_SetConfig+0x3a0>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071c7 	.word	0x080071c7
 800718c:	080071b7 	.word	0x080071b7
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071c7 	.word	0x080071c7
 8007198:	080071c7 	.word	0x080071c7
 800719c:	080071bf 	.word	0x080071bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a0:	f7fe f996 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 80071a4:	61f8      	str	r0, [r7, #28]
        break;
 80071a6:	e014      	b.n	80071d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fe f9a8 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 80071ac:	61f8      	str	r0, [r7, #28]
        break;
 80071ae:	e010      	b.n	80071d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b0:	4b4c      	ldr	r3, [pc, #304]	@ (80072e4 <UART_SetConfig+0x508>)
 80071b2:	61fb      	str	r3, [r7, #28]
        break;
 80071b4:	e00d      	b.n	80071d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b6:	f7fe f8f3 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 80071ba:	61f8      	str	r0, [r7, #28]
        break;
 80071bc:	e009      	b.n	80071d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c2:	61fb      	str	r3, [r7, #28]
        break;
 80071c4:	e005      	b.n	80071d2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d077      	beq.n	80072c8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005a      	lsls	r2, r3, #1
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	441a      	add	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b0f      	cmp	r3, #15
 80071f2:	d916      	bls.n	8007222 <UART_SetConfig+0x446>
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fa:	d212      	bcs.n	8007222 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f023 030f 	bic.w	r3, r3, #15
 8007204:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	b29b      	uxth	r3, r3
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	b29a      	uxth	r2, r3
 8007212:	8afb      	ldrh	r3, [r7, #22]
 8007214:	4313      	orrs	r3, r2
 8007216:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	8afa      	ldrh	r2, [r7, #22]
 800721e:	60da      	str	r2, [r3, #12]
 8007220:	e052      	b.n	80072c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007228:	e04e      	b.n	80072c8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800722a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800722e:	2b08      	cmp	r3, #8
 8007230:	d827      	bhi.n	8007282 <UART_SetConfig+0x4a6>
 8007232:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0x45c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007283 	.word	0x08007283
 8007248:	08007273 	.word	0x08007273
 800724c:	08007283 	.word	0x08007283
 8007250:	08007283 	.word	0x08007283
 8007254:	08007283 	.word	0x08007283
 8007258:	0800727b 	.word	0x0800727b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800725c:	f7fe f938 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8007260:	61f8      	str	r0, [r7, #28]
        break;
 8007262:	e014      	b.n	800728e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007264:	f7fe f94a 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 8007268:	61f8      	str	r0, [r7, #28]
        break;
 800726a:	e010      	b.n	800728e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4b1d      	ldr	r3, [pc, #116]	@ (80072e4 <UART_SetConfig+0x508>)
 800726e:	61fb      	str	r3, [r7, #28]
        break;
 8007270:	e00d      	b.n	800728e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fe f895 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8007276:	61f8      	str	r0, [r7, #28]
        break;
 8007278:	e009      	b.n	800728e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800727e:	61fb      	str	r3, [r7, #28]
        break;
 8007280:	e005      	b.n	800728e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800728c:	bf00      	nop
    }

    if (pclk != 0U)
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d019      	beq.n	80072c8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	085a      	lsrs	r2, r3, #1
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d909      	bls.n	80072c2 <UART_SetConfig+0x4e6>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b4:	d205      	bcs.n	80072c2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e002      	b.n	80072c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3728      	adds	r7, #40	@ 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e2:	bf00      	nop
 80072e4:	00f42400 	.word	0x00f42400

080072e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e6:	d10a      	bne.n	80073fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b098      	sub	sp, #96	@ 0x60
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800743c:	f7fb f8ce 	bl	80025dc <HAL_GetTick>
 8007440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d12e      	bne.n	80074ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f88c 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d021      	beq.n	80074ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
 800748a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e062      	b.n	8007574 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d149      	bne.n	8007550 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c4:	2200      	movs	r2, #0
 80074c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f856 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d03c      	beq.n	8007550 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	623b      	str	r3, [r7, #32]
   return(result);
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	60fb      	str	r3, [r7, #12]
   return(result);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007528:	61fa      	str	r2, [r7, #28]
 800752a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	69b9      	ldr	r1, [r7, #24]
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	617b      	str	r3, [r7, #20]
   return(result);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e011      	b.n	8007574 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3758      	adds	r7, #88	@ 0x58
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758c:	e04f      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d04b      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fb f821 	bl	80025dc <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <UART_WaitOnFlagUntilTimeout+0x30>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e04e      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d037      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d034      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b40      	cmp	r3, #64	@ 0x40
 80075c8:	d031      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d110      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2208      	movs	r2, #8
 80075de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f8ff 	bl	80077e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2208      	movs	r2, #8
 80075ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e029      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007608:	d111      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f8e5 	bl	80077e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00f      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4013      	ands	r3, r2
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	429a      	cmp	r2, r3
 800763c:	bf0c      	ite	eq
 800763e:	2301      	moveq	r3, #1
 8007640:	2300      	movne	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	429a      	cmp	r2, r3
 800764a:	d0a0      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007658:	b480      	push	{r7}
 800765a:	b097      	sub	sp, #92	@ 0x5c
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800768a:	d10e      	bne.n	80076aa <UART_Start_Receive_IT+0x52>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <UART_Start_Receive_IT+0x48>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800769a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800769e:	e02d      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	22ff      	movs	r2, #255	@ 0xff
 80076a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076a8:	e028      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <UART_Start_Receive_IT+0x76>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <UART_Start_Receive_IT+0x6c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	22ff      	movs	r2, #255	@ 0xff
 80076be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076c2:	e01b      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	227f      	movs	r2, #127	@ 0x7f
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076cc:	e016      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d6:	d10d      	bne.n	80076f4 <UART_Start_Receive_IT+0x9c>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <UART_Start_Receive_IT+0x92>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	227f      	movs	r2, #127	@ 0x7f
 80076e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076e8:	e008      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	223f      	movs	r2, #63	@ 0x3f
 80076ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076f2:	e003      	b.n	80076fc <UART_Start_Receive_IT+0xa4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2222      	movs	r2, #34	@ 0x22
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	657b      	str	r3, [r7, #84]	@ 0x54
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800772c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800773a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007748:	d107      	bne.n	800775a <UART_Start_Receive_IT+0x102>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4a21      	ldr	r2, [pc, #132]	@ (80077dc <UART_Start_Receive_IT+0x184>)
 8007756:	669a      	str	r2, [r3, #104]	@ 0x68
 8007758:	e002      	b.n	8007760 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a20      	ldr	r2, [pc, #128]	@ (80077e0 <UART_Start_Receive_IT+0x188>)
 800775e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d019      	beq.n	800779c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800777c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
 8007788:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800778c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_Start_Receive_IT+0x110>
 800779a:	e018      	b.n	80077ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f043 0320 	orr.w	r3, r3, #32
 80077b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ba:	623b      	str	r3, [r7, #32]
 80077bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	375c      	adds	r7, #92	@ 0x5c
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	08007ae9 	.word	0x08007ae9
 80077e0:	0800792d 	.word	0x0800792d

080077e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b095      	sub	sp, #84	@ 0x54
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007800:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800780a:	643b      	str	r3, [r7, #64]	@ 0x40
 800780c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	61fb      	str	r3, [r7, #28]
   return(result);
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007856:	2b01      	cmp	r3, #1
 8007858:	d118      	bne.n	800788c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	60bb      	str	r3, [r7, #8]
   return(result);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6979      	ldr	r1, [r7, #20]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	613b      	str	r3, [r7, #16]
   return(result);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078a0:	bf00      	nop
 80078a2:	3754      	adds	r7, #84	@ 0x54
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fa7c 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6979      	ldr	r1, [r7, #20]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fa3e 	bl	8006da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b09c      	sub	sp, #112	@ 0x70
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800793a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007944:	2b22      	cmp	r3, #34	@ 0x22
 8007946:	f040 80be 	bne.w	8007ac6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007950:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007954:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007958:	b2d9      	uxtb	r1, r3
 800795a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007964:	400a      	ands	r2, r1
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 80a3 	bne.w	8007ada <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80079e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80079e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a34      	ldr	r2, [pc, #208]	@ (8007ae4 <UART_RxISR_8BIT+0x1b8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01f      	beq.n	8007a58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d018      	beq.n	8007a58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	623b      	str	r3, [r7, #32]
   return(result);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d12e      	bne.n	8007abe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d103      	bne.n	8007aae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fa f93e 	bl	8001d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007abc:	e00d      	b.n	8007ada <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f978 	bl	8006db4 <HAL_UART_RxCpltCallback>
}
 8007ac4:	e009      	b.n	8007ada <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	8b1b      	ldrh	r3, [r3, #24]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0208 	orr.w	r2, r2, #8
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	831a      	strh	r2, [r3, #24]
}
 8007ada:	bf00      	nop
 8007adc:	3770      	adds	r7, #112	@ 0x70
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40008000 	.word	0x40008000

08007ae8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b09c      	sub	sp, #112	@ 0x70
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007af6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b00:	2b22      	cmp	r3, #34	@ 0x22
 8007b02:	f040 80be 	bne.w	8007c82 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b1e:	4013      	ands	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 80a3 	bne.w	8007c96 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e6      	bne.n	8007b50 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ba2:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ba8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a34      	ldr	r2, [pc, #208]	@ (8007ca0 <UART_RxISR_16BIT+0x1b8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d01f      	beq.n	8007c14 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d018      	beq.n	8007c14 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c02:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d12e      	bne.n	8007c7a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2b10      	cmp	r3, #16
 8007c60:	d103      	bne.n	8007c6a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2210      	movs	r2, #16
 8007c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fa f860 	bl	8001d38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c78:	e00d      	b.n	8007c96 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff f89a 	bl	8006db4 <HAL_UART_RxCpltCallback>
}
 8007c80:	e009      	b.n	8007c96 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	8b1b      	ldrh	r3, [r3, #24]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	b292      	uxth	r2, r2
 8007c94:	831a      	strh	r2, [r3, #24]
}
 8007c96:	bf00      	nop
 8007c98:	3770      	adds	r7, #112	@ 0x70
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40008000 	.word	0x40008000

08007ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08c      	sub	sp, #48	@ 0x30
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d13b      	bne.n	8007d4e <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e034      	b.n	8007d50 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff fcad 	bl	8007658 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d11d      	bne.n	8007d42 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f043 0310 	orr.w	r3, r3, #16
 8007d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6a39      	ldr	r1, [r7, #32]
 8007d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e6      	bne.n	8007d0e <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8007d40:	e002      	b.n	8007d48 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8007d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d4c:	e000      	b.n	8007d50 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8007d4e:	2302      	movs	r3, #2
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3730      	adds	r7, #48	@ 0x30
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <__cvt>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	ec57 6b10 	vmov	r6, r7, d0
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	460c      	mov	r4, r1
 8007d64:	4619      	mov	r1, r3
 8007d66:	463b      	mov	r3, r7
 8007d68:	bfbb      	ittet	lt
 8007d6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d6e:	461f      	movlt	r7, r3
 8007d70:	2300      	movge	r3, #0
 8007d72:	232d      	movlt	r3, #45	@ 0x2d
 8007d74:	700b      	strb	r3, [r1, #0]
 8007d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d7c:	4691      	mov	r9, r2
 8007d7e:	f023 0820 	bic.w	r8, r3, #32
 8007d82:	bfbc      	itt	lt
 8007d84:	4632      	movlt	r2, r6
 8007d86:	4616      	movlt	r6, r2
 8007d88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d8c:	d005      	beq.n	8007d9a <__cvt+0x42>
 8007d8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d92:	d100      	bne.n	8007d96 <__cvt+0x3e>
 8007d94:	3401      	adds	r4, #1
 8007d96:	2102      	movs	r1, #2
 8007d98:	e000      	b.n	8007d9c <__cvt+0x44>
 8007d9a:	2103      	movs	r1, #3
 8007d9c:	ab03      	add	r3, sp, #12
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	ab02      	add	r3, sp, #8
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	ec47 6b10 	vmov	d0, r6, r7
 8007da8:	4653      	mov	r3, sl
 8007daa:	4622      	mov	r2, r4
 8007dac:	f001 f888 	bl	8008ec0 <_dtoa_r>
 8007db0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007db4:	4605      	mov	r5, r0
 8007db6:	d119      	bne.n	8007dec <__cvt+0x94>
 8007db8:	f019 0f01 	tst.w	r9, #1
 8007dbc:	d00e      	beq.n	8007ddc <__cvt+0x84>
 8007dbe:	eb00 0904 	add.w	r9, r0, r4
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dce:	b108      	cbz	r0, 8007dd4 <__cvt+0x7c>
 8007dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dd4:	2230      	movs	r2, #48	@ 0x30
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	454b      	cmp	r3, r9
 8007dda:	d31e      	bcc.n	8007e1a <__cvt+0xc2>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007de0:	1b5b      	subs	r3, r3, r5
 8007de2:	4628      	mov	r0, r5
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	b004      	add	sp, #16
 8007de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007df0:	eb00 0904 	add.w	r9, r0, r4
 8007df4:	d1e5      	bne.n	8007dc2 <__cvt+0x6a>
 8007df6:	7803      	ldrb	r3, [r0, #0]
 8007df8:	2b30      	cmp	r3, #48	@ 0x30
 8007dfa:	d10a      	bne.n	8007e12 <__cvt+0xba>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e08:	b918      	cbnz	r0, 8007e12 <__cvt+0xba>
 8007e0a:	f1c4 0401 	rsb	r4, r4, #1
 8007e0e:	f8ca 4000 	str.w	r4, [sl]
 8007e12:	f8da 3000 	ldr.w	r3, [sl]
 8007e16:	4499      	add	r9, r3
 8007e18:	e7d3      	b.n	8007dc2 <__cvt+0x6a>
 8007e1a:	1c59      	adds	r1, r3, #1
 8007e1c:	9103      	str	r1, [sp, #12]
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e7d9      	b.n	8007dd6 <__cvt+0x7e>

08007e22 <__exponent>:
 8007e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e24:	2900      	cmp	r1, #0
 8007e26:	bfba      	itte	lt
 8007e28:	4249      	neglt	r1, r1
 8007e2a:	232d      	movlt	r3, #45	@ 0x2d
 8007e2c:	232b      	movge	r3, #43	@ 0x2b
 8007e2e:	2909      	cmp	r1, #9
 8007e30:	7002      	strb	r2, [r0, #0]
 8007e32:	7043      	strb	r3, [r0, #1]
 8007e34:	dd29      	ble.n	8007e8a <__exponent+0x68>
 8007e36:	f10d 0307 	add.w	r3, sp, #7
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	270a      	movs	r7, #10
 8007e3e:	461a      	mov	r2, r3
 8007e40:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e44:	fb07 1416 	mls	r4, r7, r6, r1
 8007e48:	3430      	adds	r4, #48	@ 0x30
 8007e4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2c63      	cmp	r4, #99	@ 0x63
 8007e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e56:	4631      	mov	r1, r6
 8007e58:	dcf1      	bgt.n	8007e3e <__exponent+0x1c>
 8007e5a:	3130      	adds	r1, #48	@ 0x30
 8007e5c:	1e94      	subs	r4, r2, #2
 8007e5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e62:	1c41      	adds	r1, r0, #1
 8007e64:	4623      	mov	r3, r4
 8007e66:	42ab      	cmp	r3, r5
 8007e68:	d30a      	bcc.n	8007e80 <__exponent+0x5e>
 8007e6a:	f10d 0309 	add.w	r3, sp, #9
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	42ac      	cmp	r4, r5
 8007e72:	bf88      	it	hi
 8007e74:	2300      	movhi	r3, #0
 8007e76:	3302      	adds	r3, #2
 8007e78:	4403      	add	r3, r0
 8007e7a:	1a18      	subs	r0, r3, r0
 8007e7c:	b003      	add	sp, #12
 8007e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e88:	e7ed      	b.n	8007e66 <__exponent+0x44>
 8007e8a:	2330      	movs	r3, #48	@ 0x30
 8007e8c:	3130      	adds	r1, #48	@ 0x30
 8007e8e:	7083      	strb	r3, [r0, #2]
 8007e90:	70c1      	strb	r1, [r0, #3]
 8007e92:	1d03      	adds	r3, r0, #4
 8007e94:	e7f1      	b.n	8007e7a <__exponent+0x58>
	...

08007e98 <_printf_float>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	b08d      	sub	sp, #52	@ 0x34
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	f000 ff01 	bl	8008cb0 <_localeconv_r>
 8007eae:	6803      	ldr	r3, [r0, #0]
 8007eb0:	9304      	str	r3, [sp, #16]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7f8 f9e4 	bl	8000280 <strlen>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	9005      	str	r0, [sp, #20]
 8007ec2:	3307      	adds	r3, #7
 8007ec4:	f023 0307 	bic.w	r3, r3, #7
 8007ec8:	f103 0208 	add.w	r2, r3, #8
 8007ecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ed4:	f8c8 2000 	str.w	r2, [r8]
 8007ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007edc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ee0:	9307      	str	r3, [sp, #28]
 8007ee2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eee:	4b9c      	ldr	r3, [pc, #624]	@ (8008160 <_printf_float+0x2c8>)
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	f7f8 fe22 	bl	8000b3c <__aeabi_dcmpun>
 8007ef8:	bb70      	cbnz	r0, 8007f58 <_printf_float+0xc0>
 8007efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efe:	4b98      	ldr	r3, [pc, #608]	@ (8008160 <_printf_float+0x2c8>)
 8007f00:	f04f 32ff 	mov.w	r2, #4294967295
 8007f04:	f7f8 fdfc 	bl	8000b00 <__aeabi_dcmple>
 8007f08:	bb30      	cbnz	r0, 8007f58 <_printf_float+0xc0>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8007f16:	b110      	cbz	r0, 8007f1e <_printf_float+0x86>
 8007f18:	232d      	movs	r3, #45	@ 0x2d
 8007f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f1e:	4a91      	ldr	r2, [pc, #580]	@ (8008164 <_printf_float+0x2cc>)
 8007f20:	4b91      	ldr	r3, [pc, #580]	@ (8008168 <_printf_float+0x2d0>)
 8007f22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f26:	bf94      	ite	ls
 8007f28:	4690      	movls	r8, r2
 8007f2a:	4698      	movhi	r8, r3
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	f02b 0304 	bic.w	r3, fp, #4
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	f04f 0900 	mov.w	r9, #0
 8007f3a:	9700      	str	r7, [sp, #0]
 8007f3c:	4633      	mov	r3, r6
 8007f3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f9d2 	bl	80082ec <_printf_common>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f040 808d 	bne.w	8008068 <_printf_float+0x1d0>
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f52:	b00d      	add	sp, #52	@ 0x34
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	4649      	mov	r1, r9
 8007f60:	f7f8 fdec 	bl	8000b3c <__aeabi_dcmpun>
 8007f64:	b140      	cbz	r0, 8007f78 <_printf_float+0xe0>
 8007f66:	464b      	mov	r3, r9
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbc      	itt	lt
 8007f6c:	232d      	movlt	r3, #45	@ 0x2d
 8007f6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f72:	4a7e      	ldr	r2, [pc, #504]	@ (800816c <_printf_float+0x2d4>)
 8007f74:	4b7e      	ldr	r3, [pc, #504]	@ (8008170 <_printf_float+0x2d8>)
 8007f76:	e7d4      	b.n	8007f22 <_printf_float+0x8a>
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f7e:	9206      	str	r2, [sp, #24]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	d13b      	bne.n	8007ffc <_printf_float+0x164>
 8007f84:	2306      	movs	r3, #6
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	6022      	str	r2, [r4, #0]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f98:	ab09      	add	r3, sp, #36	@ 0x24
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	ec49 8b10 	vmov	d0, r8, r9
 8007fa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f7ff fed6 	bl	8007d58 <__cvt>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fb0:	2b47      	cmp	r3, #71	@ 0x47
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	d129      	bne.n	800800a <_printf_float+0x172>
 8007fb6:	1cc8      	adds	r0, r1, #3
 8007fb8:	db02      	blt.n	8007fc0 <_printf_float+0x128>
 8007fba:	6863      	ldr	r3, [r4, #4]
 8007fbc:	4299      	cmp	r1, r3
 8007fbe:	dd41      	ble.n	8008044 <_printf_float+0x1ac>
 8007fc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fc4:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc8:	3901      	subs	r1, #1
 8007fca:	4652      	mov	r2, sl
 8007fcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fd2:	f7ff ff26 	bl	8007e22 <__exponent>
 8007fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fd8:	1813      	adds	r3, r2, r0
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	4681      	mov	r9, r0
 8007fde:	6123      	str	r3, [r4, #16]
 8007fe0:	dc02      	bgt.n	8007fe8 <_printf_float+0x150>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	07d2      	lsls	r2, r2, #31
 8007fe6:	d501      	bpl.n	8007fec <_printf_float+0x154>
 8007fe8:	3301      	adds	r3, #1
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0a2      	beq.n	8007f3a <_printf_float+0xa2>
 8007ff4:	232d      	movs	r3, #45	@ 0x2d
 8007ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ffa:	e79e      	b.n	8007f3a <_printf_float+0xa2>
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	2a47      	cmp	r2, #71	@ 0x47
 8008000:	d1c2      	bne.n	8007f88 <_printf_float+0xf0>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1c0      	bne.n	8007f88 <_printf_float+0xf0>
 8008006:	2301      	movs	r3, #1
 8008008:	e7bd      	b.n	8007f86 <_printf_float+0xee>
 800800a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800800e:	d9db      	bls.n	8007fc8 <_printf_float+0x130>
 8008010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008014:	d118      	bne.n	8008048 <_printf_float+0x1b0>
 8008016:	2900      	cmp	r1, #0
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	dd0b      	ble.n	8008034 <_printf_float+0x19c>
 800801c:	6121      	str	r1, [r4, #16]
 800801e:	b913      	cbnz	r3, 8008026 <_printf_float+0x18e>
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	07d0      	lsls	r0, r2, #31
 8008024:	d502      	bpl.n	800802c <_printf_float+0x194>
 8008026:	3301      	adds	r3, #1
 8008028:	440b      	add	r3, r1
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	e7db      	b.n	8007fec <_printf_float+0x154>
 8008034:	b913      	cbnz	r3, 800803c <_printf_float+0x1a4>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	07d2      	lsls	r2, r2, #31
 800803a:	d501      	bpl.n	8008040 <_printf_float+0x1a8>
 800803c:	3302      	adds	r3, #2
 800803e:	e7f4      	b.n	800802a <_printf_float+0x192>
 8008040:	2301      	movs	r3, #1
 8008042:	e7f2      	b.n	800802a <_printf_float+0x192>
 8008044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800804a:	4299      	cmp	r1, r3
 800804c:	db05      	blt.n	800805a <_printf_float+0x1c2>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	6121      	str	r1, [r4, #16]
 8008052:	07d8      	lsls	r0, r3, #31
 8008054:	d5ea      	bpl.n	800802c <_printf_float+0x194>
 8008056:	1c4b      	adds	r3, r1, #1
 8008058:	e7e7      	b.n	800802a <_printf_float+0x192>
 800805a:	2900      	cmp	r1, #0
 800805c:	bfd4      	ite	le
 800805e:	f1c1 0202 	rsble	r2, r1, #2
 8008062:	2201      	movgt	r2, #1
 8008064:	4413      	add	r3, r2
 8008066:	e7e0      	b.n	800802a <_printf_float+0x192>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	055a      	lsls	r2, r3, #21
 800806c:	d407      	bmi.n	800807e <_printf_float+0x1e6>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	4642      	mov	r2, r8
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	d12b      	bne.n	80080d4 <_printf_float+0x23c>
 800807c:	e767      	b.n	8007f4e <_printf_float+0xb6>
 800807e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008082:	f240 80dd 	bls.w	8008240 <_printf_float+0x3a8>
 8008086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800808a:	2200      	movs	r2, #0
 800808c:	2300      	movs	r3, #0
 800808e:	f7f8 fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008092:	2800      	cmp	r0, #0
 8008094:	d033      	beq.n	80080fe <_printf_float+0x266>
 8008096:	4a37      	ldr	r2, [pc, #220]	@ (8008174 <_printf_float+0x2dc>)
 8008098:	2301      	movs	r3, #1
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f af54 	beq.w	8007f4e <_printf_float+0xb6>
 80080a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080aa:	4543      	cmp	r3, r8
 80080ac:	db02      	blt.n	80080b4 <_printf_float+0x21c>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	07d8      	lsls	r0, r3, #31
 80080b2:	d50f      	bpl.n	80080d4 <_printf_float+0x23c>
 80080b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	f43f af45 	beq.w	8007f4e <_printf_float+0xb6>
 80080c4:	f04f 0900 	mov.w	r9, #0
 80080c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80080cc:	f104 0a1a 	add.w	sl, r4, #26
 80080d0:	45c8      	cmp	r8, r9
 80080d2:	dc09      	bgt.n	80080e8 <_printf_float+0x250>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	079b      	lsls	r3, r3, #30
 80080d8:	f100 8103 	bmi.w	80082e2 <_printf_float+0x44a>
 80080dc:	68e0      	ldr	r0, [r4, #12]
 80080de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e0:	4298      	cmp	r0, r3
 80080e2:	bfb8      	it	lt
 80080e4:	4618      	movlt	r0, r3
 80080e6:	e734      	b.n	8007f52 <_printf_float+0xba>
 80080e8:	2301      	movs	r3, #1
 80080ea:	4652      	mov	r2, sl
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f af2b 	beq.w	8007f4e <_printf_float+0xb6>
 80080f8:	f109 0901 	add.w	r9, r9, #1
 80080fc:	e7e8      	b.n	80080d0 <_printf_float+0x238>
 80080fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc39      	bgt.n	8008178 <_printf_float+0x2e0>
 8008104:	4a1b      	ldr	r2, [pc, #108]	@ (8008174 <_printf_float+0x2dc>)
 8008106:	2301      	movs	r3, #1
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af1d 	beq.w	8007f4e <_printf_float+0xb6>
 8008114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008118:	ea59 0303 	orrs.w	r3, r9, r3
 800811c:	d102      	bne.n	8008124 <_printf_float+0x28c>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	07d9      	lsls	r1, r3, #31
 8008122:	d5d7      	bpl.n	80080d4 <_printf_float+0x23c>
 8008124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f af0d 	beq.w	8007f4e <_printf_float+0xb6>
 8008134:	f04f 0a00 	mov.w	sl, #0
 8008138:	f104 0b1a 	add.w	fp, r4, #26
 800813c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813e:	425b      	negs	r3, r3
 8008140:	4553      	cmp	r3, sl
 8008142:	dc01      	bgt.n	8008148 <_printf_float+0x2b0>
 8008144:	464b      	mov	r3, r9
 8008146:	e793      	b.n	8008070 <_printf_float+0x1d8>
 8008148:	2301      	movs	r3, #1
 800814a:	465a      	mov	r2, fp
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	f43f aefb 	beq.w	8007f4e <_printf_float+0xb6>
 8008158:	f10a 0a01 	add.w	sl, sl, #1
 800815c:	e7ee      	b.n	800813c <_printf_float+0x2a4>
 800815e:	bf00      	nop
 8008160:	7fefffff 	.word	0x7fefffff
 8008164:	0800c59c 	.word	0x0800c59c
 8008168:	0800c5a0 	.word	0x0800c5a0
 800816c:	0800c5a4 	.word	0x0800c5a4
 8008170:	0800c5a8 	.word	0x0800c5a8
 8008174:	0800c5ac 	.word	0x0800c5ac
 8008178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800817a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800817e:	4553      	cmp	r3, sl
 8008180:	bfa8      	it	ge
 8008182:	4653      	movge	r3, sl
 8008184:	2b00      	cmp	r3, #0
 8008186:	4699      	mov	r9, r3
 8008188:	dc36      	bgt.n	80081f8 <_printf_float+0x360>
 800818a:	f04f 0b00 	mov.w	fp, #0
 800818e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008192:	f104 021a 	add.w	r2, r4, #26
 8008196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008198:	9306      	str	r3, [sp, #24]
 800819a:	eba3 0309 	sub.w	r3, r3, r9
 800819e:	455b      	cmp	r3, fp
 80081a0:	dc31      	bgt.n	8008206 <_printf_float+0x36e>
 80081a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a4:	459a      	cmp	sl, r3
 80081a6:	dc3a      	bgt.n	800821e <_printf_float+0x386>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	07da      	lsls	r2, r3, #31
 80081ac:	d437      	bmi.n	800821e <_printf_float+0x386>
 80081ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b0:	ebaa 0903 	sub.w	r9, sl, r3
 80081b4:	9b06      	ldr	r3, [sp, #24]
 80081b6:	ebaa 0303 	sub.w	r3, sl, r3
 80081ba:	4599      	cmp	r9, r3
 80081bc:	bfa8      	it	ge
 80081be:	4699      	movge	r9, r3
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	dc33      	bgt.n	800822e <_printf_float+0x396>
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ce:	f104 0b1a 	add.w	fp, r4, #26
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	ebaa 0303 	sub.w	r3, sl, r3
 80081d8:	eba3 0309 	sub.w	r3, r3, r9
 80081dc:	4543      	cmp	r3, r8
 80081de:	f77f af79 	ble.w	80080d4 <_printf_float+0x23c>
 80081e2:	2301      	movs	r3, #1
 80081e4:	465a      	mov	r2, fp
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	f43f aeae 	beq.w	8007f4e <_printf_float+0xb6>
 80081f2:	f108 0801 	add.w	r8, r8, #1
 80081f6:	e7ec      	b.n	80081d2 <_printf_float+0x33a>
 80081f8:	4642      	mov	r2, r8
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	d1c2      	bne.n	800818a <_printf_float+0x2f2>
 8008204:	e6a3      	b.n	8007f4e <_printf_float+0xb6>
 8008206:	2301      	movs	r3, #1
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	9206      	str	r2, [sp, #24]
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	f43f ae9c 	beq.w	8007f4e <_printf_float+0xb6>
 8008216:	9a06      	ldr	r2, [sp, #24]
 8008218:	f10b 0b01 	add.w	fp, fp, #1
 800821c:	e7bb      	b.n	8008196 <_printf_float+0x2fe>
 800821e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	d1c0      	bne.n	80081ae <_printf_float+0x316>
 800822c:	e68f      	b.n	8007f4e <_printf_float+0xb6>
 800822e:	9a06      	ldr	r2, [sp, #24]
 8008230:	464b      	mov	r3, r9
 8008232:	4442      	add	r2, r8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	d1c3      	bne.n	80081c6 <_printf_float+0x32e>
 800823e:	e686      	b.n	8007f4e <_printf_float+0xb6>
 8008240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008244:	f1ba 0f01 	cmp.w	sl, #1
 8008248:	dc01      	bgt.n	800824e <_printf_float+0x3b6>
 800824a:	07db      	lsls	r3, r3, #31
 800824c:	d536      	bpl.n	80082bc <_printf_float+0x424>
 800824e:	2301      	movs	r3, #1
 8008250:	4642      	mov	r2, r8
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	f43f ae78 	beq.w	8007f4e <_printf_float+0xb6>
 800825e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	f43f ae70 	beq.w	8007f4e <_printf_float+0xb6>
 800826e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827a:	f7f8 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800827e:	b9c0      	cbnz	r0, 80082b2 <_printf_float+0x41a>
 8008280:	4653      	mov	r3, sl
 8008282:	f108 0201 	add.w	r2, r8, #1
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d10c      	bne.n	80082aa <_printf_float+0x412>
 8008290:	e65d      	b.n	8007f4e <_printf_float+0xb6>
 8008292:	2301      	movs	r3, #1
 8008294:	465a      	mov	r2, fp
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae56 	beq.w	8007f4e <_printf_float+0xb6>
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	45d0      	cmp	r8, sl
 80082a8:	dbf3      	blt.n	8008292 <_printf_float+0x3fa>
 80082aa:	464b      	mov	r3, r9
 80082ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80082b0:	e6df      	b.n	8008072 <_printf_float+0x1da>
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	f104 0b1a 	add.w	fp, r4, #26
 80082ba:	e7f4      	b.n	80082a6 <_printf_float+0x40e>
 80082bc:	2301      	movs	r3, #1
 80082be:	4642      	mov	r2, r8
 80082c0:	e7e1      	b.n	8008286 <_printf_float+0x3ee>
 80082c2:	2301      	movs	r3, #1
 80082c4:	464a      	mov	r2, r9
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f ae3e 	beq.w	8007f4e <_printf_float+0xb6>
 80082d2:	f108 0801 	add.w	r8, r8, #1
 80082d6:	68e3      	ldr	r3, [r4, #12]
 80082d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082da:	1a5b      	subs	r3, r3, r1
 80082dc:	4543      	cmp	r3, r8
 80082de:	dcf0      	bgt.n	80082c2 <_printf_float+0x42a>
 80082e0:	e6fc      	b.n	80080dc <_printf_float+0x244>
 80082e2:	f04f 0800 	mov.w	r8, #0
 80082e6:	f104 0919 	add.w	r9, r4, #25
 80082ea:	e7f4      	b.n	80082d6 <_printf_float+0x43e>

080082ec <_printf_common>:
 80082ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f0:	4616      	mov	r6, r2
 80082f2:	4698      	mov	r8, r3
 80082f4:	688a      	ldr	r2, [r1, #8]
 80082f6:	690b      	ldr	r3, [r1, #16]
 80082f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	bfb8      	it	lt
 8008300:	4613      	movlt	r3, r2
 8008302:	6033      	str	r3, [r6, #0]
 8008304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008308:	4607      	mov	r7, r0
 800830a:	460c      	mov	r4, r1
 800830c:	b10a      	cbz	r2, 8008312 <_printf_common+0x26>
 800830e:	3301      	adds	r3, #1
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	0699      	lsls	r1, r3, #26
 8008316:	bf42      	ittt	mi
 8008318:	6833      	ldrmi	r3, [r6, #0]
 800831a:	3302      	addmi	r3, #2
 800831c:	6033      	strmi	r3, [r6, #0]
 800831e:	6825      	ldr	r5, [r4, #0]
 8008320:	f015 0506 	ands.w	r5, r5, #6
 8008324:	d106      	bne.n	8008334 <_printf_common+0x48>
 8008326:	f104 0a19 	add.w	sl, r4, #25
 800832a:	68e3      	ldr	r3, [r4, #12]
 800832c:	6832      	ldr	r2, [r6, #0]
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	42ab      	cmp	r3, r5
 8008332:	dc26      	bgt.n	8008382 <_printf_common+0x96>
 8008334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008338:	6822      	ldr	r2, [r4, #0]
 800833a:	3b00      	subs	r3, #0
 800833c:	bf18      	it	ne
 800833e:	2301      	movne	r3, #1
 8008340:	0692      	lsls	r2, r2, #26
 8008342:	d42b      	bmi.n	800839c <_printf_common+0xb0>
 8008344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008348:	4641      	mov	r1, r8
 800834a:	4638      	mov	r0, r7
 800834c:	47c8      	blx	r9
 800834e:	3001      	adds	r0, #1
 8008350:	d01e      	beq.n	8008390 <_printf_common+0xa4>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	6922      	ldr	r2, [r4, #16]
 8008356:	f003 0306 	and.w	r3, r3, #6
 800835a:	2b04      	cmp	r3, #4
 800835c:	bf02      	ittt	eq
 800835e:	68e5      	ldreq	r5, [r4, #12]
 8008360:	6833      	ldreq	r3, [r6, #0]
 8008362:	1aed      	subeq	r5, r5, r3
 8008364:	68a3      	ldr	r3, [r4, #8]
 8008366:	bf0c      	ite	eq
 8008368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800836c:	2500      	movne	r5, #0
 800836e:	4293      	cmp	r3, r2
 8008370:	bfc4      	itt	gt
 8008372:	1a9b      	subgt	r3, r3, r2
 8008374:	18ed      	addgt	r5, r5, r3
 8008376:	2600      	movs	r6, #0
 8008378:	341a      	adds	r4, #26
 800837a:	42b5      	cmp	r5, r6
 800837c:	d11a      	bne.n	80083b4 <_printf_common+0xc8>
 800837e:	2000      	movs	r0, #0
 8008380:	e008      	b.n	8008394 <_printf_common+0xa8>
 8008382:	2301      	movs	r3, #1
 8008384:	4652      	mov	r2, sl
 8008386:	4641      	mov	r1, r8
 8008388:	4638      	mov	r0, r7
 800838a:	47c8      	blx	r9
 800838c:	3001      	adds	r0, #1
 800838e:	d103      	bne.n	8008398 <_printf_common+0xac>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	3501      	adds	r5, #1
 800839a:	e7c6      	b.n	800832a <_printf_common+0x3e>
 800839c:	18e1      	adds	r1, r4, r3
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	2030      	movs	r0, #48	@ 0x30
 80083a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083a6:	4422      	add	r2, r4
 80083a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083b0:	3302      	adds	r3, #2
 80083b2:	e7c7      	b.n	8008344 <_printf_common+0x58>
 80083b4:	2301      	movs	r3, #1
 80083b6:	4622      	mov	r2, r4
 80083b8:	4641      	mov	r1, r8
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c8      	blx	r9
 80083be:	3001      	adds	r0, #1
 80083c0:	d0e6      	beq.n	8008390 <_printf_common+0xa4>
 80083c2:	3601      	adds	r6, #1
 80083c4:	e7d9      	b.n	800837a <_printf_common+0x8e>
	...

080083c8 <_printf_i>:
 80083c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	7e0f      	ldrb	r7, [r1, #24]
 80083ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083d0:	2f78      	cmp	r7, #120	@ 0x78
 80083d2:	4691      	mov	r9, r2
 80083d4:	4680      	mov	r8, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	469a      	mov	sl, r3
 80083da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083de:	d807      	bhi.n	80083f0 <_printf_i+0x28>
 80083e0:	2f62      	cmp	r7, #98	@ 0x62
 80083e2:	d80a      	bhi.n	80083fa <_printf_i+0x32>
 80083e4:	2f00      	cmp	r7, #0
 80083e6:	f000 80d2 	beq.w	800858e <_printf_i+0x1c6>
 80083ea:	2f58      	cmp	r7, #88	@ 0x58
 80083ec:	f000 80b9 	beq.w	8008562 <_printf_i+0x19a>
 80083f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083f8:	e03a      	b.n	8008470 <_printf_i+0xa8>
 80083fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083fe:	2b15      	cmp	r3, #21
 8008400:	d8f6      	bhi.n	80083f0 <_printf_i+0x28>
 8008402:	a101      	add	r1, pc, #4	@ (adr r1, 8008408 <_printf_i+0x40>)
 8008404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008408:	08008461 	.word	0x08008461
 800840c:	08008475 	.word	0x08008475
 8008410:	080083f1 	.word	0x080083f1
 8008414:	080083f1 	.word	0x080083f1
 8008418:	080083f1 	.word	0x080083f1
 800841c:	080083f1 	.word	0x080083f1
 8008420:	08008475 	.word	0x08008475
 8008424:	080083f1 	.word	0x080083f1
 8008428:	080083f1 	.word	0x080083f1
 800842c:	080083f1 	.word	0x080083f1
 8008430:	080083f1 	.word	0x080083f1
 8008434:	08008575 	.word	0x08008575
 8008438:	0800849f 	.word	0x0800849f
 800843c:	0800852f 	.word	0x0800852f
 8008440:	080083f1 	.word	0x080083f1
 8008444:	080083f1 	.word	0x080083f1
 8008448:	08008597 	.word	0x08008597
 800844c:	080083f1 	.word	0x080083f1
 8008450:	0800849f 	.word	0x0800849f
 8008454:	080083f1 	.word	0x080083f1
 8008458:	080083f1 	.word	0x080083f1
 800845c:	08008537 	.word	0x08008537
 8008460:	6833      	ldr	r3, [r6, #0]
 8008462:	1d1a      	adds	r2, r3, #4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6032      	str	r2, [r6, #0]
 8008468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800846c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008470:	2301      	movs	r3, #1
 8008472:	e09d      	b.n	80085b0 <_printf_i+0x1e8>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	6031      	str	r1, [r6, #0]
 800847c:	0606      	lsls	r6, r0, #24
 800847e:	d501      	bpl.n	8008484 <_printf_i+0xbc>
 8008480:	681d      	ldr	r5, [r3, #0]
 8008482:	e003      	b.n	800848c <_printf_i+0xc4>
 8008484:	0645      	lsls	r5, r0, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0xb8>
 8008488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800848c:	2d00      	cmp	r5, #0
 800848e:	da03      	bge.n	8008498 <_printf_i+0xd0>
 8008490:	232d      	movs	r3, #45	@ 0x2d
 8008492:	426d      	negs	r5, r5
 8008494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008498:	4859      	ldr	r0, [pc, #356]	@ (8008600 <_printf_i+0x238>)
 800849a:	230a      	movs	r3, #10
 800849c:	e011      	b.n	80084c2 <_printf_i+0xfa>
 800849e:	6821      	ldr	r1, [r4, #0]
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	0608      	lsls	r0, r1, #24
 80084a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084a8:	d402      	bmi.n	80084b0 <_printf_i+0xe8>
 80084aa:	0649      	lsls	r1, r1, #25
 80084ac:	bf48      	it	mi
 80084ae:	b2ad      	uxthmi	r5, r5
 80084b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084b2:	4853      	ldr	r0, [pc, #332]	@ (8008600 <_printf_i+0x238>)
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	bf14      	ite	ne
 80084b8:	230a      	movne	r3, #10
 80084ba:	2308      	moveq	r3, #8
 80084bc:	2100      	movs	r1, #0
 80084be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084c2:	6866      	ldr	r6, [r4, #4]
 80084c4:	60a6      	str	r6, [r4, #8]
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	bfa2      	ittt	ge
 80084ca:	6821      	ldrge	r1, [r4, #0]
 80084cc:	f021 0104 	bicge.w	r1, r1, #4
 80084d0:	6021      	strge	r1, [r4, #0]
 80084d2:	b90d      	cbnz	r5, 80084d8 <_printf_i+0x110>
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	d04b      	beq.n	8008570 <_printf_i+0x1a8>
 80084d8:	4616      	mov	r6, r2
 80084da:	fbb5 f1f3 	udiv	r1, r5, r3
 80084de:	fb03 5711 	mls	r7, r3, r1, r5
 80084e2:	5dc7      	ldrb	r7, [r0, r7]
 80084e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084e8:	462f      	mov	r7, r5
 80084ea:	42bb      	cmp	r3, r7
 80084ec:	460d      	mov	r5, r1
 80084ee:	d9f4      	bls.n	80084da <_printf_i+0x112>
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d10b      	bne.n	800850c <_printf_i+0x144>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	07df      	lsls	r7, r3, #31
 80084f8:	d508      	bpl.n	800850c <_printf_i+0x144>
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6861      	ldr	r1, [r4, #4]
 80084fe:	4299      	cmp	r1, r3
 8008500:	bfde      	ittt	le
 8008502:	2330      	movle	r3, #48	@ 0x30
 8008504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008508:	f106 36ff 	addle.w	r6, r6, #4294967295
 800850c:	1b92      	subs	r2, r2, r6
 800850e:	6122      	str	r2, [r4, #16]
 8008510:	f8cd a000 	str.w	sl, [sp]
 8008514:	464b      	mov	r3, r9
 8008516:	aa03      	add	r2, sp, #12
 8008518:	4621      	mov	r1, r4
 800851a:	4640      	mov	r0, r8
 800851c:	f7ff fee6 	bl	80082ec <_printf_common>
 8008520:	3001      	adds	r0, #1
 8008522:	d14a      	bne.n	80085ba <_printf_i+0x1f2>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b004      	add	sp, #16
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	f043 0320 	orr.w	r3, r3, #32
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	4833      	ldr	r0, [pc, #204]	@ (8008604 <_printf_i+0x23c>)
 8008538:	2778      	movs	r7, #120	@ 0x78
 800853a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	6831      	ldr	r1, [r6, #0]
 8008542:	061f      	lsls	r7, r3, #24
 8008544:	f851 5b04 	ldr.w	r5, [r1], #4
 8008548:	d402      	bmi.n	8008550 <_printf_i+0x188>
 800854a:	065f      	lsls	r7, r3, #25
 800854c:	bf48      	it	mi
 800854e:	b2ad      	uxthmi	r5, r5
 8008550:	6031      	str	r1, [r6, #0]
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	bf44      	itt	mi
 8008556:	f043 0320 	orrmi.w	r3, r3, #32
 800855a:	6023      	strmi	r3, [r4, #0]
 800855c:	b11d      	cbz	r5, 8008566 <_printf_i+0x19e>
 800855e:	2310      	movs	r3, #16
 8008560:	e7ac      	b.n	80084bc <_printf_i+0xf4>
 8008562:	4827      	ldr	r0, [pc, #156]	@ (8008600 <_printf_i+0x238>)
 8008564:	e7e9      	b.n	800853a <_printf_i+0x172>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f023 0320 	bic.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	e7f6      	b.n	800855e <_printf_i+0x196>
 8008570:	4616      	mov	r6, r2
 8008572:	e7bd      	b.n	80084f0 <_printf_i+0x128>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	6961      	ldr	r1, [r4, #20]
 800857a:	1d18      	adds	r0, r3, #4
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	062e      	lsls	r6, r5, #24
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	d501      	bpl.n	8008588 <_printf_i+0x1c0>
 8008584:	6019      	str	r1, [r3, #0]
 8008586:	e002      	b.n	800858e <_printf_i+0x1c6>
 8008588:	0668      	lsls	r0, r5, #25
 800858a:	d5fb      	bpl.n	8008584 <_printf_i+0x1bc>
 800858c:	8019      	strh	r1, [r3, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	6123      	str	r3, [r4, #16]
 8008592:	4616      	mov	r6, r2
 8008594:	e7bc      	b.n	8008510 <_printf_i+0x148>
 8008596:	6833      	ldr	r3, [r6, #0]
 8008598:	1d1a      	adds	r2, r3, #4
 800859a:	6032      	str	r2, [r6, #0]
 800859c:	681e      	ldr	r6, [r3, #0]
 800859e:	6862      	ldr	r2, [r4, #4]
 80085a0:	2100      	movs	r1, #0
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7f7 fe1c 	bl	80001e0 <memchr>
 80085a8:	b108      	cbz	r0, 80085ae <_printf_i+0x1e6>
 80085aa:	1b80      	subs	r0, r0, r6
 80085ac:	6060      	str	r0, [r4, #4]
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	2300      	movs	r3, #0
 80085b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085b8:	e7aa      	b.n	8008510 <_printf_i+0x148>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	4632      	mov	r2, r6
 80085be:	4649      	mov	r1, r9
 80085c0:	4640      	mov	r0, r8
 80085c2:	47d0      	blx	sl
 80085c4:	3001      	adds	r0, #1
 80085c6:	d0ad      	beq.n	8008524 <_printf_i+0x15c>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	079b      	lsls	r3, r3, #30
 80085cc:	d413      	bmi.n	80085f6 <_printf_i+0x22e>
 80085ce:	68e0      	ldr	r0, [r4, #12]
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	4298      	cmp	r0, r3
 80085d4:	bfb8      	it	lt
 80085d6:	4618      	movlt	r0, r3
 80085d8:	e7a6      	b.n	8008528 <_printf_i+0x160>
 80085da:	2301      	movs	r3, #1
 80085dc:	4632      	mov	r2, r6
 80085de:	4649      	mov	r1, r9
 80085e0:	4640      	mov	r0, r8
 80085e2:	47d0      	blx	sl
 80085e4:	3001      	adds	r0, #1
 80085e6:	d09d      	beq.n	8008524 <_printf_i+0x15c>
 80085e8:	3501      	adds	r5, #1
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	9903      	ldr	r1, [sp, #12]
 80085ee:	1a5b      	subs	r3, r3, r1
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	dcf2      	bgt.n	80085da <_printf_i+0x212>
 80085f4:	e7eb      	b.n	80085ce <_printf_i+0x206>
 80085f6:	2500      	movs	r5, #0
 80085f8:	f104 0619 	add.w	r6, r4, #25
 80085fc:	e7f5      	b.n	80085ea <_printf_i+0x222>
 80085fe:	bf00      	nop
 8008600:	0800c5ae 	.word	0x0800c5ae
 8008604:	0800c5bf 	.word	0x0800c5bf

08008608 <_scanf_float>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	b087      	sub	sp, #28
 800860e:	4617      	mov	r7, r2
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	688b      	ldr	r3, [r1, #8]
 8008614:	1e5a      	subs	r2, r3, #1
 8008616:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800861a:	bf81      	itttt	hi
 800861c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008620:	eb03 0b05 	addhi.w	fp, r3, r5
 8008624:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008628:	608b      	strhi	r3, [r1, #8]
 800862a:	680b      	ldr	r3, [r1, #0]
 800862c:	460a      	mov	r2, r1
 800862e:	f04f 0500 	mov.w	r5, #0
 8008632:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008636:	f842 3b1c 	str.w	r3, [r2], #28
 800863a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800863e:	4680      	mov	r8, r0
 8008640:	460c      	mov	r4, r1
 8008642:	bf98      	it	ls
 8008644:	f04f 0b00 	movls.w	fp, #0
 8008648:	9201      	str	r2, [sp, #4]
 800864a:	4616      	mov	r6, r2
 800864c:	46aa      	mov	sl, r5
 800864e:	46a9      	mov	r9, r5
 8008650:	9502      	str	r5, [sp, #8]
 8008652:	68a2      	ldr	r2, [r4, #8]
 8008654:	b152      	cbz	r2, 800866c <_scanf_float+0x64>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b4e      	cmp	r3, #78	@ 0x4e
 800865c:	d864      	bhi.n	8008728 <_scanf_float+0x120>
 800865e:	2b40      	cmp	r3, #64	@ 0x40
 8008660:	d83c      	bhi.n	80086dc <_scanf_float+0xd4>
 8008662:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008666:	b2c8      	uxtb	r0, r1
 8008668:	280e      	cmp	r0, #14
 800866a:	d93a      	bls.n	80086e2 <_scanf_float+0xda>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	d003      	beq.n	800867a <_scanf_float+0x72>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800867e:	f1ba 0f01 	cmp.w	sl, #1
 8008682:	f200 8117 	bhi.w	80088b4 <_scanf_float+0x2ac>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	429e      	cmp	r6, r3
 800868a:	f200 8108 	bhi.w	800889e <_scanf_float+0x296>
 800868e:	2001      	movs	r0, #1
 8008690:	b007      	add	sp, #28
 8008692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008696:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800869a:	2a0d      	cmp	r2, #13
 800869c:	d8e6      	bhi.n	800866c <_scanf_float+0x64>
 800869e:	a101      	add	r1, pc, #4	@ (adr r1, 80086a4 <_scanf_float+0x9c>)
 80086a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086a4:	080087eb 	.word	0x080087eb
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	0800866d 	.word	0x0800866d
 80086b4:	0800884b 	.word	0x0800884b
 80086b8:	08008823 	.word	0x08008823
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	080087f9 	.word	0x080087f9
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800866d 	.word	0x0800866d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087b1 	.word	0x080087b1
 80086dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086e0:	e7db      	b.n	800869a <_scanf_float+0x92>
 80086e2:	290e      	cmp	r1, #14
 80086e4:	d8c2      	bhi.n	800866c <_scanf_float+0x64>
 80086e6:	a001      	add	r0, pc, #4	@ (adr r0, 80086ec <_scanf_float+0xe4>)
 80086e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086ec:	080087a1 	.word	0x080087a1
 80086f0:	0800866d 	.word	0x0800866d
 80086f4:	080087a1 	.word	0x080087a1
 80086f8:	08008837 	.word	0x08008837
 80086fc:	0800866d 	.word	0x0800866d
 8008700:	08008749 	.word	0x08008749
 8008704:	08008787 	.word	0x08008787
 8008708:	08008787 	.word	0x08008787
 800870c:	08008787 	.word	0x08008787
 8008710:	08008787 	.word	0x08008787
 8008714:	08008787 	.word	0x08008787
 8008718:	08008787 	.word	0x08008787
 800871c:	08008787 	.word	0x08008787
 8008720:	08008787 	.word	0x08008787
 8008724:	08008787 	.word	0x08008787
 8008728:	2b6e      	cmp	r3, #110	@ 0x6e
 800872a:	d809      	bhi.n	8008740 <_scanf_float+0x138>
 800872c:	2b60      	cmp	r3, #96	@ 0x60
 800872e:	d8b2      	bhi.n	8008696 <_scanf_float+0x8e>
 8008730:	2b54      	cmp	r3, #84	@ 0x54
 8008732:	d07b      	beq.n	800882c <_scanf_float+0x224>
 8008734:	2b59      	cmp	r3, #89	@ 0x59
 8008736:	d199      	bne.n	800866c <_scanf_float+0x64>
 8008738:	2d07      	cmp	r5, #7
 800873a:	d197      	bne.n	800866c <_scanf_float+0x64>
 800873c:	2508      	movs	r5, #8
 800873e:	e02c      	b.n	800879a <_scanf_float+0x192>
 8008740:	2b74      	cmp	r3, #116	@ 0x74
 8008742:	d073      	beq.n	800882c <_scanf_float+0x224>
 8008744:	2b79      	cmp	r3, #121	@ 0x79
 8008746:	e7f6      	b.n	8008736 <_scanf_float+0x12e>
 8008748:	6821      	ldr	r1, [r4, #0]
 800874a:	05c8      	lsls	r0, r1, #23
 800874c:	d51b      	bpl.n	8008786 <_scanf_float+0x17e>
 800874e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008752:	6021      	str	r1, [r4, #0]
 8008754:	f109 0901 	add.w	r9, r9, #1
 8008758:	f1bb 0f00 	cmp.w	fp, #0
 800875c:	d003      	beq.n	8008766 <_scanf_float+0x15e>
 800875e:	3201      	adds	r2, #1
 8008760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008764:	60a2      	str	r2, [r4, #8]
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	3b01      	subs	r3, #1
 800876a:	60a3      	str	r3, [r4, #8]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	3301      	adds	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3b01      	subs	r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	607b      	str	r3, [r7, #4]
 800877a:	f340 8087 	ble.w	800888c <_scanf_float+0x284>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	e765      	b.n	8008652 <_scanf_float+0x4a>
 8008786:	eb1a 0105 	adds.w	r1, sl, r5
 800878a:	f47f af6f 	bne.w	800866c <_scanf_float+0x64>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	460d      	mov	r5, r1
 8008798:	468a      	mov	sl, r1
 800879a:	f806 3b01 	strb.w	r3, [r6], #1
 800879e:	e7e2      	b.n	8008766 <_scanf_float+0x15e>
 80087a0:	6822      	ldr	r2, [r4, #0]
 80087a2:	0610      	lsls	r0, r2, #24
 80087a4:	f57f af62 	bpl.w	800866c <_scanf_float+0x64>
 80087a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087ac:	6022      	str	r2, [r4, #0]
 80087ae:	e7f4      	b.n	800879a <_scanf_float+0x192>
 80087b0:	f1ba 0f00 	cmp.w	sl, #0
 80087b4:	d10e      	bne.n	80087d4 <_scanf_float+0x1cc>
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	d10e      	bne.n	80087da <_scanf_float+0x1d2>
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087c6:	d108      	bne.n	80087da <_scanf_float+0x1d2>
 80087c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	f04f 0a01 	mov.w	sl, #1
 80087d2:	e7e2      	b.n	800879a <_scanf_float+0x192>
 80087d4:	f1ba 0f02 	cmp.w	sl, #2
 80087d8:	d055      	beq.n	8008886 <_scanf_float+0x27e>
 80087da:	2d01      	cmp	r5, #1
 80087dc:	d002      	beq.n	80087e4 <_scanf_float+0x1dc>
 80087de:	2d04      	cmp	r5, #4
 80087e0:	f47f af44 	bne.w	800866c <_scanf_float+0x64>
 80087e4:	3501      	adds	r5, #1
 80087e6:	b2ed      	uxtb	r5, r5
 80087e8:	e7d7      	b.n	800879a <_scanf_float+0x192>
 80087ea:	f1ba 0f01 	cmp.w	sl, #1
 80087ee:	f47f af3d 	bne.w	800866c <_scanf_float+0x64>
 80087f2:	f04f 0a02 	mov.w	sl, #2
 80087f6:	e7d0      	b.n	800879a <_scanf_float+0x192>
 80087f8:	b97d      	cbnz	r5, 800881a <_scanf_float+0x212>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	f47f af38 	bne.w	8008672 <_scanf_float+0x6a>
 8008802:	6822      	ldr	r2, [r4, #0]
 8008804:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008808:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800880c:	f040 8108 	bne.w	8008a20 <_scanf_float+0x418>
 8008810:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	2501      	movs	r5, #1
 8008818:	e7bf      	b.n	800879a <_scanf_float+0x192>
 800881a:	2d03      	cmp	r5, #3
 800881c:	d0e2      	beq.n	80087e4 <_scanf_float+0x1dc>
 800881e:	2d05      	cmp	r5, #5
 8008820:	e7de      	b.n	80087e0 <_scanf_float+0x1d8>
 8008822:	2d02      	cmp	r5, #2
 8008824:	f47f af22 	bne.w	800866c <_scanf_float+0x64>
 8008828:	2503      	movs	r5, #3
 800882a:	e7b6      	b.n	800879a <_scanf_float+0x192>
 800882c:	2d06      	cmp	r5, #6
 800882e:	f47f af1d 	bne.w	800866c <_scanf_float+0x64>
 8008832:	2507      	movs	r5, #7
 8008834:	e7b1      	b.n	800879a <_scanf_float+0x192>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	0591      	lsls	r1, r2, #22
 800883a:	f57f af17 	bpl.w	800866c <_scanf_float+0x64>
 800883e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	f8cd 9008 	str.w	r9, [sp, #8]
 8008848:	e7a7      	b.n	800879a <_scanf_float+0x192>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008850:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008854:	d006      	beq.n	8008864 <_scanf_float+0x25c>
 8008856:	0550      	lsls	r0, r2, #21
 8008858:	f57f af08 	bpl.w	800866c <_scanf_float+0x64>
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	f000 80de 	beq.w	8008a20 <_scanf_float+0x418>
 8008864:	0591      	lsls	r1, r2, #22
 8008866:	bf58      	it	pl
 8008868:	9902      	ldrpl	r1, [sp, #8]
 800886a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800886e:	bf58      	it	pl
 8008870:	eba9 0101 	subpl.w	r1, r9, r1
 8008874:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008878:	bf58      	it	pl
 800887a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	f04f 0900 	mov.w	r9, #0
 8008884:	e789      	b.n	800879a <_scanf_float+0x192>
 8008886:	f04f 0a03 	mov.w	sl, #3
 800888a:	e786      	b.n	800879a <_scanf_float+0x192>
 800888c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008890:	4639      	mov	r1, r7
 8008892:	4640      	mov	r0, r8
 8008894:	4798      	blx	r3
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f aedb 	beq.w	8008652 <_scanf_float+0x4a>
 800889c:	e6e6      	b.n	800866c <_scanf_float+0x64>
 800889e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088a6:	463a      	mov	r2, r7
 80088a8:	4640      	mov	r0, r8
 80088aa:	4798      	blx	r3
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	e6e8      	b.n	8008686 <_scanf_float+0x7e>
 80088b4:	1e6b      	subs	r3, r5, #1
 80088b6:	2b06      	cmp	r3, #6
 80088b8:	d824      	bhi.n	8008904 <_scanf_float+0x2fc>
 80088ba:	2d02      	cmp	r5, #2
 80088bc:	d836      	bhi.n	800892c <_scanf_float+0x324>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	429e      	cmp	r6, r3
 80088c2:	f67f aee4 	bls.w	800868e <_scanf_float+0x86>
 80088c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ce:	463a      	mov	r2, r7
 80088d0:	4640      	mov	r0, r8
 80088d2:	4798      	blx	r3
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	e7f0      	b.n	80088be <_scanf_float+0x2b6>
 80088dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088e4:	463a      	mov	r2, r7
 80088e6:	4640      	mov	r0, r8
 80088e8:	4798      	blx	r3
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088f4:	fa5f fa8a 	uxtb.w	sl, sl
 80088f8:	f1ba 0f02 	cmp.w	sl, #2
 80088fc:	d1ee      	bne.n	80088dc <_scanf_float+0x2d4>
 80088fe:	3d03      	subs	r5, #3
 8008900:	b2ed      	uxtb	r5, r5
 8008902:	1b76      	subs	r6, r6, r5
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	05da      	lsls	r2, r3, #23
 8008908:	d530      	bpl.n	800896c <_scanf_float+0x364>
 800890a:	055b      	lsls	r3, r3, #21
 800890c:	d511      	bpl.n	8008932 <_scanf_float+0x32a>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	429e      	cmp	r6, r3
 8008912:	f67f aebc 	bls.w	800868e <_scanf_float+0x86>
 8008916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800891e:	463a      	mov	r2, r7
 8008920:	4640      	mov	r0, r8
 8008922:	4798      	blx	r3
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	3b01      	subs	r3, #1
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	e7f0      	b.n	800890e <_scanf_float+0x306>
 800892c:	46aa      	mov	sl, r5
 800892e:	46b3      	mov	fp, r6
 8008930:	e7de      	b.n	80088f0 <_scanf_float+0x2e8>
 8008932:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	2965      	cmp	r1, #101	@ 0x65
 800893a:	f103 33ff 	add.w	r3, r3, #4294967295
 800893e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	d00c      	beq.n	8008960 <_scanf_float+0x358>
 8008946:	2945      	cmp	r1, #69	@ 0x45
 8008948:	d00a      	beq.n	8008960 <_scanf_float+0x358>
 800894a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800894e:	463a      	mov	r2, r7
 8008950:	4640      	mov	r0, r8
 8008952:	4798      	blx	r3
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800895a:	3b01      	subs	r3, #1
 800895c:	1eb5      	subs	r5, r6, #2
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008964:	463a      	mov	r2, r7
 8008966:	4640      	mov	r0, r8
 8008968:	4798      	blx	r3
 800896a:	462e      	mov	r6, r5
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	f012 0210 	ands.w	r2, r2, #16
 8008972:	d001      	beq.n	8008978 <_scanf_float+0x370>
 8008974:	2000      	movs	r0, #0
 8008976:	e68b      	b.n	8008690 <_scanf_float+0x88>
 8008978:	7032      	strb	r2, [r6, #0]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008984:	d11c      	bne.n	80089c0 <_scanf_float+0x3b8>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	454b      	cmp	r3, r9
 800898a:	eba3 0209 	sub.w	r2, r3, r9
 800898e:	d123      	bne.n	80089d8 <_scanf_float+0x3d0>
 8008990:	9901      	ldr	r1, [sp, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	4640      	mov	r0, r8
 8008996:	f002 fc0b 	bl	800b1b0 <_strtod_r>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	6821      	ldr	r1, [r4, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f011 0f02 	tst.w	r1, #2
 80089a4:	ec57 6b10 	vmov	r6, r7, d0
 80089a8:	f103 0204 	add.w	r2, r3, #4
 80089ac:	d01f      	beq.n	80089ee <_scanf_float+0x3e6>
 80089ae:	9903      	ldr	r1, [sp, #12]
 80089b0:	600a      	str	r2, [r1, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	e9c3 6700 	strd	r6, r7, [r3]
 80089b8:	68e3      	ldr	r3, [r4, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60e3      	str	r3, [r4, #12]
 80089be:	e7d9      	b.n	8008974 <_scanf_float+0x36c>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0e4      	beq.n	8008990 <_scanf_float+0x388>
 80089c6:	9905      	ldr	r1, [sp, #20]
 80089c8:	230a      	movs	r3, #10
 80089ca:	3101      	adds	r1, #1
 80089cc:	4640      	mov	r0, r8
 80089ce:	f002 fc6f 	bl	800b2b0 <_strtol_r>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	9e05      	ldr	r6, [sp, #20]
 80089d6:	1ac2      	subs	r2, r0, r3
 80089d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089dc:	429e      	cmp	r6, r3
 80089de:	bf28      	it	cs
 80089e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089e4:	4910      	ldr	r1, [pc, #64]	@ (8008a28 <_scanf_float+0x420>)
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f8e4 	bl	8008bb4 <siprintf>
 80089ec:	e7d0      	b.n	8008990 <_scanf_float+0x388>
 80089ee:	f011 0f04 	tst.w	r1, #4
 80089f2:	9903      	ldr	r1, [sp, #12]
 80089f4:	600a      	str	r2, [r1, #0]
 80089f6:	d1dc      	bne.n	80089b2 <_scanf_float+0x3aa>
 80089f8:	681d      	ldr	r5, [r3, #0]
 80089fa:	4632      	mov	r2, r6
 80089fc:	463b      	mov	r3, r7
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f8 f89b 	bl	8000b3c <__aeabi_dcmpun>
 8008a06:	b128      	cbz	r0, 8008a14 <_scanf_float+0x40c>
 8008a08:	4808      	ldr	r0, [pc, #32]	@ (8008a2c <_scanf_float+0x424>)
 8008a0a:	f000 f9c9 	bl	8008da0 <nanf>
 8008a0e:	ed85 0a00 	vstr	s0, [r5]
 8008a12:	e7d1      	b.n	80089b8 <_scanf_float+0x3b0>
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f8 f8ee 	bl	8000bf8 <__aeabi_d2f>
 8008a1c:	6028      	str	r0, [r5, #0]
 8008a1e:	e7cb      	b.n	80089b8 <_scanf_float+0x3b0>
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	e629      	b.n	800867a <_scanf_float+0x72>
 8008a26:	bf00      	nop
 8008a28:	0800c5d0 	.word	0x0800c5d0
 8008a2c:	0800c965 	.word	0x0800c965

08008a30 <std>:
 8008a30:	2300      	movs	r3, #0
 8008a32:	b510      	push	{r4, lr}
 8008a34:	4604      	mov	r4, r0
 8008a36:	e9c0 3300 	strd	r3, r3, [r0]
 8008a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3e:	6083      	str	r3, [r0, #8]
 8008a40:	8181      	strh	r1, [r0, #12]
 8008a42:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a44:	81c2      	strh	r2, [r0, #14]
 8008a46:	6183      	str	r3, [r0, #24]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	305c      	adds	r0, #92	@ 0x5c
 8008a4e:	f000 f914 	bl	8008c7a <memset>
 8008a52:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <std+0x58>)
 8008a54:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a56:	4b0d      	ldr	r3, [pc, #52]	@ (8008a8c <std+0x5c>)
 8008a58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a90 <std+0x60>)
 8008a5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a94 <std+0x64>)
 8008a60:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a62:	4b0d      	ldr	r3, [pc, #52]	@ (8008a98 <std+0x68>)
 8008a64:	6224      	str	r4, [r4, #32]
 8008a66:	429c      	cmp	r4, r3
 8008a68:	d006      	beq.n	8008a78 <std+0x48>
 8008a6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a6e:	4294      	cmp	r4, r2
 8008a70:	d002      	beq.n	8008a78 <std+0x48>
 8008a72:	33d0      	adds	r3, #208	@ 0xd0
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d105      	bne.n	8008a84 <std+0x54>
 8008a78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a80:	f000 b98a 	b.w	8008d98 <__retarget_lock_init_recursive>
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	08008bf5 	.word	0x08008bf5
 8008a8c:	08008c17 	.word	0x08008c17
 8008a90:	08008c4f 	.word	0x08008c4f
 8008a94:	08008c73 	.word	0x08008c73
 8008a98:	200006f8 	.word	0x200006f8

08008a9c <stdio_exit_handler>:
 8008a9c:	4a02      	ldr	r2, [pc, #8]	@ (8008aa8 <stdio_exit_handler+0xc>)
 8008a9e:	4903      	ldr	r1, [pc, #12]	@ (8008aac <stdio_exit_handler+0x10>)
 8008aa0:	4803      	ldr	r0, [pc, #12]	@ (8008ab0 <stdio_exit_handler+0x14>)
 8008aa2:	f000 b869 	b.w	8008b78 <_fwalk_sglue>
 8008aa6:	bf00      	nop
 8008aa8:	20000050 	.word	0x20000050
 8008aac:	0800b66d 	.word	0x0800b66d
 8008ab0:	20000060 	.word	0x20000060

08008ab4 <cleanup_stdio>:
 8008ab4:	6841      	ldr	r1, [r0, #4]
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <cleanup_stdio+0x34>)
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	b510      	push	{r4, lr}
 8008abc:	4604      	mov	r4, r0
 8008abe:	d001      	beq.n	8008ac4 <cleanup_stdio+0x10>
 8008ac0:	f002 fdd4 	bl	800b66c <_fflush_r>
 8008ac4:	68a1      	ldr	r1, [r4, #8]
 8008ac6:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <cleanup_stdio+0x38>)
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d002      	beq.n	8008ad2 <cleanup_stdio+0x1e>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f002 fdcd 	bl	800b66c <_fflush_r>
 8008ad2:	68e1      	ldr	r1, [r4, #12]
 8008ad4:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <cleanup_stdio+0x3c>)
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	d004      	beq.n	8008ae4 <cleanup_stdio+0x30>
 8008ada:	4620      	mov	r0, r4
 8008adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae0:	f002 bdc4 	b.w	800b66c <_fflush_r>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200006f8 	.word	0x200006f8
 8008aec:	20000760 	.word	0x20000760
 8008af0:	200007c8 	.word	0x200007c8

08008af4 <global_stdio_init.part.0>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <global_stdio_init.part.0+0x30>)
 8008af8:	4c0b      	ldr	r4, [pc, #44]	@ (8008b28 <global_stdio_init.part.0+0x34>)
 8008afa:	4a0c      	ldr	r2, [pc, #48]	@ (8008b2c <global_stdio_init.part.0+0x38>)
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	4620      	mov	r0, r4
 8008b00:	2200      	movs	r2, #0
 8008b02:	2104      	movs	r1, #4
 8008b04:	f7ff ff94 	bl	8008a30 <std>
 8008b08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	2109      	movs	r1, #9
 8008b10:	f7ff ff8e 	bl	8008a30 <std>
 8008b14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b18:	2202      	movs	r2, #2
 8008b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1e:	2112      	movs	r1, #18
 8008b20:	f7ff bf86 	b.w	8008a30 <std>
 8008b24:	20000830 	.word	0x20000830
 8008b28:	200006f8 	.word	0x200006f8
 8008b2c:	08008a9d 	.word	0x08008a9d

08008b30 <__sfp_lock_acquire>:
 8008b30:	4801      	ldr	r0, [pc, #4]	@ (8008b38 <__sfp_lock_acquire+0x8>)
 8008b32:	f000 b932 	b.w	8008d9a <__retarget_lock_acquire_recursive>
 8008b36:	bf00      	nop
 8008b38:	20000839 	.word	0x20000839

08008b3c <__sfp_lock_release>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	@ (8008b44 <__sfp_lock_release+0x8>)
 8008b3e:	f000 b92d 	b.w	8008d9c <__retarget_lock_release_recursive>
 8008b42:	bf00      	nop
 8008b44:	20000839 	.word	0x20000839

08008b48 <__sinit>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	f7ff fff0 	bl	8008b30 <__sfp_lock_acquire>
 8008b50:	6a23      	ldr	r3, [r4, #32]
 8008b52:	b11b      	cbz	r3, 8008b5c <__sinit+0x14>
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b58:	f7ff bff0 	b.w	8008b3c <__sfp_lock_release>
 8008b5c:	4b04      	ldr	r3, [pc, #16]	@ (8008b70 <__sinit+0x28>)
 8008b5e:	6223      	str	r3, [r4, #32]
 8008b60:	4b04      	ldr	r3, [pc, #16]	@ (8008b74 <__sinit+0x2c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1f5      	bne.n	8008b54 <__sinit+0xc>
 8008b68:	f7ff ffc4 	bl	8008af4 <global_stdio_init.part.0>
 8008b6c:	e7f2      	b.n	8008b54 <__sinit+0xc>
 8008b6e:	bf00      	nop
 8008b70:	08008ab5 	.word	0x08008ab5
 8008b74:	20000830 	.word	0x20000830

08008b78 <_fwalk_sglue>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	4688      	mov	r8, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	2600      	movs	r6, #0
 8008b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b88:	f1b9 0901 	subs.w	r9, r9, #1
 8008b8c:	d505      	bpl.n	8008b9a <_fwalk_sglue+0x22>
 8008b8e:	6824      	ldr	r4, [r4, #0]
 8008b90:	2c00      	cmp	r4, #0
 8008b92:	d1f7      	bne.n	8008b84 <_fwalk_sglue+0xc>
 8008b94:	4630      	mov	r0, r6
 8008b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d907      	bls.n	8008bb0 <_fwalk_sglue+0x38>
 8008ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	d003      	beq.n	8008bb0 <_fwalk_sglue+0x38>
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4638      	mov	r0, r7
 8008bac:	47c0      	blx	r8
 8008bae:	4306      	orrs	r6, r0
 8008bb0:	3568      	adds	r5, #104	@ 0x68
 8008bb2:	e7e9      	b.n	8008b88 <_fwalk_sglue+0x10>

08008bb4 <siprintf>:
 8008bb4:	b40e      	push	{r1, r2, r3}
 8008bb6:	b500      	push	{lr}
 8008bb8:	b09c      	sub	sp, #112	@ 0x70
 8008bba:	ab1d      	add	r3, sp, #116	@ 0x74
 8008bbc:	9002      	str	r0, [sp, #8]
 8008bbe:	9006      	str	r0, [sp, #24]
 8008bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008bc4:	4809      	ldr	r0, [pc, #36]	@ (8008bec <siprintf+0x38>)
 8008bc6:	9107      	str	r1, [sp, #28]
 8008bc8:	9104      	str	r1, [sp, #16]
 8008bca:	4909      	ldr	r1, [pc, #36]	@ (8008bf0 <siprintf+0x3c>)
 8008bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd0:	9105      	str	r1, [sp, #20]
 8008bd2:	6800      	ldr	r0, [r0, #0]
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	a902      	add	r1, sp, #8
 8008bd8:	f002 fbc8 	bl	800b36c <_svfiprintf_r>
 8008bdc:	9b02      	ldr	r3, [sp, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	b01c      	add	sp, #112	@ 0x70
 8008be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be8:	b003      	add	sp, #12
 8008bea:	4770      	bx	lr
 8008bec:	2000005c 	.word	0x2000005c
 8008bf0:	ffff0208 	.word	0xffff0208

08008bf4 <__sread>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfc:	f000 f87e 	bl	8008cfc <_read_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	bfab      	itete	ge
 8008c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c06:	89a3      	ldrhlt	r3, [r4, #12]
 8008c08:	181b      	addge	r3, r3, r0
 8008c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c0e:	bfac      	ite	ge
 8008c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c12:	81a3      	strhlt	r3, [r4, #12]
 8008c14:	bd10      	pop	{r4, pc}

08008c16 <__swrite>:
 8008c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1a:	461f      	mov	r7, r3
 8008c1c:	898b      	ldrh	r3, [r1, #12]
 8008c1e:	05db      	lsls	r3, r3, #23
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4616      	mov	r6, r2
 8008c26:	d505      	bpl.n	8008c34 <__swrite+0x1e>
 8008c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f000 f852 	bl	8008cd8 <_lseek_r>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	4628      	mov	r0, r5
 8008c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4a:	f000 b869 	b.w	8008d20 <_write_r>

08008c4e <__sseek>:
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c56:	f000 f83f 	bl	8008cd8 <_lseek_r>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	bf15      	itete	ne
 8008c60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c6a:	81a3      	strheq	r3, [r4, #12]
 8008c6c:	bf18      	it	ne
 8008c6e:	81a3      	strhne	r3, [r4, #12]
 8008c70:	bd10      	pop	{r4, pc}

08008c72 <__sclose>:
 8008c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c76:	f000 b81f 	b.w	8008cb8 <_close_r>

08008c7a <memset>:
 8008c7a:	4402      	add	r2, r0
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d100      	bne.n	8008c84 <memset+0xa>
 8008c82:	4770      	bx	lr
 8008c84:	f803 1b01 	strb.w	r1, [r3], #1
 8008c88:	e7f9      	b.n	8008c7e <memset+0x4>

08008c8a <strncmp>:
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	b16a      	cbz	r2, 8008caa <strncmp+0x20>
 8008c8e:	3901      	subs	r1, #1
 8008c90:	1884      	adds	r4, r0, r2
 8008c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d103      	bne.n	8008ca6 <strncmp+0x1c>
 8008c9e:	42a0      	cmp	r0, r4
 8008ca0:	d001      	beq.n	8008ca6 <strncmp+0x1c>
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d1f5      	bne.n	8008c92 <strncmp+0x8>
 8008ca6:	1ad0      	subs	r0, r2, r3
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	4610      	mov	r0, r2
 8008cac:	e7fc      	b.n	8008ca8 <strncmp+0x1e>
	...

08008cb0 <_localeconv_r>:
 8008cb0:	4800      	ldr	r0, [pc, #0]	@ (8008cb4 <_localeconv_r+0x4>)
 8008cb2:	4770      	bx	lr
 8008cb4:	2000019c 	.word	0x2000019c

08008cb8 <_close_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	@ (8008cd4 <_close_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f9 f9a0 	bl	8002008 <_close>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_close_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_close_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000834 	.word	0x20000834

08008cd8 <_lseek_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d07      	ldr	r5, [pc, #28]	@ (8008cf8 <_lseek_r+0x20>)
 8008cdc:	4604      	mov	r4, r0
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	602a      	str	r2, [r5, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f7f9 f9b5 	bl	8002056 <_lseek>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_lseek_r+0x1e>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_lseek_r+0x1e>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	20000834 	.word	0x20000834

08008cfc <_read_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d07      	ldr	r5, [pc, #28]	@ (8008d1c <_read_r+0x20>)
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7f9 f943 	bl	8001f96 <_read>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_read_r+0x1e>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_read_r+0x1e>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20000834 	.word	0x20000834

08008d20 <_write_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	@ (8008d40 <_write_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f9 f94e 	bl	8001fd0 <_write>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_write_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_write_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000834 	.word	0x20000834

08008d44 <__errno>:
 8008d44:	4b01      	ldr	r3, [pc, #4]	@ (8008d4c <__errno+0x8>)
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	2000005c 	.word	0x2000005c

08008d50 <__libc_init_array>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4d0d      	ldr	r5, [pc, #52]	@ (8008d88 <__libc_init_array+0x38>)
 8008d54:	4c0d      	ldr	r4, [pc, #52]	@ (8008d8c <__libc_init_array+0x3c>)
 8008d56:	1b64      	subs	r4, r4, r5
 8008d58:	10a4      	asrs	r4, r4, #2
 8008d5a:	2600      	movs	r6, #0
 8008d5c:	42a6      	cmp	r6, r4
 8008d5e:	d109      	bne.n	8008d74 <__libc_init_array+0x24>
 8008d60:	4d0b      	ldr	r5, [pc, #44]	@ (8008d90 <__libc_init_array+0x40>)
 8008d62:	4c0c      	ldr	r4, [pc, #48]	@ (8008d94 <__libc_init_array+0x44>)
 8008d64:	f003 fb62 	bl	800c42c <_init>
 8008d68:	1b64      	subs	r4, r4, r5
 8008d6a:	10a4      	asrs	r4, r4, #2
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	42a6      	cmp	r6, r4
 8008d70:	d105      	bne.n	8008d7e <__libc_init_array+0x2e>
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d78:	4798      	blx	r3
 8008d7a:	3601      	adds	r6, #1
 8008d7c:	e7ee      	b.n	8008d5c <__libc_init_array+0xc>
 8008d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d82:	4798      	blx	r3
 8008d84:	3601      	adds	r6, #1
 8008d86:	e7f2      	b.n	8008d6e <__libc_init_array+0x1e>
 8008d88:	0800c9d0 	.word	0x0800c9d0
 8008d8c:	0800c9d0 	.word	0x0800c9d0
 8008d90:	0800c9d0 	.word	0x0800c9d0
 8008d94:	0800c9d4 	.word	0x0800c9d4

08008d98 <__retarget_lock_init_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <__retarget_lock_acquire_recursive>:
 8008d9a:	4770      	bx	lr

08008d9c <__retarget_lock_release_recursive>:
 8008d9c:	4770      	bx	lr
	...

08008da0 <nanf>:
 8008da0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008da8 <nanf+0x8>
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	7fc00000 	.word	0x7fc00000

08008dac <quorem>:
 8008dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	6903      	ldr	r3, [r0, #16]
 8008db2:	690c      	ldr	r4, [r1, #16]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	4607      	mov	r7, r0
 8008db8:	db7e      	blt.n	8008eb8 <quorem+0x10c>
 8008dba:	3c01      	subs	r4, #1
 8008dbc:	f101 0814 	add.w	r8, r1, #20
 8008dc0:	00a3      	lsls	r3, r4, #2
 8008dc2:	f100 0514 	add.w	r5, r0, #20
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dde:	fbb2 f6f3 	udiv	r6, r2, r3
 8008de2:	d32e      	bcc.n	8008e42 <quorem+0x96>
 8008de4:	f04f 0a00 	mov.w	sl, #0
 8008de8:	46c4      	mov	ip, r8
 8008dea:	46ae      	mov	lr, r5
 8008dec:	46d3      	mov	fp, sl
 8008dee:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008df2:	b298      	uxth	r0, r3
 8008df4:	fb06 a000 	mla	r0, r6, r0, sl
 8008df8:	0c02      	lsrs	r2, r0, #16
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	fb06 2303 	mla	r3, r6, r3, r2
 8008e00:	f8de 2000 	ldr.w	r2, [lr]
 8008e04:	b280      	uxth	r0, r0
 8008e06:	b292      	uxth	r2, r2
 8008e08:	1a12      	subs	r2, r2, r0
 8008e0a:	445a      	add	r2, fp
 8008e0c:	f8de 0000 	ldr.w	r0, [lr]
 8008e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e1e:	b292      	uxth	r2, r2
 8008e20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e24:	45e1      	cmp	r9, ip
 8008e26:	f84e 2b04 	str.w	r2, [lr], #4
 8008e2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e2e:	d2de      	bcs.n	8008dee <quorem+0x42>
 8008e30:	9b00      	ldr	r3, [sp, #0]
 8008e32:	58eb      	ldr	r3, [r5, r3]
 8008e34:	b92b      	cbnz	r3, 8008e42 <quorem+0x96>
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	3b04      	subs	r3, #4
 8008e3a:	429d      	cmp	r5, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	d32f      	bcc.n	8008ea0 <quorem+0xf4>
 8008e40:	613c      	str	r4, [r7, #16]
 8008e42:	4638      	mov	r0, r7
 8008e44:	f001 f9c4 	bl	800a1d0 <__mcmp>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	db25      	blt.n	8008e98 <quorem+0xec>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e54:	f8d1 c000 	ldr.w	ip, [r1]
 8008e58:	fa1f fe82 	uxth.w	lr, r2
 8008e5c:	fa1f f38c 	uxth.w	r3, ip
 8008e60:	eba3 030e 	sub.w	r3, r3, lr
 8008e64:	4403      	add	r3, r0
 8008e66:	0c12      	lsrs	r2, r2, #16
 8008e68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e6c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e76:	45c1      	cmp	r9, r8
 8008e78:	f841 3b04 	str.w	r3, [r1], #4
 8008e7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e80:	d2e6      	bcs.n	8008e50 <quorem+0xa4>
 8008e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e8a:	b922      	cbnz	r2, 8008e96 <quorem+0xea>
 8008e8c:	3b04      	subs	r3, #4
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	d30b      	bcc.n	8008eac <quorem+0x100>
 8008e94:	613c      	str	r4, [r7, #16]
 8008e96:	3601      	adds	r6, #1
 8008e98:	4630      	mov	r0, r6
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea0:	6812      	ldr	r2, [r2, #0]
 8008ea2:	3b04      	subs	r3, #4
 8008ea4:	2a00      	cmp	r2, #0
 8008ea6:	d1cb      	bne.n	8008e40 <quorem+0x94>
 8008ea8:	3c01      	subs	r4, #1
 8008eaa:	e7c6      	b.n	8008e3a <quorem+0x8e>
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	3b04      	subs	r3, #4
 8008eb0:	2a00      	cmp	r2, #0
 8008eb2:	d1ef      	bne.n	8008e94 <quorem+0xe8>
 8008eb4:	3c01      	subs	r4, #1
 8008eb6:	e7ea      	b.n	8008e8e <quorem+0xe2>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7ee      	b.n	8008e9a <quorem+0xee>
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <_dtoa_r>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	69c7      	ldr	r7, [r0, #28]
 8008ec6:	b099      	sub	sp, #100	@ 0x64
 8008ec8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ecc:	ec55 4b10 	vmov	r4, r5, d0
 8008ed0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008ed2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ed4:	4683      	mov	fp, r0
 8008ed6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ed8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008eda:	b97f      	cbnz	r7, 8008efc <_dtoa_r+0x3c>
 8008edc:	2010      	movs	r0, #16
 8008ede:	f000 fdfd 	bl	8009adc <malloc>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ee8:	b920      	cbnz	r0, 8008ef4 <_dtoa_r+0x34>
 8008eea:	4ba7      	ldr	r3, [pc, #668]	@ (8009188 <_dtoa_r+0x2c8>)
 8008eec:	21ef      	movs	r1, #239	@ 0xef
 8008eee:	48a7      	ldr	r0, [pc, #668]	@ (800918c <_dtoa_r+0x2cc>)
 8008ef0:	f002 fc26 	bl	800b740 <__assert_func>
 8008ef4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ef8:	6007      	str	r7, [r0, #0]
 8008efa:	60c7      	str	r7, [r0, #12]
 8008efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	b159      	cbz	r1, 8008f1c <_dtoa_r+0x5c>
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	604a      	str	r2, [r1, #4]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4093      	lsls	r3, r2
 8008f0c:	608b      	str	r3, [r1, #8]
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f000 feda 	bl	8009cc8 <_Bfree>
 8008f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	1e2b      	subs	r3, r5, #0
 8008f1e:	bfb9      	ittee	lt
 8008f20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f24:	9303      	strlt	r3, [sp, #12]
 8008f26:	2300      	movge	r3, #0
 8008f28:	6033      	strge	r3, [r6, #0]
 8008f2a:	9f03      	ldr	r7, [sp, #12]
 8008f2c:	4b98      	ldr	r3, [pc, #608]	@ (8009190 <_dtoa_r+0x2d0>)
 8008f2e:	bfbc      	itt	lt
 8008f30:	2201      	movlt	r2, #1
 8008f32:	6032      	strlt	r2, [r6, #0]
 8008f34:	43bb      	bics	r3, r7
 8008f36:	d112      	bne.n	8008f5e <_dtoa_r+0x9e>
 8008f38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f44:	4323      	orrs	r3, r4
 8008f46:	f000 854d 	beq.w	80099e4 <_dtoa_r+0xb24>
 8008f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80091a4 <_dtoa_r+0x2e4>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 854f 	beq.w	80099f4 <_dtoa_r+0xb34>
 8008f56:	f10a 0303 	add.w	r3, sl, #3
 8008f5a:	f000 bd49 	b.w	80099f0 <_dtoa_r+0xb30>
 8008f5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	ec51 0b17 	vmov	r0, r1, d7
 8008f68:	2300      	movs	r3, #0
 8008f6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008f6e:	f7f7 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f72:	4680      	mov	r8, r0
 8008f74:	b158      	cbz	r0, 8008f8e <_dtoa_r+0xce>
 8008f76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f7e:	b113      	cbz	r3, 8008f86 <_dtoa_r+0xc6>
 8008f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f82:	4b84      	ldr	r3, [pc, #528]	@ (8009194 <_dtoa_r+0x2d4>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80091a8 <_dtoa_r+0x2e8>
 8008f8a:	f000 bd33 	b.w	80099f4 <_dtoa_r+0xb34>
 8008f8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f92:	aa16      	add	r2, sp, #88	@ 0x58
 8008f94:	a917      	add	r1, sp, #92	@ 0x5c
 8008f96:	4658      	mov	r0, fp
 8008f98:	f001 fa3a 	bl	800a410 <__d2b>
 8008f9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008fa0:	4681      	mov	r9, r0
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	d077      	beq.n	8009096 <_dtoa_r+0x1d6>
 8008fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fa8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008fb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008fbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4b74      	ldr	r3, [pc, #464]	@ (8009198 <_dtoa_r+0x2d8>)
 8008fc6:	f7f7 f967 	bl	8000298 <__aeabi_dsub>
 8008fca:	a369      	add	r3, pc, #420	@ (adr r3, 8009170 <_dtoa_r+0x2b0>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f7f7 fb1a 	bl	8000608 <__aeabi_dmul>
 8008fd4:	a368      	add	r3, pc, #416	@ (adr r3, 8009178 <_dtoa_r+0x2b8>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 f95f 	bl	800029c <__adddf3>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	f7f7 faa6 	bl	8000534 <__aeabi_i2d>
 8008fe8:	a365      	add	r3, pc, #404	@ (adr r3, 8009180 <_dtoa_r+0x2c0>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 fb0b 	bl	8000608 <__aeabi_dmul>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 f94f 	bl	800029c <__adddf3>
 8008ffe:	4604      	mov	r4, r0
 8009000:	460d      	mov	r5, r1
 8009002:	f7f7 fdb1 	bl	8000b68 <__aeabi_d2iz>
 8009006:	2200      	movs	r2, #0
 8009008:	4607      	mov	r7, r0
 800900a:	2300      	movs	r3, #0
 800900c:	4620      	mov	r0, r4
 800900e:	4629      	mov	r1, r5
 8009010:	f7f7 fd6c 	bl	8000aec <__aeabi_dcmplt>
 8009014:	b140      	cbz	r0, 8009028 <_dtoa_r+0x168>
 8009016:	4638      	mov	r0, r7
 8009018:	f7f7 fa8c 	bl	8000534 <__aeabi_i2d>
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	f7f7 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009024:	b900      	cbnz	r0, 8009028 <_dtoa_r+0x168>
 8009026:	3f01      	subs	r7, #1
 8009028:	2f16      	cmp	r7, #22
 800902a:	d851      	bhi.n	80090d0 <_dtoa_r+0x210>
 800902c:	4b5b      	ldr	r3, [pc, #364]	@ (800919c <_dtoa_r+0x2dc>)
 800902e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800903a:	f7f7 fd57 	bl	8000aec <__aeabi_dcmplt>
 800903e:	2800      	cmp	r0, #0
 8009040:	d048      	beq.n	80090d4 <_dtoa_r+0x214>
 8009042:	3f01      	subs	r7, #1
 8009044:	2300      	movs	r3, #0
 8009046:	9312      	str	r3, [sp, #72]	@ 0x48
 8009048:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800904a:	1b9b      	subs	r3, r3, r6
 800904c:	1e5a      	subs	r2, r3, #1
 800904e:	bf44      	itt	mi
 8009050:	f1c3 0801 	rsbmi	r8, r3, #1
 8009054:	2300      	movmi	r3, #0
 8009056:	9208      	str	r2, [sp, #32]
 8009058:	bf54      	ite	pl
 800905a:	f04f 0800 	movpl.w	r8, #0
 800905e:	9308      	strmi	r3, [sp, #32]
 8009060:	2f00      	cmp	r7, #0
 8009062:	db39      	blt.n	80090d8 <_dtoa_r+0x218>
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009068:	443b      	add	r3, r7
 800906a:	9308      	str	r3, [sp, #32]
 800906c:	2300      	movs	r3, #0
 800906e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009072:	2b09      	cmp	r3, #9
 8009074:	d864      	bhi.n	8009140 <_dtoa_r+0x280>
 8009076:	2b05      	cmp	r3, #5
 8009078:	bfc4      	itt	gt
 800907a:	3b04      	subgt	r3, #4
 800907c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800907e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009080:	f1a3 0302 	sub.w	r3, r3, #2
 8009084:	bfcc      	ite	gt
 8009086:	2400      	movgt	r4, #0
 8009088:	2401      	movle	r4, #1
 800908a:	2b03      	cmp	r3, #3
 800908c:	d863      	bhi.n	8009156 <_dtoa_r+0x296>
 800908e:	e8df f003 	tbb	[pc, r3]
 8009092:	372a      	.short	0x372a
 8009094:	5535      	.short	0x5535
 8009096:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800909a:	441e      	add	r6, r3
 800909c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	bfc1      	itttt	gt
 80090a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80090a8:	409f      	lslgt	r7, r3
 80090aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80090ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090b2:	bfd6      	itet	le
 80090b4:	f1c3 0320 	rsble	r3, r3, #32
 80090b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80090bc:	fa04 f003 	lslle.w	r0, r4, r3
 80090c0:	f7f7 fa28 	bl	8000514 <__aeabi_ui2d>
 80090c4:	2201      	movs	r2, #1
 80090c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80090ca:	3e01      	subs	r6, #1
 80090cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80090ce:	e777      	b.n	8008fc0 <_dtoa_r+0x100>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e7b8      	b.n	8009046 <_dtoa_r+0x186>
 80090d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80090d6:	e7b7      	b.n	8009048 <_dtoa_r+0x188>
 80090d8:	427b      	negs	r3, r7
 80090da:	930a      	str	r3, [sp, #40]	@ 0x28
 80090dc:	2300      	movs	r3, #0
 80090de:	eba8 0807 	sub.w	r8, r8, r7
 80090e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090e4:	e7c4      	b.n	8009070 <_dtoa_r+0x1b0>
 80090e6:	2300      	movs	r3, #0
 80090e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dc35      	bgt.n	800915c <_dtoa_r+0x29c>
 80090f0:	2301      	movs	r3, #1
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	461a      	mov	r2, r3
 80090f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090fa:	e00b      	b.n	8009114 <_dtoa_r+0x254>
 80090fc:	2301      	movs	r3, #1
 80090fe:	e7f3      	b.n	80090e8 <_dtoa_r+0x228>
 8009100:	2300      	movs	r3, #0
 8009102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	3301      	adds	r3, #1
 800910c:	2b01      	cmp	r3, #1
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	bfb8      	it	lt
 8009112:	2301      	movlt	r3, #1
 8009114:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009118:	2100      	movs	r1, #0
 800911a:	2204      	movs	r2, #4
 800911c:	f102 0514 	add.w	r5, r2, #20
 8009120:	429d      	cmp	r5, r3
 8009122:	d91f      	bls.n	8009164 <_dtoa_r+0x2a4>
 8009124:	6041      	str	r1, [r0, #4]
 8009126:	4658      	mov	r0, fp
 8009128:	f000 fd8e 	bl	8009c48 <_Balloc>
 800912c:	4682      	mov	sl, r0
 800912e:	2800      	cmp	r0, #0
 8009130:	d13c      	bne.n	80091ac <_dtoa_r+0x2ec>
 8009132:	4b1b      	ldr	r3, [pc, #108]	@ (80091a0 <_dtoa_r+0x2e0>)
 8009134:	4602      	mov	r2, r0
 8009136:	f240 11af 	movw	r1, #431	@ 0x1af
 800913a:	e6d8      	b.n	8008eee <_dtoa_r+0x2e>
 800913c:	2301      	movs	r3, #1
 800913e:	e7e0      	b.n	8009102 <_dtoa_r+0x242>
 8009140:	2401      	movs	r4, #1
 8009142:	2300      	movs	r3, #0
 8009144:	9309      	str	r3, [sp, #36]	@ 0x24
 8009146:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009148:	f04f 33ff 	mov.w	r3, #4294967295
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	9307      	str	r3, [sp, #28]
 8009150:	2200      	movs	r2, #0
 8009152:	2312      	movs	r3, #18
 8009154:	e7d0      	b.n	80090f8 <_dtoa_r+0x238>
 8009156:	2301      	movs	r3, #1
 8009158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800915a:	e7f5      	b.n	8009148 <_dtoa_r+0x288>
 800915c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	9307      	str	r3, [sp, #28]
 8009162:	e7d7      	b.n	8009114 <_dtoa_r+0x254>
 8009164:	3101      	adds	r1, #1
 8009166:	0052      	lsls	r2, r2, #1
 8009168:	e7d8      	b.n	800911c <_dtoa_r+0x25c>
 800916a:	bf00      	nop
 800916c:	f3af 8000 	nop.w
 8009170:	636f4361 	.word	0x636f4361
 8009174:	3fd287a7 	.word	0x3fd287a7
 8009178:	8b60c8b3 	.word	0x8b60c8b3
 800917c:	3fc68a28 	.word	0x3fc68a28
 8009180:	509f79fb 	.word	0x509f79fb
 8009184:	3fd34413 	.word	0x3fd34413
 8009188:	0800c5e2 	.word	0x0800c5e2
 800918c:	0800c5f9 	.word	0x0800c5f9
 8009190:	7ff00000 	.word	0x7ff00000
 8009194:	0800c5ad 	.word	0x0800c5ad
 8009198:	3ff80000 	.word	0x3ff80000
 800919c:	0800c6f0 	.word	0x0800c6f0
 80091a0:	0800c651 	.word	0x0800c651
 80091a4:	0800c5de 	.word	0x0800c5de
 80091a8:	0800c5ac 	.word	0x0800c5ac
 80091ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b0:	6018      	str	r0, [r3, #0]
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	2b0e      	cmp	r3, #14
 80091b6:	f200 80a4 	bhi.w	8009302 <_dtoa_r+0x442>
 80091ba:	2c00      	cmp	r4, #0
 80091bc:	f000 80a1 	beq.w	8009302 <_dtoa_r+0x442>
 80091c0:	2f00      	cmp	r7, #0
 80091c2:	dd33      	ble.n	800922c <_dtoa_r+0x36c>
 80091c4:	4bad      	ldr	r3, [pc, #692]	@ (800947c <_dtoa_r+0x5bc>)
 80091c6:	f007 020f 	and.w	r2, r7, #15
 80091ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ce:	ed93 7b00 	vldr	d7, [r3]
 80091d2:	05f8      	lsls	r0, r7, #23
 80091d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80091d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80091dc:	d516      	bpl.n	800920c <_dtoa_r+0x34c>
 80091de:	4ba8      	ldr	r3, [pc, #672]	@ (8009480 <_dtoa_r+0x5c0>)
 80091e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091e8:	f7f7 fb38 	bl	800085c <__aeabi_ddiv>
 80091ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f0:	f004 040f 	and.w	r4, r4, #15
 80091f4:	2603      	movs	r6, #3
 80091f6:	4da2      	ldr	r5, [pc, #648]	@ (8009480 <_dtoa_r+0x5c0>)
 80091f8:	b954      	cbnz	r4, 8009210 <_dtoa_r+0x350>
 80091fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009202:	f7f7 fb2b 	bl	800085c <__aeabi_ddiv>
 8009206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800920a:	e028      	b.n	800925e <_dtoa_r+0x39e>
 800920c:	2602      	movs	r6, #2
 800920e:	e7f2      	b.n	80091f6 <_dtoa_r+0x336>
 8009210:	07e1      	lsls	r1, r4, #31
 8009212:	d508      	bpl.n	8009226 <_dtoa_r+0x366>
 8009214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800921c:	f7f7 f9f4 	bl	8000608 <__aeabi_dmul>
 8009220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009224:	3601      	adds	r6, #1
 8009226:	1064      	asrs	r4, r4, #1
 8009228:	3508      	adds	r5, #8
 800922a:	e7e5      	b.n	80091f8 <_dtoa_r+0x338>
 800922c:	f000 80d2 	beq.w	80093d4 <_dtoa_r+0x514>
 8009230:	427c      	negs	r4, r7
 8009232:	4b92      	ldr	r3, [pc, #584]	@ (800947c <_dtoa_r+0x5bc>)
 8009234:	4d92      	ldr	r5, [pc, #584]	@ (8009480 <_dtoa_r+0x5c0>)
 8009236:	f004 020f 	and.w	r2, r4, #15
 800923a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009246:	f7f7 f9df 	bl	8000608 <__aeabi_dmul>
 800924a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800924e:	1124      	asrs	r4, r4, #4
 8009250:	2300      	movs	r3, #0
 8009252:	2602      	movs	r6, #2
 8009254:	2c00      	cmp	r4, #0
 8009256:	f040 80b2 	bne.w	80093be <_dtoa_r+0x4fe>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1d3      	bne.n	8009206 <_dtoa_r+0x346>
 800925e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009260:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80b7 	beq.w	80093d8 <_dtoa_r+0x518>
 800926a:	4b86      	ldr	r3, [pc, #536]	@ (8009484 <_dtoa_r+0x5c4>)
 800926c:	2200      	movs	r2, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fc3b 	bl	8000aec <__aeabi_dcmplt>
 8009276:	2800      	cmp	r0, #0
 8009278:	f000 80ae 	beq.w	80093d8 <_dtoa_r+0x518>
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 80aa 	beq.w	80093d8 <_dtoa_r+0x518>
 8009284:	9b00      	ldr	r3, [sp, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd37      	ble.n	80092fa <_dtoa_r+0x43a>
 800928a:	1e7b      	subs	r3, r7, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	4620      	mov	r0, r4
 8009290:	4b7d      	ldr	r3, [pc, #500]	@ (8009488 <_dtoa_r+0x5c8>)
 8009292:	2200      	movs	r2, #0
 8009294:	4629      	mov	r1, r5
 8009296:	f7f7 f9b7 	bl	8000608 <__aeabi_dmul>
 800929a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929e:	9c00      	ldr	r4, [sp, #0]
 80092a0:	3601      	adds	r6, #1
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7f7 f946 	bl	8000534 <__aeabi_i2d>
 80092a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	4b76      	ldr	r3, [pc, #472]	@ (800948c <_dtoa_r+0x5cc>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f7f6 fff2 	bl	800029c <__adddf3>
 80092b8:	4605      	mov	r5, r0
 80092ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80092be:	2c00      	cmp	r4, #0
 80092c0:	f040 808d 	bne.w	80093de <_dtoa_r+0x51e>
 80092c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c8:	4b71      	ldr	r3, [pc, #452]	@ (8009490 <_dtoa_r+0x5d0>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	f7f6 ffe4 	bl	8000298 <__aeabi_dsub>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d8:	462a      	mov	r2, r5
 80092da:	4633      	mov	r3, r6
 80092dc:	f7f7 fc24 	bl	8000b28 <__aeabi_dcmpgt>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	f040 828b 	bne.w	80097fc <_dtoa_r+0x93c>
 80092e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ea:	462a      	mov	r2, r5
 80092ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80092f0:	f7f7 fbfc 	bl	8000aec <__aeabi_dcmplt>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	f040 8128 	bne.w	800954a <_dtoa_r+0x68a>
 80092fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80092fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009304:	2b00      	cmp	r3, #0
 8009306:	f2c0 815a 	blt.w	80095be <_dtoa_r+0x6fe>
 800930a:	2f0e      	cmp	r7, #14
 800930c:	f300 8157 	bgt.w	80095be <_dtoa_r+0x6fe>
 8009310:	4b5a      	ldr	r3, [pc, #360]	@ (800947c <_dtoa_r+0x5bc>)
 8009312:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009316:	ed93 7b00 	vldr	d7, [r3]
 800931a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	ed8d 7b00 	vstr	d7, [sp]
 8009322:	da03      	bge.n	800932c <_dtoa_r+0x46c>
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f340 8101 	ble.w	800952e <_dtoa_r+0x66e>
 800932c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009330:	4656      	mov	r6, sl
 8009332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fa8f 	bl	800085c <__aeabi_ddiv>
 800933e:	f7f7 fc13 	bl	8000b68 <__aeabi_d2iz>
 8009342:	4680      	mov	r8, r0
 8009344:	f7f7 f8f6 	bl	8000534 <__aeabi_i2d>
 8009348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800934c:	f7f7 f95c 	bl	8000608 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800935c:	f7f6 ff9c 	bl	8000298 <__aeabi_dsub>
 8009360:	f806 4b01 	strb.w	r4, [r6], #1
 8009364:	9d07      	ldr	r5, [sp, #28]
 8009366:	eba6 040a 	sub.w	r4, r6, sl
 800936a:	42a5      	cmp	r5, r4
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	f040 8117 	bne.w	80095a2 <_dtoa_r+0x6e2>
 8009374:	f7f6 ff92 	bl	800029c <__adddf3>
 8009378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	f7f7 fbd2 	bl	8000b28 <__aeabi_dcmpgt>
 8009384:	2800      	cmp	r0, #0
 8009386:	f040 80f9 	bne.w	800957c <_dtoa_r+0x6bc>
 800938a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	f7f7 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009396:	b118      	cbz	r0, 80093a0 <_dtoa_r+0x4e0>
 8009398:	f018 0f01 	tst.w	r8, #1
 800939c:	f040 80ee 	bne.w	800957c <_dtoa_r+0x6bc>
 80093a0:	4649      	mov	r1, r9
 80093a2:	4658      	mov	r0, fp
 80093a4:	f000 fc90 	bl	8009cc8 <_Bfree>
 80093a8:	2300      	movs	r3, #0
 80093aa:	7033      	strb	r3, [r6, #0]
 80093ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093ae:	3701      	adds	r7, #1
 80093b0:	601f      	str	r7, [r3, #0]
 80093b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 831d 	beq.w	80099f4 <_dtoa_r+0xb34>
 80093ba:	601e      	str	r6, [r3, #0]
 80093bc:	e31a      	b.n	80099f4 <_dtoa_r+0xb34>
 80093be:	07e2      	lsls	r2, r4, #31
 80093c0:	d505      	bpl.n	80093ce <_dtoa_r+0x50e>
 80093c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093c6:	f7f7 f91f 	bl	8000608 <__aeabi_dmul>
 80093ca:	3601      	adds	r6, #1
 80093cc:	2301      	movs	r3, #1
 80093ce:	1064      	asrs	r4, r4, #1
 80093d0:	3508      	adds	r5, #8
 80093d2:	e73f      	b.n	8009254 <_dtoa_r+0x394>
 80093d4:	2602      	movs	r6, #2
 80093d6:	e742      	b.n	800925e <_dtoa_r+0x39e>
 80093d8:	9c07      	ldr	r4, [sp, #28]
 80093da:	9704      	str	r7, [sp, #16]
 80093dc:	e761      	b.n	80092a2 <_dtoa_r+0x3e2>
 80093de:	4b27      	ldr	r3, [pc, #156]	@ (800947c <_dtoa_r+0x5bc>)
 80093e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093ea:	4454      	add	r4, sl
 80093ec:	2900      	cmp	r1, #0
 80093ee:	d053      	beq.n	8009498 <_dtoa_r+0x5d8>
 80093f0:	4928      	ldr	r1, [pc, #160]	@ (8009494 <_dtoa_r+0x5d4>)
 80093f2:	2000      	movs	r0, #0
 80093f4:	f7f7 fa32 	bl	800085c <__aeabi_ddiv>
 80093f8:	4633      	mov	r3, r6
 80093fa:	462a      	mov	r2, r5
 80093fc:	f7f6 ff4c 	bl	8000298 <__aeabi_dsub>
 8009400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009404:	4656      	mov	r6, sl
 8009406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940a:	f7f7 fbad 	bl	8000b68 <__aeabi_d2iz>
 800940e:	4605      	mov	r5, r0
 8009410:	f7f7 f890 	bl	8000534 <__aeabi_i2d>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941c:	f7f6 ff3c 	bl	8000298 <__aeabi_dsub>
 8009420:	3530      	adds	r5, #48	@ 0x30
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800942a:	f806 5b01 	strb.w	r5, [r6], #1
 800942e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009432:	f7f7 fb5b 	bl	8000aec <__aeabi_dcmplt>
 8009436:	2800      	cmp	r0, #0
 8009438:	d171      	bne.n	800951e <_dtoa_r+0x65e>
 800943a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800943e:	4911      	ldr	r1, [pc, #68]	@ (8009484 <_dtoa_r+0x5c4>)
 8009440:	2000      	movs	r0, #0
 8009442:	f7f6 ff29 	bl	8000298 <__aeabi_dsub>
 8009446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800944a:	f7f7 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800944e:	2800      	cmp	r0, #0
 8009450:	f040 8095 	bne.w	800957e <_dtoa_r+0x6be>
 8009454:	42a6      	cmp	r6, r4
 8009456:	f43f af50 	beq.w	80092fa <_dtoa_r+0x43a>
 800945a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800945e:	4b0a      	ldr	r3, [pc, #40]	@ (8009488 <_dtoa_r+0x5c8>)
 8009460:	2200      	movs	r2, #0
 8009462:	f7f7 f8d1 	bl	8000608 <__aeabi_dmul>
 8009466:	4b08      	ldr	r3, [pc, #32]	@ (8009488 <_dtoa_r+0x5c8>)
 8009468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800946c:	2200      	movs	r2, #0
 800946e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947a:	e7c4      	b.n	8009406 <_dtoa_r+0x546>
 800947c:	0800c6f0 	.word	0x0800c6f0
 8009480:	0800c6c8 	.word	0x0800c6c8
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	40240000 	.word	0x40240000
 800948c:	401c0000 	.word	0x401c0000
 8009490:	40140000 	.word	0x40140000
 8009494:	3fe00000 	.word	0x3fe00000
 8009498:	4631      	mov	r1, r6
 800949a:	4628      	mov	r0, r5
 800949c:	f7f7 f8b4 	bl	8000608 <__aeabi_dmul>
 80094a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80094a6:	4656      	mov	r6, sl
 80094a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ac:	f7f7 fb5c 	bl	8000b68 <__aeabi_d2iz>
 80094b0:	4605      	mov	r5, r0
 80094b2:	f7f7 f83f 	bl	8000534 <__aeabi_i2d>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094be:	f7f6 feeb 	bl	8000298 <__aeabi_dsub>
 80094c2:	3530      	adds	r5, #48	@ 0x30
 80094c4:	f806 5b01 	strb.w	r5, [r6], #1
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	d124      	bne.n	8009522 <_dtoa_r+0x662>
 80094d8:	4bac      	ldr	r3, [pc, #688]	@ (800978c <_dtoa_r+0x8cc>)
 80094da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094de:	f7f6 fedd 	bl	800029c <__adddf3>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ea:	f7f7 fb1d 	bl	8000b28 <__aeabi_dcmpgt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d145      	bne.n	800957e <_dtoa_r+0x6be>
 80094f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094f6:	49a5      	ldr	r1, [pc, #660]	@ (800978c <_dtoa_r+0x8cc>)
 80094f8:	2000      	movs	r0, #0
 80094fa:	f7f6 fecd 	bl	8000298 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009506:	f7f7 faf1 	bl	8000aec <__aeabi_dcmplt>
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f aef5 	beq.w	80092fa <_dtoa_r+0x43a>
 8009510:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009512:	1e73      	subs	r3, r6, #1
 8009514:	9315      	str	r3, [sp, #84]	@ 0x54
 8009516:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800951a:	2b30      	cmp	r3, #48	@ 0x30
 800951c:	d0f8      	beq.n	8009510 <_dtoa_r+0x650>
 800951e:	9f04      	ldr	r7, [sp, #16]
 8009520:	e73e      	b.n	80093a0 <_dtoa_r+0x4e0>
 8009522:	4b9b      	ldr	r3, [pc, #620]	@ (8009790 <_dtoa_r+0x8d0>)
 8009524:	f7f7 f870 	bl	8000608 <__aeabi_dmul>
 8009528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800952c:	e7bc      	b.n	80094a8 <_dtoa_r+0x5e8>
 800952e:	d10c      	bne.n	800954a <_dtoa_r+0x68a>
 8009530:	4b98      	ldr	r3, [pc, #608]	@ (8009794 <_dtoa_r+0x8d4>)
 8009532:	2200      	movs	r2, #0
 8009534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009538:	f7f7 f866 	bl	8000608 <__aeabi_dmul>
 800953c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009540:	f7f7 fae8 	bl	8000b14 <__aeabi_dcmpge>
 8009544:	2800      	cmp	r0, #0
 8009546:	f000 8157 	beq.w	80097f8 <_dtoa_r+0x938>
 800954a:	2400      	movs	r4, #0
 800954c:	4625      	mov	r5, r4
 800954e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009550:	43db      	mvns	r3, r3
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	4656      	mov	r6, sl
 8009556:	2700      	movs	r7, #0
 8009558:	4621      	mov	r1, r4
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fbb4 	bl	8009cc8 <_Bfree>
 8009560:	2d00      	cmp	r5, #0
 8009562:	d0dc      	beq.n	800951e <_dtoa_r+0x65e>
 8009564:	b12f      	cbz	r7, 8009572 <_dtoa_r+0x6b2>
 8009566:	42af      	cmp	r7, r5
 8009568:	d003      	beq.n	8009572 <_dtoa_r+0x6b2>
 800956a:	4639      	mov	r1, r7
 800956c:	4658      	mov	r0, fp
 800956e:	f000 fbab 	bl	8009cc8 <_Bfree>
 8009572:	4629      	mov	r1, r5
 8009574:	4658      	mov	r0, fp
 8009576:	f000 fba7 	bl	8009cc8 <_Bfree>
 800957a:	e7d0      	b.n	800951e <_dtoa_r+0x65e>
 800957c:	9704      	str	r7, [sp, #16]
 800957e:	4633      	mov	r3, r6
 8009580:	461e      	mov	r6, r3
 8009582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009586:	2a39      	cmp	r2, #57	@ 0x39
 8009588:	d107      	bne.n	800959a <_dtoa_r+0x6da>
 800958a:	459a      	cmp	sl, r3
 800958c:	d1f8      	bne.n	8009580 <_dtoa_r+0x6c0>
 800958e:	9a04      	ldr	r2, [sp, #16]
 8009590:	3201      	adds	r2, #1
 8009592:	9204      	str	r2, [sp, #16]
 8009594:	2230      	movs	r2, #48	@ 0x30
 8009596:	f88a 2000 	strb.w	r2, [sl]
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	3201      	adds	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e7bd      	b.n	800951e <_dtoa_r+0x65e>
 80095a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009790 <_dtoa_r+0x8d0>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	f7f7 f82f 	bl	8000608 <__aeabi_dmul>
 80095aa:	2200      	movs	r2, #0
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	460d      	mov	r5, r1
 80095b2:	f7f7 fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f aebb 	beq.w	8009332 <_dtoa_r+0x472>
 80095bc:	e6f0      	b.n	80093a0 <_dtoa_r+0x4e0>
 80095be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	f000 80db 	beq.w	800977c <_dtoa_r+0x8bc>
 80095c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c8:	2a01      	cmp	r2, #1
 80095ca:	f300 80bf 	bgt.w	800974c <_dtoa_r+0x88c>
 80095ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	f000 80b7 	beq.w	8009744 <_dtoa_r+0x884>
 80095d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80095da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80095dc:	4646      	mov	r6, r8
 80095de:	9a08      	ldr	r2, [sp, #32]
 80095e0:	2101      	movs	r1, #1
 80095e2:	441a      	add	r2, r3
 80095e4:	4658      	mov	r0, fp
 80095e6:	4498      	add	r8, r3
 80095e8:	9208      	str	r2, [sp, #32]
 80095ea:	f000 fc6b 	bl	8009ec4 <__i2b>
 80095ee:	4605      	mov	r5, r0
 80095f0:	b15e      	cbz	r6, 800960a <_dtoa_r+0x74a>
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd08      	ble.n	800960a <_dtoa_r+0x74a>
 80095f8:	42b3      	cmp	r3, r6
 80095fa:	9a08      	ldr	r2, [sp, #32]
 80095fc:	bfa8      	it	ge
 80095fe:	4633      	movge	r3, r6
 8009600:	eba8 0803 	sub.w	r8, r8, r3
 8009604:	1af6      	subs	r6, r6, r3
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960c:	b1f3      	cbz	r3, 800964c <_dtoa_r+0x78c>
 800960e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80b7 	beq.w	8009784 <_dtoa_r+0x8c4>
 8009616:	b18c      	cbz	r4, 800963c <_dtoa_r+0x77c>
 8009618:	4629      	mov	r1, r5
 800961a:	4622      	mov	r2, r4
 800961c:	4658      	mov	r0, fp
 800961e:	f000 fd11 	bl	800a044 <__pow5mult>
 8009622:	464a      	mov	r2, r9
 8009624:	4601      	mov	r1, r0
 8009626:	4605      	mov	r5, r0
 8009628:	4658      	mov	r0, fp
 800962a:	f000 fc61 	bl	8009ef0 <__multiply>
 800962e:	4649      	mov	r1, r9
 8009630:	9004      	str	r0, [sp, #16]
 8009632:	4658      	mov	r0, fp
 8009634:	f000 fb48 	bl	8009cc8 <_Bfree>
 8009638:	9b04      	ldr	r3, [sp, #16]
 800963a:	4699      	mov	r9, r3
 800963c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800963e:	1b1a      	subs	r2, r3, r4
 8009640:	d004      	beq.n	800964c <_dtoa_r+0x78c>
 8009642:	4649      	mov	r1, r9
 8009644:	4658      	mov	r0, fp
 8009646:	f000 fcfd 	bl	800a044 <__pow5mult>
 800964a:	4681      	mov	r9, r0
 800964c:	2101      	movs	r1, #1
 800964e:	4658      	mov	r0, fp
 8009650:	f000 fc38 	bl	8009ec4 <__i2b>
 8009654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009656:	4604      	mov	r4, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 81cf 	beq.w	80099fc <_dtoa_r+0xb3c>
 800965e:	461a      	mov	r2, r3
 8009660:	4601      	mov	r1, r0
 8009662:	4658      	mov	r0, fp
 8009664:	f000 fcee 	bl	800a044 <__pow5mult>
 8009668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966a:	2b01      	cmp	r3, #1
 800966c:	4604      	mov	r4, r0
 800966e:	f300 8095 	bgt.w	800979c <_dtoa_r+0x8dc>
 8009672:	9b02      	ldr	r3, [sp, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 8087 	bne.w	8009788 <_dtoa_r+0x8c8>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8089 	bne.w	8009798 <_dtoa_r+0x8d8>
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800968c:	0d1b      	lsrs	r3, r3, #20
 800968e:	051b      	lsls	r3, r3, #20
 8009690:	b12b      	cbz	r3, 800969e <_dtoa_r+0x7de>
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	3301      	adds	r3, #1
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	f108 0801 	add.w	r8, r8, #1
 800969c:	2301      	movs	r3, #1
 800969e:	930a      	str	r3, [sp, #40]	@ 0x28
 80096a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 81b0 	beq.w	8009a08 <_dtoa_r+0xb48>
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096ae:	6918      	ldr	r0, [r3, #16]
 80096b0:	f000 fbbc 	bl	8009e2c <__hi0bits>
 80096b4:	f1c0 0020 	rsb	r0, r0, #32
 80096b8:	9b08      	ldr	r3, [sp, #32]
 80096ba:	4418      	add	r0, r3
 80096bc:	f010 001f 	ands.w	r0, r0, #31
 80096c0:	d077      	beq.n	80097b2 <_dtoa_r+0x8f2>
 80096c2:	f1c0 0320 	rsb	r3, r0, #32
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	dd6b      	ble.n	80097a2 <_dtoa_r+0x8e2>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	f1c0 001c 	rsb	r0, r0, #28
 80096d0:	4403      	add	r3, r0
 80096d2:	4480      	add	r8, r0
 80096d4:	4406      	add	r6, r0
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	f1b8 0f00 	cmp.w	r8, #0
 80096dc:	dd05      	ble.n	80096ea <_dtoa_r+0x82a>
 80096de:	4649      	mov	r1, r9
 80096e0:	4642      	mov	r2, r8
 80096e2:	4658      	mov	r0, fp
 80096e4:	f000 fd08 	bl	800a0f8 <__lshift>
 80096e8:	4681      	mov	r9, r0
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd05      	ble.n	80096fc <_dtoa_r+0x83c>
 80096f0:	4621      	mov	r1, r4
 80096f2:	461a      	mov	r2, r3
 80096f4:	4658      	mov	r0, fp
 80096f6:	f000 fcff 	bl	800a0f8 <__lshift>
 80096fa:	4604      	mov	r4, r0
 80096fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d059      	beq.n	80097b6 <_dtoa_r+0x8f6>
 8009702:	4621      	mov	r1, r4
 8009704:	4648      	mov	r0, r9
 8009706:	f000 fd63 	bl	800a1d0 <__mcmp>
 800970a:	2800      	cmp	r0, #0
 800970c:	da53      	bge.n	80097b6 <_dtoa_r+0x8f6>
 800970e:	1e7b      	subs	r3, r7, #1
 8009710:	9304      	str	r3, [sp, #16]
 8009712:	4649      	mov	r1, r9
 8009714:	2300      	movs	r3, #0
 8009716:	220a      	movs	r2, #10
 8009718:	4658      	mov	r0, fp
 800971a:	f000 faf7 	bl	8009d0c <__multadd>
 800971e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009720:	4681      	mov	r9, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 8172 	beq.w	8009a0c <_dtoa_r+0xb4c>
 8009728:	2300      	movs	r3, #0
 800972a:	4629      	mov	r1, r5
 800972c:	220a      	movs	r2, #10
 800972e:	4658      	mov	r0, fp
 8009730:	f000 faec 	bl	8009d0c <__multadd>
 8009734:	9b00      	ldr	r3, [sp, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	4605      	mov	r5, r0
 800973a:	dc67      	bgt.n	800980c <_dtoa_r+0x94c>
 800973c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973e:	2b02      	cmp	r3, #2
 8009740:	dc41      	bgt.n	80097c6 <_dtoa_r+0x906>
 8009742:	e063      	b.n	800980c <_dtoa_r+0x94c>
 8009744:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800974a:	e746      	b.n	80095da <_dtoa_r+0x71a>
 800974c:	9b07      	ldr	r3, [sp, #28]
 800974e:	1e5c      	subs	r4, r3, #1
 8009750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009752:	42a3      	cmp	r3, r4
 8009754:	bfbf      	itttt	lt
 8009756:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009758:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800975a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800975c:	1ae3      	sublt	r3, r4, r3
 800975e:	bfb4      	ite	lt
 8009760:	18d2      	addlt	r2, r2, r3
 8009762:	1b1c      	subge	r4, r3, r4
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	bfbc      	itt	lt
 8009768:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800976a:	2400      	movlt	r4, #0
 800976c:	2b00      	cmp	r3, #0
 800976e:	bfb5      	itete	lt
 8009770:	eba8 0603 	sublt.w	r6, r8, r3
 8009774:	9b07      	ldrge	r3, [sp, #28]
 8009776:	2300      	movlt	r3, #0
 8009778:	4646      	movge	r6, r8
 800977a:	e730      	b.n	80095de <_dtoa_r+0x71e>
 800977c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800977e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009780:	4646      	mov	r6, r8
 8009782:	e735      	b.n	80095f0 <_dtoa_r+0x730>
 8009784:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009786:	e75c      	b.n	8009642 <_dtoa_r+0x782>
 8009788:	2300      	movs	r3, #0
 800978a:	e788      	b.n	800969e <_dtoa_r+0x7de>
 800978c:	3fe00000 	.word	0x3fe00000
 8009790:	40240000 	.word	0x40240000
 8009794:	40140000 	.word	0x40140000
 8009798:	9b02      	ldr	r3, [sp, #8]
 800979a:	e780      	b.n	800969e <_dtoa_r+0x7de>
 800979c:	2300      	movs	r3, #0
 800979e:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a0:	e782      	b.n	80096a8 <_dtoa_r+0x7e8>
 80097a2:	d099      	beq.n	80096d8 <_dtoa_r+0x818>
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	331c      	adds	r3, #28
 80097a8:	441a      	add	r2, r3
 80097aa:	4498      	add	r8, r3
 80097ac:	441e      	add	r6, r3
 80097ae:	9208      	str	r2, [sp, #32]
 80097b0:	e792      	b.n	80096d8 <_dtoa_r+0x818>
 80097b2:	4603      	mov	r3, r0
 80097b4:	e7f6      	b.n	80097a4 <_dtoa_r+0x8e4>
 80097b6:	9b07      	ldr	r3, [sp, #28]
 80097b8:	9704      	str	r7, [sp, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dc20      	bgt.n	8009800 <_dtoa_r+0x940>
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	dd1e      	ble.n	8009804 <_dtoa_r+0x944>
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f47f aec0 	bne.w	800954e <_dtoa_r+0x68e>
 80097ce:	4621      	mov	r1, r4
 80097d0:	2205      	movs	r2, #5
 80097d2:	4658      	mov	r0, fp
 80097d4:	f000 fa9a 	bl	8009d0c <__multadd>
 80097d8:	4601      	mov	r1, r0
 80097da:	4604      	mov	r4, r0
 80097dc:	4648      	mov	r0, r9
 80097de:	f000 fcf7 	bl	800a1d0 <__mcmp>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	f77f aeb3 	ble.w	800954e <_dtoa_r+0x68e>
 80097e8:	4656      	mov	r6, sl
 80097ea:	2331      	movs	r3, #49	@ 0x31
 80097ec:	f806 3b01 	strb.w	r3, [r6], #1
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	3301      	adds	r3, #1
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	e6ae      	b.n	8009556 <_dtoa_r+0x696>
 80097f8:	9c07      	ldr	r4, [sp, #28]
 80097fa:	9704      	str	r7, [sp, #16]
 80097fc:	4625      	mov	r5, r4
 80097fe:	e7f3      	b.n	80097e8 <_dtoa_r+0x928>
 8009800:	9b07      	ldr	r3, [sp, #28]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 8104 	beq.w	8009a14 <_dtoa_r+0xb54>
 800980c:	2e00      	cmp	r6, #0
 800980e:	dd05      	ble.n	800981c <_dtoa_r+0x95c>
 8009810:	4629      	mov	r1, r5
 8009812:	4632      	mov	r2, r6
 8009814:	4658      	mov	r0, fp
 8009816:	f000 fc6f 	bl	800a0f8 <__lshift>
 800981a:	4605      	mov	r5, r0
 800981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d05a      	beq.n	80098d8 <_dtoa_r+0xa18>
 8009822:	6869      	ldr	r1, [r5, #4]
 8009824:	4658      	mov	r0, fp
 8009826:	f000 fa0f 	bl	8009c48 <_Balloc>
 800982a:	4606      	mov	r6, r0
 800982c:	b928      	cbnz	r0, 800983a <_dtoa_r+0x97a>
 800982e:	4b84      	ldr	r3, [pc, #528]	@ (8009a40 <_dtoa_r+0xb80>)
 8009830:	4602      	mov	r2, r0
 8009832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009836:	f7ff bb5a 	b.w	8008eee <_dtoa_r+0x2e>
 800983a:	692a      	ldr	r2, [r5, #16]
 800983c:	3202      	adds	r2, #2
 800983e:	0092      	lsls	r2, r2, #2
 8009840:	f105 010c 	add.w	r1, r5, #12
 8009844:	300c      	adds	r0, #12
 8009846:	f001 ff63 	bl	800b710 <memcpy>
 800984a:	2201      	movs	r2, #1
 800984c:	4631      	mov	r1, r6
 800984e:	4658      	mov	r0, fp
 8009850:	f000 fc52 	bl	800a0f8 <__lshift>
 8009854:	f10a 0301 	add.w	r3, sl, #1
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	4453      	add	r3, sl
 800985e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	462f      	mov	r7, r5
 8009868:	930a      	str	r3, [sp, #40]	@ 0x28
 800986a:	4605      	mov	r5, r0
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	4621      	mov	r1, r4
 8009870:	3b01      	subs	r3, #1
 8009872:	4648      	mov	r0, r9
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	f7ff fa99 	bl	8008dac <quorem>
 800987a:	4639      	mov	r1, r7
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009882:	4648      	mov	r0, r9
 8009884:	f000 fca4 	bl	800a1d0 <__mcmp>
 8009888:	462a      	mov	r2, r5
 800988a:	9008      	str	r0, [sp, #32]
 800988c:	4621      	mov	r1, r4
 800988e:	4658      	mov	r0, fp
 8009890:	f000 fcba 	bl	800a208 <__mdiff>
 8009894:	68c2      	ldr	r2, [r0, #12]
 8009896:	4606      	mov	r6, r0
 8009898:	bb02      	cbnz	r2, 80098dc <_dtoa_r+0xa1c>
 800989a:	4601      	mov	r1, r0
 800989c:	4648      	mov	r0, r9
 800989e:	f000 fc97 	bl	800a1d0 <__mcmp>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4631      	mov	r1, r6
 80098a6:	4658      	mov	r0, fp
 80098a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80098aa:	f000 fa0d 	bl	8009cc8 <_Bfree>
 80098ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098b2:	9e07      	ldr	r6, [sp, #28]
 80098b4:	ea43 0102 	orr.w	r1, r3, r2
 80098b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ba:	4319      	orrs	r1, r3
 80098bc:	d110      	bne.n	80098e0 <_dtoa_r+0xa20>
 80098be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098c2:	d029      	beq.n	8009918 <_dtoa_r+0xa58>
 80098c4:	9b08      	ldr	r3, [sp, #32]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dd02      	ble.n	80098d0 <_dtoa_r+0xa10>
 80098ca:	9b02      	ldr	r3, [sp, #8]
 80098cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	f883 8000 	strb.w	r8, [r3]
 80098d6:	e63f      	b.n	8009558 <_dtoa_r+0x698>
 80098d8:	4628      	mov	r0, r5
 80098da:	e7bb      	b.n	8009854 <_dtoa_r+0x994>
 80098dc:	2201      	movs	r2, #1
 80098de:	e7e1      	b.n	80098a4 <_dtoa_r+0x9e4>
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	db04      	blt.n	80098f0 <_dtoa_r+0xa30>
 80098e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098e8:	430b      	orrs	r3, r1
 80098ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098ec:	430b      	orrs	r3, r1
 80098ee:	d120      	bne.n	8009932 <_dtoa_r+0xa72>
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	dded      	ble.n	80098d0 <_dtoa_r+0xa10>
 80098f4:	4649      	mov	r1, r9
 80098f6:	2201      	movs	r2, #1
 80098f8:	4658      	mov	r0, fp
 80098fa:	f000 fbfd 	bl	800a0f8 <__lshift>
 80098fe:	4621      	mov	r1, r4
 8009900:	4681      	mov	r9, r0
 8009902:	f000 fc65 	bl	800a1d0 <__mcmp>
 8009906:	2800      	cmp	r0, #0
 8009908:	dc03      	bgt.n	8009912 <_dtoa_r+0xa52>
 800990a:	d1e1      	bne.n	80098d0 <_dtoa_r+0xa10>
 800990c:	f018 0f01 	tst.w	r8, #1
 8009910:	d0de      	beq.n	80098d0 <_dtoa_r+0xa10>
 8009912:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009916:	d1d8      	bne.n	80098ca <_dtoa_r+0xa0a>
 8009918:	9a00      	ldr	r2, [sp, #0]
 800991a:	2339      	movs	r3, #57	@ 0x39
 800991c:	7013      	strb	r3, [r2, #0]
 800991e:	4633      	mov	r3, r6
 8009920:	461e      	mov	r6, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009928:	2a39      	cmp	r2, #57	@ 0x39
 800992a:	d052      	beq.n	80099d2 <_dtoa_r+0xb12>
 800992c:	3201      	adds	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e612      	b.n	8009558 <_dtoa_r+0x698>
 8009932:	2a00      	cmp	r2, #0
 8009934:	dd07      	ble.n	8009946 <_dtoa_r+0xa86>
 8009936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800993a:	d0ed      	beq.n	8009918 <_dtoa_r+0xa58>
 800993c:	9a00      	ldr	r2, [sp, #0]
 800993e:	f108 0301 	add.w	r3, r8, #1
 8009942:	7013      	strb	r3, [r2, #0]
 8009944:	e608      	b.n	8009558 <_dtoa_r+0x698>
 8009946:	9b07      	ldr	r3, [sp, #28]
 8009948:	9a07      	ldr	r2, [sp, #28]
 800994a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800994e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009950:	4293      	cmp	r3, r2
 8009952:	d028      	beq.n	80099a6 <_dtoa_r+0xae6>
 8009954:	4649      	mov	r1, r9
 8009956:	2300      	movs	r3, #0
 8009958:	220a      	movs	r2, #10
 800995a:	4658      	mov	r0, fp
 800995c:	f000 f9d6 	bl	8009d0c <__multadd>
 8009960:	42af      	cmp	r7, r5
 8009962:	4681      	mov	r9, r0
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	f04f 020a 	mov.w	r2, #10
 800996c:	4639      	mov	r1, r7
 800996e:	4658      	mov	r0, fp
 8009970:	d107      	bne.n	8009982 <_dtoa_r+0xac2>
 8009972:	f000 f9cb 	bl	8009d0c <__multadd>
 8009976:	4607      	mov	r7, r0
 8009978:	4605      	mov	r5, r0
 800997a:	9b07      	ldr	r3, [sp, #28]
 800997c:	3301      	adds	r3, #1
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	e774      	b.n	800986c <_dtoa_r+0x9ac>
 8009982:	f000 f9c3 	bl	8009d0c <__multadd>
 8009986:	4629      	mov	r1, r5
 8009988:	4607      	mov	r7, r0
 800998a:	2300      	movs	r3, #0
 800998c:	220a      	movs	r2, #10
 800998e:	4658      	mov	r0, fp
 8009990:	f000 f9bc 	bl	8009d0c <__multadd>
 8009994:	4605      	mov	r5, r0
 8009996:	e7f0      	b.n	800997a <_dtoa_r+0xaba>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	bfcc      	ite	gt
 800999e:	461e      	movgt	r6, r3
 80099a0:	2601      	movle	r6, #1
 80099a2:	4456      	add	r6, sl
 80099a4:	2700      	movs	r7, #0
 80099a6:	4649      	mov	r1, r9
 80099a8:	2201      	movs	r2, #1
 80099aa:	4658      	mov	r0, fp
 80099ac:	f000 fba4 	bl	800a0f8 <__lshift>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4681      	mov	r9, r0
 80099b4:	f000 fc0c 	bl	800a1d0 <__mcmp>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dcb0      	bgt.n	800991e <_dtoa_r+0xa5e>
 80099bc:	d102      	bne.n	80099c4 <_dtoa_r+0xb04>
 80099be:	f018 0f01 	tst.w	r8, #1
 80099c2:	d1ac      	bne.n	800991e <_dtoa_r+0xa5e>
 80099c4:	4633      	mov	r3, r6
 80099c6:	461e      	mov	r6, r3
 80099c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099cc:	2a30      	cmp	r2, #48	@ 0x30
 80099ce:	d0fa      	beq.n	80099c6 <_dtoa_r+0xb06>
 80099d0:	e5c2      	b.n	8009558 <_dtoa_r+0x698>
 80099d2:	459a      	cmp	sl, r3
 80099d4:	d1a4      	bne.n	8009920 <_dtoa_r+0xa60>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3301      	adds	r3, #1
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	2331      	movs	r3, #49	@ 0x31
 80099de:	f88a 3000 	strb.w	r3, [sl]
 80099e2:	e5b9      	b.n	8009558 <_dtoa_r+0x698>
 80099e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a44 <_dtoa_r+0xb84>
 80099ea:	b11b      	cbz	r3, 80099f4 <_dtoa_r+0xb34>
 80099ec:	f10a 0308 	add.w	r3, sl, #8
 80099f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	4650      	mov	r0, sl
 80099f6:	b019      	add	sp, #100	@ 0x64
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	f77f ae37 	ble.w	8009672 <_dtoa_r+0x7b2>
 8009a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a08:	2001      	movs	r0, #1
 8009a0a:	e655      	b.n	80096b8 <_dtoa_r+0x7f8>
 8009a0c:	9b00      	ldr	r3, [sp, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f77f aed6 	ble.w	80097c0 <_dtoa_r+0x900>
 8009a14:	4656      	mov	r6, sl
 8009a16:	4621      	mov	r1, r4
 8009a18:	4648      	mov	r0, r9
 8009a1a:	f7ff f9c7 	bl	8008dac <quorem>
 8009a1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a22:	f806 8b01 	strb.w	r8, [r6], #1
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	eba6 020a 	sub.w	r2, r6, sl
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	ddb3      	ble.n	8009998 <_dtoa_r+0xad8>
 8009a30:	4649      	mov	r1, r9
 8009a32:	2300      	movs	r3, #0
 8009a34:	220a      	movs	r2, #10
 8009a36:	4658      	mov	r0, fp
 8009a38:	f000 f968 	bl	8009d0c <__multadd>
 8009a3c:	4681      	mov	r9, r0
 8009a3e:	e7ea      	b.n	8009a16 <_dtoa_r+0xb56>
 8009a40:	0800c651 	.word	0x0800c651
 8009a44:	0800c5d5 	.word	0x0800c5d5

08009a48 <_free_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d041      	beq.n	8009ad4 <_free_r+0x8c>
 8009a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a54:	1f0c      	subs	r4, r1, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bfb8      	it	lt
 8009a5a:	18e4      	addlt	r4, r4, r3
 8009a5c:	f000 f8e8 	bl	8009c30 <__malloc_lock>
 8009a60:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad8 <_free_r+0x90>)
 8009a62:	6813      	ldr	r3, [r2, #0]
 8009a64:	b933      	cbnz	r3, 8009a74 <_free_r+0x2c>
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	6014      	str	r4, [r2, #0]
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a70:	f000 b8e4 	b.w	8009c3c <__malloc_unlock>
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d908      	bls.n	8009a8a <_free_r+0x42>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	1821      	adds	r1, r4, r0
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	e7ed      	b.n	8009a66 <_free_r+0x1e>
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	b10b      	cbz	r3, 8009a94 <_free_r+0x4c>
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d9fa      	bls.n	8009a8a <_free_r+0x42>
 8009a94:	6811      	ldr	r1, [r2, #0]
 8009a96:	1850      	adds	r0, r2, r1
 8009a98:	42a0      	cmp	r0, r4
 8009a9a:	d10b      	bne.n	8009ab4 <_free_r+0x6c>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	4401      	add	r1, r0
 8009aa0:	1850      	adds	r0, r2, r1
 8009aa2:	4283      	cmp	r3, r0
 8009aa4:	6011      	str	r1, [r2, #0]
 8009aa6:	d1e0      	bne.n	8009a6a <_free_r+0x22>
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	6053      	str	r3, [r2, #4]
 8009aae:	4408      	add	r0, r1
 8009ab0:	6010      	str	r0, [r2, #0]
 8009ab2:	e7da      	b.n	8009a6a <_free_r+0x22>
 8009ab4:	d902      	bls.n	8009abc <_free_r+0x74>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	e7d6      	b.n	8009a6a <_free_r+0x22>
 8009abc:	6820      	ldr	r0, [r4, #0]
 8009abe:	1821      	adds	r1, r4, r0
 8009ac0:	428b      	cmp	r3, r1
 8009ac2:	bf04      	itt	eq
 8009ac4:	6819      	ldreq	r1, [r3, #0]
 8009ac6:	685b      	ldreq	r3, [r3, #4]
 8009ac8:	6063      	str	r3, [r4, #4]
 8009aca:	bf04      	itt	eq
 8009acc:	1809      	addeq	r1, r1, r0
 8009ace:	6021      	streq	r1, [r4, #0]
 8009ad0:	6054      	str	r4, [r2, #4]
 8009ad2:	e7ca      	b.n	8009a6a <_free_r+0x22>
 8009ad4:	bd38      	pop	{r3, r4, r5, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000840 	.word	0x20000840

08009adc <malloc>:
 8009adc:	4b02      	ldr	r3, [pc, #8]	@ (8009ae8 <malloc+0xc>)
 8009ade:	4601      	mov	r1, r0
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f000 b825 	b.w	8009b30 <_malloc_r>
 8009ae6:	bf00      	nop
 8009ae8:	2000005c 	.word	0x2000005c

08009aec <sbrk_aligned>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0f      	ldr	r6, [pc, #60]	@ (8009b2c <sbrk_aligned+0x40>)
 8009af0:	460c      	mov	r4, r1
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	4605      	mov	r5, r0
 8009af6:	b911      	cbnz	r1, 8009afe <sbrk_aligned+0x12>
 8009af8:	f001 fdfa 	bl	800b6f0 <_sbrk_r>
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f001 fdf5 	bl	800b6f0 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d103      	bne.n	8009b12 <sbrk_aligned+0x26>
 8009b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b0e:	4620      	mov	r0, r4
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	1cc4      	adds	r4, r0, #3
 8009b14:	f024 0403 	bic.w	r4, r4, #3
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d0f8      	beq.n	8009b0e <sbrk_aligned+0x22>
 8009b1c:	1a21      	subs	r1, r4, r0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f001 fde6 	bl	800b6f0 <_sbrk_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	d1f2      	bne.n	8009b0e <sbrk_aligned+0x22>
 8009b28:	e7ef      	b.n	8009b0a <sbrk_aligned+0x1e>
 8009b2a:	bf00      	nop
 8009b2c:	2000083c 	.word	0x2000083c

08009b30 <_malloc_r>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	1ccd      	adds	r5, r1, #3
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	4606      	mov	r6, r0
 8009b46:	db01      	blt.n	8009b4c <_malloc_r+0x1c>
 8009b48:	42a9      	cmp	r1, r5
 8009b4a:	d904      	bls.n	8009b56 <_malloc_r+0x26>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	6033      	str	r3, [r6, #0]
 8009b50:	2000      	movs	r0, #0
 8009b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c2c <_malloc_r+0xfc>
 8009b5a:	f000 f869 	bl	8009c30 <__malloc_lock>
 8009b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b62:	461c      	mov	r4, r3
 8009b64:	bb44      	cbnz	r4, 8009bb8 <_malloc_r+0x88>
 8009b66:	4629      	mov	r1, r5
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ffbf 	bl	8009aec <sbrk_aligned>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	4604      	mov	r4, r0
 8009b72:	d158      	bne.n	8009c26 <_malloc_r+0xf6>
 8009b74:	f8d8 4000 	ldr.w	r4, [r8]
 8009b78:	4627      	mov	r7, r4
 8009b7a:	2f00      	cmp	r7, #0
 8009b7c:	d143      	bne.n	8009c06 <_malloc_r+0xd6>
 8009b7e:	2c00      	cmp	r4, #0
 8009b80:	d04b      	beq.n	8009c1a <_malloc_r+0xea>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	4639      	mov	r1, r7
 8009b86:	4630      	mov	r0, r6
 8009b88:	eb04 0903 	add.w	r9, r4, r3
 8009b8c:	f001 fdb0 	bl	800b6f0 <_sbrk_r>
 8009b90:	4581      	cmp	r9, r0
 8009b92:	d142      	bne.n	8009c1a <_malloc_r+0xea>
 8009b94:	6821      	ldr	r1, [r4, #0]
 8009b96:	1a6d      	subs	r5, r5, r1
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ffa6 	bl	8009aec <sbrk_aligned>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d03a      	beq.n	8009c1a <_malloc_r+0xea>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	442b      	add	r3, r5
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	bb62      	cbnz	r2, 8009c0c <_malloc_r+0xdc>
 8009bb2:	f8c8 7000 	str.w	r7, [r8]
 8009bb6:	e00f      	b.n	8009bd8 <_malloc_r+0xa8>
 8009bb8:	6822      	ldr	r2, [r4, #0]
 8009bba:	1b52      	subs	r2, r2, r5
 8009bbc:	d420      	bmi.n	8009c00 <_malloc_r+0xd0>
 8009bbe:	2a0b      	cmp	r2, #11
 8009bc0:	d917      	bls.n	8009bf2 <_malloc_r+0xc2>
 8009bc2:	1961      	adds	r1, r4, r5
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	6025      	str	r5, [r4, #0]
 8009bc8:	bf18      	it	ne
 8009bca:	6059      	strne	r1, [r3, #4]
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	bf08      	it	eq
 8009bd0:	f8c8 1000 	streq.w	r1, [r8]
 8009bd4:	5162      	str	r2, [r4, r5]
 8009bd6:	604b      	str	r3, [r1, #4]
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 f82f 	bl	8009c3c <__malloc_unlock>
 8009bde:	f104 000b 	add.w	r0, r4, #11
 8009be2:	1d23      	adds	r3, r4, #4
 8009be4:	f020 0007 	bic.w	r0, r0, #7
 8009be8:	1ac2      	subs	r2, r0, r3
 8009bea:	bf1c      	itt	ne
 8009bec:	1a1b      	subne	r3, r3, r0
 8009bee:	50a3      	strne	r3, [r4, r2]
 8009bf0:	e7af      	b.n	8009b52 <_malloc_r+0x22>
 8009bf2:	6862      	ldr	r2, [r4, #4]
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	bf0c      	ite	eq
 8009bf8:	f8c8 2000 	streq.w	r2, [r8]
 8009bfc:	605a      	strne	r2, [r3, #4]
 8009bfe:	e7eb      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c00:	4623      	mov	r3, r4
 8009c02:	6864      	ldr	r4, [r4, #4]
 8009c04:	e7ae      	b.n	8009b64 <_malloc_r+0x34>
 8009c06:	463c      	mov	r4, r7
 8009c08:	687f      	ldr	r7, [r7, #4]
 8009c0a:	e7b6      	b.n	8009b7a <_malloc_r+0x4a>
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d1fb      	bne.n	8009c0c <_malloc_r+0xdc>
 8009c14:	2300      	movs	r3, #0
 8009c16:	6053      	str	r3, [r2, #4]
 8009c18:	e7de      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f80c 	bl	8009c3c <__malloc_unlock>
 8009c24:	e794      	b.n	8009b50 <_malloc_r+0x20>
 8009c26:	6005      	str	r5, [r0, #0]
 8009c28:	e7d6      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c2a:	bf00      	nop
 8009c2c:	20000840 	.word	0x20000840

08009c30 <__malloc_lock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	@ (8009c38 <__malloc_lock+0x8>)
 8009c32:	f7ff b8b2 	b.w	8008d9a <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	20000838 	.word	0x20000838

08009c3c <__malloc_unlock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	@ (8009c44 <__malloc_unlock+0x8>)
 8009c3e:	f7ff b8ad 	b.w	8008d9c <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	20000838 	.word	0x20000838

08009c48 <_Balloc>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	69c6      	ldr	r6, [r0, #28]
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	460d      	mov	r5, r1
 8009c50:	b976      	cbnz	r6, 8009c70 <_Balloc+0x28>
 8009c52:	2010      	movs	r0, #16
 8009c54:	f7ff ff42 	bl	8009adc <malloc>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	61e0      	str	r0, [r4, #28]
 8009c5c:	b920      	cbnz	r0, 8009c68 <_Balloc+0x20>
 8009c5e:	4b18      	ldr	r3, [pc, #96]	@ (8009cc0 <_Balloc+0x78>)
 8009c60:	4818      	ldr	r0, [pc, #96]	@ (8009cc4 <_Balloc+0x7c>)
 8009c62:	216b      	movs	r1, #107	@ 0x6b
 8009c64:	f001 fd6c 	bl	800b740 <__assert_func>
 8009c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c6c:	6006      	str	r6, [r0, #0]
 8009c6e:	60c6      	str	r6, [r0, #12]
 8009c70:	69e6      	ldr	r6, [r4, #28]
 8009c72:	68f3      	ldr	r3, [r6, #12]
 8009c74:	b183      	cbz	r3, 8009c98 <_Balloc+0x50>
 8009c76:	69e3      	ldr	r3, [r4, #28]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c7e:	b9b8      	cbnz	r0, 8009cb0 <_Balloc+0x68>
 8009c80:	2101      	movs	r1, #1
 8009c82:	fa01 f605 	lsl.w	r6, r1, r5
 8009c86:	1d72      	adds	r2, r6, #5
 8009c88:	0092      	lsls	r2, r2, #2
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f001 fd76 	bl	800b77c <_calloc_r>
 8009c90:	b160      	cbz	r0, 8009cac <_Balloc+0x64>
 8009c92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c96:	e00e      	b.n	8009cb6 <_Balloc+0x6e>
 8009c98:	2221      	movs	r2, #33	@ 0x21
 8009c9a:	2104      	movs	r1, #4
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f001 fd6d 	bl	800b77c <_calloc_r>
 8009ca2:	69e3      	ldr	r3, [r4, #28]
 8009ca4:	60f0      	str	r0, [r6, #12]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e4      	bne.n	8009c76 <_Balloc+0x2e>
 8009cac:	2000      	movs	r0, #0
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	6802      	ldr	r2, [r0, #0]
 8009cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cbc:	e7f7      	b.n	8009cae <_Balloc+0x66>
 8009cbe:	bf00      	nop
 8009cc0:	0800c5e2 	.word	0x0800c5e2
 8009cc4:	0800c662 	.word	0x0800c662

08009cc8 <_Bfree>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	69c6      	ldr	r6, [r0, #28]
 8009ccc:	4605      	mov	r5, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	b976      	cbnz	r6, 8009cf0 <_Bfree+0x28>
 8009cd2:	2010      	movs	r0, #16
 8009cd4:	f7ff ff02 	bl	8009adc <malloc>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	61e8      	str	r0, [r5, #28]
 8009cdc:	b920      	cbnz	r0, 8009ce8 <_Bfree+0x20>
 8009cde:	4b09      	ldr	r3, [pc, #36]	@ (8009d04 <_Bfree+0x3c>)
 8009ce0:	4809      	ldr	r0, [pc, #36]	@ (8009d08 <_Bfree+0x40>)
 8009ce2:	218f      	movs	r1, #143	@ 0x8f
 8009ce4:	f001 fd2c 	bl	800b740 <__assert_func>
 8009ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cec:	6006      	str	r6, [r0, #0]
 8009cee:	60c6      	str	r6, [r0, #12]
 8009cf0:	b13c      	cbz	r4, 8009d02 <_Bfree+0x3a>
 8009cf2:	69eb      	ldr	r3, [r5, #28]
 8009cf4:	6862      	ldr	r2, [r4, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cfc:	6021      	str	r1, [r4, #0]
 8009cfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	0800c5e2 	.word	0x0800c5e2
 8009d08:	0800c662 	.word	0x0800c662

08009d0c <__multadd>:
 8009d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d10:	690d      	ldr	r5, [r1, #16]
 8009d12:	4607      	mov	r7, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	461e      	mov	r6, r3
 8009d18:	f101 0c14 	add.w	ip, r1, #20
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009d22:	b299      	uxth	r1, r3
 8009d24:	fb02 6101 	mla	r1, r2, r1, r6
 8009d28:	0c1e      	lsrs	r6, r3, #16
 8009d2a:	0c0b      	lsrs	r3, r1, #16
 8009d2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009d30:	b289      	uxth	r1, r1
 8009d32:	3001      	adds	r0, #1
 8009d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d38:	4285      	cmp	r5, r0
 8009d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009d3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d42:	dcec      	bgt.n	8009d1e <__multadd+0x12>
 8009d44:	b30e      	cbz	r6, 8009d8a <__multadd+0x7e>
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	dc19      	bgt.n	8009d80 <__multadd+0x74>
 8009d4c:	6861      	ldr	r1, [r4, #4]
 8009d4e:	4638      	mov	r0, r7
 8009d50:	3101      	adds	r1, #1
 8009d52:	f7ff ff79 	bl	8009c48 <_Balloc>
 8009d56:	4680      	mov	r8, r0
 8009d58:	b928      	cbnz	r0, 8009d66 <__multadd+0x5a>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <__multadd+0x84>)
 8009d5e:	480d      	ldr	r0, [pc, #52]	@ (8009d94 <__multadd+0x88>)
 8009d60:	21ba      	movs	r1, #186	@ 0xba
 8009d62:	f001 fced 	bl	800b740 <__assert_func>
 8009d66:	6922      	ldr	r2, [r4, #16]
 8009d68:	3202      	adds	r2, #2
 8009d6a:	f104 010c 	add.w	r1, r4, #12
 8009d6e:	0092      	lsls	r2, r2, #2
 8009d70:	300c      	adds	r0, #12
 8009d72:	f001 fccd 	bl	800b710 <memcpy>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f7ff ffa5 	bl	8009cc8 <_Bfree>
 8009d7e:	4644      	mov	r4, r8
 8009d80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d84:	3501      	adds	r5, #1
 8009d86:	615e      	str	r6, [r3, #20]
 8009d88:	6125      	str	r5, [r4, #16]
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d90:	0800c651 	.word	0x0800c651
 8009d94:	0800c662 	.word	0x0800c662

08009d98 <__s2b>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	4615      	mov	r5, r2
 8009da0:	461f      	mov	r7, r3
 8009da2:	2209      	movs	r2, #9
 8009da4:	3308      	adds	r3, #8
 8009da6:	4606      	mov	r6, r0
 8009da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dac:	2100      	movs	r1, #0
 8009dae:	2201      	movs	r2, #1
 8009db0:	429a      	cmp	r2, r3
 8009db2:	db09      	blt.n	8009dc8 <__s2b+0x30>
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff ff47 	bl	8009c48 <_Balloc>
 8009dba:	b940      	cbnz	r0, 8009dce <__s2b+0x36>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	4b19      	ldr	r3, [pc, #100]	@ (8009e24 <__s2b+0x8c>)
 8009dc0:	4819      	ldr	r0, [pc, #100]	@ (8009e28 <__s2b+0x90>)
 8009dc2:	21d3      	movs	r1, #211	@ 0xd3
 8009dc4:	f001 fcbc 	bl	800b740 <__assert_func>
 8009dc8:	0052      	lsls	r2, r2, #1
 8009dca:	3101      	adds	r1, #1
 8009dcc:	e7f0      	b.n	8009db0 <__s2b+0x18>
 8009dce:	9b08      	ldr	r3, [sp, #32]
 8009dd0:	6143      	str	r3, [r0, #20]
 8009dd2:	2d09      	cmp	r5, #9
 8009dd4:	f04f 0301 	mov.w	r3, #1
 8009dd8:	6103      	str	r3, [r0, #16]
 8009dda:	dd16      	ble.n	8009e0a <__s2b+0x72>
 8009ddc:	f104 0909 	add.w	r9, r4, #9
 8009de0:	46c8      	mov	r8, r9
 8009de2:	442c      	add	r4, r5
 8009de4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009de8:	4601      	mov	r1, r0
 8009dea:	3b30      	subs	r3, #48	@ 0x30
 8009dec:	220a      	movs	r2, #10
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff ff8c 	bl	8009d0c <__multadd>
 8009df4:	45a0      	cmp	r8, r4
 8009df6:	d1f5      	bne.n	8009de4 <__s2b+0x4c>
 8009df8:	f1a5 0408 	sub.w	r4, r5, #8
 8009dfc:	444c      	add	r4, r9
 8009dfe:	1b2d      	subs	r5, r5, r4
 8009e00:	1963      	adds	r3, r4, r5
 8009e02:	42bb      	cmp	r3, r7
 8009e04:	db04      	blt.n	8009e10 <__s2b+0x78>
 8009e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0a:	340a      	adds	r4, #10
 8009e0c:	2509      	movs	r5, #9
 8009e0e:	e7f6      	b.n	8009dfe <__s2b+0x66>
 8009e10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e14:	4601      	mov	r1, r0
 8009e16:	3b30      	subs	r3, #48	@ 0x30
 8009e18:	220a      	movs	r2, #10
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7ff ff76 	bl	8009d0c <__multadd>
 8009e20:	e7ee      	b.n	8009e00 <__s2b+0x68>
 8009e22:	bf00      	nop
 8009e24:	0800c651 	.word	0x0800c651
 8009e28:	0800c662 	.word	0x0800c662

08009e2c <__hi0bits>:
 8009e2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e30:	4603      	mov	r3, r0
 8009e32:	bf36      	itet	cc
 8009e34:	0403      	lslcc	r3, r0, #16
 8009e36:	2000      	movcs	r0, #0
 8009e38:	2010      	movcc	r0, #16
 8009e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e3e:	bf3c      	itt	cc
 8009e40:	021b      	lslcc	r3, r3, #8
 8009e42:	3008      	addcc	r0, #8
 8009e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e48:	bf3c      	itt	cc
 8009e4a:	011b      	lslcc	r3, r3, #4
 8009e4c:	3004      	addcc	r0, #4
 8009e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e52:	bf3c      	itt	cc
 8009e54:	009b      	lslcc	r3, r3, #2
 8009e56:	3002      	addcc	r0, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	db05      	blt.n	8009e68 <__hi0bits+0x3c>
 8009e5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e60:	f100 0001 	add.w	r0, r0, #1
 8009e64:	bf08      	it	eq
 8009e66:	2020      	moveq	r0, #32
 8009e68:	4770      	bx	lr

08009e6a <__lo0bits>:
 8009e6a:	6803      	ldr	r3, [r0, #0]
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	f013 0007 	ands.w	r0, r3, #7
 8009e72:	d00b      	beq.n	8009e8c <__lo0bits+0x22>
 8009e74:	07d9      	lsls	r1, r3, #31
 8009e76:	d421      	bmi.n	8009ebc <__lo0bits+0x52>
 8009e78:	0798      	lsls	r0, r3, #30
 8009e7a:	bf49      	itett	mi
 8009e7c:	085b      	lsrmi	r3, r3, #1
 8009e7e:	089b      	lsrpl	r3, r3, #2
 8009e80:	2001      	movmi	r0, #1
 8009e82:	6013      	strmi	r3, [r2, #0]
 8009e84:	bf5c      	itt	pl
 8009e86:	6013      	strpl	r3, [r2, #0]
 8009e88:	2002      	movpl	r0, #2
 8009e8a:	4770      	bx	lr
 8009e8c:	b299      	uxth	r1, r3
 8009e8e:	b909      	cbnz	r1, 8009e94 <__lo0bits+0x2a>
 8009e90:	0c1b      	lsrs	r3, r3, #16
 8009e92:	2010      	movs	r0, #16
 8009e94:	b2d9      	uxtb	r1, r3
 8009e96:	b909      	cbnz	r1, 8009e9c <__lo0bits+0x32>
 8009e98:	3008      	adds	r0, #8
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	0719      	lsls	r1, r3, #28
 8009e9e:	bf04      	itt	eq
 8009ea0:	091b      	lsreq	r3, r3, #4
 8009ea2:	3004      	addeq	r0, #4
 8009ea4:	0799      	lsls	r1, r3, #30
 8009ea6:	bf04      	itt	eq
 8009ea8:	089b      	lsreq	r3, r3, #2
 8009eaa:	3002      	addeq	r0, #2
 8009eac:	07d9      	lsls	r1, r3, #31
 8009eae:	d403      	bmi.n	8009eb8 <__lo0bits+0x4e>
 8009eb0:	085b      	lsrs	r3, r3, #1
 8009eb2:	f100 0001 	add.w	r0, r0, #1
 8009eb6:	d003      	beq.n	8009ec0 <__lo0bits+0x56>
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	4770      	bx	lr
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	4770      	bx	lr
 8009ec0:	2020      	movs	r0, #32
 8009ec2:	4770      	bx	lr

08009ec4 <__i2b>:
 8009ec4:	b510      	push	{r4, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	2101      	movs	r1, #1
 8009eca:	f7ff febd 	bl	8009c48 <_Balloc>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	b928      	cbnz	r0, 8009ede <__i2b+0x1a>
 8009ed2:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <__i2b+0x24>)
 8009ed4:	4805      	ldr	r0, [pc, #20]	@ (8009eec <__i2b+0x28>)
 8009ed6:	f240 1145 	movw	r1, #325	@ 0x145
 8009eda:	f001 fc31 	bl	800b740 <__assert_func>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	6144      	str	r4, [r0, #20]
 8009ee2:	6103      	str	r3, [r0, #16]
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	bf00      	nop
 8009ee8:	0800c651 	.word	0x0800c651
 8009eec:	0800c662 	.word	0x0800c662

08009ef0 <__multiply>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	690a      	ldr	r2, [r1, #16]
 8009ef8:	6923      	ldr	r3, [r4, #16]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	bfa8      	it	ge
 8009efe:	4623      	movge	r3, r4
 8009f00:	460f      	mov	r7, r1
 8009f02:	bfa4      	itt	ge
 8009f04:	460c      	movge	r4, r1
 8009f06:	461f      	movge	r7, r3
 8009f08:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009f0c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	6861      	ldr	r1, [r4, #4]
 8009f14:	eb0a 0609 	add.w	r6, sl, r9
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	bfb8      	it	lt
 8009f1e:	3101      	addlt	r1, #1
 8009f20:	f7ff fe92 	bl	8009c48 <_Balloc>
 8009f24:	b930      	cbnz	r0, 8009f34 <__multiply+0x44>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b44      	ldr	r3, [pc, #272]	@ (800a03c <__multiply+0x14c>)
 8009f2a:	4845      	ldr	r0, [pc, #276]	@ (800a040 <__multiply+0x150>)
 8009f2c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f30:	f001 fc06 	bl	800b740 <__assert_func>
 8009f34:	f100 0514 	add.w	r5, r0, #20
 8009f38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f3c:	462b      	mov	r3, r5
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4543      	cmp	r3, r8
 8009f42:	d321      	bcc.n	8009f88 <__multiply+0x98>
 8009f44:	f107 0114 	add.w	r1, r7, #20
 8009f48:	f104 0214 	add.w	r2, r4, #20
 8009f4c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009f50:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009f54:	9302      	str	r3, [sp, #8]
 8009f56:	1b13      	subs	r3, r2, r4
 8009f58:	3b15      	subs	r3, #21
 8009f5a:	f023 0303 	bic.w	r3, r3, #3
 8009f5e:	3304      	adds	r3, #4
 8009f60:	f104 0715 	add.w	r7, r4, #21
 8009f64:	42ba      	cmp	r2, r7
 8009f66:	bf38      	it	cc
 8009f68:	2304      	movcc	r3, #4
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	9103      	str	r1, [sp, #12]
 8009f70:	428b      	cmp	r3, r1
 8009f72:	d80c      	bhi.n	8009f8e <__multiply+0x9e>
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	dd03      	ble.n	8009f80 <__multiply+0x90>
 8009f78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d05b      	beq.n	800a038 <__multiply+0x148>
 8009f80:	6106      	str	r6, [r0, #16]
 8009f82:	b005      	add	sp, #20
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f88:	f843 2b04 	str.w	r2, [r3], #4
 8009f8c:	e7d8      	b.n	8009f40 <__multiply+0x50>
 8009f8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f92:	f1ba 0f00 	cmp.w	sl, #0
 8009f96:	d024      	beq.n	8009fe2 <__multiply+0xf2>
 8009f98:	f104 0e14 	add.w	lr, r4, #20
 8009f9c:	46a9      	mov	r9, r5
 8009f9e:	f04f 0c00 	mov.w	ip, #0
 8009fa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8009faa:	fa1f fb87 	uxth.w	fp, r7
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009fb4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009fb8:	f8d9 7000 	ldr.w	r7, [r9]
 8009fbc:	4463      	add	r3, ip
 8009fbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009fc2:	fb0a c70b 	mla	r7, sl, fp, ip
 8009fc6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009fd0:	4572      	cmp	r2, lr
 8009fd2:	f849 3b04 	str.w	r3, [r9], #4
 8009fd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009fda:	d8e2      	bhi.n	8009fa2 <__multiply+0xb2>
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	f845 c003 	str.w	ip, [r5, r3]
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009fe8:	3104      	adds	r1, #4
 8009fea:	f1b9 0f00 	cmp.w	r9, #0
 8009fee:	d021      	beq.n	800a034 <__multiply+0x144>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	f104 0c14 	add.w	ip, r4, #20
 8009ff6:	46ae      	mov	lr, r5
 8009ff8:	f04f 0a00 	mov.w	sl, #0
 8009ffc:	f8bc b000 	ldrh.w	fp, [ip]
 800a000:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a004:	fb09 770b 	mla	r7, r9, fp, r7
 800a008:	4457      	add	r7, sl
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a010:	f84e 3b04 	str.w	r3, [lr], #4
 800a014:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a01c:	f8be 3000 	ldrh.w	r3, [lr]
 800a020:	fb09 330a 	mla	r3, r9, sl, r3
 800a024:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a028:	4562      	cmp	r2, ip
 800a02a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a02e:	d8e5      	bhi.n	8009ffc <__multiply+0x10c>
 800a030:	9f01      	ldr	r7, [sp, #4]
 800a032:	51eb      	str	r3, [r5, r7]
 800a034:	3504      	adds	r5, #4
 800a036:	e799      	b.n	8009f6c <__multiply+0x7c>
 800a038:	3e01      	subs	r6, #1
 800a03a:	e79b      	b.n	8009f74 <__multiply+0x84>
 800a03c:	0800c651 	.word	0x0800c651
 800a040:	0800c662 	.word	0x0800c662

0800a044 <__pow5mult>:
 800a044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a048:	4615      	mov	r5, r2
 800a04a:	f012 0203 	ands.w	r2, r2, #3
 800a04e:	4607      	mov	r7, r0
 800a050:	460e      	mov	r6, r1
 800a052:	d007      	beq.n	800a064 <__pow5mult+0x20>
 800a054:	4c25      	ldr	r4, [pc, #148]	@ (800a0ec <__pow5mult+0xa8>)
 800a056:	3a01      	subs	r2, #1
 800a058:	2300      	movs	r3, #0
 800a05a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a05e:	f7ff fe55 	bl	8009d0c <__multadd>
 800a062:	4606      	mov	r6, r0
 800a064:	10ad      	asrs	r5, r5, #2
 800a066:	d03d      	beq.n	800a0e4 <__pow5mult+0xa0>
 800a068:	69fc      	ldr	r4, [r7, #28]
 800a06a:	b97c      	cbnz	r4, 800a08c <__pow5mult+0x48>
 800a06c:	2010      	movs	r0, #16
 800a06e:	f7ff fd35 	bl	8009adc <malloc>
 800a072:	4602      	mov	r2, r0
 800a074:	61f8      	str	r0, [r7, #28]
 800a076:	b928      	cbnz	r0, 800a084 <__pow5mult+0x40>
 800a078:	4b1d      	ldr	r3, [pc, #116]	@ (800a0f0 <__pow5mult+0xac>)
 800a07a:	481e      	ldr	r0, [pc, #120]	@ (800a0f4 <__pow5mult+0xb0>)
 800a07c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a080:	f001 fb5e 	bl	800b740 <__assert_func>
 800a084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a088:	6004      	str	r4, [r0, #0]
 800a08a:	60c4      	str	r4, [r0, #12]
 800a08c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a094:	b94c      	cbnz	r4, 800a0aa <__pow5mult+0x66>
 800a096:	f240 2171 	movw	r1, #625	@ 0x271
 800a09a:	4638      	mov	r0, r7
 800a09c:	f7ff ff12 	bl	8009ec4 <__i2b>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	6003      	str	r3, [r0, #0]
 800a0aa:	f04f 0900 	mov.w	r9, #0
 800a0ae:	07eb      	lsls	r3, r5, #31
 800a0b0:	d50a      	bpl.n	800a0c8 <__pow5mult+0x84>
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff ff1a 	bl	8009ef0 <__multiply>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4680      	mov	r8, r0
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff fe01 	bl	8009cc8 <_Bfree>
 800a0c6:	4646      	mov	r6, r8
 800a0c8:	106d      	asrs	r5, r5, #1
 800a0ca:	d00b      	beq.n	800a0e4 <__pow5mult+0xa0>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	b938      	cbnz	r0, 800a0e0 <__pow5mult+0x9c>
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	f7ff ff0b 	bl	8009ef0 <__multiply>
 800a0da:	6020      	str	r0, [r4, #0]
 800a0dc:	f8c0 9000 	str.w	r9, [r0]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	e7e4      	b.n	800a0ae <__pow5mult+0x6a>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	bf00      	nop
 800a0ec:	0800c6bc 	.word	0x0800c6bc
 800a0f0:	0800c5e2 	.word	0x0800c5e2
 800a0f4:	0800c662 	.word	0x0800c662

0800a0f8 <__lshift>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	6849      	ldr	r1, [r1, #4]
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a106:	68a3      	ldr	r3, [r4, #8]
 800a108:	4607      	mov	r7, r0
 800a10a:	4691      	mov	r9, r2
 800a10c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a110:	f108 0601 	add.w	r6, r8, #1
 800a114:	42b3      	cmp	r3, r6
 800a116:	db0b      	blt.n	800a130 <__lshift+0x38>
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff fd95 	bl	8009c48 <_Balloc>
 800a11e:	4605      	mov	r5, r0
 800a120:	b948      	cbnz	r0, 800a136 <__lshift+0x3e>
 800a122:	4602      	mov	r2, r0
 800a124:	4b28      	ldr	r3, [pc, #160]	@ (800a1c8 <__lshift+0xd0>)
 800a126:	4829      	ldr	r0, [pc, #164]	@ (800a1cc <__lshift+0xd4>)
 800a128:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a12c:	f001 fb08 	bl	800b740 <__assert_func>
 800a130:	3101      	adds	r1, #1
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	e7ee      	b.n	800a114 <__lshift+0x1c>
 800a136:	2300      	movs	r3, #0
 800a138:	f100 0114 	add.w	r1, r0, #20
 800a13c:	f100 0210 	add.w	r2, r0, #16
 800a140:	4618      	mov	r0, r3
 800a142:	4553      	cmp	r3, sl
 800a144:	db33      	blt.n	800a1ae <__lshift+0xb6>
 800a146:	6920      	ldr	r0, [r4, #16]
 800a148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a14c:	f104 0314 	add.w	r3, r4, #20
 800a150:	f019 091f 	ands.w	r9, r9, #31
 800a154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a158:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a15c:	d02b      	beq.n	800a1b6 <__lshift+0xbe>
 800a15e:	f1c9 0e20 	rsb	lr, r9, #32
 800a162:	468a      	mov	sl, r1
 800a164:	2200      	movs	r2, #0
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	fa00 f009 	lsl.w	r0, r0, r9
 800a16c:	4310      	orrs	r0, r2
 800a16e:	f84a 0b04 	str.w	r0, [sl], #4
 800a172:	f853 2b04 	ldr.w	r2, [r3], #4
 800a176:	459c      	cmp	ip, r3
 800a178:	fa22 f20e 	lsr.w	r2, r2, lr
 800a17c:	d8f3      	bhi.n	800a166 <__lshift+0x6e>
 800a17e:	ebac 0304 	sub.w	r3, ip, r4
 800a182:	3b15      	subs	r3, #21
 800a184:	f023 0303 	bic.w	r3, r3, #3
 800a188:	3304      	adds	r3, #4
 800a18a:	f104 0015 	add.w	r0, r4, #21
 800a18e:	4584      	cmp	ip, r0
 800a190:	bf38      	it	cc
 800a192:	2304      	movcc	r3, #4
 800a194:	50ca      	str	r2, [r1, r3]
 800a196:	b10a      	cbz	r2, 800a19c <__lshift+0xa4>
 800a198:	f108 0602 	add.w	r6, r8, #2
 800a19c:	3e01      	subs	r6, #1
 800a19e:	4638      	mov	r0, r7
 800a1a0:	612e      	str	r6, [r5, #16]
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	f7ff fd90 	bl	8009cc8 <_Bfree>
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	e7c5      	b.n	800a142 <__lshift+0x4a>
 800a1b6:	3904      	subs	r1, #4
 800a1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1c0:	459c      	cmp	ip, r3
 800a1c2:	d8f9      	bhi.n	800a1b8 <__lshift+0xc0>
 800a1c4:	e7ea      	b.n	800a19c <__lshift+0xa4>
 800a1c6:	bf00      	nop
 800a1c8:	0800c651 	.word	0x0800c651
 800a1cc:	0800c662 	.word	0x0800c662

0800a1d0 <__mcmp>:
 800a1d0:	690a      	ldr	r2, [r1, #16]
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6900      	ldr	r0, [r0, #16]
 800a1d6:	1a80      	subs	r0, r0, r2
 800a1d8:	b530      	push	{r4, r5, lr}
 800a1da:	d10e      	bne.n	800a1fa <__mcmp+0x2a>
 800a1dc:	3314      	adds	r3, #20
 800a1de:	3114      	adds	r1, #20
 800a1e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1f0:	4295      	cmp	r5, r2
 800a1f2:	d003      	beq.n	800a1fc <__mcmp+0x2c>
 800a1f4:	d205      	bcs.n	800a202 <__mcmp+0x32>
 800a1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fa:	bd30      	pop	{r4, r5, pc}
 800a1fc:	42a3      	cmp	r3, r4
 800a1fe:	d3f3      	bcc.n	800a1e8 <__mcmp+0x18>
 800a200:	e7fb      	b.n	800a1fa <__mcmp+0x2a>
 800a202:	2001      	movs	r0, #1
 800a204:	e7f9      	b.n	800a1fa <__mcmp+0x2a>
	...

0800a208 <__mdiff>:
 800a208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	4689      	mov	r9, r1
 800a20e:	4606      	mov	r6, r0
 800a210:	4611      	mov	r1, r2
 800a212:	4648      	mov	r0, r9
 800a214:	4614      	mov	r4, r2
 800a216:	f7ff ffdb 	bl	800a1d0 <__mcmp>
 800a21a:	1e05      	subs	r5, r0, #0
 800a21c:	d112      	bne.n	800a244 <__mdiff+0x3c>
 800a21e:	4629      	mov	r1, r5
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff fd11 	bl	8009c48 <_Balloc>
 800a226:	4602      	mov	r2, r0
 800a228:	b928      	cbnz	r0, 800a236 <__mdiff+0x2e>
 800a22a:	4b3f      	ldr	r3, [pc, #252]	@ (800a328 <__mdiff+0x120>)
 800a22c:	f240 2137 	movw	r1, #567	@ 0x237
 800a230:	483e      	ldr	r0, [pc, #248]	@ (800a32c <__mdiff+0x124>)
 800a232:	f001 fa85 	bl	800b740 <__assert_func>
 800a236:	2301      	movs	r3, #1
 800a238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a23c:	4610      	mov	r0, r2
 800a23e:	b003      	add	sp, #12
 800a240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a244:	bfbc      	itt	lt
 800a246:	464b      	movlt	r3, r9
 800a248:	46a1      	movlt	r9, r4
 800a24a:	4630      	mov	r0, r6
 800a24c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a250:	bfba      	itte	lt
 800a252:	461c      	movlt	r4, r3
 800a254:	2501      	movlt	r5, #1
 800a256:	2500      	movge	r5, #0
 800a258:	f7ff fcf6 	bl	8009c48 <_Balloc>
 800a25c:	4602      	mov	r2, r0
 800a25e:	b918      	cbnz	r0, 800a268 <__mdiff+0x60>
 800a260:	4b31      	ldr	r3, [pc, #196]	@ (800a328 <__mdiff+0x120>)
 800a262:	f240 2145 	movw	r1, #581	@ 0x245
 800a266:	e7e3      	b.n	800a230 <__mdiff+0x28>
 800a268:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a26c:	6926      	ldr	r6, [r4, #16]
 800a26e:	60c5      	str	r5, [r0, #12]
 800a270:	f109 0310 	add.w	r3, r9, #16
 800a274:	f109 0514 	add.w	r5, r9, #20
 800a278:	f104 0e14 	add.w	lr, r4, #20
 800a27c:	f100 0b14 	add.w	fp, r0, #20
 800a280:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a284:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	46d9      	mov	r9, fp
 800a28c:	f04f 0c00 	mov.w	ip, #0
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a296:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a29a:	9301      	str	r3, [sp, #4]
 800a29c:	fa1f f38a 	uxth.w	r3, sl
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	b283      	uxth	r3, r0
 800a2a4:	1acb      	subs	r3, r1, r3
 800a2a6:	0c00      	lsrs	r0, r0, #16
 800a2a8:	4463      	add	r3, ip
 800a2aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a2ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a2b8:	4576      	cmp	r6, lr
 800a2ba:	f849 3b04 	str.w	r3, [r9], #4
 800a2be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2c2:	d8e5      	bhi.n	800a290 <__mdiff+0x88>
 800a2c4:	1b33      	subs	r3, r6, r4
 800a2c6:	3b15      	subs	r3, #21
 800a2c8:	f023 0303 	bic.w	r3, r3, #3
 800a2cc:	3415      	adds	r4, #21
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	bf38      	it	cc
 800a2d4:	2304      	movcc	r3, #4
 800a2d6:	441d      	add	r5, r3
 800a2d8:	445b      	add	r3, fp
 800a2da:	461e      	mov	r6, r3
 800a2dc:	462c      	mov	r4, r5
 800a2de:	4544      	cmp	r4, r8
 800a2e0:	d30e      	bcc.n	800a300 <__mdiff+0xf8>
 800a2e2:	f108 0103 	add.w	r1, r8, #3
 800a2e6:	1b49      	subs	r1, r1, r5
 800a2e8:	f021 0103 	bic.w	r1, r1, #3
 800a2ec:	3d03      	subs	r5, #3
 800a2ee:	45a8      	cmp	r8, r5
 800a2f0:	bf38      	it	cc
 800a2f2:	2100      	movcc	r1, #0
 800a2f4:	440b      	add	r3, r1
 800a2f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2fa:	b191      	cbz	r1, 800a322 <__mdiff+0x11a>
 800a2fc:	6117      	str	r7, [r2, #16]
 800a2fe:	e79d      	b.n	800a23c <__mdiff+0x34>
 800a300:	f854 1b04 	ldr.w	r1, [r4], #4
 800a304:	46e6      	mov	lr, ip
 800a306:	0c08      	lsrs	r0, r1, #16
 800a308:	fa1c fc81 	uxtah	ip, ip, r1
 800a30c:	4471      	add	r1, lr
 800a30e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a312:	b289      	uxth	r1, r1
 800a314:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a318:	f846 1b04 	str.w	r1, [r6], #4
 800a31c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a320:	e7dd      	b.n	800a2de <__mdiff+0xd6>
 800a322:	3f01      	subs	r7, #1
 800a324:	e7e7      	b.n	800a2f6 <__mdiff+0xee>
 800a326:	bf00      	nop
 800a328:	0800c651 	.word	0x0800c651
 800a32c:	0800c662 	.word	0x0800c662

0800a330 <__ulp>:
 800a330:	b082      	sub	sp, #8
 800a332:	ed8d 0b00 	vstr	d0, [sp]
 800a336:	9a01      	ldr	r2, [sp, #4]
 800a338:	4b0f      	ldr	r3, [pc, #60]	@ (800a378 <__ulp+0x48>)
 800a33a:	4013      	ands	r3, r2
 800a33c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a340:	2b00      	cmp	r3, #0
 800a342:	dc08      	bgt.n	800a356 <__ulp+0x26>
 800a344:	425b      	negs	r3, r3
 800a346:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a34a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a34e:	da04      	bge.n	800a35a <__ulp+0x2a>
 800a350:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a354:	4113      	asrs	r3, r2
 800a356:	2200      	movs	r2, #0
 800a358:	e008      	b.n	800a36c <__ulp+0x3c>
 800a35a:	f1a2 0314 	sub.w	r3, r2, #20
 800a35e:	2b1e      	cmp	r3, #30
 800a360:	bfda      	itte	le
 800a362:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a366:	40da      	lsrle	r2, r3
 800a368:	2201      	movgt	r2, #1
 800a36a:	2300      	movs	r3, #0
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	ec41 0b10 	vmov	d0, r0, r1
 800a374:	b002      	add	sp, #8
 800a376:	4770      	bx	lr
 800a378:	7ff00000 	.word	0x7ff00000

0800a37c <__b2d>:
 800a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	6906      	ldr	r6, [r0, #16]
 800a382:	f100 0814 	add.w	r8, r0, #20
 800a386:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a38a:	1f37      	subs	r7, r6, #4
 800a38c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a390:	4610      	mov	r0, r2
 800a392:	f7ff fd4b 	bl	8009e2c <__hi0bits>
 800a396:	f1c0 0320 	rsb	r3, r0, #32
 800a39a:	280a      	cmp	r0, #10
 800a39c:	600b      	str	r3, [r1, #0]
 800a39e:	491b      	ldr	r1, [pc, #108]	@ (800a40c <__b2d+0x90>)
 800a3a0:	dc15      	bgt.n	800a3ce <__b2d+0x52>
 800a3a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a3a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a3aa:	45b8      	cmp	r8, r7
 800a3ac:	ea43 0501 	orr.w	r5, r3, r1
 800a3b0:	bf34      	ite	cc
 800a3b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a3b6:	2300      	movcs	r3, #0
 800a3b8:	3015      	adds	r0, #21
 800a3ba:	fa02 f000 	lsl.w	r0, r2, r0
 800a3be:	fa23 f30c 	lsr.w	r3, r3, ip
 800a3c2:	4303      	orrs	r3, r0
 800a3c4:	461c      	mov	r4, r3
 800a3c6:	ec45 4b10 	vmov	d0, r4, r5
 800a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ce:	45b8      	cmp	r8, r7
 800a3d0:	bf3a      	itte	cc
 800a3d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a3d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a3da:	2300      	movcs	r3, #0
 800a3dc:	380b      	subs	r0, #11
 800a3de:	d012      	beq.n	800a406 <__b2d+0x8a>
 800a3e0:	f1c0 0120 	rsb	r1, r0, #32
 800a3e4:	fa23 f401 	lsr.w	r4, r3, r1
 800a3e8:	4082      	lsls	r2, r0
 800a3ea:	4322      	orrs	r2, r4
 800a3ec:	4547      	cmp	r7, r8
 800a3ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a3f2:	bf8c      	ite	hi
 800a3f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a3f8:	2200      	movls	r2, #0
 800a3fa:	4083      	lsls	r3, r0
 800a3fc:	40ca      	lsrs	r2, r1
 800a3fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a402:	4313      	orrs	r3, r2
 800a404:	e7de      	b.n	800a3c4 <__b2d+0x48>
 800a406:	ea42 0501 	orr.w	r5, r2, r1
 800a40a:	e7db      	b.n	800a3c4 <__b2d+0x48>
 800a40c:	3ff00000 	.word	0x3ff00000

0800a410 <__d2b>:
 800a410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a414:	460f      	mov	r7, r1
 800a416:	2101      	movs	r1, #1
 800a418:	ec59 8b10 	vmov	r8, r9, d0
 800a41c:	4616      	mov	r6, r2
 800a41e:	f7ff fc13 	bl	8009c48 <_Balloc>
 800a422:	4604      	mov	r4, r0
 800a424:	b930      	cbnz	r0, 800a434 <__d2b+0x24>
 800a426:	4602      	mov	r2, r0
 800a428:	4b23      	ldr	r3, [pc, #140]	@ (800a4b8 <__d2b+0xa8>)
 800a42a:	4824      	ldr	r0, [pc, #144]	@ (800a4bc <__d2b+0xac>)
 800a42c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a430:	f001 f986 	bl	800b740 <__assert_func>
 800a434:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a43c:	b10d      	cbz	r5, 800a442 <__d2b+0x32>
 800a43e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	f1b8 0300 	subs.w	r3, r8, #0
 800a448:	d023      	beq.n	800a492 <__d2b+0x82>
 800a44a:	4668      	mov	r0, sp
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	f7ff fd0c 	bl	8009e6a <__lo0bits>
 800a452:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a456:	b1d0      	cbz	r0, 800a48e <__d2b+0x7e>
 800a458:	f1c0 0320 	rsb	r3, r0, #32
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	430b      	orrs	r3, r1
 800a462:	40c2      	lsrs	r2, r0
 800a464:	6163      	str	r3, [r4, #20]
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9b01      	ldr	r3, [sp, #4]
 800a46a:	61a3      	str	r3, [r4, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bf0c      	ite	eq
 800a470:	2201      	moveq	r2, #1
 800a472:	2202      	movne	r2, #2
 800a474:	6122      	str	r2, [r4, #16]
 800a476:	b1a5      	cbz	r5, 800a4a2 <__d2b+0x92>
 800a478:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a47c:	4405      	add	r5, r0
 800a47e:	603d      	str	r5, [r7, #0]
 800a480:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a484:	6030      	str	r0, [r6, #0]
 800a486:	4620      	mov	r0, r4
 800a488:	b003      	add	sp, #12
 800a48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48e:	6161      	str	r1, [r4, #20]
 800a490:	e7ea      	b.n	800a468 <__d2b+0x58>
 800a492:	a801      	add	r0, sp, #4
 800a494:	f7ff fce9 	bl	8009e6a <__lo0bits>
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	6163      	str	r3, [r4, #20]
 800a49c:	3020      	adds	r0, #32
 800a49e:	2201      	movs	r2, #1
 800a4a0:	e7e8      	b.n	800a474 <__d2b+0x64>
 800a4a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4aa:	6038      	str	r0, [r7, #0]
 800a4ac:	6918      	ldr	r0, [r3, #16]
 800a4ae:	f7ff fcbd 	bl	8009e2c <__hi0bits>
 800a4b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4b6:	e7e5      	b.n	800a484 <__d2b+0x74>
 800a4b8:	0800c651 	.word	0x0800c651
 800a4bc:	0800c662 	.word	0x0800c662

0800a4c0 <__ratio>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	e9cd 1000 	strd	r1, r0, [sp]
 800a4ca:	a902      	add	r1, sp, #8
 800a4cc:	f7ff ff56 	bl	800a37c <__b2d>
 800a4d0:	9800      	ldr	r0, [sp, #0]
 800a4d2:	a903      	add	r1, sp, #12
 800a4d4:	ec55 4b10 	vmov	r4, r5, d0
 800a4d8:	f7ff ff50 	bl	800a37c <__b2d>
 800a4dc:	9b01      	ldr	r3, [sp, #4]
 800a4de:	6919      	ldr	r1, [r3, #16]
 800a4e0:	9b00      	ldr	r3, [sp, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	1ac9      	subs	r1, r1, r3
 800a4e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	ec5b ab10 	vmov	sl, fp, d0
 800a4f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bfce      	itee	gt
 800a4f8:	462a      	movgt	r2, r5
 800a4fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4fe:	465a      	movle	r2, fp
 800a500:	462f      	mov	r7, r5
 800a502:	46d9      	mov	r9, fp
 800a504:	bfcc      	ite	gt
 800a506:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a50a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a50e:	464b      	mov	r3, r9
 800a510:	4652      	mov	r2, sl
 800a512:	4620      	mov	r0, r4
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 f9a1 	bl	800085c <__aeabi_ddiv>
 800a51a:	ec41 0b10 	vmov	d0, r0, r1
 800a51e:	b005      	add	sp, #20
 800a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a524 <__copybits>:
 800a524:	3901      	subs	r1, #1
 800a526:	b570      	push	{r4, r5, r6, lr}
 800a528:	1149      	asrs	r1, r1, #5
 800a52a:	6914      	ldr	r4, [r2, #16]
 800a52c:	3101      	adds	r1, #1
 800a52e:	f102 0314 	add.w	r3, r2, #20
 800a532:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a536:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a53a:	1f05      	subs	r5, r0, #4
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d30c      	bcc.n	800a55a <__copybits+0x36>
 800a540:	1aa3      	subs	r3, r4, r2
 800a542:	3b11      	subs	r3, #17
 800a544:	f023 0303 	bic.w	r3, r3, #3
 800a548:	3211      	adds	r2, #17
 800a54a:	42a2      	cmp	r2, r4
 800a54c:	bf88      	it	hi
 800a54e:	2300      	movhi	r3, #0
 800a550:	4418      	add	r0, r3
 800a552:	2300      	movs	r3, #0
 800a554:	4288      	cmp	r0, r1
 800a556:	d305      	bcc.n	800a564 <__copybits+0x40>
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a55e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a562:	e7eb      	b.n	800a53c <__copybits+0x18>
 800a564:	f840 3b04 	str.w	r3, [r0], #4
 800a568:	e7f4      	b.n	800a554 <__copybits+0x30>

0800a56a <__any_on>:
 800a56a:	f100 0214 	add.w	r2, r0, #20
 800a56e:	6900      	ldr	r0, [r0, #16]
 800a570:	114b      	asrs	r3, r1, #5
 800a572:	4298      	cmp	r0, r3
 800a574:	b510      	push	{r4, lr}
 800a576:	db11      	blt.n	800a59c <__any_on+0x32>
 800a578:	dd0a      	ble.n	800a590 <__any_on+0x26>
 800a57a:	f011 011f 	ands.w	r1, r1, #31
 800a57e:	d007      	beq.n	800a590 <__any_on+0x26>
 800a580:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a584:	fa24 f001 	lsr.w	r0, r4, r1
 800a588:	fa00 f101 	lsl.w	r1, r0, r1
 800a58c:	428c      	cmp	r4, r1
 800a58e:	d10b      	bne.n	800a5a8 <__any_on+0x3e>
 800a590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a594:	4293      	cmp	r3, r2
 800a596:	d803      	bhi.n	800a5a0 <__any_on+0x36>
 800a598:	2000      	movs	r0, #0
 800a59a:	bd10      	pop	{r4, pc}
 800a59c:	4603      	mov	r3, r0
 800a59e:	e7f7      	b.n	800a590 <__any_on+0x26>
 800a5a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	d0f5      	beq.n	800a594 <__any_on+0x2a>
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e7f6      	b.n	800a59a <__any_on+0x30>

0800a5ac <sulp>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	ec45 4b10 	vmov	d0, r4, r5
 800a5b6:	4616      	mov	r6, r2
 800a5b8:	f7ff feba 	bl	800a330 <__ulp>
 800a5bc:	ec51 0b10 	vmov	r0, r1, d0
 800a5c0:	b17e      	cbz	r6, 800a5e2 <sulp+0x36>
 800a5c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a5c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd09      	ble.n	800a5e2 <sulp+0x36>
 800a5ce:	051b      	lsls	r3, r3, #20
 800a5d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a5d4:	2400      	movs	r4, #0
 800a5d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a5da:	4622      	mov	r2, r4
 800a5dc:	462b      	mov	r3, r5
 800a5de:	f7f6 f813 	bl	8000608 <__aeabi_dmul>
 800a5e2:	ec41 0b10 	vmov	d0, r0, r1
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}

0800a5e8 <_strtod_l>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	b09f      	sub	sp, #124	@ 0x7c
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a5f6:	9005      	str	r0, [sp, #20]
 800a5f8:	f04f 0a00 	mov.w	sl, #0
 800a5fc:	f04f 0b00 	mov.w	fp, #0
 800a600:	460a      	mov	r2, r1
 800a602:	9219      	str	r2, [sp, #100]	@ 0x64
 800a604:	7811      	ldrb	r1, [r2, #0]
 800a606:	292b      	cmp	r1, #43	@ 0x2b
 800a608:	d04a      	beq.n	800a6a0 <_strtod_l+0xb8>
 800a60a:	d838      	bhi.n	800a67e <_strtod_l+0x96>
 800a60c:	290d      	cmp	r1, #13
 800a60e:	d832      	bhi.n	800a676 <_strtod_l+0x8e>
 800a610:	2908      	cmp	r1, #8
 800a612:	d832      	bhi.n	800a67a <_strtod_l+0x92>
 800a614:	2900      	cmp	r1, #0
 800a616:	d03b      	beq.n	800a690 <_strtod_l+0xa8>
 800a618:	2200      	movs	r2, #0
 800a61a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a61c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a61e:	782a      	ldrb	r2, [r5, #0]
 800a620:	2a30      	cmp	r2, #48	@ 0x30
 800a622:	f040 80b3 	bne.w	800a78c <_strtod_l+0x1a4>
 800a626:	786a      	ldrb	r2, [r5, #1]
 800a628:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a62c:	2a58      	cmp	r2, #88	@ 0x58
 800a62e:	d16e      	bne.n	800a70e <_strtod_l+0x126>
 800a630:	9302      	str	r3, [sp, #8]
 800a632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	ab1a      	add	r3, sp, #104	@ 0x68
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4a8e      	ldr	r2, [pc, #568]	@ (800a874 <_strtod_l+0x28c>)
 800a63c:	9805      	ldr	r0, [sp, #20]
 800a63e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a640:	a919      	add	r1, sp, #100	@ 0x64
 800a642:	f001 f917 	bl	800b874 <__gethex>
 800a646:	f010 060f 	ands.w	r6, r0, #15
 800a64a:	4604      	mov	r4, r0
 800a64c:	d005      	beq.n	800a65a <_strtod_l+0x72>
 800a64e:	2e06      	cmp	r6, #6
 800a650:	d128      	bne.n	800a6a4 <_strtod_l+0xbc>
 800a652:	3501      	adds	r5, #1
 800a654:	2300      	movs	r3, #0
 800a656:	9519      	str	r5, [sp, #100]	@ 0x64
 800a658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a65a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f040 858e 	bne.w	800b17e <_strtod_l+0xb96>
 800a662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a664:	b1cb      	cbz	r3, 800a69a <_strtod_l+0xb2>
 800a666:	4652      	mov	r2, sl
 800a668:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a66c:	ec43 2b10 	vmov	d0, r2, r3
 800a670:	b01f      	add	sp, #124	@ 0x7c
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	2920      	cmp	r1, #32
 800a678:	d1ce      	bne.n	800a618 <_strtod_l+0x30>
 800a67a:	3201      	adds	r2, #1
 800a67c:	e7c1      	b.n	800a602 <_strtod_l+0x1a>
 800a67e:	292d      	cmp	r1, #45	@ 0x2d
 800a680:	d1ca      	bne.n	800a618 <_strtod_l+0x30>
 800a682:	2101      	movs	r1, #1
 800a684:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a686:	1c51      	adds	r1, r2, #1
 800a688:	9119      	str	r1, [sp, #100]	@ 0x64
 800a68a:	7852      	ldrb	r2, [r2, #1]
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	d1c5      	bne.n	800a61c <_strtod_l+0x34>
 800a690:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a692:	9419      	str	r4, [sp, #100]	@ 0x64
 800a694:	2b00      	cmp	r3, #0
 800a696:	f040 8570 	bne.w	800b17a <_strtod_l+0xb92>
 800a69a:	4652      	mov	r2, sl
 800a69c:	465b      	mov	r3, fp
 800a69e:	e7e5      	b.n	800a66c <_strtod_l+0x84>
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	e7ef      	b.n	800a684 <_strtod_l+0x9c>
 800a6a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6a6:	b13a      	cbz	r2, 800a6b8 <_strtod_l+0xd0>
 800a6a8:	2135      	movs	r1, #53	@ 0x35
 800a6aa:	a81c      	add	r0, sp, #112	@ 0x70
 800a6ac:	f7ff ff3a 	bl	800a524 <__copybits>
 800a6b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6b2:	9805      	ldr	r0, [sp, #20]
 800a6b4:	f7ff fb08 	bl	8009cc8 <_Bfree>
 800a6b8:	3e01      	subs	r6, #1
 800a6ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a6bc:	2e04      	cmp	r6, #4
 800a6be:	d806      	bhi.n	800a6ce <_strtod_l+0xe6>
 800a6c0:	e8df f006 	tbb	[pc, r6]
 800a6c4:	201d0314 	.word	0x201d0314
 800a6c8:	14          	.byte	0x14
 800a6c9:	00          	.byte	0x00
 800a6ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a6ce:	05e1      	lsls	r1, r4, #23
 800a6d0:	bf48      	it	mi
 800a6d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a6d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6da:	0d1b      	lsrs	r3, r3, #20
 800a6dc:	051b      	lsls	r3, r3, #20
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1bb      	bne.n	800a65a <_strtod_l+0x72>
 800a6e2:	f7fe fb2f 	bl	8008d44 <__errno>
 800a6e6:	2322      	movs	r3, #34	@ 0x22
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	e7b6      	b.n	800a65a <_strtod_l+0x72>
 800a6ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a6f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a6f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a6f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a6fc:	e7e7      	b.n	800a6ce <_strtod_l+0xe6>
 800a6fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a87c <_strtod_l+0x294>
 800a702:	e7e4      	b.n	800a6ce <_strtod_l+0xe6>
 800a704:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a708:	f04f 3aff 	mov.w	sl, #4294967295
 800a70c:	e7df      	b.n	800a6ce <_strtod_l+0xe6>
 800a70e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	9219      	str	r2, [sp, #100]	@ 0x64
 800a714:	785b      	ldrb	r3, [r3, #1]
 800a716:	2b30      	cmp	r3, #48	@ 0x30
 800a718:	d0f9      	beq.n	800a70e <_strtod_l+0x126>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d09d      	beq.n	800a65a <_strtod_l+0x72>
 800a71e:	2301      	movs	r3, #1
 800a720:	9309      	str	r3, [sp, #36]	@ 0x24
 800a722:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a724:	930c      	str	r3, [sp, #48]	@ 0x30
 800a726:	2300      	movs	r3, #0
 800a728:	9308      	str	r3, [sp, #32]
 800a72a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a72c:	461f      	mov	r7, r3
 800a72e:	220a      	movs	r2, #10
 800a730:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a732:	7805      	ldrb	r5, [r0, #0]
 800a734:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a738:	b2d9      	uxtb	r1, r3
 800a73a:	2909      	cmp	r1, #9
 800a73c:	d928      	bls.n	800a790 <_strtod_l+0x1a8>
 800a73e:	494e      	ldr	r1, [pc, #312]	@ (800a878 <_strtod_l+0x290>)
 800a740:	2201      	movs	r2, #1
 800a742:	f7fe faa2 	bl	8008c8a <strncmp>
 800a746:	2800      	cmp	r0, #0
 800a748:	d032      	beq.n	800a7b0 <_strtod_l+0x1c8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	462a      	mov	r2, r5
 800a74e:	4681      	mov	r9, r0
 800a750:	463d      	mov	r5, r7
 800a752:	4603      	mov	r3, r0
 800a754:	2a65      	cmp	r2, #101	@ 0x65
 800a756:	d001      	beq.n	800a75c <_strtod_l+0x174>
 800a758:	2a45      	cmp	r2, #69	@ 0x45
 800a75a:	d114      	bne.n	800a786 <_strtod_l+0x19e>
 800a75c:	b91d      	cbnz	r5, 800a766 <_strtod_l+0x17e>
 800a75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a760:	4302      	orrs	r2, r0
 800a762:	d095      	beq.n	800a690 <_strtod_l+0xa8>
 800a764:	2500      	movs	r5, #0
 800a766:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a768:	1c62      	adds	r2, r4, #1
 800a76a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a76c:	7862      	ldrb	r2, [r4, #1]
 800a76e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a770:	d077      	beq.n	800a862 <_strtod_l+0x27a>
 800a772:	2a2d      	cmp	r2, #45	@ 0x2d
 800a774:	d07b      	beq.n	800a86e <_strtod_l+0x286>
 800a776:	f04f 0c00 	mov.w	ip, #0
 800a77a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a77e:	2909      	cmp	r1, #9
 800a780:	f240 8082 	bls.w	800a888 <_strtod_l+0x2a0>
 800a784:	9419      	str	r4, [sp, #100]	@ 0x64
 800a786:	f04f 0800 	mov.w	r8, #0
 800a78a:	e0a2      	b.n	800a8d2 <_strtod_l+0x2ea>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e7c7      	b.n	800a720 <_strtod_l+0x138>
 800a790:	2f08      	cmp	r7, #8
 800a792:	bfd5      	itete	le
 800a794:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a796:	9908      	ldrgt	r1, [sp, #32]
 800a798:	fb02 3301 	mlale	r3, r2, r1, r3
 800a79c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a7a0:	f100 0001 	add.w	r0, r0, #1
 800a7a4:	bfd4      	ite	le
 800a7a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a7a8:	9308      	strgt	r3, [sp, #32]
 800a7aa:	3701      	adds	r7, #1
 800a7ac:	9019      	str	r0, [sp, #100]	@ 0x64
 800a7ae:	e7bf      	b.n	800a730 <_strtod_l+0x148>
 800a7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7b6:	785a      	ldrb	r2, [r3, #1]
 800a7b8:	b37f      	cbz	r7, 800a81a <_strtod_l+0x232>
 800a7ba:	4681      	mov	r9, r0
 800a7bc:	463d      	mov	r5, r7
 800a7be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a7c2:	2b09      	cmp	r3, #9
 800a7c4:	d912      	bls.n	800a7ec <_strtod_l+0x204>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e7c4      	b.n	800a754 <_strtod_l+0x16c>
 800a7ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7d0:	785a      	ldrb	r2, [r3, #1]
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	2a30      	cmp	r2, #48	@ 0x30
 800a7d6:	d0f8      	beq.n	800a7ca <_strtod_l+0x1e2>
 800a7d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a7dc:	2b08      	cmp	r3, #8
 800a7de:	f200 84d3 	bhi.w	800b188 <_strtod_l+0xba0>
 800a7e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	3a30      	subs	r2, #48	@ 0x30
 800a7ee:	f100 0301 	add.w	r3, r0, #1
 800a7f2:	d02a      	beq.n	800a84a <_strtod_l+0x262>
 800a7f4:	4499      	add	r9, r3
 800a7f6:	eb00 0c05 	add.w	ip, r0, r5
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	210a      	movs	r1, #10
 800a7fe:	4563      	cmp	r3, ip
 800a800:	d10d      	bne.n	800a81e <_strtod_l+0x236>
 800a802:	1c69      	adds	r1, r5, #1
 800a804:	4401      	add	r1, r0
 800a806:	4428      	add	r0, r5
 800a808:	2808      	cmp	r0, #8
 800a80a:	dc16      	bgt.n	800a83a <_strtod_l+0x252>
 800a80c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a80e:	230a      	movs	r3, #10
 800a810:	fb03 2300 	mla	r3, r3, r0, r2
 800a814:	930a      	str	r3, [sp, #40]	@ 0x28
 800a816:	2300      	movs	r3, #0
 800a818:	e018      	b.n	800a84c <_strtod_l+0x264>
 800a81a:	4638      	mov	r0, r7
 800a81c:	e7da      	b.n	800a7d4 <_strtod_l+0x1ec>
 800a81e:	2b08      	cmp	r3, #8
 800a820:	f103 0301 	add.w	r3, r3, #1
 800a824:	dc03      	bgt.n	800a82e <_strtod_l+0x246>
 800a826:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a828:	434e      	muls	r6, r1
 800a82a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a82c:	e7e7      	b.n	800a7fe <_strtod_l+0x216>
 800a82e:	2b10      	cmp	r3, #16
 800a830:	bfde      	ittt	le
 800a832:	9e08      	ldrle	r6, [sp, #32]
 800a834:	434e      	mulle	r6, r1
 800a836:	9608      	strle	r6, [sp, #32]
 800a838:	e7e1      	b.n	800a7fe <_strtod_l+0x216>
 800a83a:	280f      	cmp	r0, #15
 800a83c:	dceb      	bgt.n	800a816 <_strtod_l+0x22e>
 800a83e:	9808      	ldr	r0, [sp, #32]
 800a840:	230a      	movs	r3, #10
 800a842:	fb03 2300 	mla	r3, r3, r0, r2
 800a846:	9308      	str	r3, [sp, #32]
 800a848:	e7e5      	b.n	800a816 <_strtod_l+0x22e>
 800a84a:	4629      	mov	r1, r5
 800a84c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a84e:	1c50      	adds	r0, r2, #1
 800a850:	9019      	str	r0, [sp, #100]	@ 0x64
 800a852:	7852      	ldrb	r2, [r2, #1]
 800a854:	4618      	mov	r0, r3
 800a856:	460d      	mov	r5, r1
 800a858:	e7b1      	b.n	800a7be <_strtod_l+0x1d6>
 800a85a:	f04f 0900 	mov.w	r9, #0
 800a85e:	2301      	movs	r3, #1
 800a860:	e77d      	b.n	800a75e <_strtod_l+0x176>
 800a862:	f04f 0c00 	mov.w	ip, #0
 800a866:	1ca2      	adds	r2, r4, #2
 800a868:	9219      	str	r2, [sp, #100]	@ 0x64
 800a86a:	78a2      	ldrb	r2, [r4, #2]
 800a86c:	e785      	b.n	800a77a <_strtod_l+0x192>
 800a86e:	f04f 0c01 	mov.w	ip, #1
 800a872:	e7f8      	b.n	800a866 <_strtod_l+0x27e>
 800a874:	0800c7d0 	.word	0x0800c7d0
 800a878:	0800c7b8 	.word	0x0800c7b8
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a882:	1c51      	adds	r1, r2, #1
 800a884:	9119      	str	r1, [sp, #100]	@ 0x64
 800a886:	7852      	ldrb	r2, [r2, #1]
 800a888:	2a30      	cmp	r2, #48	@ 0x30
 800a88a:	d0f9      	beq.n	800a880 <_strtod_l+0x298>
 800a88c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a890:	2908      	cmp	r1, #8
 800a892:	f63f af78 	bhi.w	800a786 <_strtod_l+0x19e>
 800a896:	3a30      	subs	r2, #48	@ 0x30
 800a898:	920e      	str	r2, [sp, #56]	@ 0x38
 800a89a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a89c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a89e:	f04f 080a 	mov.w	r8, #10
 800a8a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8a4:	1c56      	adds	r6, r2, #1
 800a8a6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a8a8:	7852      	ldrb	r2, [r2, #1]
 800a8aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a8ae:	f1be 0f09 	cmp.w	lr, #9
 800a8b2:	d939      	bls.n	800a928 <_strtod_l+0x340>
 800a8b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a8b6:	1a76      	subs	r6, r6, r1
 800a8b8:	2e08      	cmp	r6, #8
 800a8ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a8be:	dc03      	bgt.n	800a8c8 <_strtod_l+0x2e0>
 800a8c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a8c2:	4588      	cmp	r8, r1
 800a8c4:	bfa8      	it	ge
 800a8c6:	4688      	movge	r8, r1
 800a8c8:	f1bc 0f00 	cmp.w	ip, #0
 800a8cc:	d001      	beq.n	800a8d2 <_strtod_l+0x2ea>
 800a8ce:	f1c8 0800 	rsb	r8, r8, #0
 800a8d2:	2d00      	cmp	r5, #0
 800a8d4:	d14e      	bne.n	800a974 <_strtod_l+0x38c>
 800a8d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8d8:	4308      	orrs	r0, r1
 800a8da:	f47f aebe 	bne.w	800a65a <_strtod_l+0x72>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f47f aed6 	bne.w	800a690 <_strtod_l+0xa8>
 800a8e4:	2a69      	cmp	r2, #105	@ 0x69
 800a8e6:	d028      	beq.n	800a93a <_strtod_l+0x352>
 800a8e8:	dc25      	bgt.n	800a936 <_strtod_l+0x34e>
 800a8ea:	2a49      	cmp	r2, #73	@ 0x49
 800a8ec:	d025      	beq.n	800a93a <_strtod_l+0x352>
 800a8ee:	2a4e      	cmp	r2, #78	@ 0x4e
 800a8f0:	f47f aece 	bne.w	800a690 <_strtod_l+0xa8>
 800a8f4:	499b      	ldr	r1, [pc, #620]	@ (800ab64 <_strtod_l+0x57c>)
 800a8f6:	a819      	add	r0, sp, #100	@ 0x64
 800a8f8:	f001 f9de 	bl	800bcb8 <__match>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f43f aec7 	beq.w	800a690 <_strtod_l+0xa8>
 800a902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b28      	cmp	r3, #40	@ 0x28
 800a908:	d12e      	bne.n	800a968 <_strtod_l+0x380>
 800a90a:	4997      	ldr	r1, [pc, #604]	@ (800ab68 <_strtod_l+0x580>)
 800a90c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a90e:	a819      	add	r0, sp, #100	@ 0x64
 800a910:	f001 f9e6 	bl	800bce0 <__hexnan>
 800a914:	2805      	cmp	r0, #5
 800a916:	d127      	bne.n	800a968 <_strtod_l+0x380>
 800a918:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a91a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a91e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a922:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a926:	e698      	b.n	800a65a <_strtod_l+0x72>
 800a928:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a92a:	fb08 2101 	mla	r1, r8, r1, r2
 800a92e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a932:	920e      	str	r2, [sp, #56]	@ 0x38
 800a934:	e7b5      	b.n	800a8a2 <_strtod_l+0x2ba>
 800a936:	2a6e      	cmp	r2, #110	@ 0x6e
 800a938:	e7da      	b.n	800a8f0 <_strtod_l+0x308>
 800a93a:	498c      	ldr	r1, [pc, #560]	@ (800ab6c <_strtod_l+0x584>)
 800a93c:	a819      	add	r0, sp, #100	@ 0x64
 800a93e:	f001 f9bb 	bl	800bcb8 <__match>
 800a942:	2800      	cmp	r0, #0
 800a944:	f43f aea4 	beq.w	800a690 <_strtod_l+0xa8>
 800a948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a94a:	4989      	ldr	r1, [pc, #548]	@ (800ab70 <_strtod_l+0x588>)
 800a94c:	3b01      	subs	r3, #1
 800a94e:	a819      	add	r0, sp, #100	@ 0x64
 800a950:	9319      	str	r3, [sp, #100]	@ 0x64
 800a952:	f001 f9b1 	bl	800bcb8 <__match>
 800a956:	b910      	cbnz	r0, 800a95e <_strtod_l+0x376>
 800a958:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a95a:	3301      	adds	r3, #1
 800a95c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a95e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ab80 <_strtod_l+0x598>
 800a962:	f04f 0a00 	mov.w	sl, #0
 800a966:	e678      	b.n	800a65a <_strtod_l+0x72>
 800a968:	4882      	ldr	r0, [pc, #520]	@ (800ab74 <_strtod_l+0x58c>)
 800a96a:	f000 fee1 	bl	800b730 <nan>
 800a96e:	ec5b ab10 	vmov	sl, fp, d0
 800a972:	e672      	b.n	800a65a <_strtod_l+0x72>
 800a974:	eba8 0309 	sub.w	r3, r8, r9
 800a978:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a97a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97c:	2f00      	cmp	r7, #0
 800a97e:	bf08      	it	eq
 800a980:	462f      	moveq	r7, r5
 800a982:	2d10      	cmp	r5, #16
 800a984:	462c      	mov	r4, r5
 800a986:	bfa8      	it	ge
 800a988:	2410      	movge	r4, #16
 800a98a:	f7f5 fdc3 	bl	8000514 <__aeabi_ui2d>
 800a98e:	2d09      	cmp	r5, #9
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	dc13      	bgt.n	800a9be <_strtod_l+0x3d6>
 800a996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f43f ae5e 	beq.w	800a65a <_strtod_l+0x72>
 800a99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a0:	dd78      	ble.n	800aa94 <_strtod_l+0x4ac>
 800a9a2:	2b16      	cmp	r3, #22
 800a9a4:	dc5f      	bgt.n	800aa66 <_strtod_l+0x47e>
 800a9a6:	4974      	ldr	r1, [pc, #464]	@ (800ab78 <_strtod_l+0x590>)
 800a9a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	465b      	mov	r3, fp
 800a9b4:	f7f5 fe28 	bl	8000608 <__aeabi_dmul>
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	468b      	mov	fp, r1
 800a9bc:	e64d      	b.n	800a65a <_strtod_l+0x72>
 800a9be:	4b6e      	ldr	r3, [pc, #440]	@ (800ab78 <_strtod_l+0x590>)
 800a9c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a9c8:	f7f5 fe1e 	bl	8000608 <__aeabi_dmul>
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	9808      	ldr	r0, [sp, #32]
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	f7f5 fd9f 	bl	8000514 <__aeabi_ui2d>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4650      	mov	r0, sl
 800a9dc:	4659      	mov	r1, fp
 800a9de:	f7f5 fc5d 	bl	800029c <__adddf3>
 800a9e2:	2d0f      	cmp	r5, #15
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	468b      	mov	fp, r1
 800a9e8:	ddd5      	ble.n	800a996 <_strtod_l+0x3ae>
 800a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ec:	1b2c      	subs	r4, r5, r4
 800a9ee:	441c      	add	r4, r3
 800a9f0:	2c00      	cmp	r4, #0
 800a9f2:	f340 8096 	ble.w	800ab22 <_strtod_l+0x53a>
 800a9f6:	f014 030f 	ands.w	r3, r4, #15
 800a9fa:	d00a      	beq.n	800aa12 <_strtod_l+0x42a>
 800a9fc:	495e      	ldr	r1, [pc, #376]	@ (800ab78 <_strtod_l+0x590>)
 800a9fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa02:	4652      	mov	r2, sl
 800aa04:	465b      	mov	r3, fp
 800aa06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0a:	f7f5 fdfd 	bl	8000608 <__aeabi_dmul>
 800aa0e:	4682      	mov	sl, r0
 800aa10:	468b      	mov	fp, r1
 800aa12:	f034 040f 	bics.w	r4, r4, #15
 800aa16:	d073      	beq.n	800ab00 <_strtod_l+0x518>
 800aa18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa1c:	dd48      	ble.n	800aab0 <_strtod_l+0x4c8>
 800aa1e:	2400      	movs	r4, #0
 800aa20:	46a0      	mov	r8, r4
 800aa22:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa24:	46a1      	mov	r9, r4
 800aa26:	9a05      	ldr	r2, [sp, #20]
 800aa28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ab80 <_strtod_l+0x598>
 800aa2c:	2322      	movs	r3, #34	@ 0x22
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	f04f 0a00 	mov.w	sl, #0
 800aa34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f43f ae0f 	beq.w	800a65a <_strtod_l+0x72>
 800aa3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa3e:	9805      	ldr	r0, [sp, #20]
 800aa40:	f7ff f942 	bl	8009cc8 <_Bfree>
 800aa44:	9805      	ldr	r0, [sp, #20]
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7ff f93e 	bl	8009cc8 <_Bfree>
 800aa4c:	9805      	ldr	r0, [sp, #20]
 800aa4e:	4641      	mov	r1, r8
 800aa50:	f7ff f93a 	bl	8009cc8 <_Bfree>
 800aa54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa56:	9805      	ldr	r0, [sp, #20]
 800aa58:	f7ff f936 	bl	8009cc8 <_Bfree>
 800aa5c:	9805      	ldr	r0, [sp, #20]
 800aa5e:	4621      	mov	r1, r4
 800aa60:	f7ff f932 	bl	8009cc8 <_Bfree>
 800aa64:	e5f9      	b.n	800a65a <_strtod_l+0x72>
 800aa66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	dbbc      	blt.n	800a9ea <_strtod_l+0x402>
 800aa70:	4c41      	ldr	r4, [pc, #260]	@ (800ab78 <_strtod_l+0x590>)
 800aa72:	f1c5 050f 	rsb	r5, r5, #15
 800aa76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa82:	f7f5 fdc1 	bl	8000608 <__aeabi_dmul>
 800aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa88:	1b5d      	subs	r5, r3, r5
 800aa8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa92:	e78f      	b.n	800a9b4 <_strtod_l+0x3cc>
 800aa94:	3316      	adds	r3, #22
 800aa96:	dba8      	blt.n	800a9ea <_strtod_l+0x402>
 800aa98:	4b37      	ldr	r3, [pc, #220]	@ (800ab78 <_strtod_l+0x590>)
 800aa9a:	eba9 0808 	sub.w	r8, r9, r8
 800aa9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aaa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	f7f5 fed7 	bl	800085c <__aeabi_ddiv>
 800aaae:	e783      	b.n	800a9b8 <_strtod_l+0x3d0>
 800aab0:	4b32      	ldr	r3, [pc, #200]	@ (800ab7c <_strtod_l+0x594>)
 800aab2:	9308      	str	r3, [sp, #32]
 800aab4:	2300      	movs	r3, #0
 800aab6:	1124      	asrs	r4, r4, #4
 800aab8:	4650      	mov	r0, sl
 800aaba:	4659      	mov	r1, fp
 800aabc:	461e      	mov	r6, r3
 800aabe:	2c01      	cmp	r4, #1
 800aac0:	dc21      	bgt.n	800ab06 <_strtod_l+0x51e>
 800aac2:	b10b      	cbz	r3, 800aac8 <_strtod_l+0x4e0>
 800aac4:	4682      	mov	sl, r0
 800aac6:	468b      	mov	fp, r1
 800aac8:	492c      	ldr	r1, [pc, #176]	@ (800ab7c <_strtod_l+0x594>)
 800aaca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aace:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aad2:	4652      	mov	r2, sl
 800aad4:	465b      	mov	r3, fp
 800aad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aada:	f7f5 fd95 	bl	8000608 <__aeabi_dmul>
 800aade:	4b28      	ldr	r3, [pc, #160]	@ (800ab80 <_strtod_l+0x598>)
 800aae0:	460a      	mov	r2, r1
 800aae2:	400b      	ands	r3, r1
 800aae4:	4927      	ldr	r1, [pc, #156]	@ (800ab84 <_strtod_l+0x59c>)
 800aae6:	428b      	cmp	r3, r1
 800aae8:	4682      	mov	sl, r0
 800aaea:	d898      	bhi.n	800aa1e <_strtod_l+0x436>
 800aaec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	bf86      	itte	hi
 800aaf4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ab88 <_strtod_l+0x5a0>
 800aaf8:	f04f 3aff 	movhi.w	sl, #4294967295
 800aafc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab00:	2300      	movs	r3, #0
 800ab02:	9308      	str	r3, [sp, #32]
 800ab04:	e07a      	b.n	800abfc <_strtod_l+0x614>
 800ab06:	07e2      	lsls	r2, r4, #31
 800ab08:	d505      	bpl.n	800ab16 <_strtod_l+0x52e>
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	f7f5 fd7a 	bl	8000608 <__aeabi_dmul>
 800ab14:	2301      	movs	r3, #1
 800ab16:	9a08      	ldr	r2, [sp, #32]
 800ab18:	3208      	adds	r2, #8
 800ab1a:	3601      	adds	r6, #1
 800ab1c:	1064      	asrs	r4, r4, #1
 800ab1e:	9208      	str	r2, [sp, #32]
 800ab20:	e7cd      	b.n	800aabe <_strtod_l+0x4d6>
 800ab22:	d0ed      	beq.n	800ab00 <_strtod_l+0x518>
 800ab24:	4264      	negs	r4, r4
 800ab26:	f014 020f 	ands.w	r2, r4, #15
 800ab2a:	d00a      	beq.n	800ab42 <_strtod_l+0x55a>
 800ab2c:	4b12      	ldr	r3, [pc, #72]	@ (800ab78 <_strtod_l+0x590>)
 800ab2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab32:	4650      	mov	r0, sl
 800ab34:	4659      	mov	r1, fp
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fe8f 	bl	800085c <__aeabi_ddiv>
 800ab3e:	4682      	mov	sl, r0
 800ab40:	468b      	mov	fp, r1
 800ab42:	1124      	asrs	r4, r4, #4
 800ab44:	d0dc      	beq.n	800ab00 <_strtod_l+0x518>
 800ab46:	2c1f      	cmp	r4, #31
 800ab48:	dd20      	ble.n	800ab8c <_strtod_l+0x5a4>
 800ab4a:	2400      	movs	r4, #0
 800ab4c:	46a0      	mov	r8, r4
 800ab4e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab50:	46a1      	mov	r9, r4
 800ab52:	9a05      	ldr	r2, [sp, #20]
 800ab54:	2322      	movs	r3, #34	@ 0x22
 800ab56:	f04f 0a00 	mov.w	sl, #0
 800ab5a:	f04f 0b00 	mov.w	fp, #0
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	e768      	b.n	800aa34 <_strtod_l+0x44c>
 800ab62:	bf00      	nop
 800ab64:	0800c5a9 	.word	0x0800c5a9
 800ab68:	0800c7bc 	.word	0x0800c7bc
 800ab6c:	0800c5a1 	.word	0x0800c5a1
 800ab70:	0800c5d8 	.word	0x0800c5d8
 800ab74:	0800c965 	.word	0x0800c965
 800ab78:	0800c6f0 	.word	0x0800c6f0
 800ab7c:	0800c6c8 	.word	0x0800c6c8
 800ab80:	7ff00000 	.word	0x7ff00000
 800ab84:	7ca00000 	.word	0x7ca00000
 800ab88:	7fefffff 	.word	0x7fefffff
 800ab8c:	f014 0310 	ands.w	r3, r4, #16
 800ab90:	bf18      	it	ne
 800ab92:	236a      	movne	r3, #106	@ 0x6a
 800ab94:	4ea9      	ldr	r6, [pc, #676]	@ (800ae3c <_strtod_l+0x854>)
 800ab96:	9308      	str	r3, [sp, #32]
 800ab98:	4650      	mov	r0, sl
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	07e2      	lsls	r2, r4, #31
 800aba0:	d504      	bpl.n	800abac <_strtod_l+0x5c4>
 800aba2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aba6:	f7f5 fd2f 	bl	8000608 <__aeabi_dmul>
 800abaa:	2301      	movs	r3, #1
 800abac:	1064      	asrs	r4, r4, #1
 800abae:	f106 0608 	add.w	r6, r6, #8
 800abb2:	d1f4      	bne.n	800ab9e <_strtod_l+0x5b6>
 800abb4:	b10b      	cbz	r3, 800abba <_strtod_l+0x5d2>
 800abb6:	4682      	mov	sl, r0
 800abb8:	468b      	mov	fp, r1
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	b1b3      	cbz	r3, 800abec <_strtod_l+0x604>
 800abbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800abc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	4659      	mov	r1, fp
 800abca:	dd0f      	ble.n	800abec <_strtod_l+0x604>
 800abcc:	2b1f      	cmp	r3, #31
 800abce:	dd55      	ble.n	800ac7c <_strtod_l+0x694>
 800abd0:	2b34      	cmp	r3, #52	@ 0x34
 800abd2:	bfde      	ittt	le
 800abd4:	f04f 33ff 	movle.w	r3, #4294967295
 800abd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800abdc:	4093      	lslle	r3, r2
 800abde:	f04f 0a00 	mov.w	sl, #0
 800abe2:	bfcc      	ite	gt
 800abe4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800abe8:	ea03 0b01 	andle.w	fp, r3, r1
 800abec:	2200      	movs	r2, #0
 800abee:	2300      	movs	r3, #0
 800abf0:	4650      	mov	r0, sl
 800abf2:	4659      	mov	r1, fp
 800abf4:	f7f5 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d1a6      	bne.n	800ab4a <_strtod_l+0x562>
 800abfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac02:	9805      	ldr	r0, [sp, #20]
 800ac04:	462b      	mov	r3, r5
 800ac06:	463a      	mov	r2, r7
 800ac08:	f7ff f8c6 	bl	8009d98 <__s2b>
 800ac0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f43f af05 	beq.w	800aa1e <_strtod_l+0x436>
 800ac14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	eba9 0308 	sub.w	r3, r9, r8
 800ac1c:	bfa8      	it	ge
 800ac1e:	2300      	movge	r3, #0
 800ac20:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac22:	2400      	movs	r4, #0
 800ac24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac28:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac2a:	46a0      	mov	r8, r4
 800ac2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac2e:	9805      	ldr	r0, [sp, #20]
 800ac30:	6859      	ldr	r1, [r3, #4]
 800ac32:	f7ff f809 	bl	8009c48 <_Balloc>
 800ac36:	4681      	mov	r9, r0
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	f43f aef4 	beq.w	800aa26 <_strtod_l+0x43e>
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	3202      	adds	r2, #2
 800ac44:	f103 010c 	add.w	r1, r3, #12
 800ac48:	0092      	lsls	r2, r2, #2
 800ac4a:	300c      	adds	r0, #12
 800ac4c:	f000 fd60 	bl	800b710 <memcpy>
 800ac50:	ec4b ab10 	vmov	d0, sl, fp
 800ac54:	9805      	ldr	r0, [sp, #20]
 800ac56:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac58:	a91b      	add	r1, sp, #108	@ 0x6c
 800ac5a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ac5e:	f7ff fbd7 	bl	800a410 <__d2b>
 800ac62:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f43f aede 	beq.w	800aa26 <_strtod_l+0x43e>
 800ac6a:	9805      	ldr	r0, [sp, #20]
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	f7ff f929 	bl	8009ec4 <__i2b>
 800ac72:	4680      	mov	r8, r0
 800ac74:	b948      	cbnz	r0, 800ac8a <_strtod_l+0x6a2>
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	e6d4      	b.n	800aa26 <_strtod_l+0x43e>
 800ac7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac80:	fa02 f303 	lsl.w	r3, r2, r3
 800ac84:	ea03 0a0a 	and.w	sl, r3, sl
 800ac88:	e7b0      	b.n	800abec <_strtod_l+0x604>
 800ac8a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ac8c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	bfab      	itete	ge
 800ac92:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ac94:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ac96:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ac98:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ac9a:	bfac      	ite	ge
 800ac9c:	18ef      	addge	r7, r5, r3
 800ac9e:	1b5e      	sublt	r6, r3, r5
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	1aed      	subs	r5, r5, r3
 800aca4:	4415      	add	r5, r2
 800aca6:	4b66      	ldr	r3, [pc, #408]	@ (800ae40 <_strtod_l+0x858>)
 800aca8:	3d01      	subs	r5, #1
 800acaa:	429d      	cmp	r5, r3
 800acac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800acb0:	da50      	bge.n	800ad54 <_strtod_l+0x76c>
 800acb2:	1b5b      	subs	r3, r3, r5
 800acb4:	2b1f      	cmp	r3, #31
 800acb6:	eba2 0203 	sub.w	r2, r2, r3
 800acba:	f04f 0101 	mov.w	r1, #1
 800acbe:	dc3d      	bgt.n	800ad3c <_strtod_l+0x754>
 800acc0:	fa01 f303 	lsl.w	r3, r1, r3
 800acc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acc6:	2300      	movs	r3, #0
 800acc8:	9310      	str	r3, [sp, #64]	@ 0x40
 800acca:	18bd      	adds	r5, r7, r2
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	42af      	cmp	r7, r5
 800acd0:	4416      	add	r6, r2
 800acd2:	441e      	add	r6, r3
 800acd4:	463b      	mov	r3, r7
 800acd6:	bfa8      	it	ge
 800acd8:	462b      	movge	r3, r5
 800acda:	42b3      	cmp	r3, r6
 800acdc:	bfa8      	it	ge
 800acde:	4633      	movge	r3, r6
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfc2      	ittt	gt
 800ace4:	1aed      	subgt	r5, r5, r3
 800ace6:	1af6      	subgt	r6, r6, r3
 800ace8:	1aff      	subgt	r7, r7, r3
 800acea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acec:	2b00      	cmp	r3, #0
 800acee:	dd16      	ble.n	800ad1e <_strtod_l+0x736>
 800acf0:	4641      	mov	r1, r8
 800acf2:	9805      	ldr	r0, [sp, #20]
 800acf4:	461a      	mov	r2, r3
 800acf6:	f7ff f9a5 	bl	800a044 <__pow5mult>
 800acfa:	4680      	mov	r8, r0
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d0ba      	beq.n	800ac76 <_strtod_l+0x68e>
 800ad00:	4601      	mov	r1, r0
 800ad02:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad04:	9805      	ldr	r0, [sp, #20]
 800ad06:	f7ff f8f3 	bl	8009ef0 <__multiply>
 800ad0a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f43f ae8a 	beq.w	800aa26 <_strtod_l+0x43e>
 800ad12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad14:	9805      	ldr	r0, [sp, #20]
 800ad16:	f7fe ffd7 	bl	8009cc8 <_Bfree>
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad1e:	2d00      	cmp	r5, #0
 800ad20:	dc1d      	bgt.n	800ad5e <_strtod_l+0x776>
 800ad22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd23      	ble.n	800ad70 <_strtod_l+0x788>
 800ad28:	4649      	mov	r1, r9
 800ad2a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad2c:	9805      	ldr	r0, [sp, #20]
 800ad2e:	f7ff f989 	bl	800a044 <__pow5mult>
 800ad32:	4681      	mov	r9, r0
 800ad34:	b9e0      	cbnz	r0, 800ad70 <_strtod_l+0x788>
 800ad36:	f04f 0900 	mov.w	r9, #0
 800ad3a:	e674      	b.n	800aa26 <_strtod_l+0x43e>
 800ad3c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ad40:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ad44:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ad48:	35e2      	adds	r5, #226	@ 0xe2
 800ad4a:	fa01 f305 	lsl.w	r3, r1, r5
 800ad4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad50:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ad52:	e7ba      	b.n	800acca <_strtod_l+0x6e2>
 800ad54:	2300      	movs	r3, #0
 800ad56:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad58:	2301      	movs	r3, #1
 800ad5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad5c:	e7b5      	b.n	800acca <_strtod_l+0x6e2>
 800ad5e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad60:	9805      	ldr	r0, [sp, #20]
 800ad62:	462a      	mov	r2, r5
 800ad64:	f7ff f9c8 	bl	800a0f8 <__lshift>
 800ad68:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d1d9      	bne.n	800ad22 <_strtod_l+0x73a>
 800ad6e:	e65a      	b.n	800aa26 <_strtod_l+0x43e>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	dd07      	ble.n	800ad84 <_strtod_l+0x79c>
 800ad74:	4649      	mov	r1, r9
 800ad76:	9805      	ldr	r0, [sp, #20]
 800ad78:	4632      	mov	r2, r6
 800ad7a:	f7ff f9bd 	bl	800a0f8 <__lshift>
 800ad7e:	4681      	mov	r9, r0
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d0d8      	beq.n	800ad36 <_strtod_l+0x74e>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	dd08      	ble.n	800ad9a <_strtod_l+0x7b2>
 800ad88:	4641      	mov	r1, r8
 800ad8a:	9805      	ldr	r0, [sp, #20]
 800ad8c:	463a      	mov	r2, r7
 800ad8e:	f7ff f9b3 	bl	800a0f8 <__lshift>
 800ad92:	4680      	mov	r8, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	f43f ae46 	beq.w	800aa26 <_strtod_l+0x43e>
 800ad9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad9c:	9805      	ldr	r0, [sp, #20]
 800ad9e:	464a      	mov	r2, r9
 800ada0:	f7ff fa32 	bl	800a208 <__mdiff>
 800ada4:	4604      	mov	r4, r0
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f43f ae3d 	beq.w	800aa26 <_strtod_l+0x43e>
 800adac:	68c3      	ldr	r3, [r0, #12]
 800adae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adb0:	2300      	movs	r3, #0
 800adb2:	60c3      	str	r3, [r0, #12]
 800adb4:	4641      	mov	r1, r8
 800adb6:	f7ff fa0b 	bl	800a1d0 <__mcmp>
 800adba:	2800      	cmp	r0, #0
 800adbc:	da46      	bge.n	800ae4c <_strtod_l+0x864>
 800adbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adc0:	ea53 030a 	orrs.w	r3, r3, sl
 800adc4:	d16c      	bne.n	800aea0 <_strtod_l+0x8b8>
 800adc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d168      	bne.n	800aea0 <_strtod_l+0x8b8>
 800adce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800add2:	0d1b      	lsrs	r3, r3, #20
 800add4:	051b      	lsls	r3, r3, #20
 800add6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800adda:	d961      	bls.n	800aea0 <_strtod_l+0x8b8>
 800addc:	6963      	ldr	r3, [r4, #20]
 800adde:	b913      	cbnz	r3, 800ade6 <_strtod_l+0x7fe>
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	dd5c      	ble.n	800aea0 <_strtod_l+0x8b8>
 800ade6:	4621      	mov	r1, r4
 800ade8:	2201      	movs	r2, #1
 800adea:	9805      	ldr	r0, [sp, #20]
 800adec:	f7ff f984 	bl	800a0f8 <__lshift>
 800adf0:	4641      	mov	r1, r8
 800adf2:	4604      	mov	r4, r0
 800adf4:	f7ff f9ec 	bl	800a1d0 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dd51      	ble.n	800aea0 <_strtod_l+0x8b8>
 800adfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae00:	9a08      	ldr	r2, [sp, #32]
 800ae02:	0d1b      	lsrs	r3, r3, #20
 800ae04:	051b      	lsls	r3, r3, #20
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	d06b      	beq.n	800aee2 <_strtod_l+0x8fa>
 800ae0a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae0e:	d868      	bhi.n	800aee2 <_strtod_l+0x8fa>
 800ae10:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae14:	f67f ae9d 	bls.w	800ab52 <_strtod_l+0x56a>
 800ae18:	4b0a      	ldr	r3, [pc, #40]	@ (800ae44 <_strtod_l+0x85c>)
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f7f5 fbf2 	bl	8000608 <__aeabi_dmul>
 800ae24:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <_strtod_l+0x860>)
 800ae26:	400b      	ands	r3, r1
 800ae28:	4682      	mov	sl, r0
 800ae2a:	468b      	mov	fp, r1
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f47f ae05 	bne.w	800aa3c <_strtod_l+0x454>
 800ae32:	9a05      	ldr	r2, [sp, #20]
 800ae34:	2322      	movs	r3, #34	@ 0x22
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	e600      	b.n	800aa3c <_strtod_l+0x454>
 800ae3a:	bf00      	nop
 800ae3c:	0800c7e8 	.word	0x0800c7e8
 800ae40:	fffffc02 	.word	0xfffffc02
 800ae44:	39500000 	.word	0x39500000
 800ae48:	7ff00000 	.word	0x7ff00000
 800ae4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae50:	d165      	bne.n	800af1e <_strtod_l+0x936>
 800ae52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae58:	b35a      	cbz	r2, 800aeb2 <_strtod_l+0x8ca>
 800ae5a:	4a9f      	ldr	r2, [pc, #636]	@ (800b0d8 <_strtod_l+0xaf0>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d12b      	bne.n	800aeb8 <_strtod_l+0x8d0>
 800ae60:	9b08      	ldr	r3, [sp, #32]
 800ae62:	4651      	mov	r1, sl
 800ae64:	b303      	cbz	r3, 800aea8 <_strtod_l+0x8c0>
 800ae66:	4b9d      	ldr	r3, [pc, #628]	@ (800b0dc <_strtod_l+0xaf4>)
 800ae68:	465a      	mov	r2, fp
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	d81b      	bhi.n	800aeae <_strtod_l+0x8c6>
 800ae76:	0d1b      	lsrs	r3, r3, #20
 800ae78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	4299      	cmp	r1, r3
 800ae82:	d119      	bne.n	800aeb8 <_strtod_l+0x8d0>
 800ae84:	4b96      	ldr	r3, [pc, #600]	@ (800b0e0 <_strtod_l+0xaf8>)
 800ae86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d102      	bne.n	800ae92 <_strtod_l+0x8aa>
 800ae8c:	3101      	adds	r1, #1
 800ae8e:	f43f adca 	beq.w	800aa26 <_strtod_l+0x43e>
 800ae92:	4b92      	ldr	r3, [pc, #584]	@ (800b0dc <_strtod_l+0xaf4>)
 800ae94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae96:	401a      	ands	r2, r3
 800ae98:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ae9c:	f04f 0a00 	mov.w	sl, #0
 800aea0:	9b08      	ldr	r3, [sp, #32]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1b8      	bne.n	800ae18 <_strtod_l+0x830>
 800aea6:	e5c9      	b.n	800aa3c <_strtod_l+0x454>
 800aea8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeac:	e7e8      	b.n	800ae80 <_strtod_l+0x898>
 800aeae:	4613      	mov	r3, r2
 800aeb0:	e7e6      	b.n	800ae80 <_strtod_l+0x898>
 800aeb2:	ea53 030a 	orrs.w	r3, r3, sl
 800aeb6:	d0a1      	beq.n	800adfc <_strtod_l+0x814>
 800aeb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aeba:	b1db      	cbz	r3, 800aef4 <_strtod_l+0x90c>
 800aebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aebe:	4213      	tst	r3, r2
 800aec0:	d0ee      	beq.n	800aea0 <_strtod_l+0x8b8>
 800aec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec4:	9a08      	ldr	r2, [sp, #32]
 800aec6:	4650      	mov	r0, sl
 800aec8:	4659      	mov	r1, fp
 800aeca:	b1bb      	cbz	r3, 800aefc <_strtod_l+0x914>
 800aecc:	f7ff fb6e 	bl	800a5ac <sulp>
 800aed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aed4:	ec53 2b10 	vmov	r2, r3, d0
 800aed8:	f7f5 f9e0 	bl	800029c <__adddf3>
 800aedc:	4682      	mov	sl, r0
 800aede:	468b      	mov	fp, r1
 800aee0:	e7de      	b.n	800aea0 <_strtod_l+0x8b8>
 800aee2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aee6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aeea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aeee:	f04f 3aff 	mov.w	sl, #4294967295
 800aef2:	e7d5      	b.n	800aea0 <_strtod_l+0x8b8>
 800aef4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aef6:	ea13 0f0a 	tst.w	r3, sl
 800aefa:	e7e1      	b.n	800aec0 <_strtod_l+0x8d8>
 800aefc:	f7ff fb56 	bl	800a5ac <sulp>
 800af00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af04:	ec53 2b10 	vmov	r2, r3, d0
 800af08:	f7f5 f9c6 	bl	8000298 <__aeabi_dsub>
 800af0c:	2200      	movs	r2, #0
 800af0e:	2300      	movs	r3, #0
 800af10:	4682      	mov	sl, r0
 800af12:	468b      	mov	fp, r1
 800af14:	f7f5 fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d0c1      	beq.n	800aea0 <_strtod_l+0x8b8>
 800af1c:	e619      	b.n	800ab52 <_strtod_l+0x56a>
 800af1e:	4641      	mov	r1, r8
 800af20:	4620      	mov	r0, r4
 800af22:	f7ff facd 	bl	800a4c0 <__ratio>
 800af26:	ec57 6b10 	vmov	r6, r7, d0
 800af2a:	2200      	movs	r2, #0
 800af2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af30:	4630      	mov	r0, r6
 800af32:	4639      	mov	r1, r7
 800af34:	f7f5 fde4 	bl	8000b00 <__aeabi_dcmple>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d06f      	beq.n	800b01c <_strtod_l+0xa34>
 800af3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d17a      	bne.n	800b038 <_strtod_l+0xa50>
 800af42:	f1ba 0f00 	cmp.w	sl, #0
 800af46:	d158      	bne.n	800affa <_strtod_l+0xa12>
 800af48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d15a      	bne.n	800b008 <_strtod_l+0xa20>
 800af52:	4b64      	ldr	r3, [pc, #400]	@ (800b0e4 <_strtod_l+0xafc>)
 800af54:	2200      	movs	r2, #0
 800af56:	4630      	mov	r0, r6
 800af58:	4639      	mov	r1, r7
 800af5a:	f7f5 fdc7 	bl	8000aec <__aeabi_dcmplt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d159      	bne.n	800b016 <_strtod_l+0xa2e>
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	4b60      	ldr	r3, [pc, #384]	@ (800b0e8 <_strtod_l+0xb00>)
 800af68:	2200      	movs	r2, #0
 800af6a:	f7f5 fb4d 	bl	8000608 <__aeabi_dmul>
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800af76:	9606      	str	r6, [sp, #24]
 800af78:	9307      	str	r3, [sp, #28]
 800af7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af7e:	4d57      	ldr	r5, [pc, #348]	@ (800b0dc <_strtod_l+0xaf4>)
 800af80:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af86:	401d      	ands	r5, r3
 800af88:	4b58      	ldr	r3, [pc, #352]	@ (800b0ec <_strtod_l+0xb04>)
 800af8a:	429d      	cmp	r5, r3
 800af8c:	f040 80b2 	bne.w	800b0f4 <_strtod_l+0xb0c>
 800af90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af92:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800af96:	ec4b ab10 	vmov	d0, sl, fp
 800af9a:	f7ff f9c9 	bl	800a330 <__ulp>
 800af9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afa2:	ec51 0b10 	vmov	r0, r1, d0
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	4652      	mov	r2, sl
 800afac:	465b      	mov	r3, fp
 800afae:	f7f5 f975 	bl	800029c <__adddf3>
 800afb2:	460b      	mov	r3, r1
 800afb4:	4949      	ldr	r1, [pc, #292]	@ (800b0dc <_strtod_l+0xaf4>)
 800afb6:	4a4e      	ldr	r2, [pc, #312]	@ (800b0f0 <_strtod_l+0xb08>)
 800afb8:	4019      	ands	r1, r3
 800afba:	4291      	cmp	r1, r2
 800afbc:	4682      	mov	sl, r0
 800afbe:	d942      	bls.n	800b046 <_strtod_l+0xa5e>
 800afc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afc2:	4b47      	ldr	r3, [pc, #284]	@ (800b0e0 <_strtod_l+0xaf8>)
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d103      	bne.n	800afd0 <_strtod_l+0x9e8>
 800afc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afca:	3301      	adds	r3, #1
 800afcc:	f43f ad2b 	beq.w	800aa26 <_strtod_l+0x43e>
 800afd0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b0e0 <_strtod_l+0xaf8>
 800afd4:	f04f 3aff 	mov.w	sl, #4294967295
 800afd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afda:	9805      	ldr	r0, [sp, #20]
 800afdc:	f7fe fe74 	bl	8009cc8 <_Bfree>
 800afe0:	9805      	ldr	r0, [sp, #20]
 800afe2:	4649      	mov	r1, r9
 800afe4:	f7fe fe70 	bl	8009cc8 <_Bfree>
 800afe8:	9805      	ldr	r0, [sp, #20]
 800afea:	4641      	mov	r1, r8
 800afec:	f7fe fe6c 	bl	8009cc8 <_Bfree>
 800aff0:	9805      	ldr	r0, [sp, #20]
 800aff2:	4621      	mov	r1, r4
 800aff4:	f7fe fe68 	bl	8009cc8 <_Bfree>
 800aff8:	e618      	b.n	800ac2c <_strtod_l+0x644>
 800affa:	f1ba 0f01 	cmp.w	sl, #1
 800affe:	d103      	bne.n	800b008 <_strtod_l+0xa20>
 800b000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f ada5 	beq.w	800ab52 <_strtod_l+0x56a>
 800b008:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b0b8 <_strtod_l+0xad0>
 800b00c:	4f35      	ldr	r7, [pc, #212]	@ (800b0e4 <_strtod_l+0xafc>)
 800b00e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b012:	2600      	movs	r6, #0
 800b014:	e7b1      	b.n	800af7a <_strtod_l+0x992>
 800b016:	4f34      	ldr	r7, [pc, #208]	@ (800b0e8 <_strtod_l+0xb00>)
 800b018:	2600      	movs	r6, #0
 800b01a:	e7aa      	b.n	800af72 <_strtod_l+0x98a>
 800b01c:	4b32      	ldr	r3, [pc, #200]	@ (800b0e8 <_strtod_l+0xb00>)
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	2200      	movs	r2, #0
 800b024:	f7f5 faf0 	bl	8000608 <__aeabi_dmul>
 800b028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b02a:	4606      	mov	r6, r0
 800b02c:	460f      	mov	r7, r1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d09f      	beq.n	800af72 <_strtod_l+0x98a>
 800b032:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b036:	e7a0      	b.n	800af7a <_strtod_l+0x992>
 800b038:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b0c0 <_strtod_l+0xad8>
 800b03c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b040:	ec57 6b17 	vmov	r6, r7, d7
 800b044:	e799      	b.n	800af7a <_strtod_l+0x992>
 800b046:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1c1      	bne.n	800afd8 <_strtod_l+0x9f0>
 800b054:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b058:	0d1b      	lsrs	r3, r3, #20
 800b05a:	051b      	lsls	r3, r3, #20
 800b05c:	429d      	cmp	r5, r3
 800b05e:	d1bb      	bne.n	800afd8 <_strtod_l+0x9f0>
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 fe30 	bl	8000cc8 <__aeabi_d2lz>
 800b068:	f7f5 faa0 	bl	80005ac <__aeabi_l2d>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 f910 	bl	8000298 <__aeabi_dsub>
 800b078:	460b      	mov	r3, r1
 800b07a:	4602      	mov	r2, r0
 800b07c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b080:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b086:	ea46 060a 	orr.w	r6, r6, sl
 800b08a:	431e      	orrs	r6, r3
 800b08c:	d06f      	beq.n	800b16e <_strtod_l+0xb86>
 800b08e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0c8 <_strtod_l+0xae0>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f7f5 fd2a 	bl	8000aec <__aeabi_dcmplt>
 800b098:	2800      	cmp	r0, #0
 800b09a:	f47f accf 	bne.w	800aa3c <_strtod_l+0x454>
 800b09e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b0d0 <_strtod_l+0xae8>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0a8:	f7f5 fd3e 	bl	8000b28 <__aeabi_dcmpgt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d093      	beq.n	800afd8 <_strtod_l+0x9f0>
 800b0b0:	e4c4      	b.n	800aa3c <_strtod_l+0x454>
 800b0b2:	bf00      	nop
 800b0b4:	f3af 8000 	nop.w
 800b0b8:	00000000 	.word	0x00000000
 800b0bc:	bff00000 	.word	0xbff00000
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	3ff00000 	.word	0x3ff00000
 800b0c8:	94a03595 	.word	0x94a03595
 800b0cc:	3fdfffff 	.word	0x3fdfffff
 800b0d0:	35afe535 	.word	0x35afe535
 800b0d4:	3fe00000 	.word	0x3fe00000
 800b0d8:	000fffff 	.word	0x000fffff
 800b0dc:	7ff00000 	.word	0x7ff00000
 800b0e0:	7fefffff 	.word	0x7fefffff
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	3fe00000 	.word	0x3fe00000
 800b0ec:	7fe00000 	.word	0x7fe00000
 800b0f0:	7c9fffff 	.word	0x7c9fffff
 800b0f4:	9b08      	ldr	r3, [sp, #32]
 800b0f6:	b323      	cbz	r3, 800b142 <_strtod_l+0xb5a>
 800b0f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b0fc:	d821      	bhi.n	800b142 <_strtod_l+0xb5a>
 800b0fe:	a328      	add	r3, pc, #160	@ (adr r3, 800b1a0 <_strtod_l+0xbb8>)
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fcfa 	bl	8000b00 <__aeabi_dcmple>
 800b10c:	b1a0      	cbz	r0, 800b138 <_strtod_l+0xb50>
 800b10e:	4639      	mov	r1, r7
 800b110:	4630      	mov	r0, r6
 800b112:	f7f5 fd51 	bl	8000bb8 <__aeabi_d2uiz>
 800b116:	2801      	cmp	r0, #1
 800b118:	bf38      	it	cc
 800b11a:	2001      	movcc	r0, #1
 800b11c:	f7f5 f9fa 	bl	8000514 <__aeabi_ui2d>
 800b120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	b9fb      	cbnz	r3, 800b168 <_strtod_l+0xb80>
 800b128:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b12c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b12e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b130:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b134:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b138:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b13a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b13e:	1b5b      	subs	r3, r3, r5
 800b140:	9311      	str	r3, [sp, #68]	@ 0x44
 800b142:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b146:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b14a:	f7ff f8f1 	bl	800a330 <__ulp>
 800b14e:	4650      	mov	r0, sl
 800b150:	ec53 2b10 	vmov	r2, r3, d0
 800b154:	4659      	mov	r1, fp
 800b156:	f7f5 fa57 	bl	8000608 <__aeabi_dmul>
 800b15a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b15e:	f7f5 f89d 	bl	800029c <__adddf3>
 800b162:	4682      	mov	sl, r0
 800b164:	468b      	mov	fp, r1
 800b166:	e770      	b.n	800b04a <_strtod_l+0xa62>
 800b168:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b16c:	e7e0      	b.n	800b130 <_strtod_l+0xb48>
 800b16e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1a8 <_strtod_l+0xbc0>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 fcba 	bl	8000aec <__aeabi_dcmplt>
 800b178:	e798      	b.n	800b0ac <_strtod_l+0xac4>
 800b17a:	2300      	movs	r3, #0
 800b17c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b17e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b180:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	f7ff ba6d 	b.w	800a662 <_strtod_l+0x7a>
 800b188:	2a65      	cmp	r2, #101	@ 0x65
 800b18a:	f43f ab66 	beq.w	800a85a <_strtod_l+0x272>
 800b18e:	2a45      	cmp	r2, #69	@ 0x45
 800b190:	f43f ab63 	beq.w	800a85a <_strtod_l+0x272>
 800b194:	2301      	movs	r3, #1
 800b196:	f7ff bb9e 	b.w	800a8d6 <_strtod_l+0x2ee>
 800b19a:	bf00      	nop
 800b19c:	f3af 8000 	nop.w
 800b1a0:	ffc00000 	.word	0xffc00000
 800b1a4:	41dfffff 	.word	0x41dfffff
 800b1a8:	94a03595 	.word	0x94a03595
 800b1ac:	3fcfffff 	.word	0x3fcfffff

0800b1b0 <_strtod_r>:
 800b1b0:	4b01      	ldr	r3, [pc, #4]	@ (800b1b8 <_strtod_r+0x8>)
 800b1b2:	f7ff ba19 	b.w	800a5e8 <_strtod_l>
 800b1b6:	bf00      	nop
 800b1b8:	200000ac 	.word	0x200000ac

0800b1bc <_strtol_l.constprop.0>:
 800b1bc:	2b24      	cmp	r3, #36	@ 0x24
 800b1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c2:	4686      	mov	lr, r0
 800b1c4:	4690      	mov	r8, r2
 800b1c6:	d801      	bhi.n	800b1cc <_strtol_l.constprop.0+0x10>
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d106      	bne.n	800b1da <_strtol_l.constprop.0+0x1e>
 800b1cc:	f7fd fdba 	bl	8008d44 <__errno>
 800b1d0:	2316      	movs	r3, #22
 800b1d2:	6003      	str	r3, [r0, #0]
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1da:	4834      	ldr	r0, [pc, #208]	@ (800b2ac <_strtol_l.constprop.0+0xf0>)
 800b1dc:	460d      	mov	r5, r1
 800b1de:	462a      	mov	r2, r5
 800b1e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1e4:	5d06      	ldrb	r6, [r0, r4]
 800b1e6:	f016 0608 	ands.w	r6, r6, #8
 800b1ea:	d1f8      	bne.n	800b1de <_strtol_l.constprop.0+0x22>
 800b1ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800b1ee:	d12d      	bne.n	800b24c <_strtol_l.constprop.0+0x90>
 800b1f0:	782c      	ldrb	r4, [r5, #0]
 800b1f2:	2601      	movs	r6, #1
 800b1f4:	1c95      	adds	r5, r2, #2
 800b1f6:	f033 0210 	bics.w	r2, r3, #16
 800b1fa:	d109      	bne.n	800b210 <_strtol_l.constprop.0+0x54>
 800b1fc:	2c30      	cmp	r4, #48	@ 0x30
 800b1fe:	d12a      	bne.n	800b256 <_strtol_l.constprop.0+0x9a>
 800b200:	782a      	ldrb	r2, [r5, #0]
 800b202:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b206:	2a58      	cmp	r2, #88	@ 0x58
 800b208:	d125      	bne.n	800b256 <_strtol_l.constprop.0+0x9a>
 800b20a:	786c      	ldrb	r4, [r5, #1]
 800b20c:	2310      	movs	r3, #16
 800b20e:	3502      	adds	r5, #2
 800b210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b214:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b218:	2200      	movs	r2, #0
 800b21a:	fbbc f9f3 	udiv	r9, ip, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	fb03 ca19 	mls	sl, r3, r9, ip
 800b224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b228:	2f09      	cmp	r7, #9
 800b22a:	d81b      	bhi.n	800b264 <_strtol_l.constprop.0+0xa8>
 800b22c:	463c      	mov	r4, r7
 800b22e:	42a3      	cmp	r3, r4
 800b230:	dd27      	ble.n	800b282 <_strtol_l.constprop.0+0xc6>
 800b232:	1c57      	adds	r7, r2, #1
 800b234:	d007      	beq.n	800b246 <_strtol_l.constprop.0+0x8a>
 800b236:	4581      	cmp	r9, r0
 800b238:	d320      	bcc.n	800b27c <_strtol_l.constprop.0+0xc0>
 800b23a:	d101      	bne.n	800b240 <_strtol_l.constprop.0+0x84>
 800b23c:	45a2      	cmp	sl, r4
 800b23e:	db1d      	blt.n	800b27c <_strtol_l.constprop.0+0xc0>
 800b240:	fb00 4003 	mla	r0, r0, r3, r4
 800b244:	2201      	movs	r2, #1
 800b246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b24a:	e7eb      	b.n	800b224 <_strtol_l.constprop.0+0x68>
 800b24c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b24e:	bf04      	itt	eq
 800b250:	782c      	ldrbeq	r4, [r5, #0]
 800b252:	1c95      	addeq	r5, r2, #2
 800b254:	e7cf      	b.n	800b1f6 <_strtol_l.constprop.0+0x3a>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1da      	bne.n	800b210 <_strtol_l.constprop.0+0x54>
 800b25a:	2c30      	cmp	r4, #48	@ 0x30
 800b25c:	bf0c      	ite	eq
 800b25e:	2308      	moveq	r3, #8
 800b260:	230a      	movne	r3, #10
 800b262:	e7d5      	b.n	800b210 <_strtol_l.constprop.0+0x54>
 800b264:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b268:	2f19      	cmp	r7, #25
 800b26a:	d801      	bhi.n	800b270 <_strtol_l.constprop.0+0xb4>
 800b26c:	3c37      	subs	r4, #55	@ 0x37
 800b26e:	e7de      	b.n	800b22e <_strtol_l.constprop.0+0x72>
 800b270:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b274:	2f19      	cmp	r7, #25
 800b276:	d804      	bhi.n	800b282 <_strtol_l.constprop.0+0xc6>
 800b278:	3c57      	subs	r4, #87	@ 0x57
 800b27a:	e7d8      	b.n	800b22e <_strtol_l.constprop.0+0x72>
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	e7e1      	b.n	800b246 <_strtol_l.constprop.0+0x8a>
 800b282:	1c53      	adds	r3, r2, #1
 800b284:	d108      	bne.n	800b298 <_strtol_l.constprop.0+0xdc>
 800b286:	2322      	movs	r3, #34	@ 0x22
 800b288:	f8ce 3000 	str.w	r3, [lr]
 800b28c:	4660      	mov	r0, ip
 800b28e:	f1b8 0f00 	cmp.w	r8, #0
 800b292:	d0a0      	beq.n	800b1d6 <_strtol_l.constprop.0+0x1a>
 800b294:	1e69      	subs	r1, r5, #1
 800b296:	e006      	b.n	800b2a6 <_strtol_l.constprop.0+0xea>
 800b298:	b106      	cbz	r6, 800b29c <_strtol_l.constprop.0+0xe0>
 800b29a:	4240      	negs	r0, r0
 800b29c:	f1b8 0f00 	cmp.w	r8, #0
 800b2a0:	d099      	beq.n	800b1d6 <_strtol_l.constprop.0+0x1a>
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d1f6      	bne.n	800b294 <_strtol_l.constprop.0+0xd8>
 800b2a6:	f8c8 1000 	str.w	r1, [r8]
 800b2aa:	e794      	b.n	800b1d6 <_strtol_l.constprop.0+0x1a>
 800b2ac:	0800c811 	.word	0x0800c811

0800b2b0 <_strtol_r>:
 800b2b0:	f7ff bf84 	b.w	800b1bc <_strtol_l.constprop.0>

0800b2b4 <__ssputs_r>:
 800b2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b8:	688e      	ldr	r6, [r1, #8]
 800b2ba:	461f      	mov	r7, r3
 800b2bc:	42be      	cmp	r6, r7
 800b2be:	680b      	ldr	r3, [r1, #0]
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	4690      	mov	r8, r2
 800b2c6:	d82d      	bhi.n	800b324 <__ssputs_r+0x70>
 800b2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2d0:	d026      	beq.n	800b320 <__ssputs_r+0x6c>
 800b2d2:	6965      	ldr	r5, [r4, #20]
 800b2d4:	6909      	ldr	r1, [r1, #16]
 800b2d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2da:	eba3 0901 	sub.w	r9, r3, r1
 800b2de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2e2:	1c7b      	adds	r3, r7, #1
 800b2e4:	444b      	add	r3, r9
 800b2e6:	106d      	asrs	r5, r5, #1
 800b2e8:	429d      	cmp	r5, r3
 800b2ea:	bf38      	it	cc
 800b2ec:	461d      	movcc	r5, r3
 800b2ee:	0553      	lsls	r3, r2, #21
 800b2f0:	d527      	bpl.n	800b342 <__ssputs_r+0x8e>
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	f7fe fc1c 	bl	8009b30 <_malloc_r>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	b360      	cbz	r0, 800b356 <__ssputs_r+0xa2>
 800b2fc:	6921      	ldr	r1, [r4, #16]
 800b2fe:	464a      	mov	r2, r9
 800b300:	f000 fa06 	bl	800b710 <memcpy>
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	6126      	str	r6, [r4, #16]
 800b312:	6165      	str	r5, [r4, #20]
 800b314:	444e      	add	r6, r9
 800b316:	eba5 0509 	sub.w	r5, r5, r9
 800b31a:	6026      	str	r6, [r4, #0]
 800b31c:	60a5      	str	r5, [r4, #8]
 800b31e:	463e      	mov	r6, r7
 800b320:	42be      	cmp	r6, r7
 800b322:	d900      	bls.n	800b326 <__ssputs_r+0x72>
 800b324:	463e      	mov	r6, r7
 800b326:	6820      	ldr	r0, [r4, #0]
 800b328:	4632      	mov	r2, r6
 800b32a:	4641      	mov	r1, r8
 800b32c:	f000 f9c6 	bl	800b6bc <memmove>
 800b330:	68a3      	ldr	r3, [r4, #8]
 800b332:	1b9b      	subs	r3, r3, r6
 800b334:	60a3      	str	r3, [r4, #8]
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	4433      	add	r3, r6
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	2000      	movs	r0, #0
 800b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b342:	462a      	mov	r2, r5
 800b344:	f000 fd79 	bl	800be3a <_realloc_r>
 800b348:	4606      	mov	r6, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d1e0      	bne.n	800b310 <__ssputs_r+0x5c>
 800b34e:	6921      	ldr	r1, [r4, #16]
 800b350:	4650      	mov	r0, sl
 800b352:	f7fe fb79 	bl	8009a48 <_free_r>
 800b356:	230c      	movs	r3, #12
 800b358:	f8ca 3000 	str.w	r3, [sl]
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b362:	81a3      	strh	r3, [r4, #12]
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	e7e9      	b.n	800b33e <__ssputs_r+0x8a>
	...

0800b36c <_svfiprintf_r>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	4698      	mov	r8, r3
 800b372:	898b      	ldrh	r3, [r1, #12]
 800b374:	061b      	lsls	r3, r3, #24
 800b376:	b09d      	sub	sp, #116	@ 0x74
 800b378:	4607      	mov	r7, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	4614      	mov	r4, r2
 800b37e:	d510      	bpl.n	800b3a2 <_svfiprintf_r+0x36>
 800b380:	690b      	ldr	r3, [r1, #16]
 800b382:	b973      	cbnz	r3, 800b3a2 <_svfiprintf_r+0x36>
 800b384:	2140      	movs	r1, #64	@ 0x40
 800b386:	f7fe fbd3 	bl	8009b30 <_malloc_r>
 800b38a:	6028      	str	r0, [r5, #0]
 800b38c:	6128      	str	r0, [r5, #16]
 800b38e:	b930      	cbnz	r0, 800b39e <_svfiprintf_r+0x32>
 800b390:	230c      	movs	r3, #12
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	f04f 30ff 	mov.w	r0, #4294967295
 800b398:	b01d      	add	sp, #116	@ 0x74
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39e:	2340      	movs	r3, #64	@ 0x40
 800b3a0:	616b      	str	r3, [r5, #20]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3a6:	2320      	movs	r3, #32
 800b3a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b0:	2330      	movs	r3, #48	@ 0x30
 800b3b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b550 <_svfiprintf_r+0x1e4>
 800b3b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3ba:	f04f 0901 	mov.w	r9, #1
 800b3be:	4623      	mov	r3, r4
 800b3c0:	469a      	mov	sl, r3
 800b3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c6:	b10a      	cbz	r2, 800b3cc <_svfiprintf_r+0x60>
 800b3c8:	2a25      	cmp	r2, #37	@ 0x25
 800b3ca:	d1f9      	bne.n	800b3c0 <_svfiprintf_r+0x54>
 800b3cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b3d0:	d00b      	beq.n	800b3ea <_svfiprintf_r+0x7e>
 800b3d2:	465b      	mov	r3, fp
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff ff6b 	bl	800b2b4 <__ssputs_r>
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f000 80a7 	beq.w	800b532 <_svfiprintf_r+0x1c6>
 800b3e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e6:	445a      	add	r2, fp
 800b3e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 809f 	beq.w	800b532 <_svfiprintf_r+0x1c6>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3fe:	f10a 0a01 	add.w	sl, sl, #1
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	9307      	str	r3, [sp, #28]
 800b406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b40a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b40c:	4654      	mov	r4, sl
 800b40e:	2205      	movs	r2, #5
 800b410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b414:	484e      	ldr	r0, [pc, #312]	@ (800b550 <_svfiprintf_r+0x1e4>)
 800b416:	f7f4 fee3 	bl	80001e0 <memchr>
 800b41a:	9a04      	ldr	r2, [sp, #16]
 800b41c:	b9d8      	cbnz	r0, 800b456 <_svfiprintf_r+0xea>
 800b41e:	06d0      	lsls	r0, r2, #27
 800b420:	bf44      	itt	mi
 800b422:	2320      	movmi	r3, #32
 800b424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b428:	0711      	lsls	r1, r2, #28
 800b42a:	bf44      	itt	mi
 800b42c:	232b      	movmi	r3, #43	@ 0x2b
 800b42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b432:	f89a 3000 	ldrb.w	r3, [sl]
 800b436:	2b2a      	cmp	r3, #42	@ 0x2a
 800b438:	d015      	beq.n	800b466 <_svfiprintf_r+0xfa>
 800b43a:	9a07      	ldr	r2, [sp, #28]
 800b43c:	4654      	mov	r4, sl
 800b43e:	2000      	movs	r0, #0
 800b440:	f04f 0c0a 	mov.w	ip, #10
 800b444:	4621      	mov	r1, r4
 800b446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b44a:	3b30      	subs	r3, #48	@ 0x30
 800b44c:	2b09      	cmp	r3, #9
 800b44e:	d94b      	bls.n	800b4e8 <_svfiprintf_r+0x17c>
 800b450:	b1b0      	cbz	r0, 800b480 <_svfiprintf_r+0x114>
 800b452:	9207      	str	r2, [sp, #28]
 800b454:	e014      	b.n	800b480 <_svfiprintf_r+0x114>
 800b456:	eba0 0308 	sub.w	r3, r0, r8
 800b45a:	fa09 f303 	lsl.w	r3, r9, r3
 800b45e:	4313      	orrs	r3, r2
 800b460:	9304      	str	r3, [sp, #16]
 800b462:	46a2      	mov	sl, r4
 800b464:	e7d2      	b.n	800b40c <_svfiprintf_r+0xa0>
 800b466:	9b03      	ldr	r3, [sp, #12]
 800b468:	1d19      	adds	r1, r3, #4
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	9103      	str	r1, [sp, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	bfbb      	ittet	lt
 800b472:	425b      	neglt	r3, r3
 800b474:	f042 0202 	orrlt.w	r2, r2, #2
 800b478:	9307      	strge	r3, [sp, #28]
 800b47a:	9307      	strlt	r3, [sp, #28]
 800b47c:	bfb8      	it	lt
 800b47e:	9204      	strlt	r2, [sp, #16]
 800b480:	7823      	ldrb	r3, [r4, #0]
 800b482:	2b2e      	cmp	r3, #46	@ 0x2e
 800b484:	d10a      	bne.n	800b49c <_svfiprintf_r+0x130>
 800b486:	7863      	ldrb	r3, [r4, #1]
 800b488:	2b2a      	cmp	r3, #42	@ 0x2a
 800b48a:	d132      	bne.n	800b4f2 <_svfiprintf_r+0x186>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	9203      	str	r2, [sp, #12]
 800b494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b498:	3402      	adds	r4, #2
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b560 <_svfiprintf_r+0x1f4>
 800b4a0:	7821      	ldrb	r1, [r4, #0]
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	f7f4 fe9b 	bl	80001e0 <memchr>
 800b4aa:	b138      	cbz	r0, 800b4bc <_svfiprintf_r+0x150>
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	eba0 000a 	sub.w	r0, r0, sl
 800b4b2:	2240      	movs	r2, #64	@ 0x40
 800b4b4:	4082      	lsls	r2, r0
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	3401      	adds	r4, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c0:	4824      	ldr	r0, [pc, #144]	@ (800b554 <_svfiprintf_r+0x1e8>)
 800b4c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4c6:	2206      	movs	r2, #6
 800b4c8:	f7f4 fe8a 	bl	80001e0 <memchr>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d036      	beq.n	800b53e <_svfiprintf_r+0x1d2>
 800b4d0:	4b21      	ldr	r3, [pc, #132]	@ (800b558 <_svfiprintf_r+0x1ec>)
 800b4d2:	bb1b      	cbnz	r3, 800b51c <_svfiprintf_r+0x1b0>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	f023 0307 	bic.w	r3, r3, #7
 800b4dc:	3308      	adds	r3, #8
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	4433      	add	r3, r6
 800b4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e6:	e76a      	b.n	800b3be <_svfiprintf_r+0x52>
 800b4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	e7a8      	b.n	800b444 <_svfiprintf_r+0xd8>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	3401      	adds	r4, #1
 800b4f6:	9305      	str	r3, [sp, #20]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	f04f 0c0a 	mov.w	ip, #10
 800b4fe:	4620      	mov	r0, r4
 800b500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b504:	3a30      	subs	r2, #48	@ 0x30
 800b506:	2a09      	cmp	r2, #9
 800b508:	d903      	bls.n	800b512 <_svfiprintf_r+0x1a6>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0c6      	beq.n	800b49c <_svfiprintf_r+0x130>
 800b50e:	9105      	str	r1, [sp, #20]
 800b510:	e7c4      	b.n	800b49c <_svfiprintf_r+0x130>
 800b512:	fb0c 2101 	mla	r1, ip, r1, r2
 800b516:	4604      	mov	r4, r0
 800b518:	2301      	movs	r3, #1
 800b51a:	e7f0      	b.n	800b4fe <_svfiprintf_r+0x192>
 800b51c:	ab03      	add	r3, sp, #12
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	462a      	mov	r2, r5
 800b522:	4b0e      	ldr	r3, [pc, #56]	@ (800b55c <_svfiprintf_r+0x1f0>)
 800b524:	a904      	add	r1, sp, #16
 800b526:	4638      	mov	r0, r7
 800b528:	f7fc fcb6 	bl	8007e98 <_printf_float>
 800b52c:	1c42      	adds	r2, r0, #1
 800b52e:	4606      	mov	r6, r0
 800b530:	d1d6      	bne.n	800b4e0 <_svfiprintf_r+0x174>
 800b532:	89ab      	ldrh	r3, [r5, #12]
 800b534:	065b      	lsls	r3, r3, #25
 800b536:	f53f af2d 	bmi.w	800b394 <_svfiprintf_r+0x28>
 800b53a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b53c:	e72c      	b.n	800b398 <_svfiprintf_r+0x2c>
 800b53e:	ab03      	add	r3, sp, #12
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	462a      	mov	r2, r5
 800b544:	4b05      	ldr	r3, [pc, #20]	@ (800b55c <_svfiprintf_r+0x1f0>)
 800b546:	a904      	add	r1, sp, #16
 800b548:	4638      	mov	r0, r7
 800b54a:	f7fc ff3d 	bl	80083c8 <_printf_i>
 800b54e:	e7ed      	b.n	800b52c <_svfiprintf_r+0x1c0>
 800b550:	0800c911 	.word	0x0800c911
 800b554:	0800c91b 	.word	0x0800c91b
 800b558:	08007e99 	.word	0x08007e99
 800b55c:	0800b2b5 	.word	0x0800b2b5
 800b560:	0800c917 	.word	0x0800c917

0800b564 <__sflush_r>:
 800b564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56c:	0716      	lsls	r6, r2, #28
 800b56e:	4605      	mov	r5, r0
 800b570:	460c      	mov	r4, r1
 800b572:	d454      	bmi.n	800b61e <__sflush_r+0xba>
 800b574:	684b      	ldr	r3, [r1, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	dc02      	bgt.n	800b580 <__sflush_r+0x1c>
 800b57a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dd48      	ble.n	800b612 <__sflush_r+0xae>
 800b580:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b582:	2e00      	cmp	r6, #0
 800b584:	d045      	beq.n	800b612 <__sflush_r+0xae>
 800b586:	2300      	movs	r3, #0
 800b588:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b58c:	682f      	ldr	r7, [r5, #0]
 800b58e:	6a21      	ldr	r1, [r4, #32]
 800b590:	602b      	str	r3, [r5, #0]
 800b592:	d030      	beq.n	800b5f6 <__sflush_r+0x92>
 800b594:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	0759      	lsls	r1, r3, #29
 800b59a:	d505      	bpl.n	800b5a8 <__sflush_r+0x44>
 800b59c:	6863      	ldr	r3, [r4, #4]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5a2:	b10b      	cbz	r3, 800b5a8 <__sflush_r+0x44>
 800b5a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5a6:	1ad2      	subs	r2, r2, r3
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5ac:	6a21      	ldr	r1, [r4, #32]
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b0      	blx	r6
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	d106      	bne.n	800b5c6 <__sflush_r+0x62>
 800b5b8:	6829      	ldr	r1, [r5, #0]
 800b5ba:	291d      	cmp	r1, #29
 800b5bc:	d82b      	bhi.n	800b616 <__sflush_r+0xb2>
 800b5be:	4a2a      	ldr	r2, [pc, #168]	@ (800b668 <__sflush_r+0x104>)
 800b5c0:	410a      	asrs	r2, r1
 800b5c2:	07d6      	lsls	r6, r2, #31
 800b5c4:	d427      	bmi.n	800b616 <__sflush_r+0xb2>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	6062      	str	r2, [r4, #4]
 800b5ca:	04d9      	lsls	r1, r3, #19
 800b5cc:	6922      	ldr	r2, [r4, #16]
 800b5ce:	6022      	str	r2, [r4, #0]
 800b5d0:	d504      	bpl.n	800b5dc <__sflush_r+0x78>
 800b5d2:	1c42      	adds	r2, r0, #1
 800b5d4:	d101      	bne.n	800b5da <__sflush_r+0x76>
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	b903      	cbnz	r3, 800b5dc <__sflush_r+0x78>
 800b5da:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5de:	602f      	str	r7, [r5, #0]
 800b5e0:	b1b9      	cbz	r1, 800b612 <__sflush_r+0xae>
 800b5e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	d002      	beq.n	800b5f0 <__sflush_r+0x8c>
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7fe fa2c 	bl	8009a48 <_free_r>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5f4:	e00d      	b.n	800b612 <__sflush_r+0xae>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	47b0      	blx	r6
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	1c50      	adds	r0, r2, #1
 800b600:	d1c9      	bne.n	800b596 <__sflush_r+0x32>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0c6      	beq.n	800b596 <__sflush_r+0x32>
 800b608:	2b1d      	cmp	r3, #29
 800b60a:	d001      	beq.n	800b610 <__sflush_r+0xac>
 800b60c:	2b16      	cmp	r3, #22
 800b60e:	d11e      	bne.n	800b64e <__sflush_r+0xea>
 800b610:	602f      	str	r7, [r5, #0]
 800b612:	2000      	movs	r0, #0
 800b614:	e022      	b.n	800b65c <__sflush_r+0xf8>
 800b616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	e01b      	b.n	800b656 <__sflush_r+0xf2>
 800b61e:	690f      	ldr	r7, [r1, #16]
 800b620:	2f00      	cmp	r7, #0
 800b622:	d0f6      	beq.n	800b612 <__sflush_r+0xae>
 800b624:	0793      	lsls	r3, r2, #30
 800b626:	680e      	ldr	r6, [r1, #0]
 800b628:	bf08      	it	eq
 800b62a:	694b      	ldreq	r3, [r1, #20]
 800b62c:	600f      	str	r7, [r1, #0]
 800b62e:	bf18      	it	ne
 800b630:	2300      	movne	r3, #0
 800b632:	eba6 0807 	sub.w	r8, r6, r7
 800b636:	608b      	str	r3, [r1, #8]
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	dde9      	ble.n	800b612 <__sflush_r+0xae>
 800b63e:	6a21      	ldr	r1, [r4, #32]
 800b640:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b642:	4643      	mov	r3, r8
 800b644:	463a      	mov	r2, r7
 800b646:	4628      	mov	r0, r5
 800b648:	47b0      	blx	r6
 800b64a:	2800      	cmp	r0, #0
 800b64c:	dc08      	bgt.n	800b660 <__sflush_r+0xfc>
 800b64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	f04f 30ff 	mov.w	r0, #4294967295
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	4407      	add	r7, r0
 800b662:	eba8 0800 	sub.w	r8, r8, r0
 800b666:	e7e7      	b.n	800b638 <__sflush_r+0xd4>
 800b668:	dfbffffe 	.word	0xdfbffffe

0800b66c <_fflush_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	690b      	ldr	r3, [r1, #16]
 800b670:	4605      	mov	r5, r0
 800b672:	460c      	mov	r4, r1
 800b674:	b913      	cbnz	r3, 800b67c <_fflush_r+0x10>
 800b676:	2500      	movs	r5, #0
 800b678:	4628      	mov	r0, r5
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	b118      	cbz	r0, 800b686 <_fflush_r+0x1a>
 800b67e:	6a03      	ldr	r3, [r0, #32]
 800b680:	b90b      	cbnz	r3, 800b686 <_fflush_r+0x1a>
 800b682:	f7fd fa61 	bl	8008b48 <__sinit>
 800b686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0f3      	beq.n	800b676 <_fflush_r+0xa>
 800b68e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b690:	07d0      	lsls	r0, r2, #31
 800b692:	d404      	bmi.n	800b69e <_fflush_r+0x32>
 800b694:	0599      	lsls	r1, r3, #22
 800b696:	d402      	bmi.n	800b69e <_fflush_r+0x32>
 800b698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b69a:	f7fd fb7e 	bl	8008d9a <__retarget_lock_acquire_recursive>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	f7ff ff5f 	bl	800b564 <__sflush_r>
 800b6a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6a8:	07da      	lsls	r2, r3, #31
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	d4e4      	bmi.n	800b678 <_fflush_r+0xc>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	059b      	lsls	r3, r3, #22
 800b6b2:	d4e1      	bmi.n	800b678 <_fflush_r+0xc>
 800b6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b6:	f7fd fb71 	bl	8008d9c <__retarget_lock_release_recursive>
 800b6ba:	e7dd      	b.n	800b678 <_fflush_r+0xc>

0800b6bc <memmove>:
 800b6bc:	4288      	cmp	r0, r1
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	eb01 0402 	add.w	r4, r1, r2
 800b6c4:	d902      	bls.n	800b6cc <memmove+0x10>
 800b6c6:	4284      	cmp	r4, r0
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	d807      	bhi.n	800b6dc <memmove+0x20>
 800b6cc:	1e43      	subs	r3, r0, #1
 800b6ce:	42a1      	cmp	r1, r4
 800b6d0:	d008      	beq.n	800b6e4 <memmove+0x28>
 800b6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6da:	e7f8      	b.n	800b6ce <memmove+0x12>
 800b6dc:	4402      	add	r2, r0
 800b6de:	4601      	mov	r1, r0
 800b6e0:	428a      	cmp	r2, r1
 800b6e2:	d100      	bne.n	800b6e6 <memmove+0x2a>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ee:	e7f7      	b.n	800b6e0 <memmove+0x24>

0800b6f0 <_sbrk_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d06      	ldr	r5, [pc, #24]	@ (800b70c <_sbrk_r+0x1c>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f6 fcb8 	bl	8002070 <_sbrk>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_sbrk_r+0x1a>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_sbrk_r+0x1a>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	20000834 	.word	0x20000834

0800b710 <memcpy>:
 800b710:	440a      	add	r2, r1
 800b712:	4291      	cmp	r1, r2
 800b714:	f100 33ff 	add.w	r3, r0, #4294967295
 800b718:	d100      	bne.n	800b71c <memcpy+0xc>
 800b71a:	4770      	bx	lr
 800b71c:	b510      	push	{r4, lr}
 800b71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b722:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b726:	4291      	cmp	r1, r2
 800b728:	d1f9      	bne.n	800b71e <memcpy+0xe>
 800b72a:	bd10      	pop	{r4, pc}
 800b72c:	0000      	movs	r0, r0
	...

0800b730 <nan>:
 800b730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b738 <nan+0x8>
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	00000000 	.word	0x00000000
 800b73c:	7ff80000 	.word	0x7ff80000

0800b740 <__assert_func>:
 800b740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b742:	4614      	mov	r4, r2
 800b744:	461a      	mov	r2, r3
 800b746:	4b09      	ldr	r3, [pc, #36]	@ (800b76c <__assert_func+0x2c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4605      	mov	r5, r0
 800b74c:	68d8      	ldr	r0, [r3, #12]
 800b74e:	b954      	cbnz	r4, 800b766 <__assert_func+0x26>
 800b750:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <__assert_func+0x30>)
 800b752:	461c      	mov	r4, r3
 800b754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b758:	9100      	str	r1, [sp, #0]
 800b75a:	462b      	mov	r3, r5
 800b75c:	4905      	ldr	r1, [pc, #20]	@ (800b774 <__assert_func+0x34>)
 800b75e:	f000 fba7 	bl	800beb0 <fiprintf>
 800b762:	f000 fbb7 	bl	800bed4 <abort>
 800b766:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <__assert_func+0x38>)
 800b768:	e7f4      	b.n	800b754 <__assert_func+0x14>
 800b76a:	bf00      	nop
 800b76c:	2000005c 	.word	0x2000005c
 800b770:	0800c965 	.word	0x0800c965
 800b774:	0800c937 	.word	0x0800c937
 800b778:	0800c92a 	.word	0x0800c92a

0800b77c <_calloc_r>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	fba1 5402 	umull	r5, r4, r1, r2
 800b782:	b93c      	cbnz	r4, 800b794 <_calloc_r+0x18>
 800b784:	4629      	mov	r1, r5
 800b786:	f7fe f9d3 	bl	8009b30 <_malloc_r>
 800b78a:	4606      	mov	r6, r0
 800b78c:	b928      	cbnz	r0, 800b79a <_calloc_r+0x1e>
 800b78e:	2600      	movs	r6, #0
 800b790:	4630      	mov	r0, r6
 800b792:	bd70      	pop	{r4, r5, r6, pc}
 800b794:	220c      	movs	r2, #12
 800b796:	6002      	str	r2, [r0, #0]
 800b798:	e7f9      	b.n	800b78e <_calloc_r+0x12>
 800b79a:	462a      	mov	r2, r5
 800b79c:	4621      	mov	r1, r4
 800b79e:	f7fd fa6c 	bl	8008c7a <memset>
 800b7a2:	e7f5      	b.n	800b790 <_calloc_r+0x14>

0800b7a4 <rshift>:
 800b7a4:	6903      	ldr	r3, [r0, #16]
 800b7a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7b2:	f100 0414 	add.w	r4, r0, #20
 800b7b6:	dd45      	ble.n	800b844 <rshift+0xa0>
 800b7b8:	f011 011f 	ands.w	r1, r1, #31
 800b7bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7c4:	d10c      	bne.n	800b7e0 <rshift+0x3c>
 800b7c6:	f100 0710 	add.w	r7, r0, #16
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	42b1      	cmp	r1, r6
 800b7ce:	d334      	bcc.n	800b83a <rshift+0x96>
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	1eea      	subs	r2, r5, #3
 800b7d6:	4296      	cmp	r6, r2
 800b7d8:	bf38      	it	cc
 800b7da:	2300      	movcc	r3, #0
 800b7dc:	4423      	add	r3, r4
 800b7de:	e015      	b.n	800b80c <rshift+0x68>
 800b7e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7e4:	f1c1 0820 	rsb	r8, r1, #32
 800b7e8:	40cf      	lsrs	r7, r1
 800b7ea:	f105 0e04 	add.w	lr, r5, #4
 800b7ee:	46a1      	mov	r9, r4
 800b7f0:	4576      	cmp	r6, lr
 800b7f2:	46f4      	mov	ip, lr
 800b7f4:	d815      	bhi.n	800b822 <rshift+0x7e>
 800b7f6:	1a9a      	subs	r2, r3, r2
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	3a04      	subs	r2, #4
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	42ae      	cmp	r6, r5
 800b800:	bf38      	it	cc
 800b802:	2200      	movcc	r2, #0
 800b804:	18a3      	adds	r3, r4, r2
 800b806:	50a7      	str	r7, [r4, r2]
 800b808:	b107      	cbz	r7, 800b80c <rshift+0x68>
 800b80a:	3304      	adds	r3, #4
 800b80c:	1b1a      	subs	r2, r3, r4
 800b80e:	42a3      	cmp	r3, r4
 800b810:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b814:	bf08      	it	eq
 800b816:	2300      	moveq	r3, #0
 800b818:	6102      	str	r2, [r0, #16]
 800b81a:	bf08      	it	eq
 800b81c:	6143      	streq	r3, [r0, #20]
 800b81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b822:	f8dc c000 	ldr.w	ip, [ip]
 800b826:	fa0c fc08 	lsl.w	ip, ip, r8
 800b82a:	ea4c 0707 	orr.w	r7, ip, r7
 800b82e:	f849 7b04 	str.w	r7, [r9], #4
 800b832:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b836:	40cf      	lsrs	r7, r1
 800b838:	e7da      	b.n	800b7f0 <rshift+0x4c>
 800b83a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b83e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b842:	e7c3      	b.n	800b7cc <rshift+0x28>
 800b844:	4623      	mov	r3, r4
 800b846:	e7e1      	b.n	800b80c <rshift+0x68>

0800b848 <__hexdig_fun>:
 800b848:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d802      	bhi.n	800b856 <__hexdig_fun+0xe>
 800b850:	3820      	subs	r0, #32
 800b852:	b2c0      	uxtb	r0, r0
 800b854:	4770      	bx	lr
 800b856:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b85a:	2b05      	cmp	r3, #5
 800b85c:	d801      	bhi.n	800b862 <__hexdig_fun+0x1a>
 800b85e:	3847      	subs	r0, #71	@ 0x47
 800b860:	e7f7      	b.n	800b852 <__hexdig_fun+0xa>
 800b862:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b866:	2b05      	cmp	r3, #5
 800b868:	d801      	bhi.n	800b86e <__hexdig_fun+0x26>
 800b86a:	3827      	subs	r0, #39	@ 0x27
 800b86c:	e7f1      	b.n	800b852 <__hexdig_fun+0xa>
 800b86e:	2000      	movs	r0, #0
 800b870:	4770      	bx	lr
	...

0800b874 <__gethex>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	b085      	sub	sp, #20
 800b87a:	468a      	mov	sl, r1
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	680b      	ldr	r3, [r1, #0]
 800b880:	9001      	str	r0, [sp, #4]
 800b882:	4690      	mov	r8, r2
 800b884:	1c9c      	adds	r4, r3, #2
 800b886:	46a1      	mov	r9, r4
 800b888:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b88c:	2830      	cmp	r0, #48	@ 0x30
 800b88e:	d0fa      	beq.n	800b886 <__gethex+0x12>
 800b890:	eba9 0303 	sub.w	r3, r9, r3
 800b894:	f1a3 0b02 	sub.w	fp, r3, #2
 800b898:	f7ff ffd6 	bl	800b848 <__hexdig_fun>
 800b89c:	4605      	mov	r5, r0
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d168      	bne.n	800b974 <__gethex+0x100>
 800b8a2:	49a0      	ldr	r1, [pc, #640]	@ (800bb24 <__gethex+0x2b0>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	4648      	mov	r0, r9
 800b8a8:	f7fd f9ef 	bl	8008c8a <strncmp>
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d167      	bne.n	800b982 <__gethex+0x10e>
 800b8b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b8b6:	4626      	mov	r6, r4
 800b8b8:	f7ff ffc6 	bl	800b848 <__hexdig_fun>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d062      	beq.n	800b986 <__gethex+0x112>
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	7818      	ldrb	r0, [r3, #0]
 800b8c4:	2830      	cmp	r0, #48	@ 0x30
 800b8c6:	4699      	mov	r9, r3
 800b8c8:	f103 0301 	add.w	r3, r3, #1
 800b8cc:	d0f9      	beq.n	800b8c2 <__gethex+0x4e>
 800b8ce:	f7ff ffbb 	bl	800b848 <__hexdig_fun>
 800b8d2:	fab0 f580 	clz	r5, r0
 800b8d6:	096d      	lsrs	r5, r5, #5
 800b8d8:	f04f 0b01 	mov.w	fp, #1
 800b8dc:	464a      	mov	r2, r9
 800b8de:	4616      	mov	r6, r2
 800b8e0:	3201      	adds	r2, #1
 800b8e2:	7830      	ldrb	r0, [r6, #0]
 800b8e4:	f7ff ffb0 	bl	800b848 <__hexdig_fun>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d1f8      	bne.n	800b8de <__gethex+0x6a>
 800b8ec:	498d      	ldr	r1, [pc, #564]	@ (800bb24 <__gethex+0x2b0>)
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f7fd f9ca 	bl	8008c8a <strncmp>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d13f      	bne.n	800b97a <__gethex+0x106>
 800b8fa:	b944      	cbnz	r4, 800b90e <__gethex+0x9a>
 800b8fc:	1c74      	adds	r4, r6, #1
 800b8fe:	4622      	mov	r2, r4
 800b900:	4616      	mov	r6, r2
 800b902:	3201      	adds	r2, #1
 800b904:	7830      	ldrb	r0, [r6, #0]
 800b906:	f7ff ff9f 	bl	800b848 <__hexdig_fun>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d1f8      	bne.n	800b900 <__gethex+0x8c>
 800b90e:	1ba4      	subs	r4, r4, r6
 800b910:	00a7      	lsls	r7, r4, #2
 800b912:	7833      	ldrb	r3, [r6, #0]
 800b914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b918:	2b50      	cmp	r3, #80	@ 0x50
 800b91a:	d13e      	bne.n	800b99a <__gethex+0x126>
 800b91c:	7873      	ldrb	r3, [r6, #1]
 800b91e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b920:	d033      	beq.n	800b98a <__gethex+0x116>
 800b922:	2b2d      	cmp	r3, #45	@ 0x2d
 800b924:	d034      	beq.n	800b990 <__gethex+0x11c>
 800b926:	1c71      	adds	r1, r6, #1
 800b928:	2400      	movs	r4, #0
 800b92a:	7808      	ldrb	r0, [r1, #0]
 800b92c:	f7ff ff8c 	bl	800b848 <__hexdig_fun>
 800b930:	1e43      	subs	r3, r0, #1
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b18      	cmp	r3, #24
 800b936:	d830      	bhi.n	800b99a <__gethex+0x126>
 800b938:	f1a0 0210 	sub.w	r2, r0, #16
 800b93c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b940:	f7ff ff82 	bl	800b848 <__hexdig_fun>
 800b944:	f100 3cff 	add.w	ip, r0, #4294967295
 800b948:	fa5f fc8c 	uxtb.w	ip, ip
 800b94c:	f1bc 0f18 	cmp.w	ip, #24
 800b950:	f04f 030a 	mov.w	r3, #10
 800b954:	d91e      	bls.n	800b994 <__gethex+0x120>
 800b956:	b104      	cbz	r4, 800b95a <__gethex+0xe6>
 800b958:	4252      	negs	r2, r2
 800b95a:	4417      	add	r7, r2
 800b95c:	f8ca 1000 	str.w	r1, [sl]
 800b960:	b1ed      	cbz	r5, 800b99e <__gethex+0x12a>
 800b962:	f1bb 0f00 	cmp.w	fp, #0
 800b966:	bf0c      	ite	eq
 800b968:	2506      	moveq	r5, #6
 800b96a:	2500      	movne	r5, #0
 800b96c:	4628      	mov	r0, r5
 800b96e:	b005      	add	sp, #20
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	2500      	movs	r5, #0
 800b976:	462c      	mov	r4, r5
 800b978:	e7b0      	b.n	800b8dc <__gethex+0x68>
 800b97a:	2c00      	cmp	r4, #0
 800b97c:	d1c7      	bne.n	800b90e <__gethex+0x9a>
 800b97e:	4627      	mov	r7, r4
 800b980:	e7c7      	b.n	800b912 <__gethex+0x9e>
 800b982:	464e      	mov	r6, r9
 800b984:	462f      	mov	r7, r5
 800b986:	2501      	movs	r5, #1
 800b988:	e7c3      	b.n	800b912 <__gethex+0x9e>
 800b98a:	2400      	movs	r4, #0
 800b98c:	1cb1      	adds	r1, r6, #2
 800b98e:	e7cc      	b.n	800b92a <__gethex+0xb6>
 800b990:	2401      	movs	r4, #1
 800b992:	e7fb      	b.n	800b98c <__gethex+0x118>
 800b994:	fb03 0002 	mla	r0, r3, r2, r0
 800b998:	e7ce      	b.n	800b938 <__gethex+0xc4>
 800b99a:	4631      	mov	r1, r6
 800b99c:	e7de      	b.n	800b95c <__gethex+0xe8>
 800b99e:	eba6 0309 	sub.w	r3, r6, r9
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	2b07      	cmp	r3, #7
 800b9a8:	dc0a      	bgt.n	800b9c0 <__gethex+0x14c>
 800b9aa:	9801      	ldr	r0, [sp, #4]
 800b9ac:	f7fe f94c 	bl	8009c48 <_Balloc>
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	b940      	cbnz	r0, 800b9c6 <__gethex+0x152>
 800b9b4:	4b5c      	ldr	r3, [pc, #368]	@ (800bb28 <__gethex+0x2b4>)
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	21e4      	movs	r1, #228	@ 0xe4
 800b9ba:	485c      	ldr	r0, [pc, #368]	@ (800bb2c <__gethex+0x2b8>)
 800b9bc:	f7ff fec0 	bl	800b740 <__assert_func>
 800b9c0:	3101      	adds	r1, #1
 800b9c2:	105b      	asrs	r3, r3, #1
 800b9c4:	e7ef      	b.n	800b9a6 <__gethex+0x132>
 800b9c6:	f100 0a14 	add.w	sl, r0, #20
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4655      	mov	r5, sl
 800b9ce:	469b      	mov	fp, r3
 800b9d0:	45b1      	cmp	r9, r6
 800b9d2:	d337      	bcc.n	800ba44 <__gethex+0x1d0>
 800b9d4:	f845 bb04 	str.w	fp, [r5], #4
 800b9d8:	eba5 050a 	sub.w	r5, r5, sl
 800b9dc:	10ad      	asrs	r5, r5, #2
 800b9de:	6125      	str	r5, [r4, #16]
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f7fe fa23 	bl	8009e2c <__hi0bits>
 800b9e6:	016d      	lsls	r5, r5, #5
 800b9e8:	f8d8 6000 	ldr.w	r6, [r8]
 800b9ec:	1a2d      	subs	r5, r5, r0
 800b9ee:	42b5      	cmp	r5, r6
 800b9f0:	dd54      	ble.n	800ba9c <__gethex+0x228>
 800b9f2:	1bad      	subs	r5, r5, r6
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f7fe fdb7 	bl	800a56a <__any_on>
 800b9fc:	4681      	mov	r9, r0
 800b9fe:	b178      	cbz	r0, 800ba20 <__gethex+0x1ac>
 800ba00:	1e6b      	subs	r3, r5, #1
 800ba02:	1159      	asrs	r1, r3, #5
 800ba04:	f003 021f 	and.w	r2, r3, #31
 800ba08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba0c:	f04f 0901 	mov.w	r9, #1
 800ba10:	fa09 f202 	lsl.w	r2, r9, r2
 800ba14:	420a      	tst	r2, r1
 800ba16:	d003      	beq.n	800ba20 <__gethex+0x1ac>
 800ba18:	454b      	cmp	r3, r9
 800ba1a:	dc36      	bgt.n	800ba8a <__gethex+0x216>
 800ba1c:	f04f 0902 	mov.w	r9, #2
 800ba20:	4629      	mov	r1, r5
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff febe 	bl	800b7a4 <rshift>
 800ba28:	442f      	add	r7, r5
 800ba2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	da42      	bge.n	800bab8 <__gethex+0x244>
 800ba32:	9801      	ldr	r0, [sp, #4]
 800ba34:	4621      	mov	r1, r4
 800ba36:	f7fe f947 	bl	8009cc8 <_Bfree>
 800ba3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	25a3      	movs	r5, #163	@ 0xa3
 800ba42:	e793      	b.n	800b96c <__gethex+0xf8>
 800ba44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ba48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ba4a:	d012      	beq.n	800ba72 <__gethex+0x1fe>
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	d104      	bne.n	800ba5a <__gethex+0x1e6>
 800ba50:	f845 bb04 	str.w	fp, [r5], #4
 800ba54:	f04f 0b00 	mov.w	fp, #0
 800ba58:	465b      	mov	r3, fp
 800ba5a:	7830      	ldrb	r0, [r6, #0]
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	f7ff fef3 	bl	800b848 <__hexdig_fun>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	f000 000f 	and.w	r0, r0, #15
 800ba68:	4098      	lsls	r0, r3
 800ba6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ba6e:	3304      	adds	r3, #4
 800ba70:	e7ae      	b.n	800b9d0 <__gethex+0x15c>
 800ba72:	45b1      	cmp	r9, r6
 800ba74:	d8ea      	bhi.n	800ba4c <__gethex+0x1d8>
 800ba76:	492b      	ldr	r1, [pc, #172]	@ (800bb24 <__gethex+0x2b0>)
 800ba78:	9303      	str	r3, [sp, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7fd f904 	bl	8008c8a <strncmp>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d1e1      	bne.n	800ba4c <__gethex+0x1d8>
 800ba88:	e7a2      	b.n	800b9d0 <__gethex+0x15c>
 800ba8a:	1ea9      	subs	r1, r5, #2
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7fe fd6c 	bl	800a56a <__any_on>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0c2      	beq.n	800ba1c <__gethex+0x1a8>
 800ba96:	f04f 0903 	mov.w	r9, #3
 800ba9a:	e7c1      	b.n	800ba20 <__gethex+0x1ac>
 800ba9c:	da09      	bge.n	800bab2 <__gethex+0x23e>
 800ba9e:	1b75      	subs	r5, r6, r5
 800baa0:	4621      	mov	r1, r4
 800baa2:	9801      	ldr	r0, [sp, #4]
 800baa4:	462a      	mov	r2, r5
 800baa6:	f7fe fb27 	bl	800a0f8 <__lshift>
 800baaa:	1b7f      	subs	r7, r7, r5
 800baac:	4604      	mov	r4, r0
 800baae:	f100 0a14 	add.w	sl, r0, #20
 800bab2:	f04f 0900 	mov.w	r9, #0
 800bab6:	e7b8      	b.n	800ba2a <__gethex+0x1b6>
 800bab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800babc:	42bd      	cmp	r5, r7
 800babe:	dd6f      	ble.n	800bba0 <__gethex+0x32c>
 800bac0:	1bed      	subs	r5, r5, r7
 800bac2:	42ae      	cmp	r6, r5
 800bac4:	dc34      	bgt.n	800bb30 <__gethex+0x2bc>
 800bac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d022      	beq.n	800bb14 <__gethex+0x2a0>
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d024      	beq.n	800bb1c <__gethex+0x2a8>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d115      	bne.n	800bb02 <__gethex+0x28e>
 800bad6:	42ae      	cmp	r6, r5
 800bad8:	d113      	bne.n	800bb02 <__gethex+0x28e>
 800bada:	2e01      	cmp	r6, #1
 800badc:	d10b      	bne.n	800baf6 <__gethex+0x282>
 800bade:	9a02      	ldr	r2, [sp, #8]
 800bae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bae4:	6013      	str	r3, [r2, #0]
 800bae6:	2301      	movs	r3, #1
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	f8ca 3000 	str.w	r3, [sl]
 800baee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf0:	2562      	movs	r5, #98	@ 0x62
 800baf2:	601c      	str	r4, [r3, #0]
 800baf4:	e73a      	b.n	800b96c <__gethex+0xf8>
 800baf6:	1e71      	subs	r1, r6, #1
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7fe fd36 	bl	800a56a <__any_on>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d1ed      	bne.n	800bade <__gethex+0x26a>
 800bb02:	9801      	ldr	r0, [sp, #4]
 800bb04:	4621      	mov	r1, r4
 800bb06:	f7fe f8df 	bl	8009cc8 <_Bfree>
 800bb0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	2550      	movs	r5, #80	@ 0x50
 800bb12:	e72b      	b.n	800b96c <__gethex+0xf8>
 800bb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f3      	bne.n	800bb02 <__gethex+0x28e>
 800bb1a:	e7e0      	b.n	800bade <__gethex+0x26a>
 800bb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1dd      	bne.n	800bade <__gethex+0x26a>
 800bb22:	e7ee      	b.n	800bb02 <__gethex+0x28e>
 800bb24:	0800c7b8 	.word	0x0800c7b8
 800bb28:	0800c651 	.word	0x0800c651
 800bb2c:	0800c966 	.word	0x0800c966
 800bb30:	1e6f      	subs	r7, r5, #1
 800bb32:	f1b9 0f00 	cmp.w	r9, #0
 800bb36:	d130      	bne.n	800bb9a <__gethex+0x326>
 800bb38:	b127      	cbz	r7, 800bb44 <__gethex+0x2d0>
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7fe fd14 	bl	800a56a <__any_on>
 800bb42:	4681      	mov	r9, r0
 800bb44:	117a      	asrs	r2, r7, #5
 800bb46:	2301      	movs	r3, #1
 800bb48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb4c:	f007 071f 	and.w	r7, r7, #31
 800bb50:	40bb      	lsls	r3, r7
 800bb52:	4213      	tst	r3, r2
 800bb54:	4629      	mov	r1, r5
 800bb56:	4620      	mov	r0, r4
 800bb58:	bf18      	it	ne
 800bb5a:	f049 0902 	orrne.w	r9, r9, #2
 800bb5e:	f7ff fe21 	bl	800b7a4 <rshift>
 800bb62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bb66:	1b76      	subs	r6, r6, r5
 800bb68:	2502      	movs	r5, #2
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	d047      	beq.n	800bc00 <__gethex+0x38c>
 800bb70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d015      	beq.n	800bba4 <__gethex+0x330>
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d017      	beq.n	800bbac <__gethex+0x338>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d109      	bne.n	800bb94 <__gethex+0x320>
 800bb80:	f019 0f02 	tst.w	r9, #2
 800bb84:	d006      	beq.n	800bb94 <__gethex+0x320>
 800bb86:	f8da 3000 	ldr.w	r3, [sl]
 800bb8a:	ea49 0903 	orr.w	r9, r9, r3
 800bb8e:	f019 0f01 	tst.w	r9, #1
 800bb92:	d10e      	bne.n	800bbb2 <__gethex+0x33e>
 800bb94:	f045 0510 	orr.w	r5, r5, #16
 800bb98:	e032      	b.n	800bc00 <__gethex+0x38c>
 800bb9a:	f04f 0901 	mov.w	r9, #1
 800bb9e:	e7d1      	b.n	800bb44 <__gethex+0x2d0>
 800bba0:	2501      	movs	r5, #1
 800bba2:	e7e2      	b.n	800bb6a <__gethex+0x2f6>
 800bba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bba6:	f1c3 0301 	rsb	r3, r3, #1
 800bbaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0f0      	beq.n	800bb94 <__gethex+0x320>
 800bbb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bbb6:	f104 0314 	add.w	r3, r4, #20
 800bbba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bbbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bbc2:	f04f 0c00 	mov.w	ip, #0
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bbd0:	d01b      	beq.n	800bc0a <__gethex+0x396>
 800bbd2:	3201      	adds	r2, #1
 800bbd4:	6002      	str	r2, [r0, #0]
 800bbd6:	2d02      	cmp	r5, #2
 800bbd8:	f104 0314 	add.w	r3, r4, #20
 800bbdc:	d13c      	bne.n	800bc58 <__gethex+0x3e4>
 800bbde:	f8d8 2000 	ldr.w	r2, [r8]
 800bbe2:	3a01      	subs	r2, #1
 800bbe4:	42b2      	cmp	r2, r6
 800bbe6:	d109      	bne.n	800bbfc <__gethex+0x388>
 800bbe8:	1171      	asrs	r1, r6, #5
 800bbea:	2201      	movs	r2, #1
 800bbec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbf0:	f006 061f 	and.w	r6, r6, #31
 800bbf4:	fa02 f606 	lsl.w	r6, r2, r6
 800bbf8:	421e      	tst	r6, r3
 800bbfa:	d13a      	bne.n	800bc72 <__gethex+0x3fe>
 800bbfc:	f045 0520 	orr.w	r5, r5, #32
 800bc00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc02:	601c      	str	r4, [r3, #0]
 800bc04:	9b02      	ldr	r3, [sp, #8]
 800bc06:	601f      	str	r7, [r3, #0]
 800bc08:	e6b0      	b.n	800b96c <__gethex+0xf8>
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc10:	d8d9      	bhi.n	800bbc6 <__gethex+0x352>
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	459b      	cmp	fp, r3
 800bc16:	db17      	blt.n	800bc48 <__gethex+0x3d4>
 800bc18:	6861      	ldr	r1, [r4, #4]
 800bc1a:	9801      	ldr	r0, [sp, #4]
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	f7fe f813 	bl	8009c48 <_Balloc>
 800bc22:	4681      	mov	r9, r0
 800bc24:	b918      	cbnz	r0, 800bc2e <__gethex+0x3ba>
 800bc26:	4b1a      	ldr	r3, [pc, #104]	@ (800bc90 <__gethex+0x41c>)
 800bc28:	4602      	mov	r2, r0
 800bc2a:	2184      	movs	r1, #132	@ 0x84
 800bc2c:	e6c5      	b.n	800b9ba <__gethex+0x146>
 800bc2e:	6922      	ldr	r2, [r4, #16]
 800bc30:	3202      	adds	r2, #2
 800bc32:	f104 010c 	add.w	r1, r4, #12
 800bc36:	0092      	lsls	r2, r2, #2
 800bc38:	300c      	adds	r0, #12
 800bc3a:	f7ff fd69 	bl	800b710 <memcpy>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	f7fe f841 	bl	8009cc8 <_Bfree>
 800bc46:	464c      	mov	r4, r9
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc50:	6122      	str	r2, [r4, #16]
 800bc52:	2201      	movs	r2, #1
 800bc54:	615a      	str	r2, [r3, #20]
 800bc56:	e7be      	b.n	800bbd6 <__gethex+0x362>
 800bc58:	6922      	ldr	r2, [r4, #16]
 800bc5a:	455a      	cmp	r2, fp
 800bc5c:	dd0b      	ble.n	800bc76 <__gethex+0x402>
 800bc5e:	2101      	movs	r1, #1
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff fd9f 	bl	800b7a4 <rshift>
 800bc66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc6a:	3701      	adds	r7, #1
 800bc6c:	42bb      	cmp	r3, r7
 800bc6e:	f6ff aee0 	blt.w	800ba32 <__gethex+0x1be>
 800bc72:	2501      	movs	r5, #1
 800bc74:	e7c2      	b.n	800bbfc <__gethex+0x388>
 800bc76:	f016 061f 	ands.w	r6, r6, #31
 800bc7a:	d0fa      	beq.n	800bc72 <__gethex+0x3fe>
 800bc7c:	4453      	add	r3, sl
 800bc7e:	f1c6 0620 	rsb	r6, r6, #32
 800bc82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc86:	f7fe f8d1 	bl	8009e2c <__hi0bits>
 800bc8a:	42b0      	cmp	r0, r6
 800bc8c:	dbe7      	blt.n	800bc5e <__gethex+0x3ea>
 800bc8e:	e7f0      	b.n	800bc72 <__gethex+0x3fe>
 800bc90:	0800c651 	.word	0x0800c651

0800bc94 <L_shift>:
 800bc94:	f1c2 0208 	rsb	r2, r2, #8
 800bc98:	0092      	lsls	r2, r2, #2
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	f1c2 0620 	rsb	r6, r2, #32
 800bca0:	6843      	ldr	r3, [r0, #4]
 800bca2:	6804      	ldr	r4, [r0, #0]
 800bca4:	fa03 f506 	lsl.w	r5, r3, r6
 800bca8:	432c      	orrs	r4, r5
 800bcaa:	40d3      	lsrs	r3, r2
 800bcac:	6004      	str	r4, [r0, #0]
 800bcae:	f840 3f04 	str.w	r3, [r0, #4]!
 800bcb2:	4288      	cmp	r0, r1
 800bcb4:	d3f4      	bcc.n	800bca0 <L_shift+0xc>
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}

0800bcb8 <__match>:
 800bcb8:	b530      	push	{r4, r5, lr}
 800bcba:	6803      	ldr	r3, [r0, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcc2:	b914      	cbnz	r4, 800bcca <__match+0x12>
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	bd30      	pop	{r4, r5, pc}
 800bcca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bcd2:	2d19      	cmp	r5, #25
 800bcd4:	bf98      	it	ls
 800bcd6:	3220      	addls	r2, #32
 800bcd8:	42a2      	cmp	r2, r4
 800bcda:	d0f0      	beq.n	800bcbe <__match+0x6>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7f3      	b.n	800bcc8 <__match+0x10>

0800bce0 <__hexnan>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	680b      	ldr	r3, [r1, #0]
 800bce6:	6801      	ldr	r1, [r0, #0]
 800bce8:	115e      	asrs	r6, r3, #5
 800bcea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bcee:	f013 031f 	ands.w	r3, r3, #31
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	bf18      	it	ne
 800bcf6:	3604      	addne	r6, #4
 800bcf8:	2500      	movs	r5, #0
 800bcfa:	1f37      	subs	r7, r6, #4
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	4690      	mov	r8, r2
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd06:	46b9      	mov	r9, r7
 800bd08:	463c      	mov	r4, r7
 800bd0a:	9502      	str	r5, [sp, #8]
 800bd0c:	46ab      	mov	fp, r5
 800bd0e:	784a      	ldrb	r2, [r1, #1]
 800bd10:	1c4b      	adds	r3, r1, #1
 800bd12:	9303      	str	r3, [sp, #12]
 800bd14:	b342      	cbz	r2, 800bd68 <__hexnan+0x88>
 800bd16:	4610      	mov	r0, r2
 800bd18:	9105      	str	r1, [sp, #20]
 800bd1a:	9204      	str	r2, [sp, #16]
 800bd1c:	f7ff fd94 	bl	800b848 <__hexdig_fun>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d151      	bne.n	800bdc8 <__hexnan+0xe8>
 800bd24:	9a04      	ldr	r2, [sp, #16]
 800bd26:	9905      	ldr	r1, [sp, #20]
 800bd28:	2a20      	cmp	r2, #32
 800bd2a:	d818      	bhi.n	800bd5e <__hexnan+0x7e>
 800bd2c:	9b02      	ldr	r3, [sp, #8]
 800bd2e:	459b      	cmp	fp, r3
 800bd30:	dd13      	ble.n	800bd5a <__hexnan+0x7a>
 800bd32:	454c      	cmp	r4, r9
 800bd34:	d206      	bcs.n	800bd44 <__hexnan+0x64>
 800bd36:	2d07      	cmp	r5, #7
 800bd38:	dc04      	bgt.n	800bd44 <__hexnan+0x64>
 800bd3a:	462a      	mov	r2, r5
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7ff ffa8 	bl	800bc94 <L_shift>
 800bd44:	4544      	cmp	r4, r8
 800bd46:	d952      	bls.n	800bdee <__hexnan+0x10e>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd52:	f8cd b008 	str.w	fp, [sp, #8]
 800bd56:	464c      	mov	r4, r9
 800bd58:	461d      	mov	r5, r3
 800bd5a:	9903      	ldr	r1, [sp, #12]
 800bd5c:	e7d7      	b.n	800bd0e <__hexnan+0x2e>
 800bd5e:	2a29      	cmp	r2, #41	@ 0x29
 800bd60:	d157      	bne.n	800be12 <__hexnan+0x132>
 800bd62:	3102      	adds	r1, #2
 800bd64:	f8ca 1000 	str.w	r1, [sl]
 800bd68:	f1bb 0f00 	cmp.w	fp, #0
 800bd6c:	d051      	beq.n	800be12 <__hexnan+0x132>
 800bd6e:	454c      	cmp	r4, r9
 800bd70:	d206      	bcs.n	800bd80 <__hexnan+0xa0>
 800bd72:	2d07      	cmp	r5, #7
 800bd74:	dc04      	bgt.n	800bd80 <__hexnan+0xa0>
 800bd76:	462a      	mov	r2, r5
 800bd78:	4649      	mov	r1, r9
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff ff8a 	bl	800bc94 <L_shift>
 800bd80:	4544      	cmp	r4, r8
 800bd82:	d936      	bls.n	800bdf2 <__hexnan+0x112>
 800bd84:	f1a8 0204 	sub.w	r2, r8, #4
 800bd88:	4623      	mov	r3, r4
 800bd8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd92:	429f      	cmp	r7, r3
 800bd94:	d2f9      	bcs.n	800bd8a <__hexnan+0xaa>
 800bd96:	1b3b      	subs	r3, r7, r4
 800bd98:	f023 0303 	bic.w	r3, r3, #3
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	3401      	adds	r4, #1
 800bda0:	3e03      	subs	r6, #3
 800bda2:	42b4      	cmp	r4, r6
 800bda4:	bf88      	it	hi
 800bda6:	2304      	movhi	r3, #4
 800bda8:	4443      	add	r3, r8
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f843 2b04 	str.w	r2, [r3], #4
 800bdb0:	429f      	cmp	r7, r3
 800bdb2:	d2fb      	bcs.n	800bdac <__hexnan+0xcc>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	b91b      	cbnz	r3, 800bdc0 <__hexnan+0xe0>
 800bdb8:	4547      	cmp	r7, r8
 800bdba:	d128      	bne.n	800be0e <__hexnan+0x12e>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	2005      	movs	r0, #5
 800bdc2:	b007      	add	sp, #28
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	3501      	adds	r5, #1
 800bdca:	2d08      	cmp	r5, #8
 800bdcc:	f10b 0b01 	add.w	fp, fp, #1
 800bdd0:	dd06      	ble.n	800bde0 <__hexnan+0x100>
 800bdd2:	4544      	cmp	r4, r8
 800bdd4:	d9c1      	bls.n	800bd5a <__hexnan+0x7a>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bddc:	2501      	movs	r5, #1
 800bdde:	3c04      	subs	r4, #4
 800bde0:	6822      	ldr	r2, [r4, #0]
 800bde2:	f000 000f 	and.w	r0, r0, #15
 800bde6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	e7b5      	b.n	800bd5a <__hexnan+0x7a>
 800bdee:	2508      	movs	r5, #8
 800bdf0:	e7b3      	b.n	800bd5a <__hexnan+0x7a>
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0dd      	beq.n	800bdb4 <__hexnan+0xd4>
 800bdf8:	f1c3 0320 	rsb	r3, r3, #32
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800be00:	40da      	lsrs	r2, r3
 800be02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be06:	4013      	ands	r3, r2
 800be08:	f846 3c04 	str.w	r3, [r6, #-4]
 800be0c:	e7d2      	b.n	800bdb4 <__hexnan+0xd4>
 800be0e:	3f04      	subs	r7, #4
 800be10:	e7d0      	b.n	800bdb4 <__hexnan+0xd4>
 800be12:	2004      	movs	r0, #4
 800be14:	e7d5      	b.n	800bdc2 <__hexnan+0xe2>

0800be16 <__ascii_mbtowc>:
 800be16:	b082      	sub	sp, #8
 800be18:	b901      	cbnz	r1, 800be1c <__ascii_mbtowc+0x6>
 800be1a:	a901      	add	r1, sp, #4
 800be1c:	b142      	cbz	r2, 800be30 <__ascii_mbtowc+0x1a>
 800be1e:	b14b      	cbz	r3, 800be34 <__ascii_mbtowc+0x1e>
 800be20:	7813      	ldrb	r3, [r2, #0]
 800be22:	600b      	str	r3, [r1, #0]
 800be24:	7812      	ldrb	r2, [r2, #0]
 800be26:	1e10      	subs	r0, r2, #0
 800be28:	bf18      	it	ne
 800be2a:	2001      	movne	r0, #1
 800be2c:	b002      	add	sp, #8
 800be2e:	4770      	bx	lr
 800be30:	4610      	mov	r0, r2
 800be32:	e7fb      	b.n	800be2c <__ascii_mbtowc+0x16>
 800be34:	f06f 0001 	mvn.w	r0, #1
 800be38:	e7f8      	b.n	800be2c <__ascii_mbtowc+0x16>

0800be3a <_realloc_r>:
 800be3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3e:	4680      	mov	r8, r0
 800be40:	4615      	mov	r5, r2
 800be42:	460c      	mov	r4, r1
 800be44:	b921      	cbnz	r1, 800be50 <_realloc_r+0x16>
 800be46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be4a:	4611      	mov	r1, r2
 800be4c:	f7fd be70 	b.w	8009b30 <_malloc_r>
 800be50:	b92a      	cbnz	r2, 800be5e <_realloc_r+0x24>
 800be52:	f7fd fdf9 	bl	8009a48 <_free_r>
 800be56:	2400      	movs	r4, #0
 800be58:	4620      	mov	r0, r4
 800be5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5e:	f000 f840 	bl	800bee2 <_malloc_usable_size_r>
 800be62:	4285      	cmp	r5, r0
 800be64:	4606      	mov	r6, r0
 800be66:	d802      	bhi.n	800be6e <_realloc_r+0x34>
 800be68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be6c:	d8f4      	bhi.n	800be58 <_realloc_r+0x1e>
 800be6e:	4629      	mov	r1, r5
 800be70:	4640      	mov	r0, r8
 800be72:	f7fd fe5d 	bl	8009b30 <_malloc_r>
 800be76:	4607      	mov	r7, r0
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0ec      	beq.n	800be56 <_realloc_r+0x1c>
 800be7c:	42b5      	cmp	r5, r6
 800be7e:	462a      	mov	r2, r5
 800be80:	4621      	mov	r1, r4
 800be82:	bf28      	it	cs
 800be84:	4632      	movcs	r2, r6
 800be86:	f7ff fc43 	bl	800b710 <memcpy>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4640      	mov	r0, r8
 800be8e:	f7fd fddb 	bl	8009a48 <_free_r>
 800be92:	463c      	mov	r4, r7
 800be94:	e7e0      	b.n	800be58 <_realloc_r+0x1e>

0800be96 <__ascii_wctomb>:
 800be96:	4603      	mov	r3, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	b141      	cbz	r1, 800beae <__ascii_wctomb+0x18>
 800be9c:	2aff      	cmp	r2, #255	@ 0xff
 800be9e:	d904      	bls.n	800beaa <__ascii_wctomb+0x14>
 800bea0:	228a      	movs	r2, #138	@ 0x8a
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	f04f 30ff 	mov.w	r0, #4294967295
 800bea8:	4770      	bx	lr
 800beaa:	700a      	strb	r2, [r1, #0]
 800beac:	2001      	movs	r0, #1
 800beae:	4770      	bx	lr

0800beb0 <fiprintf>:
 800beb0:	b40e      	push	{r1, r2, r3}
 800beb2:	b503      	push	{r0, r1, lr}
 800beb4:	4601      	mov	r1, r0
 800beb6:	ab03      	add	r3, sp, #12
 800beb8:	4805      	ldr	r0, [pc, #20]	@ (800bed0 <fiprintf+0x20>)
 800beba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bebe:	6800      	ldr	r0, [r0, #0]
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	f000 f83f 	bl	800bf44 <_vfiprintf_r>
 800bec6:	b002      	add	sp, #8
 800bec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800becc:	b003      	add	sp, #12
 800bece:	4770      	bx	lr
 800bed0:	2000005c 	.word	0x2000005c

0800bed4 <abort>:
 800bed4:	b508      	push	{r3, lr}
 800bed6:	2006      	movs	r0, #6
 800bed8:	f000 fa08 	bl	800c2ec <raise>
 800bedc:	2001      	movs	r0, #1
 800bede:	f7f6 f84f 	bl	8001f80 <_exit>

0800bee2 <_malloc_usable_size_r>:
 800bee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bee6:	1f18      	subs	r0, r3, #4
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbc      	itt	lt
 800beec:	580b      	ldrlt	r3, [r1, r0]
 800beee:	18c0      	addlt	r0, r0, r3
 800bef0:	4770      	bx	lr

0800bef2 <__sfputc_r>:
 800bef2:	6893      	ldr	r3, [r2, #8]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	b410      	push	{r4}
 800befa:	6093      	str	r3, [r2, #8]
 800befc:	da08      	bge.n	800bf10 <__sfputc_r+0x1e>
 800befe:	6994      	ldr	r4, [r2, #24]
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	db01      	blt.n	800bf08 <__sfputc_r+0x16>
 800bf04:	290a      	cmp	r1, #10
 800bf06:	d103      	bne.n	800bf10 <__sfputc_r+0x1e>
 800bf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf0c:	f000 b932 	b.w	800c174 <__swbuf_r>
 800bf10:	6813      	ldr	r3, [r2, #0]
 800bf12:	1c58      	adds	r0, r3, #1
 800bf14:	6010      	str	r0, [r2, #0]
 800bf16:	7019      	strb	r1, [r3, #0]
 800bf18:	4608      	mov	r0, r1
 800bf1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <__sfputs_r>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	4606      	mov	r6, r0
 800bf24:	460f      	mov	r7, r1
 800bf26:	4614      	mov	r4, r2
 800bf28:	18d5      	adds	r5, r2, r3
 800bf2a:	42ac      	cmp	r4, r5
 800bf2c:	d101      	bne.n	800bf32 <__sfputs_r+0x12>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e007      	b.n	800bf42 <__sfputs_r+0x22>
 800bf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf36:	463a      	mov	r2, r7
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff ffda 	bl	800bef2 <__sfputc_r>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	d1f3      	bne.n	800bf2a <__sfputs_r+0xa>
 800bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf44 <_vfiprintf_r>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	460d      	mov	r5, r1
 800bf4a:	b09d      	sub	sp, #116	@ 0x74
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	4698      	mov	r8, r3
 800bf50:	4606      	mov	r6, r0
 800bf52:	b118      	cbz	r0, 800bf5c <_vfiprintf_r+0x18>
 800bf54:	6a03      	ldr	r3, [r0, #32]
 800bf56:	b90b      	cbnz	r3, 800bf5c <_vfiprintf_r+0x18>
 800bf58:	f7fc fdf6 	bl	8008b48 <__sinit>
 800bf5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf5e:	07d9      	lsls	r1, r3, #31
 800bf60:	d405      	bmi.n	800bf6e <_vfiprintf_r+0x2a>
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	059a      	lsls	r2, r3, #22
 800bf66:	d402      	bmi.n	800bf6e <_vfiprintf_r+0x2a>
 800bf68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf6a:	f7fc ff16 	bl	8008d9a <__retarget_lock_acquire_recursive>
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	071b      	lsls	r3, r3, #28
 800bf72:	d501      	bpl.n	800bf78 <_vfiprintf_r+0x34>
 800bf74:	692b      	ldr	r3, [r5, #16]
 800bf76:	b99b      	cbnz	r3, 800bfa0 <_vfiprintf_r+0x5c>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f000 f938 	bl	800c1f0 <__swsetup_r>
 800bf80:	b170      	cbz	r0, 800bfa0 <_vfiprintf_r+0x5c>
 800bf82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf84:	07dc      	lsls	r4, r3, #31
 800bf86:	d504      	bpl.n	800bf92 <_vfiprintf_r+0x4e>
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	b01d      	add	sp, #116	@ 0x74
 800bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	0598      	lsls	r0, r3, #22
 800bf96:	d4f7      	bmi.n	800bf88 <_vfiprintf_r+0x44>
 800bf98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf9a:	f7fc feff 	bl	8008d9c <__retarget_lock_release_recursive>
 800bf9e:	e7f3      	b.n	800bf88 <_vfiprintf_r+0x44>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfa4:	2320      	movs	r3, #32
 800bfa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfae:	2330      	movs	r3, #48	@ 0x30
 800bfb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c160 <_vfiprintf_r+0x21c>
 800bfb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfb8:	f04f 0901 	mov.w	r9, #1
 800bfbc:	4623      	mov	r3, r4
 800bfbe:	469a      	mov	sl, r3
 800bfc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc4:	b10a      	cbz	r2, 800bfca <_vfiprintf_r+0x86>
 800bfc6:	2a25      	cmp	r2, #37	@ 0x25
 800bfc8:	d1f9      	bne.n	800bfbe <_vfiprintf_r+0x7a>
 800bfca:	ebba 0b04 	subs.w	fp, sl, r4
 800bfce:	d00b      	beq.n	800bfe8 <_vfiprintf_r+0xa4>
 800bfd0:	465b      	mov	r3, fp
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ffa2 	bl	800bf20 <__sfputs_r>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	f000 80a7 	beq.w	800c130 <_vfiprintf_r+0x1ec>
 800bfe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfe4:	445a      	add	r2, fp
 800bfe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 809f 	beq.w	800c130 <_vfiprintf_r+0x1ec>
 800bff2:	2300      	movs	r3, #0
 800bff4:	f04f 32ff 	mov.w	r2, #4294967295
 800bff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bffc:	f10a 0a01 	add.w	sl, sl, #1
 800c000:	9304      	str	r3, [sp, #16]
 800c002:	9307      	str	r3, [sp, #28]
 800c004:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c008:	931a      	str	r3, [sp, #104]	@ 0x68
 800c00a:	4654      	mov	r4, sl
 800c00c:	2205      	movs	r2, #5
 800c00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c012:	4853      	ldr	r0, [pc, #332]	@ (800c160 <_vfiprintf_r+0x21c>)
 800c014:	f7f4 f8e4 	bl	80001e0 <memchr>
 800c018:	9a04      	ldr	r2, [sp, #16]
 800c01a:	b9d8      	cbnz	r0, 800c054 <_vfiprintf_r+0x110>
 800c01c:	06d1      	lsls	r1, r2, #27
 800c01e:	bf44      	itt	mi
 800c020:	2320      	movmi	r3, #32
 800c022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c026:	0713      	lsls	r3, r2, #28
 800c028:	bf44      	itt	mi
 800c02a:	232b      	movmi	r3, #43	@ 0x2b
 800c02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c030:	f89a 3000 	ldrb.w	r3, [sl]
 800c034:	2b2a      	cmp	r3, #42	@ 0x2a
 800c036:	d015      	beq.n	800c064 <_vfiprintf_r+0x120>
 800c038:	9a07      	ldr	r2, [sp, #28]
 800c03a:	4654      	mov	r4, sl
 800c03c:	2000      	movs	r0, #0
 800c03e:	f04f 0c0a 	mov.w	ip, #10
 800c042:	4621      	mov	r1, r4
 800c044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c048:	3b30      	subs	r3, #48	@ 0x30
 800c04a:	2b09      	cmp	r3, #9
 800c04c:	d94b      	bls.n	800c0e6 <_vfiprintf_r+0x1a2>
 800c04e:	b1b0      	cbz	r0, 800c07e <_vfiprintf_r+0x13a>
 800c050:	9207      	str	r2, [sp, #28]
 800c052:	e014      	b.n	800c07e <_vfiprintf_r+0x13a>
 800c054:	eba0 0308 	sub.w	r3, r0, r8
 800c058:	fa09 f303 	lsl.w	r3, r9, r3
 800c05c:	4313      	orrs	r3, r2
 800c05e:	9304      	str	r3, [sp, #16]
 800c060:	46a2      	mov	sl, r4
 800c062:	e7d2      	b.n	800c00a <_vfiprintf_r+0xc6>
 800c064:	9b03      	ldr	r3, [sp, #12]
 800c066:	1d19      	adds	r1, r3, #4
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	9103      	str	r1, [sp, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	bfbb      	ittet	lt
 800c070:	425b      	neglt	r3, r3
 800c072:	f042 0202 	orrlt.w	r2, r2, #2
 800c076:	9307      	strge	r3, [sp, #28]
 800c078:	9307      	strlt	r3, [sp, #28]
 800c07a:	bfb8      	it	lt
 800c07c:	9204      	strlt	r2, [sp, #16]
 800c07e:	7823      	ldrb	r3, [r4, #0]
 800c080:	2b2e      	cmp	r3, #46	@ 0x2e
 800c082:	d10a      	bne.n	800c09a <_vfiprintf_r+0x156>
 800c084:	7863      	ldrb	r3, [r4, #1]
 800c086:	2b2a      	cmp	r3, #42	@ 0x2a
 800c088:	d132      	bne.n	800c0f0 <_vfiprintf_r+0x1ac>
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	1d1a      	adds	r2, r3, #4
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	9203      	str	r2, [sp, #12]
 800c092:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c096:	3402      	adds	r4, #2
 800c098:	9305      	str	r3, [sp, #20]
 800c09a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c170 <_vfiprintf_r+0x22c>
 800c09e:	7821      	ldrb	r1, [r4, #0]
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	4650      	mov	r0, sl
 800c0a4:	f7f4 f89c 	bl	80001e0 <memchr>
 800c0a8:	b138      	cbz	r0, 800c0ba <_vfiprintf_r+0x176>
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	eba0 000a 	sub.w	r0, r0, sl
 800c0b0:	2240      	movs	r2, #64	@ 0x40
 800c0b2:	4082      	lsls	r2, r0
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	3401      	adds	r4, #1
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0be:	4829      	ldr	r0, [pc, #164]	@ (800c164 <_vfiprintf_r+0x220>)
 800c0c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0c4:	2206      	movs	r2, #6
 800c0c6:	f7f4 f88b 	bl	80001e0 <memchr>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d03f      	beq.n	800c14e <_vfiprintf_r+0x20a>
 800c0ce:	4b26      	ldr	r3, [pc, #152]	@ (800c168 <_vfiprintf_r+0x224>)
 800c0d0:	bb1b      	cbnz	r3, 800c11a <_vfiprintf_r+0x1d6>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	3307      	adds	r3, #7
 800c0d6:	f023 0307 	bic.w	r3, r3, #7
 800c0da:	3308      	adds	r3, #8
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e0:	443b      	add	r3, r7
 800c0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0e4:	e76a      	b.n	800bfbc <_vfiprintf_r+0x78>
 800c0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	e7a8      	b.n	800c042 <_vfiprintf_r+0xfe>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	9305      	str	r3, [sp, #20]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f04f 0c0a 	mov.w	ip, #10
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c102:	3a30      	subs	r2, #48	@ 0x30
 800c104:	2a09      	cmp	r2, #9
 800c106:	d903      	bls.n	800c110 <_vfiprintf_r+0x1cc>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0c6      	beq.n	800c09a <_vfiprintf_r+0x156>
 800c10c:	9105      	str	r1, [sp, #20]
 800c10e:	e7c4      	b.n	800c09a <_vfiprintf_r+0x156>
 800c110:	fb0c 2101 	mla	r1, ip, r1, r2
 800c114:	4604      	mov	r4, r0
 800c116:	2301      	movs	r3, #1
 800c118:	e7f0      	b.n	800c0fc <_vfiprintf_r+0x1b8>
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	462a      	mov	r2, r5
 800c120:	4b12      	ldr	r3, [pc, #72]	@ (800c16c <_vfiprintf_r+0x228>)
 800c122:	a904      	add	r1, sp, #16
 800c124:	4630      	mov	r0, r6
 800c126:	f7fb feb7 	bl	8007e98 <_printf_float>
 800c12a:	4607      	mov	r7, r0
 800c12c:	1c78      	adds	r0, r7, #1
 800c12e:	d1d6      	bne.n	800c0de <_vfiprintf_r+0x19a>
 800c130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c132:	07d9      	lsls	r1, r3, #31
 800c134:	d405      	bmi.n	800c142 <_vfiprintf_r+0x1fe>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d402      	bmi.n	800c142 <_vfiprintf_r+0x1fe>
 800c13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c13e:	f7fc fe2d 	bl	8008d9c <__retarget_lock_release_recursive>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	065b      	lsls	r3, r3, #25
 800c146:	f53f af1f 	bmi.w	800bf88 <_vfiprintf_r+0x44>
 800c14a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c14c:	e71e      	b.n	800bf8c <_vfiprintf_r+0x48>
 800c14e:	ab03      	add	r3, sp, #12
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	462a      	mov	r2, r5
 800c154:	4b05      	ldr	r3, [pc, #20]	@ (800c16c <_vfiprintf_r+0x228>)
 800c156:	a904      	add	r1, sp, #16
 800c158:	4630      	mov	r0, r6
 800c15a:	f7fc f935 	bl	80083c8 <_printf_i>
 800c15e:	e7e4      	b.n	800c12a <_vfiprintf_r+0x1e6>
 800c160:	0800c911 	.word	0x0800c911
 800c164:	0800c91b 	.word	0x0800c91b
 800c168:	08007e99 	.word	0x08007e99
 800c16c:	0800bf21 	.word	0x0800bf21
 800c170:	0800c917 	.word	0x0800c917

0800c174 <__swbuf_r>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	460e      	mov	r6, r1
 800c178:	4614      	mov	r4, r2
 800c17a:	4605      	mov	r5, r0
 800c17c:	b118      	cbz	r0, 800c186 <__swbuf_r+0x12>
 800c17e:	6a03      	ldr	r3, [r0, #32]
 800c180:	b90b      	cbnz	r3, 800c186 <__swbuf_r+0x12>
 800c182:	f7fc fce1 	bl	8008b48 <__sinit>
 800c186:	69a3      	ldr	r3, [r4, #24]
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	071a      	lsls	r2, r3, #28
 800c18e:	d501      	bpl.n	800c194 <__swbuf_r+0x20>
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	b943      	cbnz	r3, 800c1a6 <__swbuf_r+0x32>
 800c194:	4621      	mov	r1, r4
 800c196:	4628      	mov	r0, r5
 800c198:	f000 f82a 	bl	800c1f0 <__swsetup_r>
 800c19c:	b118      	cbz	r0, 800c1a6 <__swbuf_r+0x32>
 800c19e:	f04f 37ff 	mov.w	r7, #4294967295
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	1a98      	subs	r0, r3, r2
 800c1ac:	6963      	ldr	r3, [r4, #20]
 800c1ae:	b2f6      	uxtb	r6, r6
 800c1b0:	4283      	cmp	r3, r0
 800c1b2:	4637      	mov	r7, r6
 800c1b4:	dc05      	bgt.n	800c1c2 <__swbuf_r+0x4e>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f7ff fa57 	bl	800b66c <_fflush_r>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d1ed      	bne.n	800c19e <__swbuf_r+0x2a>
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	60a3      	str	r3, [r4, #8]
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	6022      	str	r2, [r4, #0]
 800c1ce:	701e      	strb	r6, [r3, #0]
 800c1d0:	6962      	ldr	r2, [r4, #20]
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d004      	beq.n	800c1e2 <__swbuf_r+0x6e>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	07db      	lsls	r3, r3, #31
 800c1dc:	d5e1      	bpl.n	800c1a2 <__swbuf_r+0x2e>
 800c1de:	2e0a      	cmp	r6, #10
 800c1e0:	d1df      	bne.n	800c1a2 <__swbuf_r+0x2e>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f7ff fa41 	bl	800b66c <_fflush_r>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d0d9      	beq.n	800c1a2 <__swbuf_r+0x2e>
 800c1ee:	e7d6      	b.n	800c19e <__swbuf_r+0x2a>

0800c1f0 <__swsetup_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4b29      	ldr	r3, [pc, #164]	@ (800c298 <__swsetup_r+0xa8>)
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	6818      	ldr	r0, [r3, #0]
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	b118      	cbz	r0, 800c204 <__swsetup_r+0x14>
 800c1fc:	6a03      	ldr	r3, [r0, #32]
 800c1fe:	b90b      	cbnz	r3, 800c204 <__swsetup_r+0x14>
 800c200:	f7fc fca2 	bl	8008b48 <__sinit>
 800c204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c208:	0719      	lsls	r1, r3, #28
 800c20a:	d422      	bmi.n	800c252 <__swsetup_r+0x62>
 800c20c:	06da      	lsls	r2, r3, #27
 800c20e:	d407      	bmi.n	800c220 <__swsetup_r+0x30>
 800c210:	2209      	movs	r2, #9
 800c212:	602a      	str	r2, [r5, #0]
 800c214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	e033      	b.n	800c288 <__swsetup_r+0x98>
 800c220:	0758      	lsls	r0, r3, #29
 800c222:	d512      	bpl.n	800c24a <__swsetup_r+0x5a>
 800c224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c226:	b141      	cbz	r1, 800c23a <__swsetup_r+0x4a>
 800c228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c22c:	4299      	cmp	r1, r3
 800c22e:	d002      	beq.n	800c236 <__swsetup_r+0x46>
 800c230:	4628      	mov	r0, r5
 800c232:	f7fd fc09 	bl	8009a48 <_free_r>
 800c236:	2300      	movs	r3, #0
 800c238:	6363      	str	r3, [r4, #52]	@ 0x34
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	2300      	movs	r3, #0
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	6923      	ldr	r3, [r4, #16]
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	f043 0308 	orr.w	r3, r3, #8
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	6923      	ldr	r3, [r4, #16]
 800c254:	b94b      	cbnz	r3, 800c26a <__swsetup_r+0x7a>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c260:	d003      	beq.n	800c26a <__swsetup_r+0x7a>
 800c262:	4621      	mov	r1, r4
 800c264:	4628      	mov	r0, r5
 800c266:	f000 f883 	bl	800c370 <__smakebuf_r>
 800c26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26e:	f013 0201 	ands.w	r2, r3, #1
 800c272:	d00a      	beq.n	800c28a <__swsetup_r+0x9a>
 800c274:	2200      	movs	r2, #0
 800c276:	60a2      	str	r2, [r4, #8]
 800c278:	6962      	ldr	r2, [r4, #20]
 800c27a:	4252      	negs	r2, r2
 800c27c:	61a2      	str	r2, [r4, #24]
 800c27e:	6922      	ldr	r2, [r4, #16]
 800c280:	b942      	cbnz	r2, 800c294 <__swsetup_r+0xa4>
 800c282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c286:	d1c5      	bne.n	800c214 <__swsetup_r+0x24>
 800c288:	bd38      	pop	{r3, r4, r5, pc}
 800c28a:	0799      	lsls	r1, r3, #30
 800c28c:	bf58      	it	pl
 800c28e:	6962      	ldrpl	r2, [r4, #20]
 800c290:	60a2      	str	r2, [r4, #8]
 800c292:	e7f4      	b.n	800c27e <__swsetup_r+0x8e>
 800c294:	2000      	movs	r0, #0
 800c296:	e7f7      	b.n	800c288 <__swsetup_r+0x98>
 800c298:	2000005c 	.word	0x2000005c

0800c29c <_raise_r>:
 800c29c:	291f      	cmp	r1, #31
 800c29e:	b538      	push	{r3, r4, r5, lr}
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	d904      	bls.n	800c2b0 <_raise_r+0x14>
 800c2a6:	2316      	movs	r3, #22
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2b2:	b112      	cbz	r2, 800c2ba <_raise_r+0x1e>
 800c2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2b8:	b94b      	cbnz	r3, 800c2ce <_raise_r+0x32>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f000 f830 	bl	800c320 <_getpid_r>
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ca:	f000 b817 	b.w	800c2fc <_kill_r>
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d00a      	beq.n	800c2e8 <_raise_r+0x4c>
 800c2d2:	1c59      	adds	r1, r3, #1
 800c2d4:	d103      	bne.n	800c2de <_raise_r+0x42>
 800c2d6:	2316      	movs	r3, #22
 800c2d8:	6003      	str	r3, [r0, #0]
 800c2da:	2001      	movs	r0, #1
 800c2dc:	e7e7      	b.n	800c2ae <_raise_r+0x12>
 800c2de:	2100      	movs	r1, #0
 800c2e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4798      	blx	r3
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e7e0      	b.n	800c2ae <_raise_r+0x12>

0800c2ec <raise>:
 800c2ec:	4b02      	ldr	r3, [pc, #8]	@ (800c2f8 <raise+0xc>)
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f7ff bfd3 	b.w	800c29c <_raise_r>
 800c2f6:	bf00      	nop
 800c2f8:	2000005c 	.word	0x2000005c

0800c2fc <_kill_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	@ (800c31c <_kill_r+0x20>)
 800c300:	2300      	movs	r3, #0
 800c302:	4604      	mov	r4, r0
 800c304:	4608      	mov	r0, r1
 800c306:	4611      	mov	r1, r2
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	f7f5 fe29 	bl	8001f60 <_kill>
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	d102      	bne.n	800c318 <_kill_r+0x1c>
 800c312:	682b      	ldr	r3, [r5, #0]
 800c314:	b103      	cbz	r3, 800c318 <_kill_r+0x1c>
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	bd38      	pop	{r3, r4, r5, pc}
 800c31a:	bf00      	nop
 800c31c:	20000834 	.word	0x20000834

0800c320 <_getpid_r>:
 800c320:	f7f5 be16 	b.w	8001f50 <_getpid>

0800c324 <__swhatbuf_r>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	460c      	mov	r4, r1
 800c328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32c:	2900      	cmp	r1, #0
 800c32e:	b096      	sub	sp, #88	@ 0x58
 800c330:	4615      	mov	r5, r2
 800c332:	461e      	mov	r6, r3
 800c334:	da0d      	bge.n	800c352 <__swhatbuf_r+0x2e>
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c33c:	f04f 0100 	mov.w	r1, #0
 800c340:	bf14      	ite	ne
 800c342:	2340      	movne	r3, #64	@ 0x40
 800c344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c348:	2000      	movs	r0, #0
 800c34a:	6031      	str	r1, [r6, #0]
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	b016      	add	sp, #88	@ 0x58
 800c350:	bd70      	pop	{r4, r5, r6, pc}
 800c352:	466a      	mov	r2, sp
 800c354:	f000 f848 	bl	800c3e8 <_fstat_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	dbec      	blt.n	800c336 <__swhatbuf_r+0x12>
 800c35c:	9901      	ldr	r1, [sp, #4]
 800c35e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c366:	4259      	negs	r1, r3
 800c368:	4159      	adcs	r1, r3
 800c36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c36e:	e7eb      	b.n	800c348 <__swhatbuf_r+0x24>

0800c370 <__smakebuf_r>:
 800c370:	898b      	ldrh	r3, [r1, #12]
 800c372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c374:	079d      	lsls	r5, r3, #30
 800c376:	4606      	mov	r6, r0
 800c378:	460c      	mov	r4, r1
 800c37a:	d507      	bpl.n	800c38c <__smakebuf_r+0x1c>
 800c37c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	6123      	str	r3, [r4, #16]
 800c384:	2301      	movs	r3, #1
 800c386:	6163      	str	r3, [r4, #20]
 800c388:	b003      	add	sp, #12
 800c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38c:	ab01      	add	r3, sp, #4
 800c38e:	466a      	mov	r2, sp
 800c390:	f7ff ffc8 	bl	800c324 <__swhatbuf_r>
 800c394:	9f00      	ldr	r7, [sp, #0]
 800c396:	4605      	mov	r5, r0
 800c398:	4639      	mov	r1, r7
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7fd fbc8 	bl	8009b30 <_malloc_r>
 800c3a0:	b948      	cbnz	r0, 800c3b6 <__smakebuf_r+0x46>
 800c3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a6:	059a      	lsls	r2, r3, #22
 800c3a8:	d4ee      	bmi.n	800c388 <__smakebuf_r+0x18>
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	f043 0302 	orr.w	r3, r3, #2
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	e7e2      	b.n	800c37c <__smakebuf_r+0xc>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	6020      	str	r0, [r4, #0]
 800c3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	9b01      	ldr	r3, [sp, #4]
 800c3c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3c6:	b15b      	cbz	r3, 800c3e0 <__smakebuf_r+0x70>
 800c3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f000 f81d 	bl	800c40c <_isatty_r>
 800c3d2:	b128      	cbz	r0, 800c3e0 <__smakebuf_r+0x70>
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	f023 0303 	bic.w	r3, r3, #3
 800c3da:	f043 0301 	orr.w	r3, r3, #1
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	431d      	orrs	r5, r3
 800c3e4:	81a5      	strh	r5, [r4, #12]
 800c3e6:	e7cf      	b.n	800c388 <__smakebuf_r+0x18>

0800c3e8 <_fstat_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	@ (800c408 <_fstat_r+0x20>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	602b      	str	r3, [r5, #0]
 800c3f6:	f7f5 fe13 	bl	8002020 <_fstat>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	d102      	bne.n	800c404 <_fstat_r+0x1c>
 800c3fe:	682b      	ldr	r3, [r5, #0]
 800c400:	b103      	cbz	r3, 800c404 <_fstat_r+0x1c>
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	bd38      	pop	{r3, r4, r5, pc}
 800c406:	bf00      	nop
 800c408:	20000834 	.word	0x20000834

0800c40c <_isatty_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d06      	ldr	r5, [pc, #24]	@ (800c428 <_isatty_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f5 fe12 	bl	8002040 <_isatty>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_isatty_r+0x1a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_isatty_r+0x1a>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20000834 	.word	0x20000834

0800c42c <_init>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	bf00      	nop
 800c430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c432:	bc08      	pop	{r3}
 800c434:	469e      	mov	lr, r3
 800c436:	4770      	bx	lr

0800c438 <_fini>:
 800c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43a:	bf00      	nop
 800c43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c43e:	bc08      	pop	{r3}
 800c440:	469e      	mov	lr, r3
 800c442:	4770      	bx	lr
